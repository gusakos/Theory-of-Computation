Nonterminals useless in grammar

    const_decl_list
    variable_decl_list
    general_identifier
    comp_identifier


Terminals unused in grammar

    COMP_VAR
    KW_ENDED
    KW_OF
    KW_FUNCTION
    OP_ARROW
    USIGN
    UNOT
    ident2


Rules useless in grammar

  192 const_decl_list: ε
  193                | const_decl_list constant_decl

  194 variable_decl_list: ε
  195                   | variable_decl_list variable_decl

  196 general_identifier: general_variable
  197                   | general_function_call

  198 comp_identifier: '#' general_variable
  199                | general_comp_function_call


Rules useless in parser due to conflicts

   55 local_var_const_decl: variable_decl
   56                     | constant_decl
   57                     | variable_decl constant_decl
   58                     | constant_decl variable_decl


State 4 conflicts: 1 shift/reduce
State 9 conflicts: 1 shift/reduce, 9 reduce/reduce
State 12 conflicts: 1 shift/reduce, 9 reduce/reduce
State 22 conflicts: 1 shift/reduce, 18 reduce/reduce
State 24 conflicts: 1 shift/reduce, 18 reduce/reduce
State 28 conflicts: 1 shift/reduce
State 40 conflicts: 1 reduce/reduce
State 51 conflicts: 2 reduce/reduce
State 182 conflicts: 7 shift/reduce
State 213 conflicts: 7 shift/reduce
State 215 conflicts: 1 shift/reduce
State 223 conflicts: 7 shift/reduce
State 258 conflicts: 7 shift/reduce
State 264 conflicts: 1 shift/reduce
State 291 conflicts: 8 shift/reduce
State 299 conflicts: 1 shift/reduce
State 319 conflicts: 2 shift/reduce
State 328 conflicts: 8 shift/reduce
State 335 conflicts: 7 shift/reduce
State 361 conflicts: 1 shift/reduce
State 362 conflicts: 1 shift/reduce
State 373 conflicts: 7 shift/reduce
State 387 conflicts: 8 shift/reduce
State 412 conflicts: 8 shift/reduce
State 441 conflicts: 1 shift/reduce


Grammar

    0 $accept: input $end

    1 input: comp_definition_list local_var_const_decl_list function_definition_list main_unit

    2 primary_expression: POSINT
    3                   | SCALAR
    4                   | IDENTIFIER
    5                   | STRING
    6                   | KW_TRUE
    7                   | KW_FALSE
    8                   | '(' logic_expression ')'

    9 math_expression: primary_expression
   10                | '+' math_expression
   11                | '-' math_expression
   12                | math_expression '+' math_expression
   13                | math_expression '-' math_expression
   14                | math_expression '*' math_expression
   15                | math_expression '/' math_expression
   16                | math_expression '%' math_expression
   17                | math_expression OP_PAW math_expression
   18                | IDENTIFIER '[' expression ']'
   19                | IDENTIFIER '[' expression ']' '.' IDENTIFIER
   20                | IDENTIFIER '[' expression ']' '.' IDENTIFIER '[' expression ']'
   21                | general_function_call
   22                | IDENTIFIER '.' IDENTIFIER '[' expression ']'
   23                | IDENTIFIER '.' IDENTIFIER

   24 relational_expression: math_expression
   25                      | relational_expression OP_EQUALS relational_expression
   26                      | relational_expression OP_NE relational_expression
   27                      | relational_expression '>' relational_expression
   28                      | relational_expression '<' relational_expression
   29                      | relational_expression OP_LE relational_expression
   30                      | relational_expression OP_GE relational_expression

   31 logic_expression: relational_expression
   32                 | OP_NOT logic_expression
   33                 | logic_expression OP_AND logic_expression
   34                 | logic_expression OP_OR logic_expression

   35 expression: logic_expression

   36 basic_data_type: KW_INTEGER
   37                | KW_BOOLEAN
   38                | KW_CHAR
   39                | KW_SCALAR
   40                | KW_STR
   41                | IDENTIFIER

   42 identifier_single: IDENTIFIER
   43                  | IDENTIFIER '[' POSINT ']'
   44                  | IDENTIFIER '[' ']'

   45 identifier_list: identifier_single ',' identifier_single
   46                | identifier_single ',' identifier_list
   47                | identifier_single

   48 constant_decl: KW_CONST IDENTIFIER '=' expression ':' basic_data_type ';'
   49              | KW_CONST IDENTIFIER '[' expression ']' '=' expression ':' basic_data_type ';'
   50              | KW_CONST IDENTIFIER '[' ']' '=' expression ':' basic_data_type ';'

   51 local_var_const_decl_list: constant_decl local_var_const_decl_list
   52                          | variable_decl local_var_const_decl_list
   53                          | local_var_const_decl
   54                          | ε

   55 local_var_const_decl: variable_decl
   56                     | constant_decl
   57                     | variable_decl constant_decl
   58                     | constant_decl variable_decl

   59 variable_decl: identifier_list ':' basic_data_type ';'
   60              | parameter_declaration ';'

   61 parameter_declaration: IDENTIFIER ':' basic_data_type
   62                      | IDENTIFIER '[' ']' ':' basic_data_type

   63 parameter_declaration_list: ε
   64                           | parameter_declaration
   65                           | parameter_declaration_list ',' parameter_declaration

   66 general_function_call: function_call
   67                      | IDENTIFIER '.' function_call
   68                      | IDENTIFIER '[' expression ']' '.' function_call

   69 function_call: IDENTIFIER '(' ')'
   70              | IDENTIFIER '(' expr_comma_list ')'

   71 expr_comma_list: expression
   72                | expr_comma_list ',' expression

   73 assignment_operator: '='
   74                    | OP_ASSIGN
   75                    | OP_ASSIGN_PLUSEQ
   76                    | OP_ASSIGN_MINUSEQ
   77                    | OP_ASSIGN_MULEQ
   78                    | OP_ASSIGN_DIVEQ
   79                    | OP_ASSIGN_MODEQ

   80 general_variable: IDENTIFIER
   81                 | IDENTIFIER '.' '#' IDENTIFIER
   82                 | IDENTIFIER '[' expression ']'
   83                 | IDENTIFIER '.' '#' IDENTIFIER '[' expression ']'

   84 function_command_list: function_command
   85                      | function_command_list function_command

   86 function_command: general_variable assignment_operator expression ';'
   87                 | KW_IF '(' expression ')' ':' function_command_list KW_ENDIF ';'
   88                 | KW_IF '(' expression ')' ':' function_command_list KW_ELSE ':' function_command_list KW_ENDIF ';'
   89                 | KW_FOR general_variable KW_IN '[' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';'
   90                 | KW_FOR general_variable KW_IN '[' expression ':' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';'
   91                 | general_variable OP_ASSIGN '[' expression KW_FOR general_variable ':' POSINT ']' ':' basic_data_type ';'
   92                 | KW_WHILE '(' expression ')' ':' function_command_list KW_ENDWHILE ';'
   93                 | KW_BREAK ';'
   94                 | KW_CONTINUE ';'
   95                 | KW_RETURN ';'
   96                 | KW_RETURN expression ';'
   97                 | general_function_call ';'

   98 function_definition_list: ε
   99                         | function_definition_list function_definition

  100 function_definition: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl_list function_command_list KW_ENDDEF ';'
  101                    | KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl function_command_list KW_ENDDEF ';'
  102                    | KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' function_command_list KW_ENDDEF ';'
  103                    | KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl_list function_command_list KW_RETURN expression ';' KW_ENDDEF ';'
  104                    | KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl function_command_list KW_RETURN expression ';' KW_ENDDEF ';'
  105                    | KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' function_command_list KW_RETURN expression ';' KW_ENDDEF ';'

  106 comp_variable: '#' IDENTIFIER
  107              | '#' IDENTIFIER '[' comp_expression ']'
  108              | comp_variable '.' '#' IDENTIFIER
  109              | comp_variable '.' '#' IDENTIFIER '[' POSINT ']'
  110              | general_variable

  111 comp_function_call: IDENTIFIER '(' ')'
  112                   | IDENTIFIER '(' comp_expr_comma_list ')'

  113 general_comp_function_call: comp_function_call
  114                           | '#' IDENTIFIER '.' comp_function_call
  115                           | '#' IDENTIFIER '[' comp_expression ']' '.' comp_function_call

  116 comp_expr_comma_list: comp_expression
  117                     | comp_expr_comma_list ',' comp_expression

  118 comp_primary_expression: POSINT
  119                        | SCALAR
  120                        | '#' IDENTIFIER
  121                        | IDENTIFIER
  122                        | STRING
  123                        | KW_TRUE
  124                        | KW_FALSE
  125                        | '(' logic_expression ')'

  126 comp_math_expression: comp_primary_expression
  127                     | '+' comp_math_expression
  128                     | '-' comp_math_expression
  129                     | comp_math_expression '+' comp_math_expression
  130                     | comp_math_expression '-' comp_math_expression
  131                     | comp_math_expression '*' comp_math_expression
  132                     | comp_math_expression '/' comp_math_expression
  133                     | comp_math_expression '%' comp_math_expression
  134                     | comp_math_expression OP_PAW comp_math_expression
  135                     | '#' IDENTIFIER '[' comp_expression ']'
  136                     | '#' IDENTIFIER '[' comp_expression ']' '.' '#' IDENTIFIER
  137                     | '#' IDENTIFIER '[' comp_expression ']' '.' '#' IDENTIFIER '[' comp_expression ']'
  138                     | general_comp_function_call
  139                     | '#' IDENTIFIER '.' '#' IDENTIFIER '[' comp_expression ']'
  140                     | '#' IDENTIFIER '.' '#' IDENTIFIER

  141 comp_relational_expression: comp_math_expression
  142                           | comp_relational_expression OP_EQUALS comp_relational_expression
  143                           | comp_relational_expression OP_NE comp_relational_expression
  144                           | comp_relational_expression '>' comp_relational_expression
  145                           | comp_relational_expression '<' comp_relational_expression
  146                           | comp_relational_expression OP_LE comp_relational_expression
  147                           | comp_relational_expression OP_GE comp_relational_expression

  148 comp_logic_expression: comp_relational_expression
  149                      | OP_NOT comp_logic_expression
  150                      | comp_logic_expression OP_AND comp_logic_expression
  151                      | comp_logic_expression OP_OR comp_logic_expression

  152 comp_expression: comp_logic_expression

  153 comp_command_list: comp_command
  154                  | comp_command_list comp_command

  155 comp_command: comp_variable assignment_operator comp_expression ';'
  156             | KW_IF '(' comp_expression ')' ':' comp_command_list KW_ENDIF ';'
  157             | KW_IF '(' comp_expression ')' ':' comp_command_list KW_ELSE ':' comp_command_list KW_ENDIF ';'
  158             | KW_FOR comp_variable KW_IN '[' comp_expression ':' comp_expression ']' ':' comp_command_list KW_ENDFOR ';'
  159             | KW_FOR comp_variable KW_IN '[' comp_expression ':' comp_expression ':' comp_expression ']' ':' comp_command_list KW_ENDFOR ';'
  160             | comp_variable OP_ASSIGN '[' comp_expression KW_FOR comp_variable ':' POSINT ']' ':' basic_data_type ';'
  161             | KW_WHILE '(' comp_expression ')' ':' comp_command_list KW_ENDWHILE ';'
  162             | KW_BREAK ';'
  163             | KW_CONTINUE ';'
  164             | KW_RETURN ';'
  165             | KW_RETURN comp_expression ';'
  166             | general_comp_function_call ';'

  167 comp_function_definition_list: ε
  168                              | comp_function_definition_list comp_function_definition

  169 comp_function_definition: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl_list comp_command_list KW_ENDDEF ';'
  170                         | KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl comp_command_list KW_ENDDEF ';'
  171                         | KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' comp_command_list KW_ENDDEF ';'
  172                         | KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl_list comp_command_list KW_RETURN comp_expression ';' KW_ENDDEF ';'
  173                         | KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' comp_command_list KW_RETURN comp_expression ';' KW_ENDDEF ';'
  174                         | KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl comp_command_list KW_RETURN comp_expression ';' KW_ENDDEF ';'

  175 comp_var_decl_list: comp_var_decl
  176                   | comp_var_decl_list comp_var_decl

  177 comp_var_decl: comp_identifier_list ':' basic_data_type ';'

  178 comp_identifier_list: '#' IDENTIFIER
  179                     | '#' IDENTIFIER '[' comp_expression ']'
  180                     | '#' IDENTIFIER '[' ']'
  181                     | comp_identifier_list ',' '#' IDENTIFIER
  182                     | comp_identifier_list ',' '#' IDENTIFIER '[' comp_expression ']'
  183                     | comp_identifier_list ',' '#' IDENTIFIER '[' ']'

  184 comp_definition: KW_COMP IDENTIFIER ':' comp_var_decl_list comp_function_definition_list KW_ENDCOMP ';'
  185                | KW_COMP IDENTIFIER ':' comp_var_decl comp_function_definition_list KW_ENDCOMP ';'
  186                | KW_COMP IDENTIFIER ':' comp_function_definition_list KW_ENDCOMP ';'

  187 comp_definition_list: ε
  188                     | comp_definition_list comp_definition

  189 main_unit: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl_list function_command_list KW_ENDDEF ';'
  190          | KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl function_command_list KW_ENDDEF ';'
  191          | KW_DEF KW_MAIN '(' ')' ':' function_command_list KW_ENDDEF ';'


Terminals, with rules where they appear

    $end (0) 0
    '#' (35) 81 83 106 107 108 109 114 115 120 135 136 137 139 140 178 179 180 181 182 183
    '%' (37) 16 133
    '(' (40) 8 69 70 87 88 92 100 101 102 103 104 105 111 112 125 156 157 161 169 170 171 172 173 174 189 190 191
    ')' (41) 8 69 70 87 88 92 100 101 102 103 104 105 111 112 125 156 157 161 169 170 171 172 173 174 189 190 191
    '*' (42) 14 131
    '+' (43) 10 12 127 129
    ',' (44) 45 46 65 72 117 181 182 183
    '-' (45) 11 13 103 104 105 128 130 172 173 174
    '.' (46) 19 20 22 23 67 68 81 83 108 109 114 115 136 137 139 140
    '/' (47) 15 132
    ':' (58) 48 49 50 59 61 62 87 88 89 90 91 92 100 101 102 103 104 105 156 157 158 159 160 161 169 170 171 172 173 174 177 184 185 186 189 190 191
    ';' (59) 48 49 50 59 60 86 87 88 89 90 91 92 93 94 95 96 97 100 101 102 103 104 105 155 156 157 158 159 160 161 162 163 164 165 166 169 170 171 172 173 174 177 184 185 186 189 190 191
    '<' (60) 28 145
    '=' (61) 48 49 50 73
    '>' (62) 27 103 104 105 144 172 173 174
    '[' (91) 18 19 20 22 43 44 49 50 62 68 82 83 89 90 91 107 109 115 135 136 137 139 158 159 160 179 180 182 183
    ']' (93) 18 19 20 22 43 44 49 50 62 68 82 83 89 90 91 107 109 115 135 136 137 139 158 159 160 179 180 182 183
    error (256)
    ident (258)
    IDENTIFIER <str> (259) 4 18 19 20 22 23 41 42 43 44 48 49 50 61 62 67 68 69 70 80 81 82 83 100 101 102 103 104 105 106 107 108 109 111 112 114 115 120 121 135 136 137 139 140 169 170 171 172 173 174 178 179 180 181 182 183 184 185 186
    POSINT <str> (260) 2 43 91 109 118 160
    SCALAR <str> (261) 3 119
    STRING <str> (262) 5 122
    COMP_VAR <str> (263)
    KW_IF (264) 87 88 156 157
    KW_ELSE (265) 88 157
    KW_ENDIF (266) 87 88 156 157
    KW_DEF (267) 100 101 102 103 104 105 169 170 171 172 173 174 189 190 191
    KW_ENDED (268)
    KW_COMP (269) 184 185 186
    KW_ENDCOMP (270) 184 185 186
    KW_CONTINUE (271) 94 163
    KW_FOR (272) 89 90 91 158 159 160
    KW_ENDFOR (273) 89 90 158 159
    KW_WHILE (274) 92 161
    KW_ENDWHILE (275) 92 161
    KW_OF (276)
    KW_BREAK (277) 93 162
    OP_AND (278) 33 150
    OP_OR (279) 34 151
    OP_NOT (280) 32 149
    KW_MAIN (281) 189 190 191
    KW_TRUE (282) 6 123
    KW_FALSE (283) 7 124
    KW_BOOLEAN (284) 37
    KW_CONST (285) 48 49 50
    KW_STR (286) 40
    KW_IN (287) 89 90 158 159
    KW_ENDDEF (288) 100 101 102 103 104 105 169 170 171 172 173 174 189 190 191
    KW_INTEGER (289) 36
    KW_SCALAR (290) 39
    KW_RETURN (291) 95 96 103 104 105 164 165 172 173 174
    KW_FUNCTION (292)
    KW_CHAR (293) 38
    OP_PAW (294) 17 134
    OP_EQUALS (295) 25 142
    OP_NE (296) 26 143
    OP_LE (297) 29 146
    OP_GE (298) 30 147
    OP_ARROW (299)
    OP_ASSIGN (300) 74 91 160
    OP_ASSIGN_PLUSEQ (301) 75
    OP_ASSIGN_MULEQ (302) 77
    OP_ASSIGN_DIVEQ (303) 78
    OP_ASSIGN_MODEQ (304) 79
    OP_ASSIGN_MINUSEQ (305) 76
    USIGN (306)
    UNOT (307)
    ident2 (308)


Nonterminals, with rules where they appear

    $accept (71)
        on left: 0
    input <str> (72)
        on left: 1
        on right: 0
    primary_expression <str> (73)
        on left: 2 3 4 5 6 7 8
        on right: 9
    math_expression <str> (74)
        on left: 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23
        on right: 10 11 12 13 14 15 16 17 24
    relational_expression <str> (75)
        on left: 24 25 26 27 28 29 30
        on right: 25 26 27 28 29 30 31
    logic_expression <str> (76)
        on left: 31 32 33 34
        on right: 8 32 33 34 35 125
    expression <str> (77)
        on left: 35
        on right: 18 19 20 22 48 49 50 68 71 72 82 83 86 87 88 89 90 91 92 96 103 104 105
    basic_data_type <str> (78)
        on left: 36 37 38 39 40 41
        on right: 48 49 50 59 61 62 91 103 104 105 160 172 173 174 177
    identifier_single <str> (79)
        on left: 42 43 44
        on right: 45 46 47
    identifier_list <str> (80)
        on left: 45 46 47
        on right: 46 59
    constant_decl <str> (81)
        on left: 48 49 50
        on right: 51 56 57 58
    local_var_const_decl_list <str> (82)
        on left: 51 52 53 54
        on right: 1 51 52 100 103 169 172 189
    local_var_const_decl <str> (83)
        on left: 55 56 57 58
        on right: 53 101 104 170 174 190
    variable_decl <str> (84)
        on left: 59 60
        on right: 52 55 57 58
    parameter_declaration <str> (85)
        on left: 61 62
        on right: 60 64 65
    parameter_declaration_list <str> (86)
        on left: 63 64 65
        on right: 65 100 101 102 103 104 105 169 170 171 172 173 174
    general_function_call <str> (87)
        on left: 66 67 68
        on right: 21 97
    function_call <str> (88)
        on left: 69 70
        on right: 66 67 68
    expr_comma_list <str> (89)
        on left: 71 72
        on right: 70 72
    assignment_operator <str> (90)
        on left: 73 74 75 76 77 78 79
        on right: 86 155
    general_variable <str> (91)
        on left: 80 81 82 83
        on right: 86 89 90 91 110
    function_command_list <str> (92)
        on left: 84 85
        on right: 85 87 88 89 90 92 100 101 102 103 104 105 189 190 191
    function_command <str> (93)
        on left: 86 87 88 89 90 91 92 93 94 95 96 97
        on right: 84 85
    function_definition_list <str> (94)
        on left: 98 99
        on right: 1 99
    function_definition <str> (95)
        on left: 100 101 102 103 104 105
        on right: 99
    comp_variable <str> (96)
        on left: 106 107 108 109 110
        on right: 108 109 155 158 159 160
    comp_function_call <str> (97)
        on left: 111 112
        on right: 113 114 115
    general_comp_function_call <str> (98)
        on left: 113 114 115
        on right: 138 166
    comp_expr_comma_list <str> (99)
        on left: 116 117
        on right: 112 117
    comp_primary_expression <str> (100)
        on left: 118 119 120 121 122 123 124 125
        on right: 126
    comp_math_expression <str> (101)
        on left: 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140
        on right: 127 128 129 130 131 132 133 134 141
    comp_relational_expression <str> (102)
        on left: 141 142 143 144 145 146 147
        on right: 142 143 144 145 146 147 148
    comp_logic_expression <str> (103)
        on left: 148 149 150 151
        on right: 149 150 151 152
    comp_expression <str> (104)
        on left: 152
        on right: 107 115 116 117 135 136 137 139 155 156 157 158 159 160 161 165 172 173 174 179 182
    comp_command_list <str> (105)
        on left: 153 154
        on right: 154 156 157 158 159 161 169 170 171 172 173 174
    comp_command <str> (106)
        on left: 155 156 157 158 159 160 161 162 163 164 165 166
        on right: 153 154
    comp_function_definition_list <str> (107)
        on left: 167 168
        on right: 168 184 185 186
    comp_function_definition <str> (108)
        on left: 169 170 171 172 173 174
        on right: 168
    comp_var_decl_list <str> (109)
        on left: 175 176
        on right: 176 184
    comp_var_decl <str> (110)
        on left: 177
        on right: 175 176 185
    comp_identifier_list <str> (111)
        on left: 178 179 180 181 182 183
        on right: 177 181 182 183
    comp_definition <str> (112)
        on left: 184 185 186
        on right: 188
    comp_definition_list <str> (113)
        on left: 187 188
        on right: 1 188
    main_unit <str> (114)
        on left: 189 190 191
        on right: 1


State 0

    0 $accept: • input $end
    1 input: • comp_definition_list local_var_const_decl_list function_definition_list main_unit
  187 comp_definition_list: ε •
  188                     | • comp_definition_list comp_definition

    $default  reduce using rule 187 (comp_definition_list)

    input                 go to state 1
    comp_definition_list  go to state 2


State 1

    0 $accept: input • $end

    $end  shift, and go to state 3


State 2

    1 input: comp_definition_list • local_var_const_decl_list function_definition_list main_unit
   42 identifier_single: • IDENTIFIER
   43                  | • IDENTIFIER '[' POSINT ']'
   44                  | • IDENTIFIER '[' ']'
   45 identifier_list: • identifier_single ',' identifier_single
   46                | • identifier_single ',' identifier_list
   47                | • identifier_single
   48 constant_decl: • KW_CONST IDENTIFIER '=' expression ':' basic_data_type ';'
   49              | • KW_CONST IDENTIFIER '[' expression ']' '=' expression ':' basic_data_type ';'
   50              | • KW_CONST IDENTIFIER '[' ']' '=' expression ':' basic_data_type ';'
   51 local_var_const_decl_list: • constant_decl local_var_const_decl_list
   52                          | • variable_decl local_var_const_decl_list
   53                          | • local_var_const_decl
   54                          | ε •  [KW_DEF]
   55 local_var_const_decl: • variable_decl
   56                     | • constant_decl
   57                     | • variable_decl constant_decl
   58                     | • constant_decl variable_decl
   59 variable_decl: • identifier_list ':' basic_data_type ';'
   60              | • parameter_declaration ';'
   61 parameter_declaration: • IDENTIFIER ':' basic_data_type
   62                      | • IDENTIFIER '[' ']' ':' basic_data_type
  184 comp_definition: • KW_COMP IDENTIFIER ':' comp_var_decl_list comp_function_definition_list KW_ENDCOMP ';'
  185                | • KW_COMP IDENTIFIER ':' comp_var_decl comp_function_definition_list KW_ENDCOMP ';'
  186                | • KW_COMP IDENTIFIER ':' comp_function_definition_list KW_ENDCOMP ';'
  188 comp_definition_list: comp_definition_list • comp_definition

    IDENTIFIER  shift, and go to state 4
    KW_COMP     shift, and go to state 5
    KW_CONST    shift, and go to state 6

    $default  reduce using rule 54 (local_var_const_decl_list)

    identifier_single          go to state 7
    identifier_list            go to state 8
    constant_decl              go to state 9
    local_var_const_decl_list  go to state 10
    local_var_const_decl       go to state 11
    variable_decl              go to state 12
    parameter_declaration      go to state 13
    comp_definition            go to state 14


State 3

    0 $accept: input $end •

    $default  accept


State 4

   42 identifier_single: IDENTIFIER •  [',', ':']
   43                  | IDENTIFIER • '[' POSINT ']'
   44                  | IDENTIFIER • '[' ']'
   61 parameter_declaration: IDENTIFIER • ':' basic_data_type
   62                      | IDENTIFIER • '[' ']' ':' basic_data_type

    '['  shift, and go to state 15
    ':'  shift, and go to state 16

    ':'       [reduce using rule 42 (identifier_single)]
    $default  reduce using rule 42 (identifier_single)

    shift/reduce conflict on token ':':
       42 identifier_single: IDENTIFIER •
       61 parameter_declaration: IDENTIFIER • ':' basic_data_type
      Example: IDENTIFIER • ':' basic_data_type ';'
      Shift derivation
        variable_decl
        ↳ 60: parameter_declaration                  ';'
              ↳ 61: IDENTIFIER • ':' basic_data_type
      Reduce derivation
        variable_decl
        ↳ 59: identifier_list          ':' basic_data_type ';'
              ↳ 47: identifier_single
                    ↳ 42: IDENTIFIER •



State 5

  184 comp_definition: KW_COMP • IDENTIFIER ':' comp_var_decl_list comp_function_definition_list KW_ENDCOMP ';'
  185                | KW_COMP • IDENTIFIER ':' comp_var_decl comp_function_definition_list KW_ENDCOMP ';'
  186                | KW_COMP • IDENTIFIER ':' comp_function_definition_list KW_ENDCOMP ';'

    IDENTIFIER  shift, and go to state 17


State 6

   48 constant_decl: KW_CONST • IDENTIFIER '=' expression ':' basic_data_type ';'
   49              | KW_CONST • IDENTIFIER '[' expression ']' '=' expression ':' basic_data_type ';'
   50              | KW_CONST • IDENTIFIER '[' ']' '=' expression ':' basic_data_type ';'

    IDENTIFIER  shift, and go to state 18


State 7

   45 identifier_list: identifier_single • ',' identifier_single
   46                | identifier_single • ',' identifier_list
   47                | identifier_single •  [':']

    ','  shift, and go to state 19

    $default  reduce using rule 47 (identifier_list)


State 8

   59 variable_decl: identifier_list • ':' basic_data_type ';'

    ':'  shift, and go to state 20


State 9

   42 identifier_single: • IDENTIFIER
   43                  | • IDENTIFIER '[' POSINT ']'
   44                  | • IDENTIFIER '[' ']'
   45 identifier_list: • identifier_single ',' identifier_single
   46                | • identifier_single ',' identifier_list
   47                | • identifier_single
   48 constant_decl: • KW_CONST IDENTIFIER '=' expression ':' basic_data_type ';'
   49              | • KW_CONST IDENTIFIER '[' expression ']' '=' expression ':' basic_data_type ';'
   50              | • KW_CONST IDENTIFIER '[' ']' '=' expression ':' basic_data_type ';'
   51 local_var_const_decl_list: • constant_decl local_var_const_decl_list
   51                          | constant_decl • local_var_const_decl_list
   52                          | • variable_decl local_var_const_decl_list
   53                          | • local_var_const_decl
   54                          | ε •  [IDENTIFIER, KW_IF, KW_DEF, KW_CONTINUE, KW_FOR, KW_WHILE, KW_BREAK, KW_RETURN, '#']
   55 local_var_const_decl: • variable_decl
   56                     | • constant_decl
   56                     | constant_decl •  [IDENTIFIER, KW_IF, KW_DEF, KW_CONTINUE, KW_FOR, KW_WHILE, KW_BREAK, KW_RETURN, '#']
   57                     | • variable_decl constant_decl
   58                     | • constant_decl variable_decl
   58                     | constant_decl • variable_decl
   59 variable_decl: • identifier_list ':' basic_data_type ';'
   60              | • parameter_declaration ';'
   61 parameter_declaration: • IDENTIFIER ':' basic_data_type
   62                      | • IDENTIFIER '[' ']' ':' basic_data_type

    IDENTIFIER  shift, and go to state 4
    KW_CONST    shift, and go to state 6

    IDENTIFIER   [reduce using rule 54 (local_var_const_decl_list)]
    IDENTIFIER   [reduce using rule 56 (local_var_const_decl)]
    KW_IF        reduce using rule 54 (local_var_const_decl_list)
    KW_IF        [reduce using rule 56 (local_var_const_decl)]
    KW_DEF       reduce using rule 54 (local_var_const_decl_list)
    KW_DEF       [reduce using rule 56 (local_var_const_decl)]
    KW_CONTINUE  reduce using rule 54 (local_var_const_decl_list)
    KW_CONTINUE  [reduce using rule 56 (local_var_const_decl)]
    KW_FOR       reduce using rule 54 (local_var_const_decl_list)
    KW_FOR       [reduce using rule 56 (local_var_const_decl)]
    KW_WHILE     reduce using rule 54 (local_var_const_decl_list)
    KW_WHILE     [reduce using rule 56 (local_var_const_decl)]
    KW_BREAK     reduce using rule 54 (local_var_const_decl_list)
    KW_BREAK     [reduce using rule 56 (local_var_const_decl)]
    KW_RETURN    reduce using rule 54 (local_var_const_decl_list)
    KW_RETURN    [reduce using rule 56 (local_var_const_decl)]
    '#'          reduce using rule 54 (local_var_const_decl_list)
    '#'          [reduce using rule 56 (local_var_const_decl)]
    $default     reduce using rule 54 (local_var_const_decl_list)

    identifier_single          go to state 7
    identifier_list            go to state 8
    constant_decl              go to state 9
    local_var_const_decl_list  go to state 21
    local_var_const_decl       go to state 11
    variable_decl              go to state 22
    parameter_declaration      go to state 13

    shift/reduce conflict on token IDENTIFIER:
       54 local_var_const_decl_list: ε •
       42 identifier_single: • IDENTIFIER
      First example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' constant_decl • IDENTIFIER ',' identifier_single ':' basic_data_type ';' function_command_list KW_ENDDEF ';'
      Shift derivation
        input
        ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                     ↳ 190: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl                                                                             function_command_list KW_ENDDEF ';'
                                                                                                                       ↳ 58: constant_decl variable_decl
                                                                                                                                           ↳ 59: identifier_list                                ':' basic_data_type ';'
                                                                                                                                                 ↳ 45: identifier_single  ',' identifier_single
                                                                                                                                                       ↳ 42: • IDENTIFIER
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' constant_decl • IDENTIFIER assignment_operator expression ';' KW_ENDDEF ';' $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                      $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 189: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl_list                     function_command_list                                           KW_ENDDEF ';'
                                                                                                                            ↳ 51: constant_decl local_var_const_decl_list ↳ 84: function_command
                                                                                                                                                ↳ 54: ε •                       ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                                                      ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       54 local_var_const_decl_list: ε •
       43 identifier_single: • IDENTIFIER '[' POSINT ']'
      First example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' constant_decl • IDENTIFIER '[' POSINT ']' ',' identifier_single ':' basic_data_type ';' function_command_list KW_ENDDEF ';'
      Shift derivation
        input
        ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                     ↳ 190: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl                                                                                            function_command_list KW_ENDDEF ';'
                                                                                                                       ↳ 58: constant_decl variable_decl
                                                                                                                                           ↳ 59: identifier_list                                               ':' basic_data_type ';'
                                                                                                                                                 ↳ 45: identifier_single                 ',' identifier_single
                                                                                                                                                       ↳ 43: • IDENTIFIER '[' POSINT ']'
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' constant_decl • IDENTIFIER assignment_operator expression ';' KW_ENDDEF ';' $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                      $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 189: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl_list                     function_command_list                                           KW_ENDDEF ';'
                                                                                                                            ↳ 51: constant_decl local_var_const_decl_list ↳ 84: function_command
                                                                                                                                                ↳ 54: ε •                       ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                                                      ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       54 local_var_const_decl_list: ε •
       44 identifier_single: • IDENTIFIER '[' ']'
      First example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' constant_decl • IDENTIFIER '[' ']' ',' identifier_single ':' basic_data_type ';' function_command_list KW_ENDDEF ';'
      Shift derivation
        input
        ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                     ↳ 190: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl                                                                                     function_command_list KW_ENDDEF ';'
                                                                                                                       ↳ 58: constant_decl variable_decl
                                                                                                                                           ↳ 59: identifier_list                                        ':' basic_data_type ';'
                                                                                                                                                 ↳ 45: identifier_single          ',' identifier_single
                                                                                                                                                       ↳ 44: • IDENTIFIER '[' ']'
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' constant_decl • IDENTIFIER assignment_operator expression ';' KW_ENDDEF ';' $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                      $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 189: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl_list                     function_command_list                                           KW_ENDDEF ';'
                                                                                                                            ↳ 51: constant_decl local_var_const_decl_list ↳ 84: function_command
                                                                                                                                                ↳ 54: ε •                       ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                                                      ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       54 local_var_const_decl_list: ε •
       61 parameter_declaration: • IDENTIFIER ':' basic_data_type
      First example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' constant_decl • IDENTIFIER ':' basic_data_type ';' function_command_list KW_ENDDEF ';'
      Shift derivation
        input
        ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                     ↳ 190: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl                                                 function_command_list KW_ENDDEF ';'
                                                                                                                       ↳ 58: constant_decl variable_decl
                                                                                                                                           ↳ 60: parameter_declaration                  ';'
                                                                                                                                                 ↳ 61: • IDENTIFIER ':' basic_data_type
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' constant_decl • IDENTIFIER assignment_operator expression ';' KW_ENDDEF ';' $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                      $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 189: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl_list                     function_command_list                                           KW_ENDDEF ';'
                                                                                                                            ↳ 51: constant_decl local_var_const_decl_list ↳ 84: function_command
                                                                                                                                                ↳ 54: ε •                       ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                                                      ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       54 local_var_const_decl_list: ε •
       62 parameter_declaration: • IDENTIFIER '[' ']' ':' basic_data_type
      First example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' constant_decl • IDENTIFIER '[' ']' ':' basic_data_type ';' function_command_list KW_ENDDEF ';'
      Shift derivation
        input
        ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                     ↳ 190: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl                                                         function_command_list KW_ENDDEF ';'
                                                                                                                       ↳ 58: constant_decl variable_decl
                                                                                                                                           ↳ 60: parameter_declaration                          ';'
                                                                                                                                                 ↳ 62: • IDENTIFIER '[' ']' ':' basic_data_type
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' constant_decl • IDENTIFIER assignment_operator expression ';' KW_ENDDEF ';' $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                      $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 189: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl_list                     function_command_list                                           KW_ENDDEF ';'
                                                                                                                            ↳ 51: constant_decl local_var_const_decl_list ↳ 84: function_command
                                                                                                                                                ↳ 54: ε •                       ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                                                      ↳ 80: IDENTIFIER

    reduce/reduce conflict on tokens IDENTIFIER, KW_IF, KW_DEF, KW_CONTINUE, KW_FOR, KW_WHILE, KW_BREAK, KW_RETURN, '#':
       54 local_var_const_decl_list: ε •
       56 local_var_const_decl: constant_decl •
      Example: constant_decl •
      First reduce derivation
        local_var_const_decl_list
        ↳ 51: constant_decl local_var_const_decl_list
                            ↳ 54: ε •
      Second reduce derivation
        local_var_const_decl_list
        ↳ 53: local_var_const_decl
              ↳ 56: constant_decl •

    shift/reduce conflict on token IDENTIFIER:
       56 local_var_const_decl: constant_decl •
       42 identifier_single: • IDENTIFIER
      First example: comp_definition_list local_var_const_decl_list KW_DEF KW_MAIN '(' ')' ':' constant_decl • IDENTIFIER ',' identifier_single ':' basic_data_type ';' function_command_list KW_ENDDEF ';' main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                $end
             ↳ 1: comp_definition_list local_var_const_decl_list main_unit                                                                                                                                                              main_unit
                                                                 ↳ 190: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl                                                                             function_command_list KW_ENDDEF ';'
                                                                                                   ↳ 58: constant_decl variable_decl
                                                                                                                       ↳ 59: identifier_list                                ':' basic_data_type ';'
                                                                                                                             ↳ 45: identifier_single  ',' identifier_single
                                                                                                                                   ↳ 42: • IDENTIFIER
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' constant_decl • IDENTIFIER assignment_operator expression ';' KW_ENDDEF ';' $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                              $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 190: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl  function_command_list                                           KW_ENDDEF ';'
                                                                                                                            ↳ 56: constant_decl • ↳ 84: function_command
                                                                                                                                                        ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                              ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       56 local_var_const_decl: constant_decl •
       43 identifier_single: • IDENTIFIER '[' POSINT ']'
      First example: comp_definition_list local_var_const_decl_list KW_DEF KW_MAIN '(' ')' ':' constant_decl • IDENTIFIER '[' POSINT ']' ',' identifier_single ':' basic_data_type ';' function_command_list KW_ENDDEF ';' main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                               $end
             ↳ 1: comp_definition_list local_var_const_decl_list main_unit                                                                                                                                                                             main_unit
                                                                 ↳ 190: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl                                                                                            function_command_list KW_ENDDEF ';'
                                                                                                   ↳ 58: constant_decl variable_decl
                                                                                                                       ↳ 59: identifier_list                                               ':' basic_data_type ';'
                                                                                                                             ↳ 45: identifier_single                 ',' identifier_single
                                                                                                                                   ↳ 43: • IDENTIFIER '[' POSINT ']'
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' constant_decl • IDENTIFIER assignment_operator expression ';' KW_ENDDEF ';' $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                              $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 190: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl  function_command_list                                           KW_ENDDEF ';'
                                                                                                                            ↳ 56: constant_decl • ↳ 84: function_command
                                                                                                                                                        ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                              ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       56 local_var_const_decl: constant_decl •
       44 identifier_single: • IDENTIFIER '[' ']'
      First example: comp_definition_list local_var_const_decl_list KW_DEF KW_MAIN '(' ')' ':' constant_decl • IDENTIFIER '[' ']' ',' identifier_single ':' basic_data_type ';' function_command_list KW_ENDDEF ';' main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                        $end
             ↳ 1: comp_definition_list local_var_const_decl_list main_unit                                                                                                                                                                      main_unit
                                                                 ↳ 190: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl                                                                                     function_command_list KW_ENDDEF ';'
                                                                                                   ↳ 58: constant_decl variable_decl
                                                                                                                       ↳ 59: identifier_list                                        ':' basic_data_type ';'
                                                                                                                             ↳ 45: identifier_single          ',' identifier_single
                                                                                                                                   ↳ 44: • IDENTIFIER '[' ']'
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' constant_decl • IDENTIFIER assignment_operator expression ';' KW_ENDDEF ';' $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                              $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 190: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl  function_command_list                                           KW_ENDDEF ';'
                                                                                                                            ↳ 56: constant_decl • ↳ 84: function_command
                                                                                                                                                        ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                              ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       56 local_var_const_decl: constant_decl •
       61 parameter_declaration: • IDENTIFIER ':' basic_data_type
      First example: comp_definition_list local_var_const_decl_list KW_DEF KW_MAIN '(' ')' ':' constant_decl • IDENTIFIER ':' basic_data_type ';' function_command_list KW_ENDDEF ';' main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                    $end
             ↳ 1: comp_definition_list local_var_const_decl_list main_unit                                                                                                                                  main_unit
                                                                 ↳ 190: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl                                                 function_command_list KW_ENDDEF ';'
                                                                                                   ↳ 58: constant_decl variable_decl
                                                                                                                       ↳ 60: parameter_declaration                  ';'
                                                                                                                             ↳ 61: • IDENTIFIER ':' basic_data_type
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' constant_decl • IDENTIFIER assignment_operator expression ';' KW_ENDDEF ';' $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                              $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 190: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl  function_command_list                                           KW_ENDDEF ';'
                                                                                                                            ↳ 56: constant_decl • ↳ 84: function_command
                                                                                                                                                        ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                              ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       56 local_var_const_decl: constant_decl •
       62 parameter_declaration: • IDENTIFIER '[' ']' ':' basic_data_type
      First example: comp_definition_list local_var_const_decl_list KW_DEF KW_MAIN '(' ')' ':' constant_decl • IDENTIFIER '[' ']' ':' basic_data_type ';' function_command_list KW_ENDDEF ';' main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                            $end
             ↳ 1: comp_definition_list local_var_const_decl_list main_unit                                                                                                                                          main_unit
                                                                 ↳ 190: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl                                                         function_command_list KW_ENDDEF ';'
                                                                                                   ↳ 58: constant_decl variable_decl
                                                                                                                       ↳ 60: parameter_declaration                          ';'
                                                                                                                             ↳ 62: • IDENTIFIER '[' ']' ':' basic_data_type
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' constant_decl • IDENTIFIER assignment_operator expression ';' KW_ENDDEF ';' $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                              $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 190: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl  function_command_list                                           KW_ENDDEF ';'
                                                                                                                            ↳ 56: constant_decl • ↳ 84: function_command
                                                                                                                                                        ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                              ↳ 80: IDENTIFIER



State 10

    1 input: comp_definition_list local_var_const_decl_list • function_definition_list main_unit
   98 function_definition_list: ε •
   99                         | • function_definition_list function_definition

    $default  reduce using rule 98 (function_definition_list)

    function_definition_list  go to state 23


State 11

   53 local_var_const_decl_list: local_var_const_decl •

    $default  reduce using rule 53 (local_var_const_decl_list)


State 12

   42 identifier_single: • IDENTIFIER
   43                  | • IDENTIFIER '[' POSINT ']'
   44                  | • IDENTIFIER '[' ']'
   45 identifier_list: • identifier_single ',' identifier_single
   46                | • identifier_single ',' identifier_list
   47                | • identifier_single
   48 constant_decl: • KW_CONST IDENTIFIER '=' expression ':' basic_data_type ';'
   49              | • KW_CONST IDENTIFIER '[' expression ']' '=' expression ':' basic_data_type ';'
   50              | • KW_CONST IDENTIFIER '[' ']' '=' expression ':' basic_data_type ';'
   51 local_var_const_decl_list: • constant_decl local_var_const_decl_list
   52                          | • variable_decl local_var_const_decl_list
   52                          | variable_decl • local_var_const_decl_list
   53                          | • local_var_const_decl
   54                          | ε •  [IDENTIFIER, KW_IF, KW_DEF, KW_CONTINUE, KW_FOR, KW_WHILE, KW_BREAK, KW_RETURN, '#']
   55 local_var_const_decl: • variable_decl
   55                     | variable_decl •  [IDENTIFIER, KW_IF, KW_DEF, KW_CONTINUE, KW_FOR, KW_WHILE, KW_BREAK, KW_RETURN, '#']
   56                     | • constant_decl
   57                     | • variable_decl constant_decl
   57                     | variable_decl • constant_decl
   58                     | • constant_decl variable_decl
   59 variable_decl: • identifier_list ':' basic_data_type ';'
   60              | • parameter_declaration ';'
   61 parameter_declaration: • IDENTIFIER ':' basic_data_type
   62                      | • IDENTIFIER '[' ']' ':' basic_data_type

    IDENTIFIER  shift, and go to state 4
    KW_CONST    shift, and go to state 6

    IDENTIFIER   [reduce using rule 54 (local_var_const_decl_list)]
    IDENTIFIER   [reduce using rule 55 (local_var_const_decl)]
    KW_IF        reduce using rule 54 (local_var_const_decl_list)
    KW_IF        [reduce using rule 55 (local_var_const_decl)]
    KW_DEF       reduce using rule 54 (local_var_const_decl_list)
    KW_DEF       [reduce using rule 55 (local_var_const_decl)]
    KW_CONTINUE  reduce using rule 54 (local_var_const_decl_list)
    KW_CONTINUE  [reduce using rule 55 (local_var_const_decl)]
    KW_FOR       reduce using rule 54 (local_var_const_decl_list)
    KW_FOR       [reduce using rule 55 (local_var_const_decl)]
    KW_WHILE     reduce using rule 54 (local_var_const_decl_list)
    KW_WHILE     [reduce using rule 55 (local_var_const_decl)]
    KW_BREAK     reduce using rule 54 (local_var_const_decl_list)
    KW_BREAK     [reduce using rule 55 (local_var_const_decl)]
    KW_RETURN    reduce using rule 54 (local_var_const_decl_list)
    KW_RETURN    [reduce using rule 55 (local_var_const_decl)]
    '#'          reduce using rule 54 (local_var_const_decl_list)
    '#'          [reduce using rule 55 (local_var_const_decl)]
    $default     reduce using rule 54 (local_var_const_decl_list)

    identifier_single          go to state 7
    identifier_list            go to state 8
    constant_decl              go to state 24
    local_var_const_decl_list  go to state 25
    local_var_const_decl       go to state 11
    variable_decl              go to state 12
    parameter_declaration      go to state 13

    shift/reduce conflict on token IDENTIFIER:
       54 local_var_const_decl_list: ε •
       42 identifier_single: • IDENTIFIER
      First example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' variable_decl • IDENTIFIER ',' identifier_single ':' basic_data_type ';' local_var_const_decl_list local_var_const_decl_list function_command_list KW_ENDDEF ';' $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                     $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 189: KW_DEF KW_MAIN '(' ')' local_var_const_decl_list                                                                                                        local_var_const_decl_list function_command_list KW_ENDDEF ';'
                                                                                                                        ↳ 52: variable_decl local_var_const_decl_list
                                                                                                                                            ↳ 52: variable_decl                                                                local_var_const_decl_list
                                                                                                                                                  ↳ 59: identifier_list                                ':' basic_data_type ';'
                                                                                                                                                        ↳ 45: identifier_single  ',' identifier_single
                                                                                                                                                              ↳ 42: • IDENTIFIER
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' variable_decl • IDENTIFIER assignment_operator expression ';' KW_ENDDEF ';' $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                      $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 189: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl_list                     function_command_list                                           KW_ENDDEF ';'
                                                                                                                            ↳ 52: variable_decl local_var_const_decl_list ↳ 84: function_command
                                                                                                                                                ↳ 54: ε •                       ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                                                      ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       54 local_var_const_decl_list: ε •
       43 identifier_single: • IDENTIFIER '[' POSINT ']'
      First example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' variable_decl • IDENTIFIER '[' POSINT ']' ',' identifier_single ':' basic_data_type ';' local_var_const_decl_list local_var_const_decl_list function_command_list KW_ENDDEF ';' $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                    $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 189: KW_DEF KW_MAIN '(' ')' local_var_const_decl_list                                                                                                                       local_var_const_decl_list function_command_list KW_ENDDEF ';'
                                                                                                                        ↳ 52: variable_decl local_var_const_decl_list
                                                                                                                                            ↳ 52: variable_decl                                                                               local_var_const_decl_list
                                                                                                                                                  ↳ 59: identifier_list                                               ':' basic_data_type ';'
                                                                                                                                                        ↳ 45: identifier_single                 ',' identifier_single
                                                                                                                                                              ↳ 43: • IDENTIFIER '[' POSINT ']'
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' variable_decl • IDENTIFIER assignment_operator expression ';' KW_ENDDEF ';' $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                      $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 189: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl_list                     function_command_list                                           KW_ENDDEF ';'
                                                                                                                            ↳ 52: variable_decl local_var_const_decl_list ↳ 84: function_command
                                                                                                                                                ↳ 54: ε •                       ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                                                      ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       54 local_var_const_decl_list: ε •
       44 identifier_single: • IDENTIFIER '[' ']'
      First example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' variable_decl • IDENTIFIER '[' ']' ',' identifier_single ':' basic_data_type ';' local_var_const_decl_list local_var_const_decl_list function_command_list KW_ENDDEF ';' $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                             $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 189: KW_DEF KW_MAIN '(' ')' local_var_const_decl_list                                                                                                                local_var_const_decl_list function_command_list KW_ENDDEF ';'
                                                                                                                        ↳ 52: variable_decl local_var_const_decl_list
                                                                                                                                            ↳ 52: variable_decl                                                                        local_var_const_decl_list
                                                                                                                                                  ↳ 59: identifier_list                                        ':' basic_data_type ';'
                                                                                                                                                        ↳ 45: identifier_single          ',' identifier_single
                                                                                                                                                              ↳ 44: • IDENTIFIER '[' ']'
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' variable_decl • IDENTIFIER assignment_operator expression ';' KW_ENDDEF ';' $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                      $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 189: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl_list                     function_command_list                                           KW_ENDDEF ';'
                                                                                                                            ↳ 52: variable_decl local_var_const_decl_list ↳ 84: function_command
                                                                                                                                                ↳ 54: ε •                       ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                                                      ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       54 local_var_const_decl_list: ε •
       61 parameter_declaration: • IDENTIFIER ':' basic_data_type
      First example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' variable_decl • IDENTIFIER ':' basic_data_type ';' local_var_const_decl_list local_var_const_decl_list function_command_list KW_ENDDEF ';' $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                         $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 189: KW_DEF KW_MAIN '(' ')' local_var_const_decl_list                                                                            local_var_const_decl_list function_command_list KW_ENDDEF ';'
                                                                                                                        ↳ 52: variable_decl local_var_const_decl_list
                                                                                                                                            ↳ 52: variable_decl                                    local_var_const_decl_list
                                                                                                                                                  ↳ 60: parameter_declaration                  ';'
                                                                                                                                                        ↳ 61: • IDENTIFIER ':' basic_data_type
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' variable_decl • IDENTIFIER assignment_operator expression ';' KW_ENDDEF ';' $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                      $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 189: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl_list                     function_command_list                                           KW_ENDDEF ';'
                                                                                                                            ↳ 52: variable_decl local_var_const_decl_list ↳ 84: function_command
                                                                                                                                                ↳ 54: ε •                       ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                                                      ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       54 local_var_const_decl_list: ε •
       62 parameter_declaration: • IDENTIFIER '[' ']' ':' basic_data_type
      First example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' variable_decl • IDENTIFIER '[' ']' ':' basic_data_type ';' local_var_const_decl_list local_var_const_decl_list function_command_list KW_ENDDEF ';' $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                 $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 189: KW_DEF KW_MAIN '(' ')' local_var_const_decl_list                                                                                    local_var_const_decl_list function_command_list KW_ENDDEF ';'
                                                                                                                        ↳ 52: variable_decl local_var_const_decl_list
                                                                                                                                            ↳ 52: variable_decl                                            local_var_const_decl_list
                                                                                                                                                  ↳ 60: parameter_declaration                          ';'
                                                                                                                                                        ↳ 62: • IDENTIFIER '[' ']' ':' basic_data_type
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' variable_decl • IDENTIFIER assignment_operator expression ';' KW_ENDDEF ';' $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                      $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 189: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl_list                     function_command_list                                           KW_ENDDEF ';'
                                                                                                                            ↳ 52: variable_decl local_var_const_decl_list ↳ 84: function_command
                                                                                                                                                ↳ 54: ε •                       ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                                                      ↳ 80: IDENTIFIER

    reduce/reduce conflict on tokens IDENTIFIER, KW_IF, KW_DEF, KW_CONTINUE, KW_FOR, KW_WHILE, KW_BREAK, KW_RETURN, '#':
       54 local_var_const_decl_list: ε •
       55 local_var_const_decl: variable_decl •
      Example: variable_decl •
      First reduce derivation
        local_var_const_decl_list
        ↳ 52: variable_decl local_var_const_decl_list
                            ↳ 54: ε •
      Second reduce derivation
        local_var_const_decl_list
        ↳ 53: local_var_const_decl
              ↳ 55: variable_decl •

    shift/reduce conflict on token IDENTIFIER:
       55 local_var_const_decl: variable_decl •
       42 identifier_single: • IDENTIFIER
      First example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' variable_decl • IDENTIFIER ',' identifier_single ':' basic_data_type ';' local_var_const_decl_list function_command_list KW_ENDDEF ';'
      Shift derivation
        input
        ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                     ↳ 189: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl_list                                                                                                        function_command_list KW_ENDDEF ';'
                                                                                                                       ↳ 52: variable_decl local_var_const_decl_list
                                                                                                                                           ↳ 52: variable_decl                                                                local_var_const_decl_list
                                                                                                                                                 ↳ 59: identifier_list                                ':' basic_data_type ';'
                                                                                                                                                       ↳ 45: identifier_single  ',' identifier_single
                                                                                                                                                             ↳ 42: • IDENTIFIER
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' variable_decl • IDENTIFIER assignment_operator expression ';' KW_ENDDEF ';' $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                              $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 190: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl  function_command_list                                           KW_ENDDEF ';'
                                                                                                                            ↳ 55: variable_decl • ↳ 84: function_command
                                                                                                                                                        ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                              ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       55 local_var_const_decl: variable_decl •
       43 identifier_single: • IDENTIFIER '[' POSINT ']'
      First example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' variable_decl • IDENTIFIER '[' POSINT ']' ',' identifier_single ':' basic_data_type ';' local_var_const_decl_list function_command_list KW_ENDDEF ';'
      Shift derivation
        input
        ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                     ↳ 189: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl_list                                                                                                                       function_command_list KW_ENDDEF ';'
                                                                                                                       ↳ 52: variable_decl local_var_const_decl_list
                                                                                                                                           ↳ 52: variable_decl                                                                               local_var_const_decl_list
                                                                                                                                                 ↳ 59: identifier_list                                               ':' basic_data_type ';'
                                                                                                                                                       ↳ 45: identifier_single                 ',' identifier_single
                                                                                                                                                             ↳ 43: • IDENTIFIER '[' POSINT ']'
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' variable_decl • IDENTIFIER assignment_operator expression ';' KW_ENDDEF ';' $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                              $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 190: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl  function_command_list                                           KW_ENDDEF ';'
                                                                                                                            ↳ 55: variable_decl • ↳ 84: function_command
                                                                                                                                                        ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                              ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       55 local_var_const_decl: variable_decl •
       44 identifier_single: • IDENTIFIER '[' ']'
      First example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' variable_decl • IDENTIFIER '[' ']' ',' identifier_single ':' basic_data_type ';' local_var_const_decl_list function_command_list KW_ENDDEF ';'
      Shift derivation
        input
        ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                     ↳ 189: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl_list                                                                                                                function_command_list KW_ENDDEF ';'
                                                                                                                       ↳ 52: variable_decl local_var_const_decl_list
                                                                                                                                           ↳ 52: variable_decl                                                                        local_var_const_decl_list
                                                                                                                                                 ↳ 59: identifier_list                                        ':' basic_data_type ';'
                                                                                                                                                       ↳ 45: identifier_single          ',' identifier_single
                                                                                                                                                             ↳ 44: • IDENTIFIER '[' ']'
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' variable_decl • IDENTIFIER assignment_operator expression ';' KW_ENDDEF ';' $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                              $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 190: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl  function_command_list                                           KW_ENDDEF ';'
                                                                                                                            ↳ 55: variable_decl • ↳ 84: function_command
                                                                                                                                                        ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                              ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       55 local_var_const_decl: variable_decl •
       61 parameter_declaration: • IDENTIFIER ':' basic_data_type
      First example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' variable_decl • IDENTIFIER ':' basic_data_type ';' local_var_const_decl_list function_command_list KW_ENDDEF ';'
      Shift derivation
        input
        ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                     ↳ 189: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl_list                                                                            function_command_list KW_ENDDEF ';'
                                                                                                                       ↳ 52: variable_decl local_var_const_decl_list
                                                                                                                                           ↳ 52: variable_decl                                    local_var_const_decl_list
                                                                                                                                                 ↳ 60: parameter_declaration                  ';'
                                                                                                                                                       ↳ 61: • IDENTIFIER ':' basic_data_type
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' variable_decl • IDENTIFIER assignment_operator expression ';' KW_ENDDEF ';' $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                              $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 190: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl  function_command_list                                           KW_ENDDEF ';'
                                                                                                                            ↳ 55: variable_decl • ↳ 84: function_command
                                                                                                                                                        ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                              ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       55 local_var_const_decl: variable_decl •
       62 parameter_declaration: • IDENTIFIER '[' ']' ':' basic_data_type
      First example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' variable_decl • IDENTIFIER '[' ']' ':' basic_data_type ';' local_var_const_decl_list function_command_list KW_ENDDEF ';'
      Shift derivation
        input
        ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                     ↳ 189: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl_list                                                                                    function_command_list KW_ENDDEF ';'
                                                                                                                       ↳ 52: variable_decl local_var_const_decl_list
                                                                                                                                           ↳ 52: variable_decl                                            local_var_const_decl_list
                                                                                                                                                 ↳ 60: parameter_declaration                          ';'
                                                                                                                                                       ↳ 62: • IDENTIFIER '[' ']' ':' basic_data_type
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' variable_decl • IDENTIFIER assignment_operator expression ';' KW_ENDDEF ';' $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                              $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 190: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl  function_command_list                                           KW_ENDDEF ';'
                                                                                                                            ↳ 55: variable_decl • ↳ 84: function_command
                                                                                                                                                        ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                              ↳ 80: IDENTIFIER



State 13

   60 variable_decl: parameter_declaration • ';'

    ';'  shift, and go to state 26


State 14

  188 comp_definition_list: comp_definition_list comp_definition •

    $default  reduce using rule 188 (comp_definition_list)


State 15

   43 identifier_single: IDENTIFIER '[' • POSINT ']'
   44                  | IDENTIFIER '[' • ']'
   62 parameter_declaration: IDENTIFIER '[' • ']' ':' basic_data_type

    POSINT  shift, and go to state 27
    ']'     shift, and go to state 28


State 16

   36 basic_data_type: • KW_INTEGER
   37                | • KW_BOOLEAN
   38                | • KW_CHAR
   39                | • KW_SCALAR
   40                | • KW_STR
   41                | • IDENTIFIER
   61 parameter_declaration: IDENTIFIER ':' • basic_data_type

    IDENTIFIER  shift, and go to state 29
    KW_BOOLEAN  shift, and go to state 30
    KW_STR      shift, and go to state 31
    KW_INTEGER  shift, and go to state 32
    KW_SCALAR   shift, and go to state 33
    KW_CHAR     shift, and go to state 34

    basic_data_type  go to state 35


State 17

  184 comp_definition: KW_COMP IDENTIFIER • ':' comp_var_decl_list comp_function_definition_list KW_ENDCOMP ';'
  185                | KW_COMP IDENTIFIER • ':' comp_var_decl comp_function_definition_list KW_ENDCOMP ';'
  186                | KW_COMP IDENTIFIER • ':' comp_function_definition_list KW_ENDCOMP ';'

    ':'  shift, and go to state 36


State 18

   48 constant_decl: KW_CONST IDENTIFIER • '=' expression ':' basic_data_type ';'
   49              | KW_CONST IDENTIFIER • '[' expression ']' '=' expression ':' basic_data_type ';'
   50              | KW_CONST IDENTIFIER • '[' ']' '=' expression ':' basic_data_type ';'

    '['  shift, and go to state 37
    '='  shift, and go to state 38


State 19

   42 identifier_single: • IDENTIFIER
   43                  | • IDENTIFIER '[' POSINT ']'
   44                  | • IDENTIFIER '[' ']'
   45 identifier_list: • identifier_single ',' identifier_single
   45                | identifier_single ',' • identifier_single
   46                | • identifier_single ',' identifier_list
   46                | identifier_single ',' • identifier_list
   47                | • identifier_single

    IDENTIFIER  shift, and go to state 39

    identifier_single  go to state 40
    identifier_list    go to state 41


State 20

   36 basic_data_type: • KW_INTEGER
   37                | • KW_BOOLEAN
   38                | • KW_CHAR
   39                | • KW_SCALAR
   40                | • KW_STR
   41                | • IDENTIFIER
   59 variable_decl: identifier_list ':' • basic_data_type ';'

    IDENTIFIER  shift, and go to state 29
    KW_BOOLEAN  shift, and go to state 30
    KW_STR      shift, and go to state 31
    KW_INTEGER  shift, and go to state 32
    KW_SCALAR   shift, and go to state 33
    KW_CHAR     shift, and go to state 34

    basic_data_type  go to state 42


State 21

   51 local_var_const_decl_list: constant_decl local_var_const_decl_list •

    $default  reduce using rule 51 (local_var_const_decl_list)


State 22

   42 identifier_single: • IDENTIFIER
   43                  | • IDENTIFIER '[' POSINT ']'
   44                  | • IDENTIFIER '[' ']'
   45 identifier_list: • identifier_single ',' identifier_single
   46                | • identifier_single ',' identifier_list
   47                | • identifier_single
   48 constant_decl: • KW_CONST IDENTIFIER '=' expression ':' basic_data_type ';'
   49              | • KW_CONST IDENTIFIER '[' expression ']' '=' expression ':' basic_data_type ';'
   50              | • KW_CONST IDENTIFIER '[' ']' '=' expression ':' basic_data_type ';'
   51 local_var_const_decl_list: • constant_decl local_var_const_decl_list
   52                          | • variable_decl local_var_const_decl_list
   52                          | variable_decl • local_var_const_decl_list
   53                          | • local_var_const_decl
   54                          | ε •  [IDENTIFIER, KW_IF, KW_DEF, KW_CONTINUE, KW_FOR, KW_WHILE, KW_BREAK, KW_RETURN, '#']
   55 local_var_const_decl: • variable_decl
   55                     | variable_decl •  [IDENTIFIER, KW_IF, KW_DEF, KW_CONTINUE, KW_FOR, KW_WHILE, KW_BREAK, KW_RETURN, '#']
   56                     | • constant_decl
   57                     | • variable_decl constant_decl
   57                     | variable_decl • constant_decl
   58                     | • constant_decl variable_decl
   58                     | constant_decl variable_decl •  [IDENTIFIER, KW_IF, KW_DEF, KW_CONTINUE, KW_FOR, KW_WHILE, KW_BREAK, KW_RETURN, '#']
   59 variable_decl: • identifier_list ':' basic_data_type ';'
   60              | • parameter_declaration ';'
   61 parameter_declaration: • IDENTIFIER ':' basic_data_type
   62                      | • IDENTIFIER '[' ']' ':' basic_data_type

    IDENTIFIER  shift, and go to state 4
    KW_CONST    shift, and go to state 6

    IDENTIFIER   [reduce using rule 54 (local_var_const_decl_list)]
    IDENTIFIER   [reduce using rule 55 (local_var_const_decl)]
    IDENTIFIER   [reduce using rule 58 (local_var_const_decl)]
    KW_IF        reduce using rule 54 (local_var_const_decl_list)
    KW_IF        [reduce using rule 55 (local_var_const_decl)]
    KW_IF        [reduce using rule 58 (local_var_const_decl)]
    KW_DEF       reduce using rule 54 (local_var_const_decl_list)
    KW_DEF       [reduce using rule 55 (local_var_const_decl)]
    KW_DEF       [reduce using rule 58 (local_var_const_decl)]
    KW_CONTINUE  reduce using rule 54 (local_var_const_decl_list)
    KW_CONTINUE  [reduce using rule 55 (local_var_const_decl)]
    KW_CONTINUE  [reduce using rule 58 (local_var_const_decl)]
    KW_FOR       reduce using rule 54 (local_var_const_decl_list)
    KW_FOR       [reduce using rule 55 (local_var_const_decl)]
    KW_FOR       [reduce using rule 58 (local_var_const_decl)]
    KW_WHILE     reduce using rule 54 (local_var_const_decl_list)
    KW_WHILE     [reduce using rule 55 (local_var_const_decl)]
    KW_WHILE     [reduce using rule 58 (local_var_const_decl)]
    KW_BREAK     reduce using rule 54 (local_var_const_decl_list)
    KW_BREAK     [reduce using rule 55 (local_var_const_decl)]
    KW_BREAK     [reduce using rule 58 (local_var_const_decl)]
    KW_RETURN    reduce using rule 54 (local_var_const_decl_list)
    KW_RETURN    [reduce using rule 55 (local_var_const_decl)]
    KW_RETURN    [reduce using rule 58 (local_var_const_decl)]
    '#'          reduce using rule 54 (local_var_const_decl_list)
    '#'          [reduce using rule 55 (local_var_const_decl)]
    '#'          [reduce using rule 58 (local_var_const_decl)]
    $default     reduce using rule 54 (local_var_const_decl_list)

    identifier_single          go to state 7
    identifier_list            go to state 8
    constant_decl              go to state 24
    local_var_const_decl_list  go to state 25
    local_var_const_decl       go to state 11
    variable_decl              go to state 12
    parameter_declaration      go to state 13

    shift/reduce conflict on token IDENTIFIER:
       54 local_var_const_decl_list: ε •
       42 identifier_single: • IDENTIFIER
      First example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' variable_decl • IDENTIFIER ',' identifier_single ':' basic_data_type ';' local_var_const_decl_list local_var_const_decl_list function_command_list KW_ENDDEF ';' $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                               $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 189: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl_list                                                                                                                                        function_command_list KW_ENDDEF ';'
                                                                                                                            ↳ 51: local_var_const_decl_list                                                                                                        local_var_const_decl_list
                                                                                                                                  ↳ 52: variable_decl local_var_const_decl_list
                                                                                                                                                      ↳ 52: variable_decl                                                                local_var_const_decl_list
                                                                                                                                                            ↳ 59: identifier_list                                ':' basic_data_type ';'
                                                                                                                                                                  ↳ 45: identifier_single  ',' identifier_single
                                                                                                                                                                        ↳ 42: • IDENTIFIER
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' constant_decl variable_decl • IDENTIFIER assignment_operator expression ';' KW_ENDDEF ';' $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                          $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 189: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl_list                                         function_command_list                                           KW_ENDDEF ';'
                                                                                                                            ↳ 51: constant_decl local_var_const_decl_list                     ↳ 84: function_command
                                                                                                                                                ↳ 52: variable_decl local_var_const_decl_list       ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                                    ↳ 54: ε •                             ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       54 local_var_const_decl_list: ε •
       43 identifier_single: • IDENTIFIER '[' POSINT ']'
      First example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' variable_decl • IDENTIFIER '[' POSINT ']' ',' identifier_single ':' basic_data_type ';' local_var_const_decl_list local_var_const_decl_list function_command_list KW_ENDDEF ';' $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                              $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 189: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl_list                                                                                                                                                       function_command_list KW_ENDDEF ';'
                                                                                                                            ↳ 51: local_var_const_decl_list                                                                                                                       local_var_const_decl_list
                                                                                                                                  ↳ 52: variable_decl local_var_const_decl_list
                                                                                                                                                      ↳ 52: variable_decl                                                                               local_var_const_decl_list
                                                                                                                                                            ↳ 59: identifier_list                                               ':' basic_data_type ';'
                                                                                                                                                                  ↳ 45: identifier_single                 ',' identifier_single
                                                                                                                                                                        ↳ 43: • IDENTIFIER '[' POSINT ']'
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' constant_decl variable_decl • IDENTIFIER assignment_operator expression ';' KW_ENDDEF ';' $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                          $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 189: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl_list                                         function_command_list                                           KW_ENDDEF ';'
                                                                                                                            ↳ 51: constant_decl local_var_const_decl_list                     ↳ 84: function_command
                                                                                                                                                ↳ 52: variable_decl local_var_const_decl_list       ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                                    ↳ 54: ε •                             ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       54 local_var_const_decl_list: ε •
       44 identifier_single: • IDENTIFIER '[' ']'
      First example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' variable_decl • IDENTIFIER '[' ']' ',' identifier_single ':' basic_data_type ';' local_var_const_decl_list local_var_const_decl_list function_command_list KW_ENDDEF ';' $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                       $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 189: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl_list                                                                                                                                                function_command_list KW_ENDDEF ';'
                                                                                                                            ↳ 51: local_var_const_decl_list                                                                                                                local_var_const_decl_list
                                                                                                                                  ↳ 52: variable_decl local_var_const_decl_list
                                                                                                                                                      ↳ 52: variable_decl                                                                        local_var_const_decl_list
                                                                                                                                                            ↳ 59: identifier_list                                        ':' basic_data_type ';'
                                                                                                                                                                  ↳ 45: identifier_single          ',' identifier_single
                                                                                                                                                                        ↳ 44: • IDENTIFIER '[' ']'
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' constant_decl variable_decl • IDENTIFIER assignment_operator expression ';' KW_ENDDEF ';' $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                          $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 189: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl_list                                         function_command_list                                           KW_ENDDEF ';'
                                                                                                                            ↳ 51: constant_decl local_var_const_decl_list                     ↳ 84: function_command
                                                                                                                                                ↳ 52: variable_decl local_var_const_decl_list       ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                                    ↳ 54: ε •                             ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       54 local_var_const_decl_list: ε •
       61 parameter_declaration: • IDENTIFIER ':' basic_data_type
      First example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' variable_decl • IDENTIFIER ':' basic_data_type ';' local_var_const_decl_list local_var_const_decl_list function_command_list KW_ENDDEF ';' $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                   $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 189: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl_list                                                                                                            function_command_list KW_ENDDEF ';'
                                                                                                                            ↳ 51: local_var_const_decl_list                                                                            local_var_const_decl_list
                                                                                                                                  ↳ 52: variable_decl local_var_const_decl_list
                                                                                                                                                      ↳ 52: variable_decl                                    local_var_const_decl_list
                                                                                                                                                            ↳ 60: parameter_declaration                  ';'
                                                                                                                                                                  ↳ 61: • IDENTIFIER ':' basic_data_type
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' constant_decl variable_decl • IDENTIFIER assignment_operator expression ';' KW_ENDDEF ';' $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                          $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 189: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl_list                                         function_command_list                                           KW_ENDDEF ';'
                                                                                                                            ↳ 51: constant_decl local_var_const_decl_list                     ↳ 84: function_command
                                                                                                                                                ↳ 52: variable_decl local_var_const_decl_list       ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                                    ↳ 54: ε •                             ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       54 local_var_const_decl_list: ε •
       62 parameter_declaration: • IDENTIFIER '[' ']' ':' basic_data_type
      First example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' variable_decl • IDENTIFIER '[' ']' ':' basic_data_type ';' local_var_const_decl_list local_var_const_decl_list function_command_list KW_ENDDEF ';' $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                           $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 189: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl_list                                                                                                                    function_command_list KW_ENDDEF ';'
                                                                                                                            ↳ 51: local_var_const_decl_list                                                                                    local_var_const_decl_list
                                                                                                                                  ↳ 52: variable_decl local_var_const_decl_list
                                                                                                                                                      ↳ 52: variable_decl                                            local_var_const_decl_list
                                                                                                                                                            ↳ 60: parameter_declaration                          ';'
                                                                                                                                                                  ↳ 62: • IDENTIFIER '[' ']' ':' basic_data_type
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' constant_decl variable_decl • IDENTIFIER assignment_operator expression ';' KW_ENDDEF ';' $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                          $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 189: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl_list                                         function_command_list                                           KW_ENDDEF ';'
                                                                                                                            ↳ 51: constant_decl local_var_const_decl_list                     ↳ 84: function_command
                                                                                                                                                ↳ 52: variable_decl local_var_const_decl_list       ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                                    ↳ 54: ε •                             ↳ 80: IDENTIFIER

    reduce/reduce conflict on tokens IDENTIFIER, KW_IF, KW_DEF, KW_CONTINUE, KW_FOR, KW_WHILE, KW_BREAK, KW_RETURN, '#':
       54 local_var_const_decl_list: ε •
       55 local_var_const_decl: variable_decl •
      First example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' constant_decl variable_decl • IDENTIFIER assignment_operator expression ';' KW_ENDDEF ';' $end
      First reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                          $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 189: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl_list                                         function_command_list                                           KW_ENDDEF ';'
                                                                                                                            ↳ 51: constant_decl local_var_const_decl_list                     ↳ 84: function_command
                                                                                                                                                ↳ 52: variable_decl local_var_const_decl_list       ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                                    ↳ 54: ε •                             ↳ 80: IDENTIFIER
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' constant_decl variable_decl • IDENTIFIER assignment_operator expression ';' KW_ENDDEF ';' $end
      Second reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                        $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 189: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl_list                       function_command_list                                           KW_ENDDEF ';'
                                                                                                                            ↳ 51: constant_decl local_var_const_decl_list   ↳ 84: function_command
                                                                                                                                                ↳ 53: local_var_const_decl        ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                      ↳ 55: variable_decl •             ↳ 80: IDENTIFIER

    reduce/reduce conflict on tokens IDENTIFIER, KW_IF, KW_DEF, KW_CONTINUE, KW_FOR, KW_WHILE, KW_BREAK, KW_RETURN, '#':
       54 local_var_const_decl_list: ε •
       58 local_var_const_decl: constant_decl variable_decl •
      First example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' constant_decl variable_decl • IDENTIFIER assignment_operator expression ';' KW_ENDDEF ';' $end
      First reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                          $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 189: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl_list                                         function_command_list                                           KW_ENDDEF ';'
                                                                                                                            ↳ 51: constant_decl local_var_const_decl_list                     ↳ 84: function_command
                                                                                                                                                ↳ 52: variable_decl local_var_const_decl_list       ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                                    ↳ 54: ε •                             ↳ 80: IDENTIFIER
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' constant_decl variable_decl • IDENTIFIER assignment_operator expression ';' KW_ENDDEF ';' $end
      Second reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                            $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 190: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl                function_command_list                                           KW_ENDDEF ';'
                                                                                                                            ↳ 58: constant_decl variable_decl • ↳ 84: function_command
                                                                                                                                                                      ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                                            ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       55 local_var_const_decl: variable_decl •
       42 identifier_single: • IDENTIFIER
      First example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' constant_decl variable_decl • IDENTIFIER ',' identifier_single ':' basic_data_type ';' local_var_const_decl_list local_var_const_decl_list function_command_list KW_ENDDEF ';' $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                         $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 189: KW_DEF KW_MAIN '(' ')' local_var_const_decl_list                                                                                                                            local_var_const_decl_list function_command_list KW_ENDDEF ';'
                                                                                                                        ↳ 51: constant_decl local_var_const_decl_list
                                                                                                                                            ↳ 52: variable_decl local_var_const_decl_list
                                                                                                                                                                ↳ 52: variable_decl                                                                local_var_const_decl_list
                                                                                                                                                                      ↳ 59: identifier_list                                ':' basic_data_type ';'
                                                                                                                                                                            ↳ 45: identifier_single  ',' identifier_single
                                                                                                                                                                                  ↳ 42: • IDENTIFIER
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' constant_decl variable_decl • IDENTIFIER assignment_operator expression ';' KW_ENDDEF ';' $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                        $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 189: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl_list                       function_command_list                                           KW_ENDDEF ';'
                                                                                                                            ↳ 51: constant_decl local_var_const_decl_list   ↳ 84: function_command
                                                                                                                                                ↳ 53: local_var_const_decl        ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                      ↳ 55: variable_decl •             ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       55 local_var_const_decl: variable_decl •
       43 identifier_single: • IDENTIFIER '[' POSINT ']'
      First example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' constant_decl variable_decl • IDENTIFIER '[' POSINT ']' ',' identifier_single ':' basic_data_type ';' local_var_const_decl_list local_var_const_decl_list function_command_list KW_ENDDEF ';' $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                        $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 189: KW_DEF KW_MAIN '(' ')' local_var_const_decl_list                                                                                                                                           local_var_const_decl_list function_command_list KW_ENDDEF ';'
                                                                                                                        ↳ 51: constant_decl local_var_const_decl_list
                                                                                                                                            ↳ 52: variable_decl local_var_const_decl_list
                                                                                                                                                                ↳ 52: variable_decl                                                                               local_var_const_decl_list
                                                                                                                                                                      ↳ 59: identifier_list                                               ':' basic_data_type ';'
                                                                                                                                                                            ↳ 45: identifier_single                 ',' identifier_single
                                                                                                                                                                                  ↳ 43: • IDENTIFIER '[' POSINT ']'
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' constant_decl variable_decl • IDENTIFIER assignment_operator expression ';' KW_ENDDEF ';' $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                        $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 189: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl_list                       function_command_list                                           KW_ENDDEF ';'
                                                                                                                            ↳ 51: constant_decl local_var_const_decl_list   ↳ 84: function_command
                                                                                                                                                ↳ 53: local_var_const_decl        ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                      ↳ 55: variable_decl •             ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       55 local_var_const_decl: variable_decl •
       44 identifier_single: • IDENTIFIER '[' ']'
      First example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' constant_decl variable_decl • IDENTIFIER '[' ']' ',' identifier_single ':' basic_data_type ';' local_var_const_decl_list local_var_const_decl_list function_command_list KW_ENDDEF ';' $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                 $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 189: KW_DEF KW_MAIN '(' ')' local_var_const_decl_list                                                                                                                                    local_var_const_decl_list function_command_list KW_ENDDEF ';'
                                                                                                                        ↳ 51: constant_decl local_var_const_decl_list
                                                                                                                                            ↳ 52: variable_decl local_var_const_decl_list
                                                                                                                                                                ↳ 52: variable_decl                                                                        local_var_const_decl_list
                                                                                                                                                                      ↳ 59: identifier_list                                        ':' basic_data_type ';'
                                                                                                                                                                            ↳ 45: identifier_single          ',' identifier_single
                                                                                                                                                                                  ↳ 44: • IDENTIFIER '[' ']'
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' constant_decl variable_decl • IDENTIFIER assignment_operator expression ';' KW_ENDDEF ';' $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                        $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 189: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl_list                       function_command_list                                           KW_ENDDEF ';'
                                                                                                                            ↳ 51: constant_decl local_var_const_decl_list   ↳ 84: function_command
                                                                                                                                                ↳ 53: local_var_const_decl        ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                      ↳ 55: variable_decl •             ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       55 local_var_const_decl: variable_decl •
       61 parameter_declaration: • IDENTIFIER ':' basic_data_type
      First example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' constant_decl variable_decl • IDENTIFIER ':' basic_data_type ';' local_var_const_decl_list local_var_const_decl_list function_command_list KW_ENDDEF ';' $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                             $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 189: KW_DEF KW_MAIN '(' ')' local_var_const_decl_list                                                                                                local_var_const_decl_list function_command_list KW_ENDDEF ';'
                                                                                                                        ↳ 51: constant_decl local_var_const_decl_list
                                                                                                                                            ↳ 52: variable_decl local_var_const_decl_list
                                                                                                                                                                ↳ 52: variable_decl                                    local_var_const_decl_list
                                                                                                                                                                      ↳ 60: parameter_declaration                  ';'
                                                                                                                                                                            ↳ 61: • IDENTIFIER ':' basic_data_type
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' constant_decl variable_decl • IDENTIFIER assignment_operator expression ';' KW_ENDDEF ';' $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                        $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 189: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl_list                       function_command_list                                           KW_ENDDEF ';'
                                                                                                                            ↳ 51: constant_decl local_var_const_decl_list   ↳ 84: function_command
                                                                                                                                                ↳ 53: local_var_const_decl        ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                      ↳ 55: variable_decl •             ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       55 local_var_const_decl: variable_decl •
       62 parameter_declaration: • IDENTIFIER '[' ']' ':' basic_data_type
      First example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' constant_decl variable_decl • IDENTIFIER '[' ']' ':' basic_data_type ';' local_var_const_decl_list local_var_const_decl_list function_command_list KW_ENDDEF ';' $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                     $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 189: KW_DEF KW_MAIN '(' ')' local_var_const_decl_list                                                                                                        local_var_const_decl_list function_command_list KW_ENDDEF ';'
                                                                                                                        ↳ 51: constant_decl local_var_const_decl_list
                                                                                                                                            ↳ 52: variable_decl local_var_const_decl_list
                                                                                                                                                                ↳ 52: variable_decl                                            local_var_const_decl_list
                                                                                                                                                                      ↳ 60: parameter_declaration                          ';'
                                                                                                                                                                            ↳ 62: • IDENTIFIER '[' ']' ':' basic_data_type
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' constant_decl variable_decl • IDENTIFIER assignment_operator expression ';' KW_ENDDEF ';' $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                        $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 189: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl_list                       function_command_list                                           KW_ENDDEF ';'
                                                                                                                            ↳ 51: constant_decl local_var_const_decl_list   ↳ 84: function_command
                                                                                                                                                ↳ 53: local_var_const_decl        ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                      ↳ 55: variable_decl •             ↳ 80: IDENTIFIER

    reduce/reduce conflict on tokens IDENTIFIER, KW_IF, KW_DEF, KW_CONTINUE, KW_FOR, KW_WHILE, KW_BREAK, KW_RETURN, '#':
       55 local_var_const_decl: variable_decl •
       58 local_var_const_decl: constant_decl variable_decl •
      First example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' constant_decl variable_decl • IDENTIFIER assignment_operator expression ';' KW_ENDDEF ';' $end
      First reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                        $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 189: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl_list                       function_command_list                                           KW_ENDDEF ';'
                                                                                                                            ↳ 51: constant_decl local_var_const_decl_list   ↳ 84: function_command
                                                                                                                                                ↳ 53: local_var_const_decl        ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                      ↳ 55: variable_decl •             ↳ 80: IDENTIFIER
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' constant_decl variable_decl • IDENTIFIER assignment_operator expression ';' KW_ENDDEF ';' $end
      Second reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                            $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 190: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl                function_command_list                                           KW_ENDDEF ';'
                                                                                                                            ↳ 58: constant_decl variable_decl • ↳ 84: function_command
                                                                                                                                                                      ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                                            ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       58 local_var_const_decl: constant_decl variable_decl •
       42 identifier_single: • IDENTIFIER
      First example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' constant_decl variable_decl • IDENTIFIER ',' identifier_single ':' basic_data_type ';' local_var_const_decl_list function_command_list KW_ENDDEF ';'
      Shift derivation
        input
        ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                     ↳ 189: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl_list                                                                                                                            function_command_list KW_ENDDEF ';'
                                                                                                                       ↳ 51: constant_decl local_var_const_decl_list
                                                                                                                                           ↳ 52: variable_decl local_var_const_decl_list
                                                                                                                                                               ↳ 52: variable_decl                                                                local_var_const_decl_list
                                                                                                                                                                     ↳ 59: identifier_list                                ':' basic_data_type ';'
                                                                                                                                                                           ↳ 45: identifier_single  ',' identifier_single
                                                                                                                                                                                 ↳ 42: • IDENTIFIER
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' constant_decl variable_decl • IDENTIFIER assignment_operator expression ';' KW_ENDDEF ';' $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                            $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 190: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl                function_command_list                                           KW_ENDDEF ';'
                                                                                                                            ↳ 58: constant_decl variable_decl • ↳ 84: function_command
                                                                                                                                                                      ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                                            ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       58 local_var_const_decl: constant_decl variable_decl •
       43 identifier_single: • IDENTIFIER '[' POSINT ']'
      First example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' constant_decl variable_decl • IDENTIFIER '[' POSINT ']' ',' identifier_single ':' basic_data_type ';' local_var_const_decl_list function_command_list KW_ENDDEF ';'
      Shift derivation
        input
        ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                     ↳ 189: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl_list                                                                                                                                           function_command_list KW_ENDDEF ';'
                                                                                                                       ↳ 51: constant_decl local_var_const_decl_list
                                                                                                                                           ↳ 52: variable_decl local_var_const_decl_list
                                                                                                                                                               ↳ 52: variable_decl                                                                               local_var_const_decl_list
                                                                                                                                                                     ↳ 59: identifier_list                                               ':' basic_data_type ';'
                                                                                                                                                                           ↳ 45: identifier_single                 ',' identifier_single
                                                                                                                                                                                 ↳ 43: • IDENTIFIER '[' POSINT ']'
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' constant_decl variable_decl • IDENTIFIER assignment_operator expression ';' KW_ENDDEF ';' $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                            $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 190: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl                function_command_list                                           KW_ENDDEF ';'
                                                                                                                            ↳ 58: constant_decl variable_decl • ↳ 84: function_command
                                                                                                                                                                      ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                                            ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       58 local_var_const_decl: constant_decl variable_decl •
       44 identifier_single: • IDENTIFIER '[' ']'
      First example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' constant_decl variable_decl • IDENTIFIER '[' ']' ',' identifier_single ':' basic_data_type ';' local_var_const_decl_list function_command_list KW_ENDDEF ';'
      Shift derivation
        input
        ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                     ↳ 189: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl_list                                                                                                                                    function_command_list KW_ENDDEF ';'
                                                                                                                       ↳ 51: constant_decl local_var_const_decl_list
                                                                                                                                           ↳ 52: variable_decl local_var_const_decl_list
                                                                                                                                                               ↳ 52: variable_decl                                                                        local_var_const_decl_list
                                                                                                                                                                     ↳ 59: identifier_list                                        ':' basic_data_type ';'
                                                                                                                                                                           ↳ 45: identifier_single          ',' identifier_single
                                                                                                                                                                                 ↳ 44: • IDENTIFIER '[' ']'
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' constant_decl variable_decl • IDENTIFIER assignment_operator expression ';' KW_ENDDEF ';' $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                            $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 190: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl                function_command_list                                           KW_ENDDEF ';'
                                                                                                                            ↳ 58: constant_decl variable_decl • ↳ 84: function_command
                                                                                                                                                                      ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                                            ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       58 local_var_const_decl: constant_decl variable_decl •
       61 parameter_declaration: • IDENTIFIER ':' basic_data_type
      First example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' constant_decl variable_decl • IDENTIFIER ':' basic_data_type ';' local_var_const_decl_list function_command_list KW_ENDDEF ';'
      Shift derivation
        input
        ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                     ↳ 189: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl_list                                                                                                function_command_list KW_ENDDEF ';'
                                                                                                                       ↳ 51: constant_decl local_var_const_decl_list
                                                                                                                                           ↳ 52: variable_decl local_var_const_decl_list
                                                                                                                                                               ↳ 52: variable_decl                                    local_var_const_decl_list
                                                                                                                                                                     ↳ 60: parameter_declaration                  ';'
                                                                                                                                                                           ↳ 61: • IDENTIFIER ':' basic_data_type
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' constant_decl variable_decl • IDENTIFIER assignment_operator expression ';' KW_ENDDEF ';' $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                            $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 190: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl                function_command_list                                           KW_ENDDEF ';'
                                                                                                                            ↳ 58: constant_decl variable_decl • ↳ 84: function_command
                                                                                                                                                                      ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                                            ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       58 local_var_const_decl: constant_decl variable_decl •
       62 parameter_declaration: • IDENTIFIER '[' ']' ':' basic_data_type
      First example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' constant_decl variable_decl • IDENTIFIER '[' ']' ':' basic_data_type ';' local_var_const_decl_list function_command_list KW_ENDDEF ';'
      Shift derivation
        input
        ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                     ↳ 189: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl_list                                                                                                        function_command_list KW_ENDDEF ';'
                                                                                                                       ↳ 51: constant_decl local_var_const_decl_list
                                                                                                                                           ↳ 52: variable_decl local_var_const_decl_list
                                                                                                                                                               ↳ 52: variable_decl                                            local_var_const_decl_list
                                                                                                                                                                     ↳ 60: parameter_declaration                          ';'
                                                                                                                                                                           ↳ 62: • IDENTIFIER '[' ']' ':' basic_data_type
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' constant_decl variable_decl • IDENTIFIER assignment_operator expression ';' KW_ENDDEF ';' $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                            $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 190: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl                function_command_list                                           KW_ENDDEF ';'
                                                                                                                            ↳ 58: constant_decl variable_decl • ↳ 84: function_command
                                                                                                                                                                      ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                                            ↳ 80: IDENTIFIER



State 23

    1 input: comp_definition_list local_var_const_decl_list function_definition_list • main_unit
   99 function_definition_list: function_definition_list • function_definition
  100 function_definition: • KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl_list function_command_list KW_ENDDEF ';'
  101                    | • KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl function_command_list KW_ENDDEF ';'
  102                    | • KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' function_command_list KW_ENDDEF ';'
  103                    | • KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl_list function_command_list KW_RETURN expression ';' KW_ENDDEF ';'
  104                    | • KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl function_command_list KW_RETURN expression ';' KW_ENDDEF ';'
  105                    | • KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' function_command_list KW_RETURN expression ';' KW_ENDDEF ';'
  189 main_unit: • KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl_list function_command_list KW_ENDDEF ';'
  190          | • KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl function_command_list KW_ENDDEF ';'
  191          | • KW_DEF KW_MAIN '(' ')' ':' function_command_list KW_ENDDEF ';'

    KW_DEF  shift, and go to state 43

    function_definition  go to state 44
    main_unit            go to state 45


State 24

   42 identifier_single: • IDENTIFIER
   43                  | • IDENTIFIER '[' POSINT ']'
   44                  | • IDENTIFIER '[' ']'
   45 identifier_list: • identifier_single ',' identifier_single
   46                | • identifier_single ',' identifier_list
   47                | • identifier_single
   48 constant_decl: • KW_CONST IDENTIFIER '=' expression ':' basic_data_type ';'
   49              | • KW_CONST IDENTIFIER '[' expression ']' '=' expression ':' basic_data_type ';'
   50              | • KW_CONST IDENTIFIER '[' ']' '=' expression ':' basic_data_type ';'
   51 local_var_const_decl_list: • constant_decl local_var_const_decl_list
   51                          | constant_decl • local_var_const_decl_list
   52                          | • variable_decl local_var_const_decl_list
   53                          | • local_var_const_decl
   54                          | ε •  [IDENTIFIER, KW_IF, KW_DEF, KW_CONTINUE, KW_FOR, KW_WHILE, KW_BREAK, KW_RETURN, '#']
   55 local_var_const_decl: • variable_decl
   56                     | • constant_decl
   56                     | constant_decl •  [IDENTIFIER, KW_IF, KW_DEF, KW_CONTINUE, KW_FOR, KW_WHILE, KW_BREAK, KW_RETURN, '#']
   57                     | • variable_decl constant_decl
   57                     | variable_decl constant_decl •  [IDENTIFIER, KW_IF, KW_DEF, KW_CONTINUE, KW_FOR, KW_WHILE, KW_BREAK, KW_RETURN, '#']
   58                     | • constant_decl variable_decl
   58                     | constant_decl • variable_decl
   59 variable_decl: • identifier_list ':' basic_data_type ';'
   60              | • parameter_declaration ';'
   61 parameter_declaration: • IDENTIFIER ':' basic_data_type
   62                      | • IDENTIFIER '[' ']' ':' basic_data_type

    IDENTIFIER  shift, and go to state 4
    KW_CONST    shift, and go to state 6

    IDENTIFIER   [reduce using rule 54 (local_var_const_decl_list)]
    IDENTIFIER   [reduce using rule 56 (local_var_const_decl)]
    IDENTIFIER   [reduce using rule 57 (local_var_const_decl)]
    KW_IF        reduce using rule 54 (local_var_const_decl_list)
    KW_IF        [reduce using rule 56 (local_var_const_decl)]
    KW_IF        [reduce using rule 57 (local_var_const_decl)]
    KW_DEF       reduce using rule 54 (local_var_const_decl_list)
    KW_DEF       [reduce using rule 56 (local_var_const_decl)]
    KW_DEF       [reduce using rule 57 (local_var_const_decl)]
    KW_CONTINUE  reduce using rule 54 (local_var_const_decl_list)
    KW_CONTINUE  [reduce using rule 56 (local_var_const_decl)]
    KW_CONTINUE  [reduce using rule 57 (local_var_const_decl)]
    KW_FOR       reduce using rule 54 (local_var_const_decl_list)
    KW_FOR       [reduce using rule 56 (local_var_const_decl)]
    KW_FOR       [reduce using rule 57 (local_var_const_decl)]
    KW_WHILE     reduce using rule 54 (local_var_const_decl_list)
    KW_WHILE     [reduce using rule 56 (local_var_const_decl)]
    KW_WHILE     [reduce using rule 57 (local_var_const_decl)]
    KW_BREAK     reduce using rule 54 (local_var_const_decl_list)
    KW_BREAK     [reduce using rule 56 (local_var_const_decl)]
    KW_BREAK     [reduce using rule 57 (local_var_const_decl)]
    KW_RETURN    reduce using rule 54 (local_var_const_decl_list)
    KW_RETURN    [reduce using rule 56 (local_var_const_decl)]
    KW_RETURN    [reduce using rule 57 (local_var_const_decl)]
    '#'          reduce using rule 54 (local_var_const_decl_list)
    '#'          [reduce using rule 56 (local_var_const_decl)]
    '#'          [reduce using rule 57 (local_var_const_decl)]
    $default     reduce using rule 54 (local_var_const_decl_list)

    identifier_single          go to state 7
    identifier_list            go to state 8
    constant_decl              go to state 9
    local_var_const_decl_list  go to state 21
    local_var_const_decl       go to state 11
    variable_decl              go to state 22
    parameter_declaration      go to state 13

    shift/reduce conflict on token IDENTIFIER:
       54 local_var_const_decl_list: ε •
       42 identifier_single: • IDENTIFIER
      First example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' variable_decl constant_decl • IDENTIFIER ',' identifier_single ':' basic_data_type ';' local_var_const_decl_list function_command_list KW_ENDDEF ';' $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                               $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 189: KW_DEF KW_MAIN '(' ')' local_var_const_decl_list                                                                                                  local_var_const_decl_list function_command_list KW_ENDDEF ';'
                                                                                                                        ↳ 52: variable_decl local_var_const_decl_list
                                                                                                                                            ↳ 53: local_var_const_decl
                                                                                                                                                  ↳ 58: constant_decl variable_decl
                                                                                                                                                                      ↳ 59: identifier_list                                ':' basic_data_type ';'
                                                                                                                                                                            ↳ 45: identifier_single  ',' identifier_single
                                                                                                                                                                                  ↳ 42: • IDENTIFIER
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' variable_decl constant_decl • IDENTIFIER assignment_operator expression ';' KW_ENDDEF ';' $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                          $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 189: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl_list                                         function_command_list                                           KW_ENDDEF ';'
                                                                                                                            ↳ 52: variable_decl local_var_const_decl_list                     ↳ 84: function_command
                                                                                                                                                ↳ 51: constant_decl local_var_const_decl_list       ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                                    ↳ 54: ε •                             ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       54 local_var_const_decl_list: ε •
       43 identifier_single: • IDENTIFIER '[' POSINT ']'
      First example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' variable_decl constant_decl • IDENTIFIER '[' POSINT ']' ',' identifier_single ':' basic_data_type ';' local_var_const_decl_list function_command_list KW_ENDDEF ';' $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                              $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 189: KW_DEF KW_MAIN '(' ')' local_var_const_decl_list                                                                                                                 local_var_const_decl_list function_command_list KW_ENDDEF ';'
                                                                                                                        ↳ 52: variable_decl local_var_const_decl_list
                                                                                                                                            ↳ 53: local_var_const_decl
                                                                                                                                                  ↳ 58: constant_decl variable_decl
                                                                                                                                                                      ↳ 59: identifier_list                                               ':' basic_data_type ';'
                                                                                                                                                                            ↳ 45: identifier_single                 ',' identifier_single
                                                                                                                                                                                  ↳ 43: • IDENTIFIER '[' POSINT ']'
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' variable_decl constant_decl • IDENTIFIER assignment_operator expression ';' KW_ENDDEF ';' $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                          $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 189: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl_list                                         function_command_list                                           KW_ENDDEF ';'
                                                                                                                            ↳ 52: variable_decl local_var_const_decl_list                     ↳ 84: function_command
                                                                                                                                                ↳ 51: constant_decl local_var_const_decl_list       ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                                    ↳ 54: ε •                             ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       54 local_var_const_decl_list: ε •
       44 identifier_single: • IDENTIFIER '[' ']'
      First example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' variable_decl constant_decl • IDENTIFIER '[' ']' ',' identifier_single ':' basic_data_type ';' local_var_const_decl_list function_command_list KW_ENDDEF ';' $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                       $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 189: KW_DEF KW_MAIN '(' ')' local_var_const_decl_list                                                                                                          local_var_const_decl_list function_command_list KW_ENDDEF ';'
                                                                                                                        ↳ 52: variable_decl local_var_const_decl_list
                                                                                                                                            ↳ 53: local_var_const_decl
                                                                                                                                                  ↳ 58: constant_decl variable_decl
                                                                                                                                                                      ↳ 59: identifier_list                                        ':' basic_data_type ';'
                                                                                                                                                                            ↳ 45: identifier_single          ',' identifier_single
                                                                                                                                                                                  ↳ 44: • IDENTIFIER '[' ']'
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' variable_decl constant_decl • IDENTIFIER assignment_operator expression ';' KW_ENDDEF ';' $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                          $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 189: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl_list                                         function_command_list                                           KW_ENDDEF ';'
                                                                                                                            ↳ 52: variable_decl local_var_const_decl_list                     ↳ 84: function_command
                                                                                                                                                ↳ 51: constant_decl local_var_const_decl_list       ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                                    ↳ 54: ε •                             ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       54 local_var_const_decl_list: ε •
       61 parameter_declaration: • IDENTIFIER ':' basic_data_type
      First example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' variable_decl constant_decl • IDENTIFIER ':' basic_data_type ';' local_var_const_decl_list function_command_list KW_ENDDEF ';' $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                   $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 189: KW_DEF KW_MAIN '(' ')' local_var_const_decl_list                                                                      local_var_const_decl_list function_command_list KW_ENDDEF ';'
                                                                                                                        ↳ 52: variable_decl local_var_const_decl_list
                                                                                                                                            ↳ 53: local_var_const_decl
                                                                                                                                                  ↳ 58: constant_decl variable_decl
                                                                                                                                                                      ↳ 60: parameter_declaration                  ';'
                                                                                                                                                                            ↳ 61: • IDENTIFIER ':' basic_data_type
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' variable_decl constant_decl • IDENTIFIER assignment_operator expression ';' KW_ENDDEF ';' $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                          $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 189: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl_list                                         function_command_list                                           KW_ENDDEF ';'
                                                                                                                            ↳ 52: variable_decl local_var_const_decl_list                     ↳ 84: function_command
                                                                                                                                                ↳ 51: constant_decl local_var_const_decl_list       ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                                    ↳ 54: ε •                             ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       54 local_var_const_decl_list: ε •
       62 parameter_declaration: • IDENTIFIER '[' ']' ':' basic_data_type
      First example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' variable_decl constant_decl • IDENTIFIER '[' ']' ':' basic_data_type ';' local_var_const_decl_list function_command_list KW_ENDDEF ';' $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                           $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 189: KW_DEF KW_MAIN '(' ')' local_var_const_decl_list                                                                              local_var_const_decl_list function_command_list KW_ENDDEF ';'
                                                                                                                        ↳ 52: variable_decl local_var_const_decl_list
                                                                                                                                            ↳ 53: local_var_const_decl
                                                                                                                                                  ↳ 58: constant_decl variable_decl
                                                                                                                                                                      ↳ 60: parameter_declaration                          ';'
                                                                                                                                                                            ↳ 62: • IDENTIFIER '[' ']' ':' basic_data_type
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' variable_decl constant_decl • IDENTIFIER assignment_operator expression ';' KW_ENDDEF ';' $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                          $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 189: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl_list                                         function_command_list                                           KW_ENDDEF ';'
                                                                                                                            ↳ 52: variable_decl local_var_const_decl_list                     ↳ 84: function_command
                                                                                                                                                ↳ 51: constant_decl local_var_const_decl_list       ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                                    ↳ 54: ε •                             ↳ 80: IDENTIFIER

    reduce/reduce conflict on tokens IDENTIFIER, KW_IF, KW_DEF, KW_CONTINUE, KW_FOR, KW_WHILE, KW_BREAK, KW_RETURN, '#':
       54 local_var_const_decl_list: ε •
       56 local_var_const_decl: constant_decl •
      First example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' variable_decl constant_decl • IDENTIFIER assignment_operator expression ';' KW_ENDDEF ';' $end
      First reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                          $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 189: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl_list                                         function_command_list                                           KW_ENDDEF ';'
                                                                                                                            ↳ 52: variable_decl local_var_const_decl_list                     ↳ 84: function_command
                                                                                                                                                ↳ 51: constant_decl local_var_const_decl_list       ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                                    ↳ 54: ε •                             ↳ 80: IDENTIFIER
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' variable_decl constant_decl • IDENTIFIER assignment_operator expression ';' KW_ENDDEF ';' $end
      Second reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                        $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 189: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl_list                       function_command_list                                           KW_ENDDEF ';'
                                                                                                                            ↳ 52: variable_decl local_var_const_decl_list   ↳ 84: function_command
                                                                                                                                                ↳ 53: local_var_const_decl        ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                      ↳ 56: constant_decl •             ↳ 80: IDENTIFIER

    reduce/reduce conflict on tokens IDENTIFIER, KW_IF, KW_DEF, KW_CONTINUE, KW_FOR, KW_WHILE, KW_BREAK, KW_RETURN, '#':
       54 local_var_const_decl_list: ε •
       57 local_var_const_decl: variable_decl constant_decl •
      First example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' variable_decl constant_decl • IDENTIFIER assignment_operator expression ';' KW_ENDDEF ';' $end
      First reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                          $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 189: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl_list                                         function_command_list                                           KW_ENDDEF ';'
                                                                                                                            ↳ 52: variable_decl local_var_const_decl_list                     ↳ 84: function_command
                                                                                                                                                ↳ 51: constant_decl local_var_const_decl_list       ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                                    ↳ 54: ε •                             ↳ 80: IDENTIFIER
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' variable_decl constant_decl • IDENTIFIER assignment_operator expression ';' KW_ENDDEF ';' $end
      Second reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                            $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 190: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl                function_command_list                                           KW_ENDDEF ';'
                                                                                                                            ↳ 57: variable_decl constant_decl • ↳ 84: function_command
                                                                                                                                                                      ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                                            ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       56 local_var_const_decl: constant_decl •
       42 identifier_single: • IDENTIFIER
      First example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' variable_decl constant_decl • IDENTIFIER ',' identifier_single ':' basic_data_type ';' local_var_const_decl_list function_command_list KW_ENDDEF ';' $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                               $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 189: KW_DEF KW_MAIN '(' ')' local_var_const_decl_list                                                                                                  local_var_const_decl_list function_command_list KW_ENDDEF ';'
                                                                                                                        ↳ 52: variable_decl local_var_const_decl_list
                                                                                                                                            ↳ 53: local_var_const_decl
                                                                                                                                                  ↳ 58: constant_decl variable_decl
                                                                                                                                                                      ↳ 59: identifier_list                                ':' basic_data_type ';'
                                                                                                                                                                            ↳ 45: identifier_single  ',' identifier_single
                                                                                                                                                                                  ↳ 42: • IDENTIFIER
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' variable_decl constant_decl • IDENTIFIER assignment_operator expression ';' KW_ENDDEF ';' $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                        $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 189: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl_list                       function_command_list                                           KW_ENDDEF ';'
                                                                                                                            ↳ 52: variable_decl local_var_const_decl_list   ↳ 84: function_command
                                                                                                                                                ↳ 53: local_var_const_decl        ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                      ↳ 56: constant_decl •             ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       56 local_var_const_decl: constant_decl •
       43 identifier_single: • IDENTIFIER '[' POSINT ']'
      First example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' variable_decl constant_decl • IDENTIFIER '[' POSINT ']' ',' identifier_single ':' basic_data_type ';' local_var_const_decl_list function_command_list KW_ENDDEF ';' $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                              $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 189: KW_DEF KW_MAIN '(' ')' local_var_const_decl_list                                                                                                                 local_var_const_decl_list function_command_list KW_ENDDEF ';'
                                                                                                                        ↳ 52: variable_decl local_var_const_decl_list
                                                                                                                                            ↳ 53: local_var_const_decl
                                                                                                                                                  ↳ 58: constant_decl variable_decl
                                                                                                                                                                      ↳ 59: identifier_list                                               ':' basic_data_type ';'
                                                                                                                                                                            ↳ 45: identifier_single                 ',' identifier_single
                                                                                                                                                                                  ↳ 43: • IDENTIFIER '[' POSINT ']'
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' variable_decl constant_decl • IDENTIFIER assignment_operator expression ';' KW_ENDDEF ';' $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                        $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 189: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl_list                       function_command_list                                           KW_ENDDEF ';'
                                                                                                                            ↳ 52: variable_decl local_var_const_decl_list   ↳ 84: function_command
                                                                                                                                                ↳ 53: local_var_const_decl        ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                      ↳ 56: constant_decl •             ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       56 local_var_const_decl: constant_decl •
       44 identifier_single: • IDENTIFIER '[' ']'
      First example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' variable_decl constant_decl • IDENTIFIER '[' ']' ',' identifier_single ':' basic_data_type ';' local_var_const_decl_list function_command_list KW_ENDDEF ';' $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                       $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 189: KW_DEF KW_MAIN '(' ')' local_var_const_decl_list                                                                                                          local_var_const_decl_list function_command_list KW_ENDDEF ';'
                                                                                                                        ↳ 52: variable_decl local_var_const_decl_list
                                                                                                                                            ↳ 53: local_var_const_decl
                                                                                                                                                  ↳ 58: constant_decl variable_decl
                                                                                                                                                                      ↳ 59: identifier_list                                        ':' basic_data_type ';'
                                                                                                                                                                            ↳ 45: identifier_single          ',' identifier_single
                                                                                                                                                                                  ↳ 44: • IDENTIFIER '[' ']'
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' variable_decl constant_decl • IDENTIFIER assignment_operator expression ';' KW_ENDDEF ';' $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                        $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 189: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl_list                       function_command_list                                           KW_ENDDEF ';'
                                                                                                                            ↳ 52: variable_decl local_var_const_decl_list   ↳ 84: function_command
                                                                                                                                                ↳ 53: local_var_const_decl        ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                      ↳ 56: constant_decl •             ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       56 local_var_const_decl: constant_decl •
       61 parameter_declaration: • IDENTIFIER ':' basic_data_type
      First example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' variable_decl constant_decl • IDENTIFIER ':' basic_data_type ';' local_var_const_decl_list function_command_list KW_ENDDEF ';' $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                   $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 189: KW_DEF KW_MAIN '(' ')' local_var_const_decl_list                                                                      local_var_const_decl_list function_command_list KW_ENDDEF ';'
                                                                                                                        ↳ 52: variable_decl local_var_const_decl_list
                                                                                                                                            ↳ 53: local_var_const_decl
                                                                                                                                                  ↳ 58: constant_decl variable_decl
                                                                                                                                                                      ↳ 60: parameter_declaration                  ';'
                                                                                                                                                                            ↳ 61: • IDENTIFIER ':' basic_data_type
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' variable_decl constant_decl • IDENTIFIER assignment_operator expression ';' KW_ENDDEF ';' $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                        $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 189: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl_list                       function_command_list                                           KW_ENDDEF ';'
                                                                                                                            ↳ 52: variable_decl local_var_const_decl_list   ↳ 84: function_command
                                                                                                                                                ↳ 53: local_var_const_decl        ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                      ↳ 56: constant_decl •             ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       56 local_var_const_decl: constant_decl •
       62 parameter_declaration: • IDENTIFIER '[' ']' ':' basic_data_type
      First example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' variable_decl constant_decl • IDENTIFIER '[' ']' ':' basic_data_type ';' local_var_const_decl_list function_command_list KW_ENDDEF ';' $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                           $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 189: KW_DEF KW_MAIN '(' ')' local_var_const_decl_list                                                                              local_var_const_decl_list function_command_list KW_ENDDEF ';'
                                                                                                                        ↳ 52: variable_decl local_var_const_decl_list
                                                                                                                                            ↳ 53: local_var_const_decl
                                                                                                                                                  ↳ 58: constant_decl variable_decl
                                                                                                                                                                      ↳ 60: parameter_declaration                          ';'
                                                                                                                                                                            ↳ 62: • IDENTIFIER '[' ']' ':' basic_data_type
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' variable_decl constant_decl • IDENTIFIER assignment_operator expression ';' KW_ENDDEF ';' $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                        $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 189: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl_list                       function_command_list                                           KW_ENDDEF ';'
                                                                                                                            ↳ 52: variable_decl local_var_const_decl_list   ↳ 84: function_command
                                                                                                                                                ↳ 53: local_var_const_decl        ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                      ↳ 56: constant_decl •             ↳ 80: IDENTIFIER

    reduce/reduce conflict on tokens IDENTIFIER, KW_IF, KW_DEF, KW_CONTINUE, KW_FOR, KW_WHILE, KW_BREAK, KW_RETURN, '#':
       56 local_var_const_decl: constant_decl •
       57 local_var_const_decl: variable_decl constant_decl •
      First example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' variable_decl constant_decl • IDENTIFIER assignment_operator expression ';' KW_ENDDEF ';' $end
      First reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                        $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 189: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl_list                       function_command_list                                           KW_ENDDEF ';'
                                                                                                                            ↳ 52: variable_decl local_var_const_decl_list   ↳ 84: function_command
                                                                                                                                                ↳ 53: local_var_const_decl        ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                      ↳ 56: constant_decl •             ↳ 80: IDENTIFIER
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' variable_decl constant_decl • IDENTIFIER assignment_operator expression ';' KW_ENDDEF ';' $end
      Second reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                            $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 190: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl                function_command_list                                           KW_ENDDEF ';'
                                                                                                                            ↳ 57: variable_decl constant_decl • ↳ 84: function_command
                                                                                                                                                                      ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                                            ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       57 local_var_const_decl: variable_decl constant_decl •
       42 identifier_single: • IDENTIFIER
      First example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' variable_decl constant_decl • IDENTIFIER ',' identifier_single ':' basic_data_type ';' function_command_list KW_ENDDEF ';'
      Shift derivation
        input
        ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                     ↳ 189: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl_list                                                                                                  function_command_list KW_ENDDEF ';'
                                                                                                                       ↳ 52: variable_decl local_var_const_decl_list
                                                                                                                                           ↳ 53: local_var_const_decl
                                                                                                                                                 ↳ 58: constant_decl variable_decl
                                                                                                                                                                     ↳ 59: identifier_list                                ':' basic_data_type ';'
                                                                                                                                                                           ↳ 45: identifier_single  ',' identifier_single
                                                                                                                                                                                 ↳ 42: • IDENTIFIER
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' variable_decl constant_decl • IDENTIFIER assignment_operator expression ';' KW_ENDDEF ';' $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                            $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 190: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl                function_command_list                                           KW_ENDDEF ';'
                                                                                                                            ↳ 57: variable_decl constant_decl • ↳ 84: function_command
                                                                                                                                                                      ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                                            ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       57 local_var_const_decl: variable_decl constant_decl •
       43 identifier_single: • IDENTIFIER '[' POSINT ']'
      First example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' variable_decl constant_decl • IDENTIFIER '[' POSINT ']' ',' identifier_single ':' basic_data_type ';' function_command_list KW_ENDDEF ';'
      Shift derivation
        input
        ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                     ↳ 189: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl_list                                                                                                                 function_command_list KW_ENDDEF ';'
                                                                                                                       ↳ 52: variable_decl local_var_const_decl_list
                                                                                                                                           ↳ 53: local_var_const_decl
                                                                                                                                                 ↳ 58: constant_decl variable_decl
                                                                                                                                                                     ↳ 59: identifier_list                                               ':' basic_data_type ';'
                                                                                                                                                                           ↳ 45: identifier_single                 ',' identifier_single
                                                                                                                                                                                 ↳ 43: • IDENTIFIER '[' POSINT ']'
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' variable_decl constant_decl • IDENTIFIER assignment_operator expression ';' KW_ENDDEF ';' $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                            $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 190: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl                function_command_list                                           KW_ENDDEF ';'
                                                                                                                            ↳ 57: variable_decl constant_decl • ↳ 84: function_command
                                                                                                                                                                      ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                                            ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       57 local_var_const_decl: variable_decl constant_decl •
       44 identifier_single: • IDENTIFIER '[' ']'
      First example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' variable_decl constant_decl • IDENTIFIER '[' ']' ',' identifier_single ':' basic_data_type ';' function_command_list KW_ENDDEF ';'
      Shift derivation
        input
        ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                     ↳ 189: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl_list                                                                                                          function_command_list KW_ENDDEF ';'
                                                                                                                       ↳ 52: variable_decl local_var_const_decl_list
                                                                                                                                           ↳ 53: local_var_const_decl
                                                                                                                                                 ↳ 58: constant_decl variable_decl
                                                                                                                                                                     ↳ 59: identifier_list                                        ':' basic_data_type ';'
                                                                                                                                                                           ↳ 45: identifier_single          ',' identifier_single
                                                                                                                                                                                 ↳ 44: • IDENTIFIER '[' ']'
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' variable_decl constant_decl • IDENTIFIER assignment_operator expression ';' KW_ENDDEF ';' $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                            $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 190: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl                function_command_list                                           KW_ENDDEF ';'
                                                                                                                            ↳ 57: variable_decl constant_decl • ↳ 84: function_command
                                                                                                                                                                      ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                                            ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       57 local_var_const_decl: variable_decl constant_decl •
       61 parameter_declaration: • IDENTIFIER ':' basic_data_type
      First example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' variable_decl constant_decl • IDENTIFIER ':' basic_data_type ';' function_command_list KW_ENDDEF ';'
      Shift derivation
        input
        ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                     ↳ 189: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl_list                                                                      function_command_list KW_ENDDEF ';'
                                                                                                                       ↳ 52: variable_decl local_var_const_decl_list
                                                                                                                                           ↳ 53: local_var_const_decl
                                                                                                                                                 ↳ 58: constant_decl variable_decl
                                                                                                                                                                     ↳ 60: parameter_declaration                  ';'
                                                                                                                                                                           ↳ 61: • IDENTIFIER ':' basic_data_type
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' variable_decl constant_decl • IDENTIFIER assignment_operator expression ';' KW_ENDDEF ';' $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                            $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 190: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl                function_command_list                                           KW_ENDDEF ';'
                                                                                                                            ↳ 57: variable_decl constant_decl • ↳ 84: function_command
                                                                                                                                                                      ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                                            ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       57 local_var_const_decl: variable_decl constant_decl •
       62 parameter_declaration: • IDENTIFIER '[' ']' ':' basic_data_type
      First example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' variable_decl constant_decl • IDENTIFIER '[' ']' ':' basic_data_type ';' function_command_list KW_ENDDEF ';'
      Shift derivation
        input
        ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                     ↳ 189: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl_list                                                                              function_command_list KW_ENDDEF ';'
                                                                                                                       ↳ 52: variable_decl local_var_const_decl_list
                                                                                                                                           ↳ 53: local_var_const_decl
                                                                                                                                                 ↳ 58: constant_decl variable_decl
                                                                                                                                                                     ↳ 60: parameter_declaration                          ';'
                                                                                                                                                                           ↳ 62: • IDENTIFIER '[' ']' ':' basic_data_type
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' variable_decl constant_decl • IDENTIFIER assignment_operator expression ';' KW_ENDDEF ';' $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                            $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 190: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl                function_command_list                                           KW_ENDDEF ';'
                                                                                                                            ↳ 57: variable_decl constant_decl • ↳ 84: function_command
                                                                                                                                                                      ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                                            ↳ 80: IDENTIFIER



State 25

   52 local_var_const_decl_list: variable_decl local_var_const_decl_list •

    $default  reduce using rule 52 (local_var_const_decl_list)


State 26

   60 variable_decl: parameter_declaration ';' •

    $default  reduce using rule 60 (variable_decl)


State 27

   43 identifier_single: IDENTIFIER '[' POSINT • ']'

    ']'  shift, and go to state 46


State 28

   44 identifier_single: IDENTIFIER '[' ']' •  [',', ':']
   62 parameter_declaration: IDENTIFIER '[' ']' • ':' basic_data_type

    ':'  shift, and go to state 47

    ':'       [reduce using rule 44 (identifier_single)]
    $default  reduce using rule 44 (identifier_single)

    shift/reduce conflict on token ':':
       44 identifier_single: IDENTIFIER '[' ']' •
       62 parameter_declaration: IDENTIFIER '[' ']' • ':' basic_data_type
      First example: comp_definition_list IDENTIFIER '[' ']' • ':' basic_data_type ';' local_var_const_decl_list function_definition_list main_unit
      Shift derivation
        input
        ↳ 1: comp_definition_list local_var_const_decl_list                                                                function_definition_list main_unit
                                  ↳ 52: variable_decl                                            local_var_const_decl_list
                                        ↳ 60: parameter_declaration                          ';'
                                              ↳ 62: IDENTIFIER '[' ']' • ':' basic_data_type
      Second example: comp_definition_list IDENTIFIER '[' ']' • ':' basic_data_type ';' local_var_const_decl_list function_definition_list main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                       $end
             ↳ 1: comp_definition_list local_var_const_decl_list                                                                      function_definition_list main_unit
                                       ↳ 52: variable_decl                                                  local_var_const_decl_list
                                             ↳ 59: identifier_list                  ':' basic_data_type ';'
                                                   ↳ 47: identifier_single
                                                         ↳ 44: IDENTIFIER '[' ']' •



State 29

   41 basic_data_type: IDENTIFIER •

    $default  reduce using rule 41 (basic_data_type)


State 30

   37 basic_data_type: KW_BOOLEAN •

    $default  reduce using rule 37 (basic_data_type)


State 31

   40 basic_data_type: KW_STR •

    $default  reduce using rule 40 (basic_data_type)


State 32

   36 basic_data_type: KW_INTEGER •

    $default  reduce using rule 36 (basic_data_type)


State 33

   39 basic_data_type: KW_SCALAR •

    $default  reduce using rule 39 (basic_data_type)


State 34

   38 basic_data_type: KW_CHAR •

    $default  reduce using rule 38 (basic_data_type)


State 35

   61 parameter_declaration: IDENTIFIER ':' basic_data_type •

    $default  reduce using rule 61 (parameter_declaration)


State 36

  167 comp_function_definition_list: ε •  [KW_DEF, KW_ENDCOMP]
  168                              | • comp_function_definition_list comp_function_definition
  175 comp_var_decl_list: • comp_var_decl
  176                   | • comp_var_decl_list comp_var_decl
  177 comp_var_decl: • comp_identifier_list ':' basic_data_type ';'
  178 comp_identifier_list: • '#' IDENTIFIER
  179                     | • '#' IDENTIFIER '[' comp_expression ']'
  180                     | • '#' IDENTIFIER '[' ']'
  181                     | • comp_identifier_list ',' '#' IDENTIFIER
  182                     | • comp_identifier_list ',' '#' IDENTIFIER '[' comp_expression ']'
  183                     | • comp_identifier_list ',' '#' IDENTIFIER '[' ']'
  184 comp_definition: KW_COMP IDENTIFIER ':' • comp_var_decl_list comp_function_definition_list KW_ENDCOMP ';'
  185                | KW_COMP IDENTIFIER ':' • comp_var_decl comp_function_definition_list KW_ENDCOMP ';'
  186                | KW_COMP IDENTIFIER ':' • comp_function_definition_list KW_ENDCOMP ';'

    '#'  shift, and go to state 48

    $default  reduce using rule 167 (comp_function_definition_list)

    comp_function_definition_list  go to state 49
    comp_var_decl_list             go to state 50
    comp_var_decl                  go to state 51
    comp_identifier_list           go to state 52


State 37

    2 primary_expression: • POSINT
    3                   | • SCALAR
    4                   | • IDENTIFIER
    5                   | • STRING
    6                   | • KW_TRUE
    7                   | • KW_FALSE
    8                   | • '(' logic_expression ')'
    9 math_expression: • primary_expression
   10                | • '+' math_expression
   11                | • '-' math_expression
   12                | • math_expression '+' math_expression
   13                | • math_expression '-' math_expression
   14                | • math_expression '*' math_expression
   15                | • math_expression '/' math_expression
   16                | • math_expression '%' math_expression
   17                | • math_expression OP_PAW math_expression
   18                | • IDENTIFIER '[' expression ']'
   19                | • IDENTIFIER '[' expression ']' '.' IDENTIFIER
   20                | • IDENTIFIER '[' expression ']' '.' IDENTIFIER '[' expression ']'
   21                | • general_function_call
   22                | • IDENTIFIER '.' IDENTIFIER '[' expression ']'
   23                | • IDENTIFIER '.' IDENTIFIER
   24 relational_expression: • math_expression
   25                      | • relational_expression OP_EQUALS relational_expression
   26                      | • relational_expression OP_NE relational_expression
   27                      | • relational_expression '>' relational_expression
   28                      | • relational_expression '<' relational_expression
   29                      | • relational_expression OP_LE relational_expression
   30                      | • relational_expression OP_GE relational_expression
   31 logic_expression: • relational_expression
   32                 | • OP_NOT logic_expression
   33                 | • logic_expression OP_AND logic_expression
   34                 | • logic_expression OP_OR logic_expression
   35 expression: • logic_expression
   49 constant_decl: KW_CONST IDENTIFIER '[' • expression ']' '=' expression ':' basic_data_type ';'
   50              | KW_CONST IDENTIFIER '[' • ']' '=' expression ':' basic_data_type ';'
   66 general_function_call: • function_call
   67                      | • IDENTIFIER '.' function_call
   68                      | • IDENTIFIER '[' expression ']' '.' function_call
   69 function_call: • IDENTIFIER '(' ')'
   70              | • IDENTIFIER '(' expr_comma_list ')'

    IDENTIFIER  shift, and go to state 53
    POSINT      shift, and go to state 54
    SCALAR      shift, and go to state 55
    STRING      shift, and go to state 56
    OP_NOT      shift, and go to state 57
    KW_TRUE     shift, and go to state 58
    KW_FALSE    shift, and go to state 59
    '-'         shift, and go to state 60
    '+'         shift, and go to state 61
    '('         shift, and go to state 62
    ']'         shift, and go to state 63

    primary_expression     go to state 64
    math_expression        go to state 65
    relational_expression  go to state 66
    logic_expression       go to state 67
    expression             go to state 68
    general_function_call  go to state 69
    function_call          go to state 70


State 38

    2 primary_expression: • POSINT
    3                   | • SCALAR
    4                   | • IDENTIFIER
    5                   | • STRING
    6                   | • KW_TRUE
    7                   | • KW_FALSE
    8                   | • '(' logic_expression ')'
    9 math_expression: • primary_expression
   10                | • '+' math_expression
   11                | • '-' math_expression
   12                | • math_expression '+' math_expression
   13                | • math_expression '-' math_expression
   14                | • math_expression '*' math_expression
   15                | • math_expression '/' math_expression
   16                | • math_expression '%' math_expression
   17                | • math_expression OP_PAW math_expression
   18                | • IDENTIFIER '[' expression ']'
   19                | • IDENTIFIER '[' expression ']' '.' IDENTIFIER
   20                | • IDENTIFIER '[' expression ']' '.' IDENTIFIER '[' expression ']'
   21                | • general_function_call
   22                | • IDENTIFIER '.' IDENTIFIER '[' expression ']'
   23                | • IDENTIFIER '.' IDENTIFIER
   24 relational_expression: • math_expression
   25                      | • relational_expression OP_EQUALS relational_expression
   26                      | • relational_expression OP_NE relational_expression
   27                      | • relational_expression '>' relational_expression
   28                      | • relational_expression '<' relational_expression
   29                      | • relational_expression OP_LE relational_expression
   30                      | • relational_expression OP_GE relational_expression
   31 logic_expression: • relational_expression
   32                 | • OP_NOT logic_expression
   33                 | • logic_expression OP_AND logic_expression
   34                 | • logic_expression OP_OR logic_expression
   35 expression: • logic_expression
   48 constant_decl: KW_CONST IDENTIFIER '=' • expression ':' basic_data_type ';'
   66 general_function_call: • function_call
   67                      | • IDENTIFIER '.' function_call
   68                      | • IDENTIFIER '[' expression ']' '.' function_call
   69 function_call: • IDENTIFIER '(' ')'
   70              | • IDENTIFIER '(' expr_comma_list ')'

    IDENTIFIER  shift, and go to state 53
    POSINT      shift, and go to state 54
    SCALAR      shift, and go to state 55
    STRING      shift, and go to state 56
    OP_NOT      shift, and go to state 57
    KW_TRUE     shift, and go to state 58
    KW_FALSE    shift, and go to state 59
    '-'         shift, and go to state 60
    '+'         shift, and go to state 61
    '('         shift, and go to state 62

    primary_expression     go to state 64
    math_expression        go to state 65
    relational_expression  go to state 66
    logic_expression       go to state 67
    expression             go to state 71
    general_function_call  go to state 69
    function_call          go to state 70


State 39

   42 identifier_single: IDENTIFIER •  [',', ':']
   43                  | IDENTIFIER • '[' POSINT ']'
   44                  | IDENTIFIER • '[' ']'

    '['  shift, and go to state 72

    $default  reduce using rule 42 (identifier_single)


State 40

   45 identifier_list: identifier_single • ',' identifier_single
   45                | identifier_single ',' identifier_single •  [':']
   46                | identifier_single • ',' identifier_list
   47                | identifier_single •  [':']

    ','  shift, and go to state 19

    ':'       reduce using rule 45 (identifier_list)
    ':'       [reduce using rule 47 (identifier_list)]
    $default  reduce using rule 45 (identifier_list)

    reduce/reduce conflict on token ':':
       45 identifier_list: identifier_single ',' identifier_single •
       47 identifier_list: identifier_single •
      First example: comp_definition_list identifier_single ',' identifier_single • ':' basic_data_type ';' local_var_const_decl_list function_definition_list main_unit $end
      First reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                      $end
             ↳ 1: comp_definition_list local_var_const_decl_list                                                                                     function_definition_list main_unit
                                       ↳ 52: variable_decl                                                                 local_var_const_decl_list
                                             ↳ 59: identifier_list                                 ':' basic_data_type ';'
                                                   ↳ 45: identifier_single ',' identifier_single •
      Second example: comp_definition_list identifier_single ',' identifier_single • ':' basic_data_type ';' local_var_const_decl_list function_definition_list main_unit $end
      Second reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                            $end
             ↳ 1: comp_definition_list local_var_const_decl_list                                                                                           function_definition_list main_unit
                                       ↳ 52: variable_decl                                                                       local_var_const_decl_list
                                             ↳ 59: identifier_list                                       ':' basic_data_type ';'
                                                   ↳ 46: identifier_single ',' identifier_list
                                                                               ↳ 47: identifier_single •



State 41

   46 identifier_list: identifier_single ',' identifier_list •

    $default  reduce using rule 46 (identifier_list)


State 42

   59 variable_decl: identifier_list ':' basic_data_type • ';'

    ';'  shift, and go to state 73


State 43

  100 function_definition: KW_DEF • IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl_list function_command_list KW_ENDDEF ';'
  101                    | KW_DEF • IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl function_command_list KW_ENDDEF ';'
  102                    | KW_DEF • IDENTIFIER '(' parameter_declaration_list ')' ':' function_command_list KW_ENDDEF ';'
  103                    | KW_DEF • IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl_list function_command_list KW_RETURN expression ';' KW_ENDDEF ';'
  104                    | KW_DEF • IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl function_command_list KW_RETURN expression ';' KW_ENDDEF ';'
  105                    | KW_DEF • IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' function_command_list KW_RETURN expression ';' KW_ENDDEF ';'
  189 main_unit: KW_DEF • KW_MAIN '(' ')' ':' local_var_const_decl_list function_command_list KW_ENDDEF ';'
  190          | KW_DEF • KW_MAIN '(' ')' ':' local_var_const_decl function_command_list KW_ENDDEF ';'
  191          | KW_DEF • KW_MAIN '(' ')' ':' function_command_list KW_ENDDEF ';'

    IDENTIFIER  shift, and go to state 74
    KW_MAIN     shift, and go to state 75


State 44

   99 function_definition_list: function_definition_list function_definition •

    $default  reduce using rule 99 (function_definition_list)


State 45

    1 input: comp_definition_list local_var_const_decl_list function_definition_list main_unit •

    $default  reduce using rule 1 (input)


State 46

   43 identifier_single: IDENTIFIER '[' POSINT ']' •

    $default  reduce using rule 43 (identifier_single)


State 47

   36 basic_data_type: • KW_INTEGER
   37                | • KW_BOOLEAN
   38                | • KW_CHAR
   39                | • KW_SCALAR
   40                | • KW_STR
   41                | • IDENTIFIER
   62 parameter_declaration: IDENTIFIER '[' ']' ':' • basic_data_type

    IDENTIFIER  shift, and go to state 29
    KW_BOOLEAN  shift, and go to state 30
    KW_STR      shift, and go to state 31
    KW_INTEGER  shift, and go to state 32
    KW_SCALAR   shift, and go to state 33
    KW_CHAR     shift, and go to state 34

    basic_data_type  go to state 76


State 48

  178 comp_identifier_list: '#' • IDENTIFIER
  179                     | '#' • IDENTIFIER '[' comp_expression ']'
  180                     | '#' • IDENTIFIER '[' ']'

    IDENTIFIER  shift, and go to state 77


State 49

  168 comp_function_definition_list: comp_function_definition_list • comp_function_definition
  169 comp_function_definition: • KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl_list comp_command_list KW_ENDDEF ';'
  170                         | • KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl comp_command_list KW_ENDDEF ';'
  171                         | • KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' comp_command_list KW_ENDDEF ';'
  172                         | • KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl_list comp_command_list KW_RETURN comp_expression ';' KW_ENDDEF ';'
  173                         | • KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' comp_command_list KW_RETURN comp_expression ';' KW_ENDDEF ';'
  174                         | • KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl comp_command_list KW_RETURN comp_expression ';' KW_ENDDEF ';'
  186 comp_definition: KW_COMP IDENTIFIER ':' comp_function_definition_list • KW_ENDCOMP ';'

    KW_DEF      shift, and go to state 78
    KW_ENDCOMP  shift, and go to state 79

    comp_function_definition  go to state 80


State 50

  167 comp_function_definition_list: ε •  [KW_DEF, KW_ENDCOMP]
  168                              | • comp_function_definition_list comp_function_definition
  176 comp_var_decl_list: comp_var_decl_list • comp_var_decl
  177 comp_var_decl: • comp_identifier_list ':' basic_data_type ';'
  178 comp_identifier_list: • '#' IDENTIFIER
  179                     | • '#' IDENTIFIER '[' comp_expression ']'
  180                     | • '#' IDENTIFIER '[' ']'
  181                     | • comp_identifier_list ',' '#' IDENTIFIER
  182                     | • comp_identifier_list ',' '#' IDENTIFIER '[' comp_expression ']'
  183                     | • comp_identifier_list ',' '#' IDENTIFIER '[' ']'
  184 comp_definition: KW_COMP IDENTIFIER ':' comp_var_decl_list • comp_function_definition_list KW_ENDCOMP ';'

    '#'  shift, and go to state 48

    $default  reduce using rule 167 (comp_function_definition_list)

    comp_function_definition_list  go to state 81
    comp_var_decl                  go to state 82
    comp_identifier_list           go to state 52


State 51

  167 comp_function_definition_list: ε •  [KW_DEF, KW_ENDCOMP]
  168                              | • comp_function_definition_list comp_function_definition
  175 comp_var_decl_list: comp_var_decl •  [KW_DEF, KW_ENDCOMP, '#']
  185 comp_definition: KW_COMP IDENTIFIER ':' comp_var_decl • comp_function_definition_list KW_ENDCOMP ';'

    KW_DEF      reduce using rule 167 (comp_function_definition_list)
    KW_DEF      [reduce using rule 175 (comp_var_decl_list)]
    KW_ENDCOMP  reduce using rule 167 (comp_function_definition_list)
    KW_ENDCOMP  [reduce using rule 175 (comp_var_decl_list)]
    '#'         reduce using rule 175 (comp_var_decl_list)
    $default    reduce using rule 167 (comp_function_definition_list)

    comp_function_definition_list  go to state 83

    reduce/reduce conflict on tokens KW_DEF, KW_ENDCOMP:
      167 comp_function_definition_list: ε •
      175 comp_var_decl_list: comp_var_decl •
      First example: comp_definition_list KW_COMP IDENTIFIER ':' comp_var_decl • KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl_list comp_command_list KW_ENDDEF ';' KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      First reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                   $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                  local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 185: KW_COMP IDENTIFIER ':' comp_var_decl comp_function_definition_list                                                                                                                                  KW_ENDCOMP ';'
                                                                                          ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                 ↳ 167: ε •                    ↳ 169: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl_list comp_command_list KW_ENDDEF ';'
      Second example: comp_definition_list KW_COMP IDENTIFIER ':' comp_var_decl • comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl_list comp_command_list KW_ENDDEF ';' comp_function_definition KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Second reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                     $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                    local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 184: KW_COMP IDENTIFIER ':' comp_var_decl_list     comp_function_definition_list                                                                                                                                                           KW_ENDCOMP ';'
                                                                            ↳ 175: comp_var_decl • ↳ 168: comp_function_definition_list comp_function_definition                                                                                                  comp_function_definition
                                                                                                                                        ↳ 169: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl_list comp_command_list KW_ENDDEF ';'



State 52

  177 comp_var_decl: comp_identifier_list • ':' basic_data_type ';'
  181 comp_identifier_list: comp_identifier_list • ',' '#' IDENTIFIER
  182                     | comp_identifier_list • ',' '#' IDENTIFIER '[' comp_expression ']'
  183                     | comp_identifier_list • ',' '#' IDENTIFIER '[' ']'

    ','  shift, and go to state 84
    ':'  shift, and go to state 85


State 53

    4 primary_expression: IDENTIFIER •  [KW_FOR, OP_AND, OP_OR, OP_PAW, OP_EQUALS, OP_NE, OP_LE, OP_GE, '>', '<', '-', '+', '*', '/', '%', ')', ']', ',', ':', ';']
   18 math_expression: IDENTIFIER • '[' expression ']'
   19                | IDENTIFIER • '[' expression ']' '.' IDENTIFIER
   20                | IDENTIFIER • '[' expression ']' '.' IDENTIFIER '[' expression ']'
   22                | IDENTIFIER • '.' IDENTIFIER '[' expression ']'
   23                | IDENTIFIER • '.' IDENTIFIER
   67 general_function_call: IDENTIFIER • '.' function_call
   68                      | IDENTIFIER • '[' expression ']' '.' function_call
   69 function_call: IDENTIFIER • '(' ')'
   70              | IDENTIFIER • '(' expr_comma_list ')'

    '('  shift, and go to state 86
    '['  shift, and go to state 87
    '.'  shift, and go to state 88

    $default  reduce using rule 4 (primary_expression)


State 54

    2 primary_expression: POSINT •

    $default  reduce using rule 2 (primary_expression)


State 55

    3 primary_expression: SCALAR •

    $default  reduce using rule 3 (primary_expression)


State 56

    5 primary_expression: STRING •

    $default  reduce using rule 5 (primary_expression)


State 57

    2 primary_expression: • POSINT
    3                   | • SCALAR
    4                   | • IDENTIFIER
    5                   | • STRING
    6                   | • KW_TRUE
    7                   | • KW_FALSE
    8                   | • '(' logic_expression ')'
    9 math_expression: • primary_expression
   10                | • '+' math_expression
   11                | • '-' math_expression
   12                | • math_expression '+' math_expression
   13                | • math_expression '-' math_expression
   14                | • math_expression '*' math_expression
   15                | • math_expression '/' math_expression
   16                | • math_expression '%' math_expression
   17                | • math_expression OP_PAW math_expression
   18                | • IDENTIFIER '[' expression ']'
   19                | • IDENTIFIER '[' expression ']' '.' IDENTIFIER
   20                | • IDENTIFIER '[' expression ']' '.' IDENTIFIER '[' expression ']'
   21                | • general_function_call
   22                | • IDENTIFIER '.' IDENTIFIER '[' expression ']'
   23                | • IDENTIFIER '.' IDENTIFIER
   24 relational_expression: • math_expression
   25                      | • relational_expression OP_EQUALS relational_expression
   26                      | • relational_expression OP_NE relational_expression
   27                      | • relational_expression '>' relational_expression
   28                      | • relational_expression '<' relational_expression
   29                      | • relational_expression OP_LE relational_expression
   30                      | • relational_expression OP_GE relational_expression
   31 logic_expression: • relational_expression
   32                 | • OP_NOT logic_expression
   32                 | OP_NOT • logic_expression
   33                 | • logic_expression OP_AND logic_expression
   34                 | • logic_expression OP_OR logic_expression
   66 general_function_call: • function_call
   67                      | • IDENTIFIER '.' function_call
   68                      | • IDENTIFIER '[' expression ']' '.' function_call
   69 function_call: • IDENTIFIER '(' ')'
   70              | • IDENTIFIER '(' expr_comma_list ')'

    IDENTIFIER  shift, and go to state 53
    POSINT      shift, and go to state 54
    SCALAR      shift, and go to state 55
    STRING      shift, and go to state 56
    OP_NOT      shift, and go to state 57
    KW_TRUE     shift, and go to state 58
    KW_FALSE    shift, and go to state 59
    '-'         shift, and go to state 60
    '+'         shift, and go to state 61
    '('         shift, and go to state 62

    primary_expression     go to state 64
    math_expression        go to state 65
    relational_expression  go to state 66
    logic_expression       go to state 89
    general_function_call  go to state 69
    function_call          go to state 70


State 58

    6 primary_expression: KW_TRUE •

    $default  reduce using rule 6 (primary_expression)


State 59

    7 primary_expression: KW_FALSE •

    $default  reduce using rule 7 (primary_expression)


State 60

    2 primary_expression: • POSINT
    3                   | • SCALAR
    4                   | • IDENTIFIER
    5                   | • STRING
    6                   | • KW_TRUE
    7                   | • KW_FALSE
    8                   | • '(' logic_expression ')'
    9 math_expression: • primary_expression
   10                | • '+' math_expression
   11                | • '-' math_expression
   11                | '-' • math_expression
   12                | • math_expression '+' math_expression
   13                | • math_expression '-' math_expression
   14                | • math_expression '*' math_expression
   15                | • math_expression '/' math_expression
   16                | • math_expression '%' math_expression
   17                | • math_expression OP_PAW math_expression
   18                | • IDENTIFIER '[' expression ']'
   19                | • IDENTIFIER '[' expression ']' '.' IDENTIFIER
   20                | • IDENTIFIER '[' expression ']' '.' IDENTIFIER '[' expression ']'
   21                | • general_function_call
   22                | • IDENTIFIER '.' IDENTIFIER '[' expression ']'
   23                | • IDENTIFIER '.' IDENTIFIER
   66 general_function_call: • function_call
   67                      | • IDENTIFIER '.' function_call
   68                      | • IDENTIFIER '[' expression ']' '.' function_call
   69 function_call: • IDENTIFIER '(' ')'
   70              | • IDENTIFIER '(' expr_comma_list ')'

    IDENTIFIER  shift, and go to state 53
    POSINT      shift, and go to state 54
    SCALAR      shift, and go to state 55
    STRING      shift, and go to state 56
    KW_TRUE     shift, and go to state 58
    KW_FALSE    shift, and go to state 59
    '-'         shift, and go to state 60
    '+'         shift, and go to state 61
    '('         shift, and go to state 62

    primary_expression     go to state 64
    math_expression        go to state 90
    general_function_call  go to state 69
    function_call          go to state 70


State 61

    2 primary_expression: • POSINT
    3                   | • SCALAR
    4                   | • IDENTIFIER
    5                   | • STRING
    6                   | • KW_TRUE
    7                   | • KW_FALSE
    8                   | • '(' logic_expression ')'
    9 math_expression: • primary_expression
   10                | • '+' math_expression
   10                | '+' • math_expression
   11                | • '-' math_expression
   12                | • math_expression '+' math_expression
   13                | • math_expression '-' math_expression
   14                | • math_expression '*' math_expression
   15                | • math_expression '/' math_expression
   16                | • math_expression '%' math_expression
   17                | • math_expression OP_PAW math_expression
   18                | • IDENTIFIER '[' expression ']'
   19                | • IDENTIFIER '[' expression ']' '.' IDENTIFIER
   20                | • IDENTIFIER '[' expression ']' '.' IDENTIFIER '[' expression ']'
   21                | • general_function_call
   22                | • IDENTIFIER '.' IDENTIFIER '[' expression ']'
   23                | • IDENTIFIER '.' IDENTIFIER
   66 general_function_call: • function_call
   67                      | • IDENTIFIER '.' function_call
   68                      | • IDENTIFIER '[' expression ']' '.' function_call
   69 function_call: • IDENTIFIER '(' ')'
   70              | • IDENTIFIER '(' expr_comma_list ')'

    IDENTIFIER  shift, and go to state 53
    POSINT      shift, and go to state 54
    SCALAR      shift, and go to state 55
    STRING      shift, and go to state 56
    KW_TRUE     shift, and go to state 58
    KW_FALSE    shift, and go to state 59
    '-'         shift, and go to state 60
    '+'         shift, and go to state 61
    '('         shift, and go to state 62

    primary_expression     go to state 64
    math_expression        go to state 91
    general_function_call  go to state 69
    function_call          go to state 70


State 62

    2 primary_expression: • POSINT
    3                   | • SCALAR
    4                   | • IDENTIFIER
    5                   | • STRING
    6                   | • KW_TRUE
    7                   | • KW_FALSE
    8                   | • '(' logic_expression ')'
    8                   | '(' • logic_expression ')'
    9 math_expression: • primary_expression
   10                | • '+' math_expression
   11                | • '-' math_expression
   12                | • math_expression '+' math_expression
   13                | • math_expression '-' math_expression
   14                | • math_expression '*' math_expression
   15                | • math_expression '/' math_expression
   16                | • math_expression '%' math_expression
   17                | • math_expression OP_PAW math_expression
   18                | • IDENTIFIER '[' expression ']'
   19                | • IDENTIFIER '[' expression ']' '.' IDENTIFIER
   20                | • IDENTIFIER '[' expression ']' '.' IDENTIFIER '[' expression ']'
   21                | • general_function_call
   22                | • IDENTIFIER '.' IDENTIFIER '[' expression ']'
   23                | • IDENTIFIER '.' IDENTIFIER
   24 relational_expression: • math_expression
   25                      | • relational_expression OP_EQUALS relational_expression
   26                      | • relational_expression OP_NE relational_expression
   27                      | • relational_expression '>' relational_expression
   28                      | • relational_expression '<' relational_expression
   29                      | • relational_expression OP_LE relational_expression
   30                      | • relational_expression OP_GE relational_expression
   31 logic_expression: • relational_expression
   32                 | • OP_NOT logic_expression
   33                 | • logic_expression OP_AND logic_expression
   34                 | • logic_expression OP_OR logic_expression
   66 general_function_call: • function_call
   67                      | • IDENTIFIER '.' function_call
   68                      | • IDENTIFIER '[' expression ']' '.' function_call
   69 function_call: • IDENTIFIER '(' ')'
   70              | • IDENTIFIER '(' expr_comma_list ')'

    IDENTIFIER  shift, and go to state 53
    POSINT      shift, and go to state 54
    SCALAR      shift, and go to state 55
    STRING      shift, and go to state 56
    OP_NOT      shift, and go to state 57
    KW_TRUE     shift, and go to state 58
    KW_FALSE    shift, and go to state 59
    '-'         shift, and go to state 60
    '+'         shift, and go to state 61
    '('         shift, and go to state 62

    primary_expression     go to state 64
    math_expression        go to state 65
    relational_expression  go to state 66
    logic_expression       go to state 92
    general_function_call  go to state 69
    function_call          go to state 70


State 63

   50 constant_decl: KW_CONST IDENTIFIER '[' ']' • '=' expression ':' basic_data_type ';'

    '='  shift, and go to state 93


State 64

    9 math_expression: primary_expression •

    $default  reduce using rule 9 (math_expression)


State 65

   12 math_expression: math_expression • '+' math_expression
   13                | math_expression • '-' math_expression
   14                | math_expression • '*' math_expression
   15                | math_expression • '/' math_expression
   16                | math_expression • '%' math_expression
   17                | math_expression • OP_PAW math_expression
   24 relational_expression: math_expression •  [KW_FOR, OP_AND, OP_OR, OP_EQUALS, OP_NE, OP_LE, OP_GE, '>', '<', ')', ']', ',', ':', ';']

    OP_PAW  shift, and go to state 94
    '-'     shift, and go to state 95
    '+'     shift, and go to state 96
    '*'     shift, and go to state 97
    '/'     shift, and go to state 98
    '%'     shift, and go to state 99

    $default  reduce using rule 24 (relational_expression)


State 66

   25 relational_expression: relational_expression • OP_EQUALS relational_expression
   26                      | relational_expression • OP_NE relational_expression
   27                      | relational_expression • '>' relational_expression
   28                      | relational_expression • '<' relational_expression
   29                      | relational_expression • OP_LE relational_expression
   30                      | relational_expression • OP_GE relational_expression
   31 logic_expression: relational_expression •  [KW_FOR, OP_AND, OP_OR, ')', ']', ',', ':', ';']

    OP_EQUALS  shift, and go to state 100
    OP_NE      shift, and go to state 101
    OP_LE      shift, and go to state 102
    OP_GE      shift, and go to state 103
    '>'        shift, and go to state 104
    '<'        shift, and go to state 105

    $default  reduce using rule 31 (logic_expression)


State 67

   33 logic_expression: logic_expression • OP_AND logic_expression
   34                 | logic_expression • OP_OR logic_expression
   35 expression: logic_expression •  [KW_FOR, ')', ']', ',', ':', ';']

    OP_AND  shift, and go to state 106
    OP_OR   shift, and go to state 107

    $default  reduce using rule 35 (expression)


State 68

   49 constant_decl: KW_CONST IDENTIFIER '[' expression • ']' '=' expression ':' basic_data_type ';'

    ']'  shift, and go to state 108


State 69

   21 math_expression: general_function_call •

    $default  reduce using rule 21 (math_expression)


State 70

   66 general_function_call: function_call •

    $default  reduce using rule 66 (general_function_call)


State 71

   48 constant_decl: KW_CONST IDENTIFIER '=' expression • ':' basic_data_type ';'

    ':'  shift, and go to state 109


State 72

   43 identifier_single: IDENTIFIER '[' • POSINT ']'
   44                  | IDENTIFIER '[' • ']'

    POSINT  shift, and go to state 27
    ']'     shift, and go to state 110


State 73

   59 variable_decl: identifier_list ':' basic_data_type ';' •

    $default  reduce using rule 59 (variable_decl)


State 74

  100 function_definition: KW_DEF IDENTIFIER • '(' parameter_declaration_list ')' ':' local_var_const_decl_list function_command_list KW_ENDDEF ';'
  101                    | KW_DEF IDENTIFIER • '(' parameter_declaration_list ')' ':' local_var_const_decl function_command_list KW_ENDDEF ';'
  102                    | KW_DEF IDENTIFIER • '(' parameter_declaration_list ')' ':' function_command_list KW_ENDDEF ';'
  103                    | KW_DEF IDENTIFIER • '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl_list function_command_list KW_RETURN expression ';' KW_ENDDEF ';'
  104                    | KW_DEF IDENTIFIER • '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl function_command_list KW_RETURN expression ';' KW_ENDDEF ';'
  105                    | KW_DEF IDENTIFIER • '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' function_command_list KW_RETURN expression ';' KW_ENDDEF ';'

    '('  shift, and go to state 111


State 75

  189 main_unit: KW_DEF KW_MAIN • '(' ')' ':' local_var_const_decl_list function_command_list KW_ENDDEF ';'
  190          | KW_DEF KW_MAIN • '(' ')' ':' local_var_const_decl function_command_list KW_ENDDEF ';'
  191          | KW_DEF KW_MAIN • '(' ')' ':' function_command_list KW_ENDDEF ';'

    '('  shift, and go to state 112


State 76

   62 parameter_declaration: IDENTIFIER '[' ']' ':' basic_data_type •

    $default  reduce using rule 62 (parameter_declaration)


State 77

  178 comp_identifier_list: '#' IDENTIFIER •  [',', ':']
  179                     | '#' IDENTIFIER • '[' comp_expression ']'
  180                     | '#' IDENTIFIER • '[' ']'

    '['  shift, and go to state 113

    $default  reduce using rule 178 (comp_identifier_list)


State 78

  169 comp_function_definition: KW_DEF • IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl_list comp_command_list KW_ENDDEF ';'
  170                         | KW_DEF • IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl comp_command_list KW_ENDDEF ';'
  171                         | KW_DEF • IDENTIFIER '(' parameter_declaration_list ')' ':' comp_command_list KW_ENDDEF ';'
  172                         | KW_DEF • IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl_list comp_command_list KW_RETURN comp_expression ';' KW_ENDDEF ';'
  173                         | KW_DEF • IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' comp_command_list KW_RETURN comp_expression ';' KW_ENDDEF ';'
  174                         | KW_DEF • IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl comp_command_list KW_RETURN comp_expression ';' KW_ENDDEF ';'

    IDENTIFIER  shift, and go to state 114


State 79

  186 comp_definition: KW_COMP IDENTIFIER ':' comp_function_definition_list KW_ENDCOMP • ';'

    ';'  shift, and go to state 115


State 80

  168 comp_function_definition_list: comp_function_definition_list comp_function_definition •

    $default  reduce using rule 168 (comp_function_definition_list)


State 81

  168 comp_function_definition_list: comp_function_definition_list • comp_function_definition
  169 comp_function_definition: • KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl_list comp_command_list KW_ENDDEF ';'
  170                         | • KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl comp_command_list KW_ENDDEF ';'
  171                         | • KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' comp_command_list KW_ENDDEF ';'
  172                         | • KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl_list comp_command_list KW_RETURN comp_expression ';' KW_ENDDEF ';'
  173                         | • KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' comp_command_list KW_RETURN comp_expression ';' KW_ENDDEF ';'
  174                         | • KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl comp_command_list KW_RETURN comp_expression ';' KW_ENDDEF ';'
  184 comp_definition: KW_COMP IDENTIFIER ':' comp_var_decl_list comp_function_definition_list • KW_ENDCOMP ';'

    KW_DEF      shift, and go to state 78
    KW_ENDCOMP  shift, and go to state 116

    comp_function_definition  go to state 80


State 82

  176 comp_var_decl_list: comp_var_decl_list comp_var_decl •

    $default  reduce using rule 176 (comp_var_decl_list)


State 83

  168 comp_function_definition_list: comp_function_definition_list • comp_function_definition
  169 comp_function_definition: • KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl_list comp_command_list KW_ENDDEF ';'
  170                         | • KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl comp_command_list KW_ENDDEF ';'
  171                         | • KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' comp_command_list KW_ENDDEF ';'
  172                         | • KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl_list comp_command_list KW_RETURN comp_expression ';' KW_ENDDEF ';'
  173                         | • KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' comp_command_list KW_RETURN comp_expression ';' KW_ENDDEF ';'
  174                         | • KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl comp_command_list KW_RETURN comp_expression ';' KW_ENDDEF ';'
  185 comp_definition: KW_COMP IDENTIFIER ':' comp_var_decl comp_function_definition_list • KW_ENDCOMP ';'

    KW_DEF      shift, and go to state 78
    KW_ENDCOMP  shift, and go to state 117

    comp_function_definition  go to state 80


State 84

  181 comp_identifier_list: comp_identifier_list ',' • '#' IDENTIFIER
  182                     | comp_identifier_list ',' • '#' IDENTIFIER '[' comp_expression ']'
  183                     | comp_identifier_list ',' • '#' IDENTIFIER '[' ']'

    '#'  shift, and go to state 118


State 85

   36 basic_data_type: • KW_INTEGER
   37                | • KW_BOOLEAN
   38                | • KW_CHAR
   39                | • KW_SCALAR
   40                | • KW_STR
   41                | • IDENTIFIER
  177 comp_var_decl: comp_identifier_list ':' • basic_data_type ';'

    IDENTIFIER  shift, and go to state 29
    KW_BOOLEAN  shift, and go to state 30
    KW_STR      shift, and go to state 31
    KW_INTEGER  shift, and go to state 32
    KW_SCALAR   shift, and go to state 33
    KW_CHAR     shift, and go to state 34

    basic_data_type  go to state 119


State 86

    2 primary_expression: • POSINT
    3                   | • SCALAR
    4                   | • IDENTIFIER
    5                   | • STRING
    6                   | • KW_TRUE
    7                   | • KW_FALSE
    8                   | • '(' logic_expression ')'
    9 math_expression: • primary_expression
   10                | • '+' math_expression
   11                | • '-' math_expression
   12                | • math_expression '+' math_expression
   13                | • math_expression '-' math_expression
   14                | • math_expression '*' math_expression
   15                | • math_expression '/' math_expression
   16                | • math_expression '%' math_expression
   17                | • math_expression OP_PAW math_expression
   18                | • IDENTIFIER '[' expression ']'
   19                | • IDENTIFIER '[' expression ']' '.' IDENTIFIER
   20                | • IDENTIFIER '[' expression ']' '.' IDENTIFIER '[' expression ']'
   21                | • general_function_call
   22                | • IDENTIFIER '.' IDENTIFIER '[' expression ']'
   23                | • IDENTIFIER '.' IDENTIFIER
   24 relational_expression: • math_expression
   25                      | • relational_expression OP_EQUALS relational_expression
   26                      | • relational_expression OP_NE relational_expression
   27                      | • relational_expression '>' relational_expression
   28                      | • relational_expression '<' relational_expression
   29                      | • relational_expression OP_LE relational_expression
   30                      | • relational_expression OP_GE relational_expression
   31 logic_expression: • relational_expression
   32                 | • OP_NOT logic_expression
   33                 | • logic_expression OP_AND logic_expression
   34                 | • logic_expression OP_OR logic_expression
   35 expression: • logic_expression
   66 general_function_call: • function_call
   67                      | • IDENTIFIER '.' function_call
   68                      | • IDENTIFIER '[' expression ']' '.' function_call
   69 function_call: • IDENTIFIER '(' ')'
   69              | IDENTIFIER '(' • ')'
   70              | • IDENTIFIER '(' expr_comma_list ')'
   70              | IDENTIFIER '(' • expr_comma_list ')'
   71 expr_comma_list: • expression
   72                | • expr_comma_list ',' expression

    IDENTIFIER  shift, and go to state 53
    POSINT      shift, and go to state 54
    SCALAR      shift, and go to state 55
    STRING      shift, and go to state 56
    OP_NOT      shift, and go to state 57
    KW_TRUE     shift, and go to state 58
    KW_FALSE    shift, and go to state 59
    '-'         shift, and go to state 60
    '+'         shift, and go to state 61
    '('         shift, and go to state 62
    ')'         shift, and go to state 120

    primary_expression     go to state 64
    math_expression        go to state 65
    relational_expression  go to state 66
    logic_expression       go to state 67
    expression             go to state 121
    general_function_call  go to state 69
    function_call          go to state 70
    expr_comma_list        go to state 122


State 87

    2 primary_expression: • POSINT
    3                   | • SCALAR
    4                   | • IDENTIFIER
    5                   | • STRING
    6                   | • KW_TRUE
    7                   | • KW_FALSE
    8                   | • '(' logic_expression ')'
    9 math_expression: • primary_expression
   10                | • '+' math_expression
   11                | • '-' math_expression
   12                | • math_expression '+' math_expression
   13                | • math_expression '-' math_expression
   14                | • math_expression '*' math_expression
   15                | • math_expression '/' math_expression
   16                | • math_expression '%' math_expression
   17                | • math_expression OP_PAW math_expression
   18                | • IDENTIFIER '[' expression ']'
   18                | IDENTIFIER '[' • expression ']'
   19                | • IDENTIFIER '[' expression ']' '.' IDENTIFIER
   19                | IDENTIFIER '[' • expression ']' '.' IDENTIFIER
   20                | • IDENTIFIER '[' expression ']' '.' IDENTIFIER '[' expression ']'
   20                | IDENTIFIER '[' • expression ']' '.' IDENTIFIER '[' expression ']'
   21                | • general_function_call
   22                | • IDENTIFIER '.' IDENTIFIER '[' expression ']'
   23                | • IDENTIFIER '.' IDENTIFIER
   24 relational_expression: • math_expression
   25                      | • relational_expression OP_EQUALS relational_expression
   26                      | • relational_expression OP_NE relational_expression
   27                      | • relational_expression '>' relational_expression
   28                      | • relational_expression '<' relational_expression
   29                      | • relational_expression OP_LE relational_expression
   30                      | • relational_expression OP_GE relational_expression
   31 logic_expression: • relational_expression
   32                 | • OP_NOT logic_expression
   33                 | • logic_expression OP_AND logic_expression
   34                 | • logic_expression OP_OR logic_expression
   35 expression: • logic_expression
   66 general_function_call: • function_call
   67                      | • IDENTIFIER '.' function_call
   68                      | • IDENTIFIER '[' expression ']' '.' function_call
   68                      | IDENTIFIER '[' • expression ']' '.' function_call
   69 function_call: • IDENTIFIER '(' ')'
   70              | • IDENTIFIER '(' expr_comma_list ')'

    IDENTIFIER  shift, and go to state 53
    POSINT      shift, and go to state 54
    SCALAR      shift, and go to state 55
    STRING      shift, and go to state 56
    OP_NOT      shift, and go to state 57
    KW_TRUE     shift, and go to state 58
    KW_FALSE    shift, and go to state 59
    '-'         shift, and go to state 60
    '+'         shift, and go to state 61
    '('         shift, and go to state 62

    primary_expression     go to state 64
    math_expression        go to state 65
    relational_expression  go to state 66
    logic_expression       go to state 67
    expression             go to state 123
    general_function_call  go to state 69
    function_call          go to state 70


State 88

   22 math_expression: IDENTIFIER '.' • IDENTIFIER '[' expression ']'
   23                | IDENTIFIER '.' • IDENTIFIER
   67 general_function_call: IDENTIFIER '.' • function_call
   69 function_call: • IDENTIFIER '(' ')'
   70              | • IDENTIFIER '(' expr_comma_list ')'

    IDENTIFIER  shift, and go to state 124

    function_call  go to state 125


State 89

   32 logic_expression: OP_NOT logic_expression •  [KW_FOR, OP_AND, OP_OR, ')', ']', ',', ':', ';']
   33                 | logic_expression • OP_AND logic_expression
   34                 | logic_expression • OP_OR logic_expression

    $default  reduce using rule 32 (logic_expression)

    Conflict between rule 32 and token OP_AND resolved as reduce (OP_AND < OP_NOT).
    Conflict between rule 32 and token OP_OR resolved as reduce (OP_OR < OP_NOT).


State 90

   11 math_expression: '-' math_expression •  [KW_FOR, OP_AND, OP_OR, OP_EQUALS, OP_NE, OP_LE, OP_GE, '>', '<', '-', '+', ')', ']', ',', ':', ';']
   12                | math_expression • '+' math_expression
   13                | math_expression • '-' math_expression
   14                | math_expression • '*' math_expression
   15                | math_expression • '/' math_expression
   16                | math_expression • '%' math_expression
   17                | math_expression • OP_PAW math_expression

    OP_PAW  shift, and go to state 94
    '*'     shift, and go to state 97
    '/'     shift, and go to state 98
    '%'     shift, and go to state 99

    $default  reduce using rule 11 (math_expression)

    Conflict between rule 11 and token OP_PAW resolved as shift ('-' < OP_PAW).
    Conflict between rule 11 and token '-' resolved as reduce (%left '-').
    Conflict between rule 11 and token '+' resolved as reduce (%left '+').
    Conflict between rule 11 and token '*' resolved as shift ('-' < '*').
    Conflict between rule 11 and token '/' resolved as shift ('-' < '/').
    Conflict between rule 11 and token '%' resolved as shift ('-' < '%').


State 91

   10 math_expression: '+' math_expression •  [KW_FOR, OP_AND, OP_OR, OP_EQUALS, OP_NE, OP_LE, OP_GE, '>', '<', '-', '+', ')', ']', ',', ':', ';']
   12                | math_expression • '+' math_expression
   13                | math_expression • '-' math_expression
   14                | math_expression • '*' math_expression
   15                | math_expression • '/' math_expression
   16                | math_expression • '%' math_expression
   17                | math_expression • OP_PAW math_expression

    OP_PAW  shift, and go to state 94
    '*'     shift, and go to state 97
    '/'     shift, and go to state 98
    '%'     shift, and go to state 99

    $default  reduce using rule 10 (math_expression)

    Conflict between rule 10 and token OP_PAW resolved as shift ('+' < OP_PAW).
    Conflict between rule 10 and token '-' resolved as reduce (%left '-').
    Conflict between rule 10 and token '+' resolved as reduce (%left '+').
    Conflict between rule 10 and token '*' resolved as shift ('+' < '*').
    Conflict between rule 10 and token '/' resolved as shift ('+' < '/').
    Conflict between rule 10 and token '%' resolved as shift ('+' < '%').


State 92

    8 primary_expression: '(' logic_expression • ')'
   33 logic_expression: logic_expression • OP_AND logic_expression
   34                 | logic_expression • OP_OR logic_expression

    OP_AND  shift, and go to state 106
    OP_OR   shift, and go to state 107
    ')'     shift, and go to state 126


State 93

    2 primary_expression: • POSINT
    3                   | • SCALAR
    4                   | • IDENTIFIER
    5                   | • STRING
    6                   | • KW_TRUE
    7                   | • KW_FALSE
    8                   | • '(' logic_expression ')'
    9 math_expression: • primary_expression
   10                | • '+' math_expression
   11                | • '-' math_expression
   12                | • math_expression '+' math_expression
   13                | • math_expression '-' math_expression
   14                | • math_expression '*' math_expression
   15                | • math_expression '/' math_expression
   16                | • math_expression '%' math_expression
   17                | • math_expression OP_PAW math_expression
   18                | • IDENTIFIER '[' expression ']'
   19                | • IDENTIFIER '[' expression ']' '.' IDENTIFIER
   20                | • IDENTIFIER '[' expression ']' '.' IDENTIFIER '[' expression ']'
   21                | • general_function_call
   22                | • IDENTIFIER '.' IDENTIFIER '[' expression ']'
   23                | • IDENTIFIER '.' IDENTIFIER
   24 relational_expression: • math_expression
   25                      | • relational_expression OP_EQUALS relational_expression
   26                      | • relational_expression OP_NE relational_expression
   27                      | • relational_expression '>' relational_expression
   28                      | • relational_expression '<' relational_expression
   29                      | • relational_expression OP_LE relational_expression
   30                      | • relational_expression OP_GE relational_expression
   31 logic_expression: • relational_expression
   32                 | • OP_NOT logic_expression
   33                 | • logic_expression OP_AND logic_expression
   34                 | • logic_expression OP_OR logic_expression
   35 expression: • logic_expression
   50 constant_decl: KW_CONST IDENTIFIER '[' ']' '=' • expression ':' basic_data_type ';'
   66 general_function_call: • function_call
   67                      | • IDENTIFIER '.' function_call
   68                      | • IDENTIFIER '[' expression ']' '.' function_call
   69 function_call: • IDENTIFIER '(' ')'
   70              | • IDENTIFIER '(' expr_comma_list ')'

    IDENTIFIER  shift, and go to state 53
    POSINT      shift, and go to state 54
    SCALAR      shift, and go to state 55
    STRING      shift, and go to state 56
    OP_NOT      shift, and go to state 57
    KW_TRUE     shift, and go to state 58
    KW_FALSE    shift, and go to state 59
    '-'         shift, and go to state 60
    '+'         shift, and go to state 61
    '('         shift, and go to state 62

    primary_expression     go to state 64
    math_expression        go to state 65
    relational_expression  go to state 66
    logic_expression       go to state 67
    expression             go to state 127
    general_function_call  go to state 69
    function_call          go to state 70


State 94

    2 primary_expression: • POSINT
    3                   | • SCALAR
    4                   | • IDENTIFIER
    5                   | • STRING
    6                   | • KW_TRUE
    7                   | • KW_FALSE
    8                   | • '(' logic_expression ')'
    9 math_expression: • primary_expression
   10                | • '+' math_expression
   11                | • '-' math_expression
   12                | • math_expression '+' math_expression
   13                | • math_expression '-' math_expression
   14                | • math_expression '*' math_expression
   15                | • math_expression '/' math_expression
   16                | • math_expression '%' math_expression
   17                | • math_expression OP_PAW math_expression
   17                | math_expression OP_PAW • math_expression
   18                | • IDENTIFIER '[' expression ']'
   19                | • IDENTIFIER '[' expression ']' '.' IDENTIFIER
   20                | • IDENTIFIER '[' expression ']' '.' IDENTIFIER '[' expression ']'
   21                | • general_function_call
   22                | • IDENTIFIER '.' IDENTIFIER '[' expression ']'
   23                | • IDENTIFIER '.' IDENTIFIER
   66 general_function_call: • function_call
   67                      | • IDENTIFIER '.' function_call
   68                      | • IDENTIFIER '[' expression ']' '.' function_call
   69 function_call: • IDENTIFIER '(' ')'
   70              | • IDENTIFIER '(' expr_comma_list ')'

    IDENTIFIER  shift, and go to state 53
    POSINT      shift, and go to state 54
    SCALAR      shift, and go to state 55
    STRING      shift, and go to state 56
    KW_TRUE     shift, and go to state 58
    KW_FALSE    shift, and go to state 59
    '-'         shift, and go to state 60
    '+'         shift, and go to state 61
    '('         shift, and go to state 62

    primary_expression     go to state 64
    math_expression        go to state 128
    general_function_call  go to state 69
    function_call          go to state 70


State 95

    2 primary_expression: • POSINT
    3                   | • SCALAR
    4                   | • IDENTIFIER
    5                   | • STRING
    6                   | • KW_TRUE
    7                   | • KW_FALSE
    8                   | • '(' logic_expression ')'
    9 math_expression: • primary_expression
   10                | • '+' math_expression
   11                | • '-' math_expression
   12                | • math_expression '+' math_expression
   13                | • math_expression '-' math_expression
   13                | math_expression '-' • math_expression
   14                | • math_expression '*' math_expression
   15                | • math_expression '/' math_expression
   16                | • math_expression '%' math_expression
   17                | • math_expression OP_PAW math_expression
   18                | • IDENTIFIER '[' expression ']'
   19                | • IDENTIFIER '[' expression ']' '.' IDENTIFIER
   20                | • IDENTIFIER '[' expression ']' '.' IDENTIFIER '[' expression ']'
   21                | • general_function_call
   22                | • IDENTIFIER '.' IDENTIFIER '[' expression ']'
   23                | • IDENTIFIER '.' IDENTIFIER
   66 general_function_call: • function_call
   67                      | • IDENTIFIER '.' function_call
   68                      | • IDENTIFIER '[' expression ']' '.' function_call
   69 function_call: • IDENTIFIER '(' ')'
   70              | • IDENTIFIER '(' expr_comma_list ')'

    IDENTIFIER  shift, and go to state 53
    POSINT      shift, and go to state 54
    SCALAR      shift, and go to state 55
    STRING      shift, and go to state 56
    KW_TRUE     shift, and go to state 58
    KW_FALSE    shift, and go to state 59
    '-'         shift, and go to state 60
    '+'         shift, and go to state 61
    '('         shift, and go to state 62

    primary_expression     go to state 64
    math_expression        go to state 129
    general_function_call  go to state 69
    function_call          go to state 70


State 96

    2 primary_expression: • POSINT
    3                   | • SCALAR
    4                   | • IDENTIFIER
    5                   | • STRING
    6                   | • KW_TRUE
    7                   | • KW_FALSE
    8                   | • '(' logic_expression ')'
    9 math_expression: • primary_expression
   10                | • '+' math_expression
   11                | • '-' math_expression
   12                | • math_expression '+' math_expression
   12                | math_expression '+' • math_expression
   13                | • math_expression '-' math_expression
   14                | • math_expression '*' math_expression
   15                | • math_expression '/' math_expression
   16                | • math_expression '%' math_expression
   17                | • math_expression OP_PAW math_expression
   18                | • IDENTIFIER '[' expression ']'
   19                | • IDENTIFIER '[' expression ']' '.' IDENTIFIER
   20                | • IDENTIFIER '[' expression ']' '.' IDENTIFIER '[' expression ']'
   21                | • general_function_call
   22                | • IDENTIFIER '.' IDENTIFIER '[' expression ']'
   23                | • IDENTIFIER '.' IDENTIFIER
   66 general_function_call: • function_call
   67                      | • IDENTIFIER '.' function_call
   68                      | • IDENTIFIER '[' expression ']' '.' function_call
   69 function_call: • IDENTIFIER '(' ')'
   70              | • IDENTIFIER '(' expr_comma_list ')'

    IDENTIFIER  shift, and go to state 53
    POSINT      shift, and go to state 54
    SCALAR      shift, and go to state 55
    STRING      shift, and go to state 56
    KW_TRUE     shift, and go to state 58
    KW_FALSE    shift, and go to state 59
    '-'         shift, and go to state 60
    '+'         shift, and go to state 61
    '('         shift, and go to state 62

    primary_expression     go to state 64
    math_expression        go to state 130
    general_function_call  go to state 69
    function_call          go to state 70


State 97

    2 primary_expression: • POSINT
    3                   | • SCALAR
    4                   | • IDENTIFIER
    5                   | • STRING
    6                   | • KW_TRUE
    7                   | • KW_FALSE
    8                   | • '(' logic_expression ')'
    9 math_expression: • primary_expression
   10                | • '+' math_expression
   11                | • '-' math_expression
   12                | • math_expression '+' math_expression
   13                | • math_expression '-' math_expression
   14                | • math_expression '*' math_expression
   14                | math_expression '*' • math_expression
   15                | • math_expression '/' math_expression
   16                | • math_expression '%' math_expression
   17                | • math_expression OP_PAW math_expression
   18                | • IDENTIFIER '[' expression ']'
   19                | • IDENTIFIER '[' expression ']' '.' IDENTIFIER
   20                | • IDENTIFIER '[' expression ']' '.' IDENTIFIER '[' expression ']'
   21                | • general_function_call
   22                | • IDENTIFIER '.' IDENTIFIER '[' expression ']'
   23                | • IDENTIFIER '.' IDENTIFIER
   66 general_function_call: • function_call
   67                      | • IDENTIFIER '.' function_call
   68                      | • IDENTIFIER '[' expression ']' '.' function_call
   69 function_call: • IDENTIFIER '(' ')'
   70              | • IDENTIFIER '(' expr_comma_list ')'

    IDENTIFIER  shift, and go to state 53
    POSINT      shift, and go to state 54
    SCALAR      shift, and go to state 55
    STRING      shift, and go to state 56
    KW_TRUE     shift, and go to state 58
    KW_FALSE    shift, and go to state 59
    '-'         shift, and go to state 60
    '+'         shift, and go to state 61
    '('         shift, and go to state 62

    primary_expression     go to state 64
    math_expression        go to state 131
    general_function_call  go to state 69
    function_call          go to state 70


State 98

    2 primary_expression: • POSINT
    3                   | • SCALAR
    4                   | • IDENTIFIER
    5                   | • STRING
    6                   | • KW_TRUE
    7                   | • KW_FALSE
    8                   | • '(' logic_expression ')'
    9 math_expression: • primary_expression
   10                | • '+' math_expression
   11                | • '-' math_expression
   12                | • math_expression '+' math_expression
   13                | • math_expression '-' math_expression
   14                | • math_expression '*' math_expression
   15                | • math_expression '/' math_expression
   15                | math_expression '/' • math_expression
   16                | • math_expression '%' math_expression
   17                | • math_expression OP_PAW math_expression
   18                | • IDENTIFIER '[' expression ']'
   19                | • IDENTIFIER '[' expression ']' '.' IDENTIFIER
   20                | • IDENTIFIER '[' expression ']' '.' IDENTIFIER '[' expression ']'
   21                | • general_function_call
   22                | • IDENTIFIER '.' IDENTIFIER '[' expression ']'
   23                | • IDENTIFIER '.' IDENTIFIER
   66 general_function_call: • function_call
   67                      | • IDENTIFIER '.' function_call
   68                      | • IDENTIFIER '[' expression ']' '.' function_call
   69 function_call: • IDENTIFIER '(' ')'
   70              | • IDENTIFIER '(' expr_comma_list ')'

    IDENTIFIER  shift, and go to state 53
    POSINT      shift, and go to state 54
    SCALAR      shift, and go to state 55
    STRING      shift, and go to state 56
    KW_TRUE     shift, and go to state 58
    KW_FALSE    shift, and go to state 59
    '-'         shift, and go to state 60
    '+'         shift, and go to state 61
    '('         shift, and go to state 62

    primary_expression     go to state 64
    math_expression        go to state 132
    general_function_call  go to state 69
    function_call          go to state 70


State 99

    2 primary_expression: • POSINT
    3                   | • SCALAR
    4                   | • IDENTIFIER
    5                   | • STRING
    6                   | • KW_TRUE
    7                   | • KW_FALSE
    8                   | • '(' logic_expression ')'
    9 math_expression: • primary_expression
   10                | • '+' math_expression
   11                | • '-' math_expression
   12                | • math_expression '+' math_expression
   13                | • math_expression '-' math_expression
   14                | • math_expression '*' math_expression
   15                | • math_expression '/' math_expression
   16                | • math_expression '%' math_expression
   16                | math_expression '%' • math_expression
   17                | • math_expression OP_PAW math_expression
   18                | • IDENTIFIER '[' expression ']'
   19                | • IDENTIFIER '[' expression ']' '.' IDENTIFIER
   20                | • IDENTIFIER '[' expression ']' '.' IDENTIFIER '[' expression ']'
   21                | • general_function_call
   22                | • IDENTIFIER '.' IDENTIFIER '[' expression ']'
   23                | • IDENTIFIER '.' IDENTIFIER
   66 general_function_call: • function_call
   67                      | • IDENTIFIER '.' function_call
   68                      | • IDENTIFIER '[' expression ']' '.' function_call
   69 function_call: • IDENTIFIER '(' ')'
   70              | • IDENTIFIER '(' expr_comma_list ')'

    IDENTIFIER  shift, and go to state 53
    POSINT      shift, and go to state 54
    SCALAR      shift, and go to state 55
    STRING      shift, and go to state 56
    KW_TRUE     shift, and go to state 58
    KW_FALSE    shift, and go to state 59
    '-'         shift, and go to state 60
    '+'         shift, and go to state 61
    '('         shift, and go to state 62

    primary_expression     go to state 64
    math_expression        go to state 133
    general_function_call  go to state 69
    function_call          go to state 70


State 100

    2 primary_expression: • POSINT
    3                   | • SCALAR
    4                   | • IDENTIFIER
    5                   | • STRING
    6                   | • KW_TRUE
    7                   | • KW_FALSE
    8                   | • '(' logic_expression ')'
    9 math_expression: • primary_expression
   10                | • '+' math_expression
   11                | • '-' math_expression
   12                | • math_expression '+' math_expression
   13                | • math_expression '-' math_expression
   14                | • math_expression '*' math_expression
   15                | • math_expression '/' math_expression
   16                | • math_expression '%' math_expression
   17                | • math_expression OP_PAW math_expression
   18                | • IDENTIFIER '[' expression ']'
   19                | • IDENTIFIER '[' expression ']' '.' IDENTIFIER
   20                | • IDENTIFIER '[' expression ']' '.' IDENTIFIER '[' expression ']'
   21                | • general_function_call
   22                | • IDENTIFIER '.' IDENTIFIER '[' expression ']'
   23                | • IDENTIFIER '.' IDENTIFIER
   24 relational_expression: • math_expression
   25                      | • relational_expression OP_EQUALS relational_expression
   25                      | relational_expression OP_EQUALS • relational_expression
   26                      | • relational_expression OP_NE relational_expression
   27                      | • relational_expression '>' relational_expression
   28                      | • relational_expression '<' relational_expression
   29                      | • relational_expression OP_LE relational_expression
   30                      | • relational_expression OP_GE relational_expression
   66 general_function_call: • function_call
   67                      | • IDENTIFIER '.' function_call
   68                      | • IDENTIFIER '[' expression ']' '.' function_call
   69 function_call: • IDENTIFIER '(' ')'
   70              | • IDENTIFIER '(' expr_comma_list ')'

    IDENTIFIER  shift, and go to state 53
    POSINT      shift, and go to state 54
    SCALAR      shift, and go to state 55
    STRING      shift, and go to state 56
    KW_TRUE     shift, and go to state 58
    KW_FALSE    shift, and go to state 59
    '-'         shift, and go to state 60
    '+'         shift, and go to state 61
    '('         shift, and go to state 62

    primary_expression     go to state 64
    math_expression        go to state 65
    relational_expression  go to state 134
    general_function_call  go to state 69
    function_call          go to state 70


State 101

    2 primary_expression: • POSINT
    3                   | • SCALAR
    4                   | • IDENTIFIER
    5                   | • STRING
    6                   | • KW_TRUE
    7                   | • KW_FALSE
    8                   | • '(' logic_expression ')'
    9 math_expression: • primary_expression
   10                | • '+' math_expression
   11                | • '-' math_expression
   12                | • math_expression '+' math_expression
   13                | • math_expression '-' math_expression
   14                | • math_expression '*' math_expression
   15                | • math_expression '/' math_expression
   16                | • math_expression '%' math_expression
   17                | • math_expression OP_PAW math_expression
   18                | • IDENTIFIER '[' expression ']'
   19                | • IDENTIFIER '[' expression ']' '.' IDENTIFIER
   20                | • IDENTIFIER '[' expression ']' '.' IDENTIFIER '[' expression ']'
   21                | • general_function_call
   22                | • IDENTIFIER '.' IDENTIFIER '[' expression ']'
   23                | • IDENTIFIER '.' IDENTIFIER
   24 relational_expression: • math_expression
   25                      | • relational_expression OP_EQUALS relational_expression
   26                      | • relational_expression OP_NE relational_expression
   26                      | relational_expression OP_NE • relational_expression
   27                      | • relational_expression '>' relational_expression
   28                      | • relational_expression '<' relational_expression
   29                      | • relational_expression OP_LE relational_expression
   30                      | • relational_expression OP_GE relational_expression
   66 general_function_call: • function_call
   67                      | • IDENTIFIER '.' function_call
   68                      | • IDENTIFIER '[' expression ']' '.' function_call
   69 function_call: • IDENTIFIER '(' ')'
   70              | • IDENTIFIER '(' expr_comma_list ')'

    IDENTIFIER  shift, and go to state 53
    POSINT      shift, and go to state 54
    SCALAR      shift, and go to state 55
    STRING      shift, and go to state 56
    KW_TRUE     shift, and go to state 58
    KW_FALSE    shift, and go to state 59
    '-'         shift, and go to state 60
    '+'         shift, and go to state 61
    '('         shift, and go to state 62

    primary_expression     go to state 64
    math_expression        go to state 65
    relational_expression  go to state 135
    general_function_call  go to state 69
    function_call          go to state 70


State 102

    2 primary_expression: • POSINT
    3                   | • SCALAR
    4                   | • IDENTIFIER
    5                   | • STRING
    6                   | • KW_TRUE
    7                   | • KW_FALSE
    8                   | • '(' logic_expression ')'
    9 math_expression: • primary_expression
   10                | • '+' math_expression
   11                | • '-' math_expression
   12                | • math_expression '+' math_expression
   13                | • math_expression '-' math_expression
   14                | • math_expression '*' math_expression
   15                | • math_expression '/' math_expression
   16                | • math_expression '%' math_expression
   17                | • math_expression OP_PAW math_expression
   18                | • IDENTIFIER '[' expression ']'
   19                | • IDENTIFIER '[' expression ']' '.' IDENTIFIER
   20                | • IDENTIFIER '[' expression ']' '.' IDENTIFIER '[' expression ']'
   21                | • general_function_call
   22                | • IDENTIFIER '.' IDENTIFIER '[' expression ']'
   23                | • IDENTIFIER '.' IDENTIFIER
   24 relational_expression: • math_expression
   25                      | • relational_expression OP_EQUALS relational_expression
   26                      | • relational_expression OP_NE relational_expression
   27                      | • relational_expression '>' relational_expression
   28                      | • relational_expression '<' relational_expression
   29                      | • relational_expression OP_LE relational_expression
   29                      | relational_expression OP_LE • relational_expression
   30                      | • relational_expression OP_GE relational_expression
   66 general_function_call: • function_call
   67                      | • IDENTIFIER '.' function_call
   68                      | • IDENTIFIER '[' expression ']' '.' function_call
   69 function_call: • IDENTIFIER '(' ')'
   70              | • IDENTIFIER '(' expr_comma_list ')'

    IDENTIFIER  shift, and go to state 53
    POSINT      shift, and go to state 54
    SCALAR      shift, and go to state 55
    STRING      shift, and go to state 56
    KW_TRUE     shift, and go to state 58
    KW_FALSE    shift, and go to state 59
    '-'         shift, and go to state 60
    '+'         shift, and go to state 61
    '('         shift, and go to state 62

    primary_expression     go to state 64
    math_expression        go to state 65
    relational_expression  go to state 136
    general_function_call  go to state 69
    function_call          go to state 70


State 103

    2 primary_expression: • POSINT
    3                   | • SCALAR
    4                   | • IDENTIFIER
    5                   | • STRING
    6                   | • KW_TRUE
    7                   | • KW_FALSE
    8                   | • '(' logic_expression ')'
    9 math_expression: • primary_expression
   10                | • '+' math_expression
   11                | • '-' math_expression
   12                | • math_expression '+' math_expression
   13                | • math_expression '-' math_expression
   14                | • math_expression '*' math_expression
   15                | • math_expression '/' math_expression
   16                | • math_expression '%' math_expression
   17                | • math_expression OP_PAW math_expression
   18                | • IDENTIFIER '[' expression ']'
   19                | • IDENTIFIER '[' expression ']' '.' IDENTIFIER
   20                | • IDENTIFIER '[' expression ']' '.' IDENTIFIER '[' expression ']'
   21                | • general_function_call
   22                | • IDENTIFIER '.' IDENTIFIER '[' expression ']'
   23                | • IDENTIFIER '.' IDENTIFIER
   24 relational_expression: • math_expression
   25                      | • relational_expression OP_EQUALS relational_expression
   26                      | • relational_expression OP_NE relational_expression
   27                      | • relational_expression '>' relational_expression
   28                      | • relational_expression '<' relational_expression
   29                      | • relational_expression OP_LE relational_expression
   30                      | • relational_expression OP_GE relational_expression
   30                      | relational_expression OP_GE • relational_expression
   66 general_function_call: • function_call
   67                      | • IDENTIFIER '.' function_call
   68                      | • IDENTIFIER '[' expression ']' '.' function_call
   69 function_call: • IDENTIFIER '(' ')'
   70              | • IDENTIFIER '(' expr_comma_list ')'

    IDENTIFIER  shift, and go to state 53
    POSINT      shift, and go to state 54
    SCALAR      shift, and go to state 55
    STRING      shift, and go to state 56
    KW_TRUE     shift, and go to state 58
    KW_FALSE    shift, and go to state 59
    '-'         shift, and go to state 60
    '+'         shift, and go to state 61
    '('         shift, and go to state 62

    primary_expression     go to state 64
    math_expression        go to state 65
    relational_expression  go to state 137
    general_function_call  go to state 69
    function_call          go to state 70


State 104

    2 primary_expression: • POSINT
    3                   | • SCALAR
    4                   | • IDENTIFIER
    5                   | • STRING
    6                   | • KW_TRUE
    7                   | • KW_FALSE
    8                   | • '(' logic_expression ')'
    9 math_expression: • primary_expression
   10                | • '+' math_expression
   11                | • '-' math_expression
   12                | • math_expression '+' math_expression
   13                | • math_expression '-' math_expression
   14                | • math_expression '*' math_expression
   15                | • math_expression '/' math_expression
   16                | • math_expression '%' math_expression
   17                | • math_expression OP_PAW math_expression
   18                | • IDENTIFIER '[' expression ']'
   19                | • IDENTIFIER '[' expression ']' '.' IDENTIFIER
   20                | • IDENTIFIER '[' expression ']' '.' IDENTIFIER '[' expression ']'
   21                | • general_function_call
   22                | • IDENTIFIER '.' IDENTIFIER '[' expression ']'
   23                | • IDENTIFIER '.' IDENTIFIER
   24 relational_expression: • math_expression
   25                      | • relational_expression OP_EQUALS relational_expression
   26                      | • relational_expression OP_NE relational_expression
   27                      | • relational_expression '>' relational_expression
   27                      | relational_expression '>' • relational_expression
   28                      | • relational_expression '<' relational_expression
   29                      | • relational_expression OP_LE relational_expression
   30                      | • relational_expression OP_GE relational_expression
   66 general_function_call: • function_call
   67                      | • IDENTIFIER '.' function_call
   68                      | • IDENTIFIER '[' expression ']' '.' function_call
   69 function_call: • IDENTIFIER '(' ')'
   70              | • IDENTIFIER '(' expr_comma_list ')'

    IDENTIFIER  shift, and go to state 53
    POSINT      shift, and go to state 54
    SCALAR      shift, and go to state 55
    STRING      shift, and go to state 56
    KW_TRUE     shift, and go to state 58
    KW_FALSE    shift, and go to state 59
    '-'         shift, and go to state 60
    '+'         shift, and go to state 61
    '('         shift, and go to state 62

    primary_expression     go to state 64
    math_expression        go to state 65
    relational_expression  go to state 138
    general_function_call  go to state 69
    function_call          go to state 70


State 105

    2 primary_expression: • POSINT
    3                   | • SCALAR
    4                   | • IDENTIFIER
    5                   | • STRING
    6                   | • KW_TRUE
    7                   | • KW_FALSE
    8                   | • '(' logic_expression ')'
    9 math_expression: • primary_expression
   10                | • '+' math_expression
   11                | • '-' math_expression
   12                | • math_expression '+' math_expression
   13                | • math_expression '-' math_expression
   14                | • math_expression '*' math_expression
   15                | • math_expression '/' math_expression
   16                | • math_expression '%' math_expression
   17                | • math_expression OP_PAW math_expression
   18                | • IDENTIFIER '[' expression ']'
   19                | • IDENTIFIER '[' expression ']' '.' IDENTIFIER
   20                | • IDENTIFIER '[' expression ']' '.' IDENTIFIER '[' expression ']'
   21                | • general_function_call
   22                | • IDENTIFIER '.' IDENTIFIER '[' expression ']'
   23                | • IDENTIFIER '.' IDENTIFIER
   24 relational_expression: • math_expression
   25                      | • relational_expression OP_EQUALS relational_expression
   26                      | • relational_expression OP_NE relational_expression
   27                      | • relational_expression '>' relational_expression
   28                      | • relational_expression '<' relational_expression
   28                      | relational_expression '<' • relational_expression
   29                      | • relational_expression OP_LE relational_expression
   30                      | • relational_expression OP_GE relational_expression
   66 general_function_call: • function_call
   67                      | • IDENTIFIER '.' function_call
   68                      | • IDENTIFIER '[' expression ']' '.' function_call
   69 function_call: • IDENTIFIER '(' ')'
   70              | • IDENTIFIER '(' expr_comma_list ')'

    IDENTIFIER  shift, and go to state 53
    POSINT      shift, and go to state 54
    SCALAR      shift, and go to state 55
    STRING      shift, and go to state 56
    KW_TRUE     shift, and go to state 58
    KW_FALSE    shift, and go to state 59
    '-'         shift, and go to state 60
    '+'         shift, and go to state 61
    '('         shift, and go to state 62

    primary_expression     go to state 64
    math_expression        go to state 65
    relational_expression  go to state 139
    general_function_call  go to state 69
    function_call          go to state 70


State 106

    2 primary_expression: • POSINT
    3                   | • SCALAR
    4                   | • IDENTIFIER
    5                   | • STRING
    6                   | • KW_TRUE
    7                   | • KW_FALSE
    8                   | • '(' logic_expression ')'
    9 math_expression: • primary_expression
   10                | • '+' math_expression
   11                | • '-' math_expression
   12                | • math_expression '+' math_expression
   13                | • math_expression '-' math_expression
   14                | • math_expression '*' math_expression
   15                | • math_expression '/' math_expression
   16                | • math_expression '%' math_expression
   17                | • math_expression OP_PAW math_expression
   18                | • IDENTIFIER '[' expression ']'
   19                | • IDENTIFIER '[' expression ']' '.' IDENTIFIER
   20                | • IDENTIFIER '[' expression ']' '.' IDENTIFIER '[' expression ']'
   21                | • general_function_call
   22                | • IDENTIFIER '.' IDENTIFIER '[' expression ']'
   23                | • IDENTIFIER '.' IDENTIFIER
   24 relational_expression: • math_expression
   25                      | • relational_expression OP_EQUALS relational_expression
   26                      | • relational_expression OP_NE relational_expression
   27                      | • relational_expression '>' relational_expression
   28                      | • relational_expression '<' relational_expression
   29                      | • relational_expression OP_LE relational_expression
   30                      | • relational_expression OP_GE relational_expression
   31 logic_expression: • relational_expression
   32                 | • OP_NOT logic_expression
   33                 | • logic_expression OP_AND logic_expression
   33                 | logic_expression OP_AND • logic_expression
   34                 | • logic_expression OP_OR logic_expression
   66 general_function_call: • function_call
   67                      | • IDENTIFIER '.' function_call
   68                      | • IDENTIFIER '[' expression ']' '.' function_call
   69 function_call: • IDENTIFIER '(' ')'
   70              | • IDENTIFIER '(' expr_comma_list ')'

    IDENTIFIER  shift, and go to state 53
    POSINT      shift, and go to state 54
    SCALAR      shift, and go to state 55
    STRING      shift, and go to state 56
    OP_NOT      shift, and go to state 57
    KW_TRUE     shift, and go to state 58
    KW_FALSE    shift, and go to state 59
    '-'         shift, and go to state 60
    '+'         shift, and go to state 61
    '('         shift, and go to state 62

    primary_expression     go to state 64
    math_expression        go to state 65
    relational_expression  go to state 66
    logic_expression       go to state 140
    general_function_call  go to state 69
    function_call          go to state 70


State 107

    2 primary_expression: • POSINT
    3                   | • SCALAR
    4                   | • IDENTIFIER
    5                   | • STRING
    6                   | • KW_TRUE
    7                   | • KW_FALSE
    8                   | • '(' logic_expression ')'
    9 math_expression: • primary_expression
   10                | • '+' math_expression
   11                | • '-' math_expression
   12                | • math_expression '+' math_expression
   13                | • math_expression '-' math_expression
   14                | • math_expression '*' math_expression
   15                | • math_expression '/' math_expression
   16                | • math_expression '%' math_expression
   17                | • math_expression OP_PAW math_expression
   18                | • IDENTIFIER '[' expression ']'
   19                | • IDENTIFIER '[' expression ']' '.' IDENTIFIER
   20                | • IDENTIFIER '[' expression ']' '.' IDENTIFIER '[' expression ']'
   21                | • general_function_call
   22                | • IDENTIFIER '.' IDENTIFIER '[' expression ']'
   23                | • IDENTIFIER '.' IDENTIFIER
   24 relational_expression: • math_expression
   25                      | • relational_expression OP_EQUALS relational_expression
   26                      | • relational_expression OP_NE relational_expression
   27                      | • relational_expression '>' relational_expression
   28                      | • relational_expression '<' relational_expression
   29                      | • relational_expression OP_LE relational_expression
   30                      | • relational_expression OP_GE relational_expression
   31 logic_expression: • relational_expression
   32                 | • OP_NOT logic_expression
   33                 | • logic_expression OP_AND logic_expression
   34                 | • logic_expression OP_OR logic_expression
   34                 | logic_expression OP_OR • logic_expression
   66 general_function_call: • function_call
   67                      | • IDENTIFIER '.' function_call
   68                      | • IDENTIFIER '[' expression ']' '.' function_call
   69 function_call: • IDENTIFIER '(' ')'
   70              | • IDENTIFIER '(' expr_comma_list ')'

    IDENTIFIER  shift, and go to state 53
    POSINT      shift, and go to state 54
    SCALAR      shift, and go to state 55
    STRING      shift, and go to state 56
    OP_NOT      shift, and go to state 57
    KW_TRUE     shift, and go to state 58
    KW_FALSE    shift, and go to state 59
    '-'         shift, and go to state 60
    '+'         shift, and go to state 61
    '('         shift, and go to state 62

    primary_expression     go to state 64
    math_expression        go to state 65
    relational_expression  go to state 66
    logic_expression       go to state 141
    general_function_call  go to state 69
    function_call          go to state 70


State 108

   49 constant_decl: KW_CONST IDENTIFIER '[' expression ']' • '=' expression ':' basic_data_type ';'

    '='  shift, and go to state 142


State 109

   36 basic_data_type: • KW_INTEGER
   37                | • KW_BOOLEAN
   38                | • KW_CHAR
   39                | • KW_SCALAR
   40                | • KW_STR
   41                | • IDENTIFIER
   48 constant_decl: KW_CONST IDENTIFIER '=' expression ':' • basic_data_type ';'

    IDENTIFIER  shift, and go to state 29
    KW_BOOLEAN  shift, and go to state 30
    KW_STR      shift, and go to state 31
    KW_INTEGER  shift, and go to state 32
    KW_SCALAR   shift, and go to state 33
    KW_CHAR     shift, and go to state 34

    basic_data_type  go to state 143


State 110

   44 identifier_single: IDENTIFIER '[' ']' •

    $default  reduce using rule 44 (identifier_single)


State 111

   61 parameter_declaration: • IDENTIFIER ':' basic_data_type
   62                      | • IDENTIFIER '[' ']' ':' basic_data_type
   63 parameter_declaration_list: ε •  [')', ',']
   64                           | • parameter_declaration
   65                           | • parameter_declaration_list ',' parameter_declaration
  100 function_definition: KW_DEF IDENTIFIER '(' • parameter_declaration_list ')' ':' local_var_const_decl_list function_command_list KW_ENDDEF ';'
  101                    | KW_DEF IDENTIFIER '(' • parameter_declaration_list ')' ':' local_var_const_decl function_command_list KW_ENDDEF ';'
  102                    | KW_DEF IDENTIFIER '(' • parameter_declaration_list ')' ':' function_command_list KW_ENDDEF ';'
  103                    | KW_DEF IDENTIFIER '(' • parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl_list function_command_list KW_RETURN expression ';' KW_ENDDEF ';'
  104                    | KW_DEF IDENTIFIER '(' • parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl function_command_list KW_RETURN expression ';' KW_ENDDEF ';'
  105                    | KW_DEF IDENTIFIER '(' • parameter_declaration_list ')' '-' '>' basic_data_type ':' function_command_list KW_RETURN expression ';' KW_ENDDEF ';'

    IDENTIFIER  shift, and go to state 144

    $default  reduce using rule 63 (parameter_declaration_list)

    parameter_declaration       go to state 145
    parameter_declaration_list  go to state 146


State 112

  189 main_unit: KW_DEF KW_MAIN '(' • ')' ':' local_var_const_decl_list function_command_list KW_ENDDEF ';'
  190          | KW_DEF KW_MAIN '(' • ')' ':' local_var_const_decl function_command_list KW_ENDDEF ';'
  191          | KW_DEF KW_MAIN '(' • ')' ':' function_command_list KW_ENDDEF ';'

    ')'  shift, and go to state 147


State 113

  111 comp_function_call: • IDENTIFIER '(' ')'
  112                   | • IDENTIFIER '(' comp_expr_comma_list ')'
  113 general_comp_function_call: • comp_function_call
  114                           | • '#' IDENTIFIER '.' comp_function_call
  115                           | • '#' IDENTIFIER '[' comp_expression ']' '.' comp_function_call
  118 comp_primary_expression: • POSINT
  119                        | • SCALAR
  120                        | • '#' IDENTIFIER
  121                        | • IDENTIFIER
  122                        | • STRING
  123                        | • KW_TRUE
  124                        | • KW_FALSE
  125                        | • '(' logic_expression ')'
  126 comp_math_expression: • comp_primary_expression
  127                     | • '+' comp_math_expression
  128                     | • '-' comp_math_expression
  129                     | • comp_math_expression '+' comp_math_expression
  130                     | • comp_math_expression '-' comp_math_expression
  131                     | • comp_math_expression '*' comp_math_expression
  132                     | • comp_math_expression '/' comp_math_expression
  133                     | • comp_math_expression '%' comp_math_expression
  134                     | • comp_math_expression OP_PAW comp_math_expression
  135                     | • '#' IDENTIFIER '[' comp_expression ']'
  136                     | • '#' IDENTIFIER '[' comp_expression ']' '.' '#' IDENTIFIER
  137                     | • '#' IDENTIFIER '[' comp_expression ']' '.' '#' IDENTIFIER '[' comp_expression ']'
  138                     | • general_comp_function_call
  139                     | • '#' IDENTIFIER '.' '#' IDENTIFIER '[' comp_expression ']'
  140                     | • '#' IDENTIFIER '.' '#' IDENTIFIER
  141 comp_relational_expression: • comp_math_expression
  142                           | • comp_relational_expression OP_EQUALS comp_relational_expression
  143                           | • comp_relational_expression OP_NE comp_relational_expression
  144                           | • comp_relational_expression '>' comp_relational_expression
  145                           | • comp_relational_expression '<' comp_relational_expression
  146                           | • comp_relational_expression OP_LE comp_relational_expression
  147                           | • comp_relational_expression OP_GE comp_relational_expression
  148 comp_logic_expression: • comp_relational_expression
  149                      | • OP_NOT comp_logic_expression
  150                      | • comp_logic_expression OP_AND comp_logic_expression
  151                      | • comp_logic_expression OP_OR comp_logic_expression
  152 comp_expression: • comp_logic_expression
  179 comp_identifier_list: '#' IDENTIFIER '[' • comp_expression ']'
  180                     | '#' IDENTIFIER '[' • ']'

    IDENTIFIER  shift, and go to state 148
    POSINT      shift, and go to state 149
    SCALAR      shift, and go to state 150
    STRING      shift, and go to state 151
    OP_NOT      shift, and go to state 152
    KW_TRUE     shift, and go to state 153
    KW_FALSE    shift, and go to state 154
    '-'         shift, and go to state 155
    '+'         shift, and go to state 156
    '#'         shift, and go to state 157
    '('         shift, and go to state 158
    ']'         shift, and go to state 159

    comp_function_call          go to state 160
    general_comp_function_call  go to state 161
    comp_primary_expression     go to state 162
    comp_math_expression        go to state 163
    comp_relational_expression  go to state 164
    comp_logic_expression       go to state 165
    comp_expression             go to state 166


State 114

  169 comp_function_definition: KW_DEF IDENTIFIER • '(' parameter_declaration_list ')' ':' local_var_const_decl_list comp_command_list KW_ENDDEF ';'
  170                         | KW_DEF IDENTIFIER • '(' parameter_declaration_list ')' ':' local_var_const_decl comp_command_list KW_ENDDEF ';'
  171                         | KW_DEF IDENTIFIER • '(' parameter_declaration_list ')' ':' comp_command_list KW_ENDDEF ';'
  172                         | KW_DEF IDENTIFIER • '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl_list comp_command_list KW_RETURN comp_expression ';' KW_ENDDEF ';'
  173                         | KW_DEF IDENTIFIER • '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' comp_command_list KW_RETURN comp_expression ';' KW_ENDDEF ';'
  174                         | KW_DEF IDENTIFIER • '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl comp_command_list KW_RETURN comp_expression ';' KW_ENDDEF ';'

    '('  shift, and go to state 167


State 115

  186 comp_definition: KW_COMP IDENTIFIER ':' comp_function_definition_list KW_ENDCOMP ';' •

    $default  reduce using rule 186 (comp_definition)


State 116

  184 comp_definition: KW_COMP IDENTIFIER ':' comp_var_decl_list comp_function_definition_list KW_ENDCOMP • ';'

    ';'  shift, and go to state 168


State 117

  185 comp_definition: KW_COMP IDENTIFIER ':' comp_var_decl comp_function_definition_list KW_ENDCOMP • ';'

    ';'  shift, and go to state 169


State 118

  181 comp_identifier_list: comp_identifier_list ',' '#' • IDENTIFIER
  182                     | comp_identifier_list ',' '#' • IDENTIFIER '[' comp_expression ']'
  183                     | comp_identifier_list ',' '#' • IDENTIFIER '[' ']'

    IDENTIFIER  shift, and go to state 170


State 119

  177 comp_var_decl: comp_identifier_list ':' basic_data_type • ';'

    ';'  shift, and go to state 171


State 120

   69 function_call: IDENTIFIER '(' ')' •

    $default  reduce using rule 69 (function_call)


State 121

   71 expr_comma_list: expression •

    $default  reduce using rule 71 (expr_comma_list)


State 122

   70 function_call: IDENTIFIER '(' expr_comma_list • ')'
   72 expr_comma_list: expr_comma_list • ',' expression

    ')'  shift, and go to state 172
    ','  shift, and go to state 173


State 123

   18 math_expression: IDENTIFIER '[' expression • ']'
   19                | IDENTIFIER '[' expression • ']' '.' IDENTIFIER
   20                | IDENTIFIER '[' expression • ']' '.' IDENTIFIER '[' expression ']'
   68 general_function_call: IDENTIFIER '[' expression • ']' '.' function_call

    ']'  shift, and go to state 174


State 124

   22 math_expression: IDENTIFIER '.' IDENTIFIER • '[' expression ']'
   23                | IDENTIFIER '.' IDENTIFIER •  [KW_FOR, OP_AND, OP_OR, OP_PAW, OP_EQUALS, OP_NE, OP_LE, OP_GE, '>', '<', '-', '+', '*', '/', '%', ')', ']', ',', ':', ';']
   69 function_call: IDENTIFIER • '(' ')'
   70              | IDENTIFIER • '(' expr_comma_list ')'

    '('  shift, and go to state 86
    '['  shift, and go to state 175

    $default  reduce using rule 23 (math_expression)


State 125

   67 general_function_call: IDENTIFIER '.' function_call •

    $default  reduce using rule 67 (general_function_call)


State 126

    8 primary_expression: '(' logic_expression ')' •

    $default  reduce using rule 8 (primary_expression)


State 127

   50 constant_decl: KW_CONST IDENTIFIER '[' ']' '=' expression • ':' basic_data_type ';'

    ':'  shift, and go to state 176


State 128

   12 math_expression: math_expression • '+' math_expression
   13                | math_expression • '-' math_expression
   14                | math_expression • '*' math_expression
   15                | math_expression • '/' math_expression
   16                | math_expression • '%' math_expression
   17                | math_expression • OP_PAW math_expression
   17                | math_expression OP_PAW math_expression •  [KW_FOR, OP_AND, OP_OR, OP_PAW, OP_EQUALS, OP_NE, OP_LE, OP_GE, '>', '<', '-', '+', '*', '/', '%', ')', ']', ',', ':', ';']

    $default  reduce using rule 17 (math_expression)

    Conflict between rule 17 and token OP_PAW resolved as reduce (%left OP_PAW).
    Conflict between rule 17 and token '-' resolved as reduce ('-' < OP_PAW).
    Conflict between rule 17 and token '+' resolved as reduce ('+' < OP_PAW).
    Conflict between rule 17 and token '*' resolved as reduce ('*' < OP_PAW).
    Conflict between rule 17 and token '/' resolved as reduce ('/' < OP_PAW).
    Conflict between rule 17 and token '%' resolved as reduce ('%' < OP_PAW).


State 129

   12 math_expression: math_expression • '+' math_expression
   13                | math_expression • '-' math_expression
   13                | math_expression '-' math_expression •  [KW_FOR, OP_AND, OP_OR, OP_EQUALS, OP_NE, OP_LE, OP_GE, '>', '<', '-', '+', ')', ']', ',', ':', ';']
   14                | math_expression • '*' math_expression
   15                | math_expression • '/' math_expression
   16                | math_expression • '%' math_expression
   17                | math_expression • OP_PAW math_expression

    OP_PAW  shift, and go to state 94
    '*'     shift, and go to state 97
    '/'     shift, and go to state 98
    '%'     shift, and go to state 99

    $default  reduce using rule 13 (math_expression)

    Conflict between rule 13 and token OP_PAW resolved as shift ('-' < OP_PAW).
    Conflict between rule 13 and token '-' resolved as reduce (%left '-').
    Conflict between rule 13 and token '+' resolved as reduce (%left '+').
    Conflict between rule 13 and token '*' resolved as shift ('-' < '*').
    Conflict between rule 13 and token '/' resolved as shift ('-' < '/').
    Conflict between rule 13 and token '%' resolved as shift ('-' < '%').


State 130

   12 math_expression: math_expression • '+' math_expression
   12                | math_expression '+' math_expression •  [KW_FOR, OP_AND, OP_OR, OP_EQUALS, OP_NE, OP_LE, OP_GE, '>', '<', '-', '+', ')', ']', ',', ':', ';']
   13                | math_expression • '-' math_expression
   14                | math_expression • '*' math_expression
   15                | math_expression • '/' math_expression
   16                | math_expression • '%' math_expression
   17                | math_expression • OP_PAW math_expression

    OP_PAW  shift, and go to state 94
    '*'     shift, and go to state 97
    '/'     shift, and go to state 98
    '%'     shift, and go to state 99

    $default  reduce using rule 12 (math_expression)

    Conflict between rule 12 and token OP_PAW resolved as shift ('+' < OP_PAW).
    Conflict between rule 12 and token '-' resolved as reduce (%left '-').
    Conflict between rule 12 and token '+' resolved as reduce (%left '+').
    Conflict between rule 12 and token '*' resolved as shift ('+' < '*').
    Conflict between rule 12 and token '/' resolved as shift ('+' < '/').
    Conflict between rule 12 and token '%' resolved as shift ('+' < '%').


State 131

   12 math_expression: math_expression • '+' math_expression
   13                | math_expression • '-' math_expression
   14                | math_expression • '*' math_expression
   14                | math_expression '*' math_expression •  [KW_FOR, OP_AND, OP_OR, OP_EQUALS, OP_NE, OP_LE, OP_GE, '>', '<', '-', '+', '*', '/', '%', ')', ']', ',', ':', ';']
   15                | math_expression • '/' math_expression
   16                | math_expression • '%' math_expression
   17                | math_expression • OP_PAW math_expression

    OP_PAW  shift, and go to state 94

    $default  reduce using rule 14 (math_expression)

    Conflict between rule 14 and token OP_PAW resolved as shift ('*' < OP_PAW).
    Conflict between rule 14 and token '-' resolved as reduce ('-' < '*').
    Conflict between rule 14 and token '+' resolved as reduce ('+' < '*').
    Conflict between rule 14 and token '*' resolved as reduce (%left '*').
    Conflict between rule 14 and token '/' resolved as reduce (%left '/').
    Conflict between rule 14 and token '%' resolved as reduce (%left '%').


State 132

   12 math_expression: math_expression • '+' math_expression
   13                | math_expression • '-' math_expression
   14                | math_expression • '*' math_expression
   15                | math_expression • '/' math_expression
   15                | math_expression '/' math_expression •  [KW_FOR, OP_AND, OP_OR, OP_EQUALS, OP_NE, OP_LE, OP_GE, '>', '<', '-', '+', '*', '/', '%', ')', ']', ',', ':', ';']
   16                | math_expression • '%' math_expression
   17                | math_expression • OP_PAW math_expression

    OP_PAW  shift, and go to state 94

    $default  reduce using rule 15 (math_expression)

    Conflict between rule 15 and token OP_PAW resolved as shift ('/' < OP_PAW).
    Conflict between rule 15 and token '-' resolved as reduce ('-' < '/').
    Conflict between rule 15 and token '+' resolved as reduce ('+' < '/').
    Conflict between rule 15 and token '*' resolved as reduce (%left '*').
    Conflict between rule 15 and token '/' resolved as reduce (%left '/').
    Conflict between rule 15 and token '%' resolved as reduce (%left '%').


State 133

   12 math_expression: math_expression • '+' math_expression
   13                | math_expression • '-' math_expression
   14                | math_expression • '*' math_expression
   15                | math_expression • '/' math_expression
   16                | math_expression • '%' math_expression
   16                | math_expression '%' math_expression •  [KW_FOR, OP_AND, OP_OR, OP_EQUALS, OP_NE, OP_LE, OP_GE, '>', '<', '-', '+', '*', '/', '%', ')', ']', ',', ':', ';']
   17                | math_expression • OP_PAW math_expression

    OP_PAW  shift, and go to state 94

    $default  reduce using rule 16 (math_expression)

    Conflict between rule 16 and token OP_PAW resolved as shift ('%' < OP_PAW).
    Conflict between rule 16 and token '-' resolved as reduce ('-' < '%').
    Conflict between rule 16 and token '+' resolved as reduce ('+' < '%').
    Conflict between rule 16 and token '*' resolved as reduce (%left '*').
    Conflict between rule 16 and token '/' resolved as reduce (%left '/').
    Conflict between rule 16 and token '%' resolved as reduce (%left '%').


State 134

   25 relational_expression: relational_expression • OP_EQUALS relational_expression
   25                      | relational_expression OP_EQUALS relational_expression •  [KW_FOR, OP_AND, OP_OR, OP_EQUALS, OP_NE, ')', ']', ',', ':', ';']
   26                      | relational_expression • OP_NE relational_expression
   27                      | relational_expression • '>' relational_expression
   28                      | relational_expression • '<' relational_expression
   29                      | relational_expression • OP_LE relational_expression
   30                      | relational_expression • OP_GE relational_expression

    OP_LE  shift, and go to state 102
    OP_GE  shift, and go to state 103
    '>'    shift, and go to state 104
    '<'    shift, and go to state 105

    $default  reduce using rule 25 (relational_expression)

    Conflict between rule 25 and token OP_EQUALS resolved as reduce (%left OP_EQUALS).
    Conflict between rule 25 and token OP_NE resolved as reduce (%left OP_NE).
    Conflict between rule 25 and token OP_LE resolved as shift (OP_EQUALS < OP_LE).
    Conflict between rule 25 and token OP_GE resolved as shift (OP_EQUALS < OP_GE).
    Conflict between rule 25 and token '>' resolved as shift (OP_EQUALS < '>').
    Conflict between rule 25 and token '<' resolved as shift (OP_EQUALS < '<').


State 135

   25 relational_expression: relational_expression • OP_EQUALS relational_expression
   26                      | relational_expression • OP_NE relational_expression
   26                      | relational_expression OP_NE relational_expression •  [KW_FOR, OP_AND, OP_OR, OP_EQUALS, OP_NE, ')', ']', ',', ':', ';']
   27                      | relational_expression • '>' relational_expression
   28                      | relational_expression • '<' relational_expression
   29                      | relational_expression • OP_LE relational_expression
   30                      | relational_expression • OP_GE relational_expression

    OP_LE  shift, and go to state 102
    OP_GE  shift, and go to state 103
    '>'    shift, and go to state 104
    '<'    shift, and go to state 105

    $default  reduce using rule 26 (relational_expression)

    Conflict between rule 26 and token OP_EQUALS resolved as reduce (%left OP_EQUALS).
    Conflict between rule 26 and token OP_NE resolved as reduce (%left OP_NE).
    Conflict between rule 26 and token OP_LE resolved as shift (OP_NE < OP_LE).
    Conflict between rule 26 and token OP_GE resolved as shift (OP_NE < OP_GE).
    Conflict between rule 26 and token '>' resolved as shift (OP_NE < '>').
    Conflict between rule 26 and token '<' resolved as shift (OP_NE < '<').


State 136

   25 relational_expression: relational_expression • OP_EQUALS relational_expression
   26                      | relational_expression • OP_NE relational_expression
   27                      | relational_expression • '>' relational_expression
   28                      | relational_expression • '<' relational_expression
   29                      | relational_expression • OP_LE relational_expression
   29                      | relational_expression OP_LE relational_expression •  [KW_FOR, OP_AND, OP_OR, OP_EQUALS, OP_NE, OP_LE, OP_GE, '>', '<', ')', ']', ',', ':', ';']
   30                      | relational_expression • OP_GE relational_expression

    $default  reduce using rule 29 (relational_expression)

    Conflict between rule 29 and token OP_EQUALS resolved as reduce (OP_EQUALS < OP_LE).
    Conflict between rule 29 and token OP_NE resolved as reduce (OP_NE < OP_LE).
    Conflict between rule 29 and token OP_LE resolved as reduce (%left OP_LE).
    Conflict between rule 29 and token OP_GE resolved as reduce (%left OP_GE).
    Conflict between rule 29 and token '>' resolved as reduce (%left '>').
    Conflict between rule 29 and token '<' resolved as reduce (%left '<').


State 137

   25 relational_expression: relational_expression • OP_EQUALS relational_expression
   26                      | relational_expression • OP_NE relational_expression
   27                      | relational_expression • '>' relational_expression
   28                      | relational_expression • '<' relational_expression
   29                      | relational_expression • OP_LE relational_expression
   30                      | relational_expression • OP_GE relational_expression
   30                      | relational_expression OP_GE relational_expression •  [KW_FOR, OP_AND, OP_OR, OP_EQUALS, OP_NE, OP_LE, OP_GE, '>', '<', ')', ']', ',', ':', ';']

    $default  reduce using rule 30 (relational_expression)

    Conflict between rule 30 and token OP_EQUALS resolved as reduce (OP_EQUALS < OP_GE).
    Conflict between rule 30 and token OP_NE resolved as reduce (OP_NE < OP_GE).
    Conflict between rule 30 and token OP_LE resolved as reduce (%left OP_LE).
    Conflict between rule 30 and token OP_GE resolved as reduce (%left OP_GE).
    Conflict between rule 30 and token '>' resolved as reduce (%left '>').
    Conflict between rule 30 and token '<' resolved as reduce (%left '<').


State 138

   25 relational_expression: relational_expression • OP_EQUALS relational_expression
   26                      | relational_expression • OP_NE relational_expression
   27                      | relational_expression • '>' relational_expression
   27                      | relational_expression '>' relational_expression •  [KW_FOR, OP_AND, OP_OR, OP_EQUALS, OP_NE, OP_LE, OP_GE, '>', '<', ')', ']', ',', ':', ';']
   28                      | relational_expression • '<' relational_expression
   29                      | relational_expression • OP_LE relational_expression
   30                      | relational_expression • OP_GE relational_expression

    $default  reduce using rule 27 (relational_expression)

    Conflict between rule 27 and token OP_EQUALS resolved as reduce (OP_EQUALS < '>').
    Conflict between rule 27 and token OP_NE resolved as reduce (OP_NE < '>').
    Conflict between rule 27 and token OP_LE resolved as reduce (%left OP_LE).
    Conflict between rule 27 and token OP_GE resolved as reduce (%left OP_GE).
    Conflict between rule 27 and token '>' resolved as reduce (%left '>').
    Conflict between rule 27 and token '<' resolved as reduce (%left '<').


State 139

   25 relational_expression: relational_expression • OP_EQUALS relational_expression
   26                      | relational_expression • OP_NE relational_expression
   27                      | relational_expression • '>' relational_expression
   28                      | relational_expression • '<' relational_expression
   28                      | relational_expression '<' relational_expression •  [KW_FOR, OP_AND, OP_OR, OP_EQUALS, OP_NE, OP_LE, OP_GE, '>', '<', ')', ']', ',', ':', ';']
   29                      | relational_expression • OP_LE relational_expression
   30                      | relational_expression • OP_GE relational_expression

    $default  reduce using rule 28 (relational_expression)

    Conflict between rule 28 and token OP_EQUALS resolved as reduce (OP_EQUALS < '<').
    Conflict between rule 28 and token OP_NE resolved as reduce (OP_NE < '<').
    Conflict between rule 28 and token OP_LE resolved as reduce (%left OP_LE).
    Conflict between rule 28 and token OP_GE resolved as reduce (%left OP_GE).
    Conflict between rule 28 and token '>' resolved as reduce (%left '>').
    Conflict between rule 28 and token '<' resolved as reduce (%left '<').


State 140

   33 logic_expression: logic_expression • OP_AND logic_expression
   33                 | logic_expression OP_AND logic_expression •  [KW_FOR, OP_AND, OP_OR, ')', ']', ',', ':', ';']
   34                 | logic_expression • OP_OR logic_expression

    $default  reduce using rule 33 (logic_expression)

    Conflict between rule 33 and token OP_AND resolved as reduce (%left OP_AND).
    Conflict between rule 33 and token OP_OR resolved as reduce (OP_OR < OP_AND).


State 141

   33 logic_expression: logic_expression • OP_AND logic_expression
   34                 | logic_expression • OP_OR logic_expression
   34                 | logic_expression OP_OR logic_expression •  [KW_FOR, OP_OR, ')', ']', ',', ':', ';']

    OP_AND  shift, and go to state 106

    $default  reduce using rule 34 (logic_expression)

    Conflict between rule 34 and token OP_AND resolved as shift (OP_OR < OP_AND).
    Conflict between rule 34 and token OP_OR resolved as reduce (%left OP_OR).


State 142

    2 primary_expression: • POSINT
    3                   | • SCALAR
    4                   | • IDENTIFIER
    5                   | • STRING
    6                   | • KW_TRUE
    7                   | • KW_FALSE
    8                   | • '(' logic_expression ')'
    9 math_expression: • primary_expression
   10                | • '+' math_expression
   11                | • '-' math_expression
   12                | • math_expression '+' math_expression
   13                | • math_expression '-' math_expression
   14                | • math_expression '*' math_expression
   15                | • math_expression '/' math_expression
   16                | • math_expression '%' math_expression
   17                | • math_expression OP_PAW math_expression
   18                | • IDENTIFIER '[' expression ']'
   19                | • IDENTIFIER '[' expression ']' '.' IDENTIFIER
   20                | • IDENTIFIER '[' expression ']' '.' IDENTIFIER '[' expression ']'
   21                | • general_function_call
   22                | • IDENTIFIER '.' IDENTIFIER '[' expression ']'
   23                | • IDENTIFIER '.' IDENTIFIER
   24 relational_expression: • math_expression
   25                      | • relational_expression OP_EQUALS relational_expression
   26                      | • relational_expression OP_NE relational_expression
   27                      | • relational_expression '>' relational_expression
   28                      | • relational_expression '<' relational_expression
   29                      | • relational_expression OP_LE relational_expression
   30                      | • relational_expression OP_GE relational_expression
   31 logic_expression: • relational_expression
   32                 | • OP_NOT logic_expression
   33                 | • logic_expression OP_AND logic_expression
   34                 | • logic_expression OP_OR logic_expression
   35 expression: • logic_expression
   49 constant_decl: KW_CONST IDENTIFIER '[' expression ']' '=' • expression ':' basic_data_type ';'
   66 general_function_call: • function_call
   67                      | • IDENTIFIER '.' function_call
   68                      | • IDENTIFIER '[' expression ']' '.' function_call
   69 function_call: • IDENTIFIER '(' ')'
   70              | • IDENTIFIER '(' expr_comma_list ')'

    IDENTIFIER  shift, and go to state 53
    POSINT      shift, and go to state 54
    SCALAR      shift, and go to state 55
    STRING      shift, and go to state 56
    OP_NOT      shift, and go to state 57
    KW_TRUE     shift, and go to state 58
    KW_FALSE    shift, and go to state 59
    '-'         shift, and go to state 60
    '+'         shift, and go to state 61
    '('         shift, and go to state 62

    primary_expression     go to state 64
    math_expression        go to state 65
    relational_expression  go to state 66
    logic_expression       go to state 67
    expression             go to state 177
    general_function_call  go to state 69
    function_call          go to state 70


State 143

   48 constant_decl: KW_CONST IDENTIFIER '=' expression ':' basic_data_type • ';'

    ';'  shift, and go to state 178


State 144

   61 parameter_declaration: IDENTIFIER • ':' basic_data_type
   62                      | IDENTIFIER • '[' ']' ':' basic_data_type

    '['  shift, and go to state 179
    ':'  shift, and go to state 16


State 145

   64 parameter_declaration_list: parameter_declaration •

    $default  reduce using rule 64 (parameter_declaration_list)


State 146

   65 parameter_declaration_list: parameter_declaration_list • ',' parameter_declaration
  100 function_definition: KW_DEF IDENTIFIER '(' parameter_declaration_list • ')' ':' local_var_const_decl_list function_command_list KW_ENDDEF ';'
  101                    | KW_DEF IDENTIFIER '(' parameter_declaration_list • ')' ':' local_var_const_decl function_command_list KW_ENDDEF ';'
  102                    | KW_DEF IDENTIFIER '(' parameter_declaration_list • ')' ':' function_command_list KW_ENDDEF ';'
  103                    | KW_DEF IDENTIFIER '(' parameter_declaration_list • ')' '-' '>' basic_data_type ':' local_var_const_decl_list function_command_list KW_RETURN expression ';' KW_ENDDEF ';'
  104                    | KW_DEF IDENTIFIER '(' parameter_declaration_list • ')' '-' '>' basic_data_type ':' local_var_const_decl function_command_list KW_RETURN expression ';' KW_ENDDEF ';'
  105                    | KW_DEF IDENTIFIER '(' parameter_declaration_list • ')' '-' '>' basic_data_type ':' function_command_list KW_RETURN expression ';' KW_ENDDEF ';'

    ')'  shift, and go to state 180
    ','  shift, and go to state 181


State 147

  189 main_unit: KW_DEF KW_MAIN '(' ')' • ':' local_var_const_decl_list function_command_list KW_ENDDEF ';'
  190          | KW_DEF KW_MAIN '(' ')' • ':' local_var_const_decl function_command_list KW_ENDDEF ';'
  191          | KW_DEF KW_MAIN '(' ')' • ':' function_command_list KW_ENDDEF ';'

    ':'  shift, and go to state 182


State 148

  111 comp_function_call: IDENTIFIER • '(' ')'
  112                   | IDENTIFIER • '(' comp_expr_comma_list ')'
  121 comp_primary_expression: IDENTIFIER •  [KW_FOR, OP_AND, OP_OR, OP_PAW, OP_EQUALS, OP_NE, OP_LE, OP_GE, '>', '<', '-', '+', '*', '/', '%', ')', ']', ',', ':', ';']

    '('  shift, and go to state 183

    $default  reduce using rule 121 (comp_primary_expression)


State 149

  118 comp_primary_expression: POSINT •

    $default  reduce using rule 118 (comp_primary_expression)


State 150

  119 comp_primary_expression: SCALAR •

    $default  reduce using rule 119 (comp_primary_expression)


State 151

  122 comp_primary_expression: STRING •

    $default  reduce using rule 122 (comp_primary_expression)


State 152

  111 comp_function_call: • IDENTIFIER '(' ')'
  112                   | • IDENTIFIER '(' comp_expr_comma_list ')'
  113 general_comp_function_call: • comp_function_call
  114                           | • '#' IDENTIFIER '.' comp_function_call
  115                           | • '#' IDENTIFIER '[' comp_expression ']' '.' comp_function_call
  118 comp_primary_expression: • POSINT
  119                        | • SCALAR
  120                        | • '#' IDENTIFIER
  121                        | • IDENTIFIER
  122                        | • STRING
  123                        | • KW_TRUE
  124                        | • KW_FALSE
  125                        | • '(' logic_expression ')'
  126 comp_math_expression: • comp_primary_expression
  127                     | • '+' comp_math_expression
  128                     | • '-' comp_math_expression
  129                     | • comp_math_expression '+' comp_math_expression
  130                     | • comp_math_expression '-' comp_math_expression
  131                     | • comp_math_expression '*' comp_math_expression
  132                     | • comp_math_expression '/' comp_math_expression
  133                     | • comp_math_expression '%' comp_math_expression
  134                     | • comp_math_expression OP_PAW comp_math_expression
  135                     | • '#' IDENTIFIER '[' comp_expression ']'
  136                     | • '#' IDENTIFIER '[' comp_expression ']' '.' '#' IDENTIFIER
  137                     | • '#' IDENTIFIER '[' comp_expression ']' '.' '#' IDENTIFIER '[' comp_expression ']'
  138                     | • general_comp_function_call
  139                     | • '#' IDENTIFIER '.' '#' IDENTIFIER '[' comp_expression ']'
  140                     | • '#' IDENTIFIER '.' '#' IDENTIFIER
  141 comp_relational_expression: • comp_math_expression
  142                           | • comp_relational_expression OP_EQUALS comp_relational_expression
  143                           | • comp_relational_expression OP_NE comp_relational_expression
  144                           | • comp_relational_expression '>' comp_relational_expression
  145                           | • comp_relational_expression '<' comp_relational_expression
  146                           | • comp_relational_expression OP_LE comp_relational_expression
  147                           | • comp_relational_expression OP_GE comp_relational_expression
  148 comp_logic_expression: • comp_relational_expression
  149                      | • OP_NOT comp_logic_expression
  149                      | OP_NOT • comp_logic_expression
  150                      | • comp_logic_expression OP_AND comp_logic_expression
  151                      | • comp_logic_expression OP_OR comp_logic_expression

    IDENTIFIER  shift, and go to state 148
    POSINT      shift, and go to state 149
    SCALAR      shift, and go to state 150
    STRING      shift, and go to state 151
    OP_NOT      shift, and go to state 152
    KW_TRUE     shift, and go to state 153
    KW_FALSE    shift, and go to state 154
    '-'         shift, and go to state 155
    '+'         shift, and go to state 156
    '#'         shift, and go to state 157
    '('         shift, and go to state 158

    comp_function_call          go to state 160
    general_comp_function_call  go to state 161
    comp_primary_expression     go to state 162
    comp_math_expression        go to state 163
    comp_relational_expression  go to state 164
    comp_logic_expression       go to state 184


State 153

  123 comp_primary_expression: KW_TRUE •

    $default  reduce using rule 123 (comp_primary_expression)


State 154

  124 comp_primary_expression: KW_FALSE •

    $default  reduce using rule 124 (comp_primary_expression)


State 155

  111 comp_function_call: • IDENTIFIER '(' ')'
  112                   | • IDENTIFIER '(' comp_expr_comma_list ')'
  113 general_comp_function_call: • comp_function_call
  114                           | • '#' IDENTIFIER '.' comp_function_call
  115                           | • '#' IDENTIFIER '[' comp_expression ']' '.' comp_function_call
  118 comp_primary_expression: • POSINT
  119                        | • SCALAR
  120                        | • '#' IDENTIFIER
  121                        | • IDENTIFIER
  122                        | • STRING
  123                        | • KW_TRUE
  124                        | • KW_FALSE
  125                        | • '(' logic_expression ')'
  126 comp_math_expression: • comp_primary_expression
  127                     | • '+' comp_math_expression
  128                     | • '-' comp_math_expression
  128                     | '-' • comp_math_expression
  129                     | • comp_math_expression '+' comp_math_expression
  130                     | • comp_math_expression '-' comp_math_expression
  131                     | • comp_math_expression '*' comp_math_expression
  132                     | • comp_math_expression '/' comp_math_expression
  133                     | • comp_math_expression '%' comp_math_expression
  134                     | • comp_math_expression OP_PAW comp_math_expression
  135                     | • '#' IDENTIFIER '[' comp_expression ']'
  136                     | • '#' IDENTIFIER '[' comp_expression ']' '.' '#' IDENTIFIER
  137                     | • '#' IDENTIFIER '[' comp_expression ']' '.' '#' IDENTIFIER '[' comp_expression ']'
  138                     | • general_comp_function_call
  139                     | • '#' IDENTIFIER '.' '#' IDENTIFIER '[' comp_expression ']'
  140                     | • '#' IDENTIFIER '.' '#' IDENTIFIER

    IDENTIFIER  shift, and go to state 148
    POSINT      shift, and go to state 149
    SCALAR      shift, and go to state 150
    STRING      shift, and go to state 151
    KW_TRUE     shift, and go to state 153
    KW_FALSE    shift, and go to state 154
    '-'         shift, and go to state 155
    '+'         shift, and go to state 156
    '#'         shift, and go to state 157
    '('         shift, and go to state 158

    comp_function_call          go to state 160
    general_comp_function_call  go to state 161
    comp_primary_expression     go to state 162
    comp_math_expression        go to state 185


State 156

  111 comp_function_call: • IDENTIFIER '(' ')'
  112                   | • IDENTIFIER '(' comp_expr_comma_list ')'
  113 general_comp_function_call: • comp_function_call
  114                           | • '#' IDENTIFIER '.' comp_function_call
  115                           | • '#' IDENTIFIER '[' comp_expression ']' '.' comp_function_call
  118 comp_primary_expression: • POSINT
  119                        | • SCALAR
  120                        | • '#' IDENTIFIER
  121                        | • IDENTIFIER
  122                        | • STRING
  123                        | • KW_TRUE
  124                        | • KW_FALSE
  125                        | • '(' logic_expression ')'
  126 comp_math_expression: • comp_primary_expression
  127                     | • '+' comp_math_expression
  127                     | '+' • comp_math_expression
  128                     | • '-' comp_math_expression
  129                     | • comp_math_expression '+' comp_math_expression
  130                     | • comp_math_expression '-' comp_math_expression
  131                     | • comp_math_expression '*' comp_math_expression
  132                     | • comp_math_expression '/' comp_math_expression
  133                     | • comp_math_expression '%' comp_math_expression
  134                     | • comp_math_expression OP_PAW comp_math_expression
  135                     | • '#' IDENTIFIER '[' comp_expression ']'
  136                     | • '#' IDENTIFIER '[' comp_expression ']' '.' '#' IDENTIFIER
  137                     | • '#' IDENTIFIER '[' comp_expression ']' '.' '#' IDENTIFIER '[' comp_expression ']'
  138                     | • general_comp_function_call
  139                     | • '#' IDENTIFIER '.' '#' IDENTIFIER '[' comp_expression ']'
  140                     | • '#' IDENTIFIER '.' '#' IDENTIFIER

    IDENTIFIER  shift, and go to state 148
    POSINT      shift, and go to state 149
    SCALAR      shift, and go to state 150
    STRING      shift, and go to state 151
    KW_TRUE     shift, and go to state 153
    KW_FALSE    shift, and go to state 154
    '-'         shift, and go to state 155
    '+'         shift, and go to state 156
    '#'         shift, and go to state 157
    '('         shift, and go to state 158

    comp_function_call          go to state 160
    general_comp_function_call  go to state 161
    comp_primary_expression     go to state 162
    comp_math_expression        go to state 186


State 157

  114 general_comp_function_call: '#' • IDENTIFIER '.' comp_function_call
  115                           | '#' • IDENTIFIER '[' comp_expression ']' '.' comp_function_call
  120 comp_primary_expression: '#' • IDENTIFIER
  135 comp_math_expression: '#' • IDENTIFIER '[' comp_expression ']'
  136                     | '#' • IDENTIFIER '[' comp_expression ']' '.' '#' IDENTIFIER
  137                     | '#' • IDENTIFIER '[' comp_expression ']' '.' '#' IDENTIFIER '[' comp_expression ']'
  139                     | '#' • IDENTIFIER '.' '#' IDENTIFIER '[' comp_expression ']'
  140                     | '#' • IDENTIFIER '.' '#' IDENTIFIER

    IDENTIFIER  shift, and go to state 187


State 158

    2 primary_expression: • POSINT
    3                   | • SCALAR
    4                   | • IDENTIFIER
    5                   | • STRING
    6                   | • KW_TRUE
    7                   | • KW_FALSE
    8                   | • '(' logic_expression ')'
    9 math_expression: • primary_expression
   10                | • '+' math_expression
   11                | • '-' math_expression
   12                | • math_expression '+' math_expression
   13                | • math_expression '-' math_expression
   14                | • math_expression '*' math_expression
   15                | • math_expression '/' math_expression
   16                | • math_expression '%' math_expression
   17                | • math_expression OP_PAW math_expression
   18                | • IDENTIFIER '[' expression ']'
   19                | • IDENTIFIER '[' expression ']' '.' IDENTIFIER
   20                | • IDENTIFIER '[' expression ']' '.' IDENTIFIER '[' expression ']'
   21                | • general_function_call
   22                | • IDENTIFIER '.' IDENTIFIER '[' expression ']'
   23                | • IDENTIFIER '.' IDENTIFIER
   24 relational_expression: • math_expression
   25                      | • relational_expression OP_EQUALS relational_expression
   26                      | • relational_expression OP_NE relational_expression
   27                      | • relational_expression '>' relational_expression
   28                      | • relational_expression '<' relational_expression
   29                      | • relational_expression OP_LE relational_expression
   30                      | • relational_expression OP_GE relational_expression
   31 logic_expression: • relational_expression
   32                 | • OP_NOT logic_expression
   33                 | • logic_expression OP_AND logic_expression
   34                 | • logic_expression OP_OR logic_expression
   66 general_function_call: • function_call
   67                      | • IDENTIFIER '.' function_call
   68                      | • IDENTIFIER '[' expression ']' '.' function_call
   69 function_call: • IDENTIFIER '(' ')'
   70              | • IDENTIFIER '(' expr_comma_list ')'
  125 comp_primary_expression: '(' • logic_expression ')'

    IDENTIFIER  shift, and go to state 53
    POSINT      shift, and go to state 54
    SCALAR      shift, and go to state 55
    STRING      shift, and go to state 56
    OP_NOT      shift, and go to state 57
    KW_TRUE     shift, and go to state 58
    KW_FALSE    shift, and go to state 59
    '-'         shift, and go to state 60
    '+'         shift, and go to state 61
    '('         shift, and go to state 62

    primary_expression     go to state 64
    math_expression        go to state 65
    relational_expression  go to state 66
    logic_expression       go to state 188
    general_function_call  go to state 69
    function_call          go to state 70


State 159

  180 comp_identifier_list: '#' IDENTIFIER '[' ']' •

    $default  reduce using rule 180 (comp_identifier_list)


State 160

  113 general_comp_function_call: comp_function_call •

    $default  reduce using rule 113 (general_comp_function_call)


State 161

  138 comp_math_expression: general_comp_function_call •

    $default  reduce using rule 138 (comp_math_expression)


State 162

  126 comp_math_expression: comp_primary_expression •

    $default  reduce using rule 126 (comp_math_expression)


State 163

  129 comp_math_expression: comp_math_expression • '+' comp_math_expression
  130                     | comp_math_expression • '-' comp_math_expression
  131                     | comp_math_expression • '*' comp_math_expression
  132                     | comp_math_expression • '/' comp_math_expression
  133                     | comp_math_expression • '%' comp_math_expression
  134                     | comp_math_expression • OP_PAW comp_math_expression
  141 comp_relational_expression: comp_math_expression •  [KW_FOR, OP_AND, OP_OR, OP_EQUALS, OP_NE, OP_LE, OP_GE, '>', '<', ')', ']', ',', ':', ';']

    OP_PAW  shift, and go to state 189
    '-'     shift, and go to state 190
    '+'     shift, and go to state 191
    '*'     shift, and go to state 192
    '/'     shift, and go to state 193
    '%'     shift, and go to state 194

    $default  reduce using rule 141 (comp_relational_expression)


State 164

  142 comp_relational_expression: comp_relational_expression • OP_EQUALS comp_relational_expression
  143                           | comp_relational_expression • OP_NE comp_relational_expression
  144                           | comp_relational_expression • '>' comp_relational_expression
  145                           | comp_relational_expression • '<' comp_relational_expression
  146                           | comp_relational_expression • OP_LE comp_relational_expression
  147                           | comp_relational_expression • OP_GE comp_relational_expression
  148 comp_logic_expression: comp_relational_expression •  [KW_FOR, OP_AND, OP_OR, ')', ']', ',', ':', ';']

    OP_EQUALS  shift, and go to state 195
    OP_NE      shift, and go to state 196
    OP_LE      shift, and go to state 197
    OP_GE      shift, and go to state 198
    '>'        shift, and go to state 199
    '<'        shift, and go to state 200

    $default  reduce using rule 148 (comp_logic_expression)


State 165

  150 comp_logic_expression: comp_logic_expression • OP_AND comp_logic_expression
  151                      | comp_logic_expression • OP_OR comp_logic_expression
  152 comp_expression: comp_logic_expression •  [KW_FOR, ')', ']', ',', ':', ';']

    OP_AND  shift, and go to state 201
    OP_OR   shift, and go to state 202

    $default  reduce using rule 152 (comp_expression)


State 166

  179 comp_identifier_list: '#' IDENTIFIER '[' comp_expression • ']'

    ']'  shift, and go to state 203


State 167

   61 parameter_declaration: • IDENTIFIER ':' basic_data_type
   62                      | • IDENTIFIER '[' ']' ':' basic_data_type
   63 parameter_declaration_list: ε •  [')', ',']
   64                           | • parameter_declaration
   65                           | • parameter_declaration_list ',' parameter_declaration
  169 comp_function_definition: KW_DEF IDENTIFIER '(' • parameter_declaration_list ')' ':' local_var_const_decl_list comp_command_list KW_ENDDEF ';'
  170                         | KW_DEF IDENTIFIER '(' • parameter_declaration_list ')' ':' local_var_const_decl comp_command_list KW_ENDDEF ';'
  171                         | KW_DEF IDENTIFIER '(' • parameter_declaration_list ')' ':' comp_command_list KW_ENDDEF ';'
  172                         | KW_DEF IDENTIFIER '(' • parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl_list comp_command_list KW_RETURN comp_expression ';' KW_ENDDEF ';'
  173                         | KW_DEF IDENTIFIER '(' • parameter_declaration_list ')' '-' '>' basic_data_type ':' comp_command_list KW_RETURN comp_expression ';' KW_ENDDEF ';'
  174                         | KW_DEF IDENTIFIER '(' • parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl comp_command_list KW_RETURN comp_expression ';' KW_ENDDEF ';'

    IDENTIFIER  shift, and go to state 144

    $default  reduce using rule 63 (parameter_declaration_list)

    parameter_declaration       go to state 145
    parameter_declaration_list  go to state 204


State 168

  184 comp_definition: KW_COMP IDENTIFIER ':' comp_var_decl_list comp_function_definition_list KW_ENDCOMP ';' •

    $default  reduce using rule 184 (comp_definition)


State 169

  185 comp_definition: KW_COMP IDENTIFIER ':' comp_var_decl comp_function_definition_list KW_ENDCOMP ';' •

    $default  reduce using rule 185 (comp_definition)


State 170

  181 comp_identifier_list: comp_identifier_list ',' '#' IDENTIFIER •  [',', ':']
  182                     | comp_identifier_list ',' '#' IDENTIFIER • '[' comp_expression ']'
  183                     | comp_identifier_list ',' '#' IDENTIFIER • '[' ']'

    '['  shift, and go to state 205

    $default  reduce using rule 181 (comp_identifier_list)


State 171

  177 comp_var_decl: comp_identifier_list ':' basic_data_type ';' •

    $default  reduce using rule 177 (comp_var_decl)


State 172

   70 function_call: IDENTIFIER '(' expr_comma_list ')' •

    $default  reduce using rule 70 (function_call)


State 173

    2 primary_expression: • POSINT
    3                   | • SCALAR
    4                   | • IDENTIFIER
    5                   | • STRING
    6                   | • KW_TRUE
    7                   | • KW_FALSE
    8                   | • '(' logic_expression ')'
    9 math_expression: • primary_expression
   10                | • '+' math_expression
   11                | • '-' math_expression
   12                | • math_expression '+' math_expression
   13                | • math_expression '-' math_expression
   14                | • math_expression '*' math_expression
   15                | • math_expression '/' math_expression
   16                | • math_expression '%' math_expression
   17                | • math_expression OP_PAW math_expression
   18                | • IDENTIFIER '[' expression ']'
   19                | • IDENTIFIER '[' expression ']' '.' IDENTIFIER
   20                | • IDENTIFIER '[' expression ']' '.' IDENTIFIER '[' expression ']'
   21                | • general_function_call
   22                | • IDENTIFIER '.' IDENTIFIER '[' expression ']'
   23                | • IDENTIFIER '.' IDENTIFIER
   24 relational_expression: • math_expression
   25                      | • relational_expression OP_EQUALS relational_expression
   26                      | • relational_expression OP_NE relational_expression
   27                      | • relational_expression '>' relational_expression
   28                      | • relational_expression '<' relational_expression
   29                      | • relational_expression OP_LE relational_expression
   30                      | • relational_expression OP_GE relational_expression
   31 logic_expression: • relational_expression
   32                 | • OP_NOT logic_expression
   33                 | • logic_expression OP_AND logic_expression
   34                 | • logic_expression OP_OR logic_expression
   35 expression: • logic_expression
   66 general_function_call: • function_call
   67                      | • IDENTIFIER '.' function_call
   68                      | • IDENTIFIER '[' expression ']' '.' function_call
   69 function_call: • IDENTIFIER '(' ')'
   70              | • IDENTIFIER '(' expr_comma_list ')'
   72 expr_comma_list: expr_comma_list ',' • expression

    IDENTIFIER  shift, and go to state 53
    POSINT      shift, and go to state 54
    SCALAR      shift, and go to state 55
    STRING      shift, and go to state 56
    OP_NOT      shift, and go to state 57
    KW_TRUE     shift, and go to state 58
    KW_FALSE    shift, and go to state 59
    '-'         shift, and go to state 60
    '+'         shift, and go to state 61
    '('         shift, and go to state 62

    primary_expression     go to state 64
    math_expression        go to state 65
    relational_expression  go to state 66
    logic_expression       go to state 67
    expression             go to state 206
    general_function_call  go to state 69
    function_call          go to state 70


State 174

   18 math_expression: IDENTIFIER '[' expression ']' •  [KW_FOR, OP_AND, OP_OR, OP_PAW, OP_EQUALS, OP_NE, OP_LE, OP_GE, '>', '<', '-', '+', '*', '/', '%', ')', ']', ',', ':', ';']
   19                | IDENTIFIER '[' expression ']' • '.' IDENTIFIER
   20                | IDENTIFIER '[' expression ']' • '.' IDENTIFIER '[' expression ']'
   68 general_function_call: IDENTIFIER '[' expression ']' • '.' function_call

    '.'  shift, and go to state 207

    $default  reduce using rule 18 (math_expression)


State 175

    2 primary_expression: • POSINT
    3                   | • SCALAR
    4                   | • IDENTIFIER
    5                   | • STRING
    6                   | • KW_TRUE
    7                   | • KW_FALSE
    8                   | • '(' logic_expression ')'
    9 math_expression: • primary_expression
   10                | • '+' math_expression
   11                | • '-' math_expression
   12                | • math_expression '+' math_expression
   13                | • math_expression '-' math_expression
   14                | • math_expression '*' math_expression
   15                | • math_expression '/' math_expression
   16                | • math_expression '%' math_expression
   17                | • math_expression OP_PAW math_expression
   18                | • IDENTIFIER '[' expression ']'
   19                | • IDENTIFIER '[' expression ']' '.' IDENTIFIER
   20                | • IDENTIFIER '[' expression ']' '.' IDENTIFIER '[' expression ']'
   21                | • general_function_call
   22                | • IDENTIFIER '.' IDENTIFIER '[' expression ']'
   22                | IDENTIFIER '.' IDENTIFIER '[' • expression ']'
   23                | • IDENTIFIER '.' IDENTIFIER
   24 relational_expression: • math_expression
   25                      | • relational_expression OP_EQUALS relational_expression
   26                      | • relational_expression OP_NE relational_expression
   27                      | • relational_expression '>' relational_expression
   28                      | • relational_expression '<' relational_expression
   29                      | • relational_expression OP_LE relational_expression
   30                      | • relational_expression OP_GE relational_expression
   31 logic_expression: • relational_expression
   32                 | • OP_NOT logic_expression
   33                 | • logic_expression OP_AND logic_expression
   34                 | • logic_expression OP_OR logic_expression
   35 expression: • logic_expression
   66 general_function_call: • function_call
   67                      | • IDENTIFIER '.' function_call
   68                      | • IDENTIFIER '[' expression ']' '.' function_call
   69 function_call: • IDENTIFIER '(' ')'
   70              | • IDENTIFIER '(' expr_comma_list ')'

    IDENTIFIER  shift, and go to state 53
    POSINT      shift, and go to state 54
    SCALAR      shift, and go to state 55
    STRING      shift, and go to state 56
    OP_NOT      shift, and go to state 57
    KW_TRUE     shift, and go to state 58
    KW_FALSE    shift, and go to state 59
    '-'         shift, and go to state 60
    '+'         shift, and go to state 61
    '('         shift, and go to state 62

    primary_expression     go to state 64
    math_expression        go to state 65
    relational_expression  go to state 66
    logic_expression       go to state 67
    expression             go to state 208
    general_function_call  go to state 69
    function_call          go to state 70


State 176

   36 basic_data_type: • KW_INTEGER
   37                | • KW_BOOLEAN
   38                | • KW_CHAR
   39                | • KW_SCALAR
   40                | • KW_STR
   41                | • IDENTIFIER
   50 constant_decl: KW_CONST IDENTIFIER '[' ']' '=' expression ':' • basic_data_type ';'

    IDENTIFIER  shift, and go to state 29
    KW_BOOLEAN  shift, and go to state 30
    KW_STR      shift, and go to state 31
    KW_INTEGER  shift, and go to state 32
    KW_SCALAR   shift, and go to state 33
    KW_CHAR     shift, and go to state 34

    basic_data_type  go to state 209


State 177

   49 constant_decl: KW_CONST IDENTIFIER '[' expression ']' '=' expression • ':' basic_data_type ';'

    ':'  shift, and go to state 210


State 178

   48 constant_decl: KW_CONST IDENTIFIER '=' expression ':' basic_data_type ';' •

    $default  reduce using rule 48 (constant_decl)


State 179

   62 parameter_declaration: IDENTIFIER '[' • ']' ':' basic_data_type

    ']'  shift, and go to state 211


State 180

  100 function_definition: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' • ':' local_var_const_decl_list function_command_list KW_ENDDEF ';'
  101                    | KW_DEF IDENTIFIER '(' parameter_declaration_list ')' • ':' local_var_const_decl function_command_list KW_ENDDEF ';'
  102                    | KW_DEF IDENTIFIER '(' parameter_declaration_list ')' • ':' function_command_list KW_ENDDEF ';'
  103                    | KW_DEF IDENTIFIER '(' parameter_declaration_list ')' • '-' '>' basic_data_type ':' local_var_const_decl_list function_command_list KW_RETURN expression ';' KW_ENDDEF ';'
  104                    | KW_DEF IDENTIFIER '(' parameter_declaration_list ')' • '-' '>' basic_data_type ':' local_var_const_decl function_command_list KW_RETURN expression ';' KW_ENDDEF ';'
  105                    | KW_DEF IDENTIFIER '(' parameter_declaration_list ')' • '-' '>' basic_data_type ':' function_command_list KW_RETURN expression ';' KW_ENDDEF ';'

    '-'  shift, and go to state 212
    ':'  shift, and go to state 213


State 181

   61 parameter_declaration: • IDENTIFIER ':' basic_data_type
   62                      | • IDENTIFIER '[' ']' ':' basic_data_type
   65 parameter_declaration_list: parameter_declaration_list ',' • parameter_declaration

    IDENTIFIER  shift, and go to state 144

    parameter_declaration  go to state 214


State 182

   42 identifier_single: • IDENTIFIER
   43                  | • IDENTIFIER '[' POSINT ']'
   44                  | • IDENTIFIER '[' ']'
   45 identifier_list: • identifier_single ',' identifier_single
   46                | • identifier_single ',' identifier_list
   47                | • identifier_single
   48 constant_decl: • KW_CONST IDENTIFIER '=' expression ':' basic_data_type ';'
   49              | • KW_CONST IDENTIFIER '[' expression ']' '=' expression ':' basic_data_type ';'
   50              | • KW_CONST IDENTIFIER '[' ']' '=' expression ':' basic_data_type ';'
   51 local_var_const_decl_list: • constant_decl local_var_const_decl_list
   52                          | • variable_decl local_var_const_decl_list
   53                          | • local_var_const_decl
   54                          | ε •  [IDENTIFIER, KW_IF, KW_CONTINUE, KW_FOR, KW_WHILE, KW_BREAK, KW_RETURN]
   55 local_var_const_decl: • variable_decl
   56                     | • constant_decl
   57                     | • variable_decl constant_decl
   58                     | • constant_decl variable_decl
   59 variable_decl: • identifier_list ':' basic_data_type ';'
   60              | • parameter_declaration ';'
   61 parameter_declaration: • IDENTIFIER ':' basic_data_type
   62                      | • IDENTIFIER '[' ']' ':' basic_data_type
   66 general_function_call: • function_call
   67                      | • IDENTIFIER '.' function_call
   68                      | • IDENTIFIER '[' expression ']' '.' function_call
   69 function_call: • IDENTIFIER '(' ')'
   70              | • IDENTIFIER '(' expr_comma_list ')'
   80 general_variable: • IDENTIFIER
   81                 | • IDENTIFIER '.' '#' IDENTIFIER
   82                 | • IDENTIFIER '[' expression ']'
   83                 | • IDENTIFIER '.' '#' IDENTIFIER '[' expression ']'
   84 function_command_list: • function_command
   85                      | • function_command_list function_command
   86 function_command: • general_variable assignment_operator expression ';'
   87                 | • KW_IF '(' expression ')' ':' function_command_list KW_ENDIF ';'
   88                 | • KW_IF '(' expression ')' ':' function_command_list KW_ELSE ':' function_command_list KW_ENDIF ';'
   89                 | • KW_FOR general_variable KW_IN '[' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';'
   90                 | • KW_FOR general_variable KW_IN '[' expression ':' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';'
   91                 | • general_variable OP_ASSIGN '[' expression KW_FOR general_variable ':' POSINT ']' ':' basic_data_type ';'
   92                 | • KW_WHILE '(' expression ')' ':' function_command_list KW_ENDWHILE ';'
   93                 | • KW_BREAK ';'
   94                 | • KW_CONTINUE ';'
   95                 | • KW_RETURN ';'
   96                 | • KW_RETURN expression ';'
   97                 | • general_function_call ';'
  189 main_unit: KW_DEF KW_MAIN '(' ')' ':' • local_var_const_decl_list function_command_list KW_ENDDEF ';'
  190          | KW_DEF KW_MAIN '(' ')' ':' • local_var_const_decl function_command_list KW_ENDDEF ';'
  191          | KW_DEF KW_MAIN '(' ')' ':' • function_command_list KW_ENDDEF ';'

    IDENTIFIER   shift, and go to state 215
    KW_IF        shift, and go to state 216
    KW_CONTINUE  shift, and go to state 217
    KW_FOR       shift, and go to state 218
    KW_WHILE     shift, and go to state 219
    KW_BREAK     shift, and go to state 220
    KW_CONST     shift, and go to state 6
    KW_RETURN    shift, and go to state 221

    IDENTIFIER   [reduce using rule 54 (local_var_const_decl_list)]
    KW_IF        [reduce using rule 54 (local_var_const_decl_list)]
    KW_CONTINUE  [reduce using rule 54 (local_var_const_decl_list)]
    KW_FOR       [reduce using rule 54 (local_var_const_decl_list)]
    KW_WHILE     [reduce using rule 54 (local_var_const_decl_list)]
    KW_BREAK     [reduce using rule 54 (local_var_const_decl_list)]
    KW_RETURN    [reduce using rule 54 (local_var_const_decl_list)]

    identifier_single          go to state 7
    identifier_list            go to state 8
    constant_decl              go to state 9
    local_var_const_decl_list  go to state 222
    local_var_const_decl       go to state 223
    variable_decl              go to state 12
    parameter_declaration      go to state 13
    general_function_call      go to state 224
    function_call              go to state 70
    general_variable           go to state 225
    function_command_list      go to state 226
    function_command           go to state 227

    shift/reduce conflict on token IDENTIFIER:
       54 local_var_const_decl_list: ε •
       42 identifier_single: • IDENTIFIER
      First example: comp_definition_list local_var_const_decl_list KW_DEF KW_MAIN '(' ')' ':' • IDENTIFIER ',' identifier_single ':' basic_data_type ';' local_var_const_decl_list function_command_list KW_ENDDEF ';' main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                            $end
             ↳ 1: comp_definition_list local_var_const_decl_list main_unit                                                                                                                                                                          main_unit
                                                                 ↳ 189: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl_list                                                                                    function_command_list KW_ENDDEF ';'
                                                                                                   ↳ 52: variable_decl                                                                local_var_const_decl_list
                                                                                                         ↳ 59: identifier_list                                ':' basic_data_type ';'
                                                                                                               ↳ 45: identifier_single  ',' identifier_single
                                                                                                                     ↳ 42: • IDENTIFIER
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' • IDENTIFIER assignment_operator expression ';' KW_ENDDEF ';' $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                  $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 189: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl_list function_command_list                                           KW_ENDDEF ';'
                                                                                                                            ↳ 54: ε •                 ↳ 84: function_command
                                                                                                                                                            ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                                  ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       54 local_var_const_decl_list: ε •
       43 identifier_single: • IDENTIFIER '[' POSINT ']'
      First example: comp_definition_list local_var_const_decl_list KW_DEF KW_MAIN '(' ')' ':' • IDENTIFIER '[' POSINT ']' ',' identifier_single ':' basic_data_type ';' local_var_const_decl_list function_command_list KW_ENDDEF ';' main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                           $end
             ↳ 1: comp_definition_list local_var_const_decl_list main_unit                                                                                                                                                                                         main_unit
                                                                 ↳ 189: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl_list                                                                                                   function_command_list KW_ENDDEF ';'
                                                                                                   ↳ 52: variable_decl                                                                               local_var_const_decl_list
                                                                                                         ↳ 59: identifier_list                                               ':' basic_data_type ';'
                                                                                                               ↳ 45: identifier_single                 ',' identifier_single
                                                                                                                     ↳ 43: • IDENTIFIER '[' POSINT ']'
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' • IDENTIFIER assignment_operator expression ';' KW_ENDDEF ';' $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                  $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 189: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl_list function_command_list                                           KW_ENDDEF ';'
                                                                                                                            ↳ 54: ε •                 ↳ 84: function_command
                                                                                                                                                            ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                                  ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       54 local_var_const_decl_list: ε •
       44 identifier_single: • IDENTIFIER '[' ']'
      First example: comp_definition_list local_var_const_decl_list KW_DEF KW_MAIN '(' ')' ':' • IDENTIFIER '[' ']' ',' identifier_single ':' basic_data_type ';' local_var_const_decl_list function_command_list KW_ENDDEF ';' main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                    $end
             ↳ 1: comp_definition_list local_var_const_decl_list main_unit                                                                                                                                                                                  main_unit
                                                                 ↳ 189: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl_list                                                                                            function_command_list KW_ENDDEF ';'
                                                                                                   ↳ 52: variable_decl                                                                        local_var_const_decl_list
                                                                                                         ↳ 59: identifier_list                                        ':' basic_data_type ';'
                                                                                                               ↳ 45: identifier_single          ',' identifier_single
                                                                                                                     ↳ 44: • IDENTIFIER '[' ']'
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' • IDENTIFIER assignment_operator expression ';' KW_ENDDEF ';' $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                  $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 189: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl_list function_command_list                                           KW_ENDDEF ';'
                                                                                                                            ↳ 54: ε •                 ↳ 84: function_command
                                                                                                                                                            ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                                  ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       54 local_var_const_decl_list: ε •
       61 parameter_declaration: • IDENTIFIER ':' basic_data_type
      First example: comp_definition_list local_var_const_decl_list KW_DEF KW_MAIN '(' ')' ':' • IDENTIFIER ':' basic_data_type ';' local_var_const_decl_list function_command_list KW_ENDDEF ';' main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                $end
             ↳ 1: comp_definition_list local_var_const_decl_list main_unit                                                                                                                                              main_unit
                                                                 ↳ 189: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl_list                                                        function_command_list KW_ENDDEF ';'
                                                                                                   ↳ 52: variable_decl                                    local_var_const_decl_list
                                                                                                         ↳ 60: parameter_declaration                  ';'
                                                                                                               ↳ 61: • IDENTIFIER ':' basic_data_type
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' • IDENTIFIER assignment_operator expression ';' KW_ENDDEF ';' $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                  $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 189: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl_list function_command_list                                           KW_ENDDEF ';'
                                                                                                                            ↳ 54: ε •                 ↳ 84: function_command
                                                                                                                                                            ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                                  ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       54 local_var_const_decl_list: ε •
       62 parameter_declaration: • IDENTIFIER '[' ']' ':' basic_data_type
      First example: comp_definition_list local_var_const_decl_list KW_DEF KW_MAIN '(' ')' ':' • IDENTIFIER '[' ']' ':' basic_data_type ';' local_var_const_decl_list function_command_list KW_ENDDEF ';' main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                        $end
             ↳ 1: comp_definition_list local_var_const_decl_list main_unit                                                                                                                                                      main_unit
                                                                 ↳ 189: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl_list                                                                function_command_list KW_ENDDEF ';'
                                                                                                   ↳ 52: variable_decl                                            local_var_const_decl_list
                                                                                                         ↳ 60: parameter_declaration                          ';'
                                                                                                               ↳ 62: • IDENTIFIER '[' ']' ':' basic_data_type
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' • IDENTIFIER assignment_operator expression ';' KW_ENDDEF ';' $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                  $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 189: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl_list function_command_list                                           KW_ENDDEF ';'
                                                                                                                            ↳ 54: ε •                 ↳ 84: function_command
                                                                                                                                                            ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                                  ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       54 local_var_const_decl_list: ε •
       67 general_function_call: • IDENTIFIER '.' function_call
      First example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' • IDENTIFIER '.' function_call ';' KW_ENDDEF ';'
      Shift derivation
        input
        ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                     ↳ 191: KW_DEF KW_MAIN '(' ')' ':' function_command_list                                KW_ENDDEF ';'
                                                                                                                       ↳ 84: function_command
                                                                                                                             ↳ 97: general_function_call                ';'
                                                                                                                                   ↳ 67: • IDENTIFIER '.' function_call
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' • IDENTIFIER assignment_operator expression ';' KW_ENDDEF ';' $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                  $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 189: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl_list function_command_list                                           KW_ENDDEF ';'
                                                                                                                            ↳ 54: ε •                 ↳ 84: function_command
                                                                                                                                                            ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                                  ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       54 local_var_const_decl_list: ε •
       68 general_function_call: • IDENTIFIER '[' expression ']' '.' function_call
      First example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' • IDENTIFIER '[' expression ']' '.' function_call ';' KW_ENDDEF ';'
      Shift derivation
        input
        ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                     ↳ 191: KW_DEF KW_MAIN '(' ')' ':' function_command_list                                                   KW_ENDDEF ';'
                                                                                                                       ↳ 84: function_command
                                                                                                                             ↳ 97: general_function_call                                   ';'
                                                                                                                                   ↳ 68: • IDENTIFIER '[' expression ']' '.' function_call
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' • IDENTIFIER assignment_operator expression ';' KW_ENDDEF ';' $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                  $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 189: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl_list function_command_list                                           KW_ENDDEF ';'
                                                                                                                            ↳ 54: ε •                 ↳ 84: function_command
                                                                                                                                                            ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                                  ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       54 local_var_const_decl_list: ε •
       69 function_call: • IDENTIFIER '(' ')'
      First example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' • IDENTIFIER '(' ')' ';' KW_ENDDEF ';'
      Shift derivation
        input
        ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                     ↳ 191: KW_DEF KW_MAIN '(' ')' ':' function_command_list                            KW_ENDDEF ';'
                                                                                                                       ↳ 84: function_command
                                                                                                                             ↳ 97: general_function_call            ';'
                                                                                                                                   ↳ 66: function_call
                                                                                                                                         ↳ 69: • IDENTIFIER '(' ')'
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' • IDENTIFIER assignment_operator expression ';' KW_ENDDEF ';' $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                  $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 189: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl_list function_command_list                                           KW_ENDDEF ';'
                                                                                                                            ↳ 54: ε •                 ↳ 84: function_command
                                                                                                                                                            ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                                  ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       54 local_var_const_decl_list: ε •
       70 function_call: • IDENTIFIER '(' expr_comma_list ')'
      First example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' • IDENTIFIER '(' expr_comma_list ')' ';' KW_ENDDEF ';'
      Shift derivation
        input
        ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                     ↳ 191: KW_DEF KW_MAIN '(' ')' ':' function_command_list                                            KW_ENDDEF ';'
                                                                                                                       ↳ 84: function_command
                                                                                                                             ↳ 97: general_function_call                            ';'
                                                                                                                                   ↳ 66: function_call
                                                                                                                                         ↳ 70: • IDENTIFIER '(' expr_comma_list ')'
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' • IDENTIFIER assignment_operator expression ';' KW_ENDDEF ';' $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                  $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 189: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl_list function_command_list                                           KW_ENDDEF ';'
                                                                                                                            ↳ 54: ε •                 ↳ 84: function_command
                                                                                                                                                            ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                                  ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       54 local_var_const_decl_list: ε •
       80 general_variable: • IDENTIFIER
      First example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' • IDENTIFIER assignment_operator expression ';' KW_ENDDEF ';'
      Shift derivation
        input
        ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                     ↳ 191: KW_DEF KW_MAIN '(' ')' ':' function_command_list                                             KW_ENDDEF ';'
                                                                                                                       ↳ 84: function_command
                                                                                                                             ↳ 86: general_variable   assignment_operator expression ';'
                                                                                                                                   ↳ 80: • IDENTIFIER
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' • IDENTIFIER assignment_operator expression ';' KW_ENDDEF ';' $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                  $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 189: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl_list function_command_list                                           KW_ENDDEF ';'
                                                                                                                            ↳ 54: ε •                 ↳ 84: function_command
                                                                                                                                                            ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                                  ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       54 local_var_const_decl_list: ε •
       81 general_variable: • IDENTIFIER '.' '#' IDENTIFIER
      First example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' • IDENTIFIER '.' '#' IDENTIFIER assignment_operator expression ';' KW_ENDDEF ';'
      Shift derivation
        input
        ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                     ↳ 191: KW_DEF KW_MAIN '(' ')' ':' function_command_list                                                                KW_ENDDEF ';'
                                                                                                                       ↳ 84: function_command
                                                                                                                             ↳ 86: general_variable                      assignment_operator expression ';'
                                                                                                                                   ↳ 81: • IDENTIFIER '.' '#' IDENTIFIER
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' • IDENTIFIER assignment_operator expression ';' KW_ENDDEF ';' $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                  $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 189: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl_list function_command_list                                           KW_ENDDEF ';'
                                                                                                                            ↳ 54: ε •                 ↳ 84: function_command
                                                                                                                                                            ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                                  ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       54 local_var_const_decl_list: ε •
       82 general_variable: • IDENTIFIER '[' expression ']'
      First example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' • IDENTIFIER '[' expression ']' assignment_operator expression ';' KW_ENDDEF ';'
      Shift derivation
        input
        ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                     ↳ 191: KW_DEF KW_MAIN '(' ')' ':' function_command_list                                                                KW_ENDDEF ';'
                                                                                                                       ↳ 84: function_command
                                                                                                                             ↳ 86: general_variable                      assignment_operator expression ';'
                                                                                                                                   ↳ 82: • IDENTIFIER '[' expression ']'
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' • IDENTIFIER assignment_operator expression ';' KW_ENDDEF ';' $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                  $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 189: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl_list function_command_list                                           KW_ENDDEF ';'
                                                                                                                            ↳ 54: ε •                 ↳ 84: function_command
                                                                                                                                                            ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                                  ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       54 local_var_const_decl_list: ε •
       83 general_variable: • IDENTIFIER '.' '#' IDENTIFIER '[' expression ']'
      First example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' • IDENTIFIER '.' '#' IDENTIFIER '[' expression ']' assignment_operator expression ';' KW_ENDDEF ';'
      Shift derivation
        input
        ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                     ↳ 191: KW_DEF KW_MAIN '(' ')' ':' function_command_list                                                                                   KW_ENDDEF ';'
                                                                                                                       ↳ 84: function_command
                                                                                                                             ↳ 86: general_variable                                         assignment_operator expression ';'
                                                                                                                                   ↳ 83: • IDENTIFIER '.' '#' IDENTIFIER '[' expression ']'
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' • IDENTIFIER assignment_operator expression ';' KW_ENDDEF ';' $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                  $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 189: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl_list function_command_list                                           KW_ENDDEF ';'
                                                                                                                            ↳ 54: ε •                 ↳ 84: function_command
                                                                                                                                                            ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                                  ↳ 80: IDENTIFIER

    shift/reduce conflict on token KW_IF:
       54 local_var_const_decl_list: ε •
       87 function_command: • KW_IF '(' expression ')' ':' function_command_list KW_ENDIF ';'
      First example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' • KW_IF '(' expression ')' ':' function_command_list KW_ENDIF ';' KW_ENDDEF ';'
      Shift derivation
        input
        ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                     ↳ 191: KW_DEF KW_MAIN '(' ')' ':' function_command_list                                                         KW_ENDDEF ';'
                                                                                                                       ↳ 84: function_command
                                                                                                                             ↳ 87: • KW_IF '(' expression ')' ':' function_command_list KW_ENDIF ';'
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' • KW_IF '(' expression ')' ':' function_command_list KW_ENDIF ';' KW_ENDDEF ';' $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                              $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 189: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl_list function_command_list                                                       KW_ENDDEF ';'
                                                                                                                            ↳ 54: ε •                 ↳ 84: function_command
                                                                                                                                                            ↳ 87: KW_IF '(' expression ')' ':' function_command_list KW_ENDIF ';'

    shift/reduce conflict on token KW_IF:
       54 local_var_const_decl_list: ε •
       88 function_command: • KW_IF '(' expression ')' ':' function_command_list KW_ELSE ':' function_command_list KW_ENDIF ';'
      First example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' • KW_IF '(' expression ')' ':' function_command_list KW_ELSE ':' function_command_list KW_ENDIF ';' KW_ENDDEF ';'
      Shift derivation
        input
        ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                     ↳ 191: KW_DEF KW_MAIN '(' ')' ':' function_command_list                                                                                           KW_ENDDEF ';'
                                                                                                                       ↳ 84: function_command
                                                                                                                             ↳ 88: • KW_IF '(' expression ')' ':' function_command_list KW_ELSE ':' function_command_list KW_ENDIF ';'
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' • KW_IF '(' expression ')' ':' function_command_list KW_ENDIF ';' KW_ENDDEF ';' $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                              $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 189: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl_list function_command_list                                                       KW_ENDDEF ';'
                                                                                                                            ↳ 54: ε •                 ↳ 84: function_command
                                                                                                                                                            ↳ 87: KW_IF '(' expression ')' ':' function_command_list KW_ENDIF ';'

    shift/reduce conflict on token KW_FOR:
       54 local_var_const_decl_list: ε •
       89 function_command: • KW_FOR general_variable KW_IN '[' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';'
      First example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' • KW_FOR general_variable KW_IN '[' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';' KW_ENDDEF ';'
      Shift derivation
        input
        ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                     ↳ 191: KW_DEF KW_MAIN '(' ')' ':' function_command_list                                                                                                 KW_ENDDEF ';'
                                                                                                                       ↳ 84: function_command
                                                                                                                             ↳ 89: • KW_FOR general_variable KW_IN '[' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';'
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' • KW_FOR general_variable KW_IN '[' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';' KW_ENDDEF ';' $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                      $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 189: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl_list function_command_list                                                                                               KW_ENDDEF ';'
                                                                                                                            ↳ 54: ε •                 ↳ 84: function_command
                                                                                                                                                            ↳ 89: KW_FOR general_variable KW_IN '[' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';'

    shift/reduce conflict on token KW_FOR:
       54 local_var_const_decl_list: ε •
       90 function_command: • KW_FOR general_variable KW_IN '[' expression ':' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';'
      First example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' • KW_FOR general_variable KW_IN '[' expression ':' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';' KW_ENDDEF ';'
      Shift derivation
        input
        ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                     ↳ 191: KW_DEF KW_MAIN '(' ')' ':' function_command_list                                                                                                                KW_ENDDEF ';'
                                                                                                                       ↳ 84: function_command
                                                                                                                             ↳ 90: • KW_FOR general_variable KW_IN '[' expression ':' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';'
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' • KW_FOR general_variable KW_IN '[' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';' KW_ENDDEF ';' $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                      $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 189: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl_list function_command_list                                                                                               KW_ENDDEF ';'
                                                                                                                            ↳ 54: ε •                 ↳ 84: function_command
                                                                                                                                                            ↳ 89: KW_FOR general_variable KW_IN '[' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';'

    shift/reduce conflict on token KW_WHILE:
       54 local_var_const_decl_list: ε •
       92 function_command: • KW_WHILE '(' expression ')' ':' function_command_list KW_ENDWHILE ';'
      First example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' • KW_WHILE '(' expression ')' ':' function_command_list KW_ENDWHILE ';' KW_ENDDEF ';'
      Shift derivation
        input
        ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                     ↳ 191: KW_DEF KW_MAIN '(' ')' ':' function_command_list                                                               KW_ENDDEF ';'
                                                                                                                       ↳ 84: function_command
                                                                                                                             ↳ 92: • KW_WHILE '(' expression ')' ':' function_command_list KW_ENDWHILE ';'
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' • KW_WHILE '(' expression ')' ':' function_command_list KW_ENDWHILE ';' KW_ENDDEF ';' $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                    $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 189: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl_list function_command_list                                                             KW_ENDDEF ';'
                                                                                                                            ↳ 54: ε •                 ↳ 84: function_command
                                                                                                                                                            ↳ 92: KW_WHILE '(' expression ')' ':' function_command_list KW_ENDWHILE ';'

    shift/reduce conflict on token KW_BREAK:
       54 local_var_const_decl_list: ε •
       93 function_command: • KW_BREAK ';'
      First example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' • KW_BREAK ';' KW_ENDDEF ';'
      Shift derivation
        input
        ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                     ↳ 191: KW_DEF KW_MAIN '(' ')' ':' function_command_list      KW_ENDDEF ';'
                                                                                                                       ↳ 84: function_command
                                                                                                                             ↳ 93: • KW_BREAK ';'
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' • KW_BREAK ';' KW_ENDDEF ';' $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                           $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 189: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl_list function_command_list    KW_ENDDEF ';'
                                                                                                                            ↳ 54: ε •                 ↳ 84: function_command
                                                                                                                                                            ↳ 93: KW_BREAK ';'

    shift/reduce conflict on token KW_CONTINUE:
       54 local_var_const_decl_list: ε •
       94 function_command: • KW_CONTINUE ';'
      First example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' • KW_CONTINUE ';' KW_ENDDEF ';'
      Shift derivation
        input
        ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                     ↳ 191: KW_DEF KW_MAIN '(' ')' ':' function_command_list         KW_ENDDEF ';'
                                                                                                                       ↳ 84: function_command
                                                                                                                             ↳ 94: • KW_CONTINUE ';'
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' • KW_CONTINUE ';' KW_ENDDEF ';' $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                              $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 189: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl_list function_command_list       KW_ENDDEF ';'
                                                                                                                            ↳ 54: ε •                 ↳ 84: function_command
                                                                                                                                                            ↳ 94: KW_CONTINUE ';'

    shift/reduce conflict on token KW_RETURN:
       54 local_var_const_decl_list: ε •
       95 function_command: • KW_RETURN ';'
      First example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' • KW_RETURN ';' KW_ENDDEF ';'
      Shift derivation
        input
        ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                     ↳ 191: KW_DEF KW_MAIN '(' ')' ':' function_command_list       KW_ENDDEF ';'
                                                                                                                       ↳ 84: function_command
                                                                                                                             ↳ 95: • KW_RETURN ';'
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' • KW_RETURN ';' KW_ENDDEF ';' $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                            $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 189: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl_list function_command_list     KW_ENDDEF ';'
                                                                                                                            ↳ 54: ε •                 ↳ 84: function_command
                                                                                                                                                            ↳ 95: KW_RETURN ';'

    shift/reduce conflict on token KW_RETURN:
       54 local_var_const_decl_list: ε •
       96 function_command: • KW_RETURN expression ';'
      First example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' • KW_RETURN expression ';' KW_ENDDEF ';'
      Shift derivation
        input
        ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                     ↳ 191: KW_DEF KW_MAIN '(' ')' ':' function_command_list                  KW_ENDDEF ';'
                                                                                                                       ↳ 84: function_command
                                                                                                                             ↳ 96: • KW_RETURN expression ';'
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' • KW_RETURN ';' KW_ENDDEF ';' $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                            $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 189: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl_list function_command_list     KW_ENDDEF ';'
                                                                                                                            ↳ 54: ε •                 ↳ 84: function_command
                                                                                                                                                            ↳ 95: KW_RETURN ';'



State 183

  111 comp_function_call: • IDENTIFIER '(' ')'
  111                   | IDENTIFIER '(' • ')'
  112                   | • IDENTIFIER '(' comp_expr_comma_list ')'
  112                   | IDENTIFIER '(' • comp_expr_comma_list ')'
  113 general_comp_function_call: • comp_function_call
  114                           | • '#' IDENTIFIER '.' comp_function_call
  115                           | • '#' IDENTIFIER '[' comp_expression ']' '.' comp_function_call
  116 comp_expr_comma_list: • comp_expression
  117                     | • comp_expr_comma_list ',' comp_expression
  118 comp_primary_expression: • POSINT
  119                        | • SCALAR
  120                        | • '#' IDENTIFIER
  121                        | • IDENTIFIER
  122                        | • STRING
  123                        | • KW_TRUE
  124                        | • KW_FALSE
  125                        | • '(' logic_expression ')'
  126 comp_math_expression: • comp_primary_expression
  127                     | • '+' comp_math_expression
  128                     | • '-' comp_math_expression
  129                     | • comp_math_expression '+' comp_math_expression
  130                     | • comp_math_expression '-' comp_math_expression
  131                     | • comp_math_expression '*' comp_math_expression
  132                     | • comp_math_expression '/' comp_math_expression
  133                     | • comp_math_expression '%' comp_math_expression
  134                     | • comp_math_expression OP_PAW comp_math_expression
  135                     | • '#' IDENTIFIER '[' comp_expression ']'
  136                     | • '#' IDENTIFIER '[' comp_expression ']' '.' '#' IDENTIFIER
  137                     | • '#' IDENTIFIER '[' comp_expression ']' '.' '#' IDENTIFIER '[' comp_expression ']'
  138                     | • general_comp_function_call
  139                     | • '#' IDENTIFIER '.' '#' IDENTIFIER '[' comp_expression ']'
  140                     | • '#' IDENTIFIER '.' '#' IDENTIFIER
  141 comp_relational_expression: • comp_math_expression
  142                           | • comp_relational_expression OP_EQUALS comp_relational_expression
  143                           | • comp_relational_expression OP_NE comp_relational_expression
  144                           | • comp_relational_expression '>' comp_relational_expression
  145                           | • comp_relational_expression '<' comp_relational_expression
  146                           | • comp_relational_expression OP_LE comp_relational_expression
  147                           | • comp_relational_expression OP_GE comp_relational_expression
  148 comp_logic_expression: • comp_relational_expression
  149                      | • OP_NOT comp_logic_expression
  150                      | • comp_logic_expression OP_AND comp_logic_expression
  151                      | • comp_logic_expression OP_OR comp_logic_expression
  152 comp_expression: • comp_logic_expression

    IDENTIFIER  shift, and go to state 148
    POSINT      shift, and go to state 149
    SCALAR      shift, and go to state 150
    STRING      shift, and go to state 151
    OP_NOT      shift, and go to state 152
    KW_TRUE     shift, and go to state 153
    KW_FALSE    shift, and go to state 154
    '-'         shift, and go to state 155
    '+'         shift, and go to state 156
    '#'         shift, and go to state 157
    '('         shift, and go to state 158
    ')'         shift, and go to state 228

    comp_function_call          go to state 160
    general_comp_function_call  go to state 161
    comp_expr_comma_list        go to state 229
    comp_primary_expression     go to state 162
    comp_math_expression        go to state 163
    comp_relational_expression  go to state 164
    comp_logic_expression       go to state 165
    comp_expression             go to state 230


State 184

  149 comp_logic_expression: OP_NOT comp_logic_expression •  [KW_FOR, OP_AND, OP_OR, ')', ']', ',', ':', ';']
  150                      | comp_logic_expression • OP_AND comp_logic_expression
  151                      | comp_logic_expression • OP_OR comp_logic_expression

    $default  reduce using rule 149 (comp_logic_expression)

    Conflict between rule 149 and token OP_AND resolved as reduce (OP_AND < OP_NOT).
    Conflict between rule 149 and token OP_OR resolved as reduce (OP_OR < OP_NOT).


State 185

  128 comp_math_expression: '-' comp_math_expression •  [KW_FOR, OP_AND, OP_OR, OP_EQUALS, OP_NE, OP_LE, OP_GE, '>', '<', '-', '+', ')', ']', ',', ':', ';']
  129                     | comp_math_expression • '+' comp_math_expression
  130                     | comp_math_expression • '-' comp_math_expression
  131                     | comp_math_expression • '*' comp_math_expression
  132                     | comp_math_expression • '/' comp_math_expression
  133                     | comp_math_expression • '%' comp_math_expression
  134                     | comp_math_expression • OP_PAW comp_math_expression

    OP_PAW  shift, and go to state 189
    '*'     shift, and go to state 192
    '/'     shift, and go to state 193
    '%'     shift, and go to state 194

    $default  reduce using rule 128 (comp_math_expression)

    Conflict between rule 128 and token OP_PAW resolved as shift ('-' < OP_PAW).
    Conflict between rule 128 and token '-' resolved as reduce (%left '-').
    Conflict between rule 128 and token '+' resolved as reduce (%left '+').
    Conflict between rule 128 and token '*' resolved as shift ('-' < '*').
    Conflict between rule 128 and token '/' resolved as shift ('-' < '/').
    Conflict between rule 128 and token '%' resolved as shift ('-' < '%').


State 186

  127 comp_math_expression: '+' comp_math_expression •  [KW_FOR, OP_AND, OP_OR, OP_EQUALS, OP_NE, OP_LE, OP_GE, '>', '<', '-', '+', ')', ']', ',', ':', ';']
  129                     | comp_math_expression • '+' comp_math_expression
  130                     | comp_math_expression • '-' comp_math_expression
  131                     | comp_math_expression • '*' comp_math_expression
  132                     | comp_math_expression • '/' comp_math_expression
  133                     | comp_math_expression • '%' comp_math_expression
  134                     | comp_math_expression • OP_PAW comp_math_expression

    OP_PAW  shift, and go to state 189
    '*'     shift, and go to state 192
    '/'     shift, and go to state 193
    '%'     shift, and go to state 194

    $default  reduce using rule 127 (comp_math_expression)

    Conflict between rule 127 and token OP_PAW resolved as shift ('+' < OP_PAW).
    Conflict between rule 127 and token '-' resolved as reduce (%left '-').
    Conflict between rule 127 and token '+' resolved as reduce (%left '+').
    Conflict between rule 127 and token '*' resolved as shift ('+' < '*').
    Conflict between rule 127 and token '/' resolved as shift ('+' < '/').
    Conflict between rule 127 and token '%' resolved as shift ('+' < '%').


State 187

  114 general_comp_function_call: '#' IDENTIFIER • '.' comp_function_call
  115                           | '#' IDENTIFIER • '[' comp_expression ']' '.' comp_function_call
  120 comp_primary_expression: '#' IDENTIFIER •  [KW_FOR, OP_AND, OP_OR, OP_PAW, OP_EQUALS, OP_NE, OP_LE, OP_GE, '>', '<', '-', '+', '*', '/', '%', ')', ']', ',', ':', ';']
  135 comp_math_expression: '#' IDENTIFIER • '[' comp_expression ']'
  136                     | '#' IDENTIFIER • '[' comp_expression ']' '.' '#' IDENTIFIER
  137                     | '#' IDENTIFIER • '[' comp_expression ']' '.' '#' IDENTIFIER '[' comp_expression ']'
  139                     | '#' IDENTIFIER • '.' '#' IDENTIFIER '[' comp_expression ']'
  140                     | '#' IDENTIFIER • '.' '#' IDENTIFIER

    '['  shift, and go to state 231
    '.'  shift, and go to state 232

    $default  reduce using rule 120 (comp_primary_expression)


State 188

   33 logic_expression: logic_expression • OP_AND logic_expression
   34                 | logic_expression • OP_OR logic_expression
  125 comp_primary_expression: '(' logic_expression • ')'

    OP_AND  shift, and go to state 106
    OP_OR   shift, and go to state 107
    ')'     shift, and go to state 233


State 189

  111 comp_function_call: • IDENTIFIER '(' ')'
  112                   | • IDENTIFIER '(' comp_expr_comma_list ')'
  113 general_comp_function_call: • comp_function_call
  114                           | • '#' IDENTIFIER '.' comp_function_call
  115                           | • '#' IDENTIFIER '[' comp_expression ']' '.' comp_function_call
  118 comp_primary_expression: • POSINT
  119                        | • SCALAR
  120                        | • '#' IDENTIFIER
  121                        | • IDENTIFIER
  122                        | • STRING
  123                        | • KW_TRUE
  124                        | • KW_FALSE
  125                        | • '(' logic_expression ')'
  126 comp_math_expression: • comp_primary_expression
  127                     | • '+' comp_math_expression
  128                     | • '-' comp_math_expression
  129                     | • comp_math_expression '+' comp_math_expression
  130                     | • comp_math_expression '-' comp_math_expression
  131                     | • comp_math_expression '*' comp_math_expression
  132                     | • comp_math_expression '/' comp_math_expression
  133                     | • comp_math_expression '%' comp_math_expression
  134                     | • comp_math_expression OP_PAW comp_math_expression
  134                     | comp_math_expression OP_PAW • comp_math_expression
  135                     | • '#' IDENTIFIER '[' comp_expression ']'
  136                     | • '#' IDENTIFIER '[' comp_expression ']' '.' '#' IDENTIFIER
  137                     | • '#' IDENTIFIER '[' comp_expression ']' '.' '#' IDENTIFIER '[' comp_expression ']'
  138                     | • general_comp_function_call
  139                     | • '#' IDENTIFIER '.' '#' IDENTIFIER '[' comp_expression ']'
  140                     | • '#' IDENTIFIER '.' '#' IDENTIFIER

    IDENTIFIER  shift, and go to state 148
    POSINT      shift, and go to state 149
    SCALAR      shift, and go to state 150
    STRING      shift, and go to state 151
    KW_TRUE     shift, and go to state 153
    KW_FALSE    shift, and go to state 154
    '-'         shift, and go to state 155
    '+'         shift, and go to state 156
    '#'         shift, and go to state 157
    '('         shift, and go to state 158

    comp_function_call          go to state 160
    general_comp_function_call  go to state 161
    comp_primary_expression     go to state 162
    comp_math_expression        go to state 234


State 190

  111 comp_function_call: • IDENTIFIER '(' ')'
  112                   | • IDENTIFIER '(' comp_expr_comma_list ')'
  113 general_comp_function_call: • comp_function_call
  114                           | • '#' IDENTIFIER '.' comp_function_call
  115                           | • '#' IDENTIFIER '[' comp_expression ']' '.' comp_function_call
  118 comp_primary_expression: • POSINT
  119                        | • SCALAR
  120                        | • '#' IDENTIFIER
  121                        | • IDENTIFIER
  122                        | • STRING
  123                        | • KW_TRUE
  124                        | • KW_FALSE
  125                        | • '(' logic_expression ')'
  126 comp_math_expression: • comp_primary_expression
  127                     | • '+' comp_math_expression
  128                     | • '-' comp_math_expression
  129                     | • comp_math_expression '+' comp_math_expression
  130                     | • comp_math_expression '-' comp_math_expression
  130                     | comp_math_expression '-' • comp_math_expression
  131                     | • comp_math_expression '*' comp_math_expression
  132                     | • comp_math_expression '/' comp_math_expression
  133                     | • comp_math_expression '%' comp_math_expression
  134                     | • comp_math_expression OP_PAW comp_math_expression
  135                     | • '#' IDENTIFIER '[' comp_expression ']'
  136                     | • '#' IDENTIFIER '[' comp_expression ']' '.' '#' IDENTIFIER
  137                     | • '#' IDENTIFIER '[' comp_expression ']' '.' '#' IDENTIFIER '[' comp_expression ']'
  138                     | • general_comp_function_call
  139                     | • '#' IDENTIFIER '.' '#' IDENTIFIER '[' comp_expression ']'
  140                     | • '#' IDENTIFIER '.' '#' IDENTIFIER

    IDENTIFIER  shift, and go to state 148
    POSINT      shift, and go to state 149
    SCALAR      shift, and go to state 150
    STRING      shift, and go to state 151
    KW_TRUE     shift, and go to state 153
    KW_FALSE    shift, and go to state 154
    '-'         shift, and go to state 155
    '+'         shift, and go to state 156
    '#'         shift, and go to state 157
    '('         shift, and go to state 158

    comp_function_call          go to state 160
    general_comp_function_call  go to state 161
    comp_primary_expression     go to state 162
    comp_math_expression        go to state 235


State 191

  111 comp_function_call: • IDENTIFIER '(' ')'
  112                   | • IDENTIFIER '(' comp_expr_comma_list ')'
  113 general_comp_function_call: • comp_function_call
  114                           | • '#' IDENTIFIER '.' comp_function_call
  115                           | • '#' IDENTIFIER '[' comp_expression ']' '.' comp_function_call
  118 comp_primary_expression: • POSINT
  119                        | • SCALAR
  120                        | • '#' IDENTIFIER
  121                        | • IDENTIFIER
  122                        | • STRING
  123                        | • KW_TRUE
  124                        | • KW_FALSE
  125                        | • '(' logic_expression ')'
  126 comp_math_expression: • comp_primary_expression
  127                     | • '+' comp_math_expression
  128                     | • '-' comp_math_expression
  129                     | • comp_math_expression '+' comp_math_expression
  129                     | comp_math_expression '+' • comp_math_expression
  130                     | • comp_math_expression '-' comp_math_expression
  131                     | • comp_math_expression '*' comp_math_expression
  132                     | • comp_math_expression '/' comp_math_expression
  133                     | • comp_math_expression '%' comp_math_expression
  134                     | • comp_math_expression OP_PAW comp_math_expression
  135                     | • '#' IDENTIFIER '[' comp_expression ']'
  136                     | • '#' IDENTIFIER '[' comp_expression ']' '.' '#' IDENTIFIER
  137                     | • '#' IDENTIFIER '[' comp_expression ']' '.' '#' IDENTIFIER '[' comp_expression ']'
  138                     | • general_comp_function_call
  139                     | • '#' IDENTIFIER '.' '#' IDENTIFIER '[' comp_expression ']'
  140                     | • '#' IDENTIFIER '.' '#' IDENTIFIER

    IDENTIFIER  shift, and go to state 148
    POSINT      shift, and go to state 149
    SCALAR      shift, and go to state 150
    STRING      shift, and go to state 151
    KW_TRUE     shift, and go to state 153
    KW_FALSE    shift, and go to state 154
    '-'         shift, and go to state 155
    '+'         shift, and go to state 156
    '#'         shift, and go to state 157
    '('         shift, and go to state 158

    comp_function_call          go to state 160
    general_comp_function_call  go to state 161
    comp_primary_expression     go to state 162
    comp_math_expression        go to state 236


State 192

  111 comp_function_call: • IDENTIFIER '(' ')'
  112                   | • IDENTIFIER '(' comp_expr_comma_list ')'
  113 general_comp_function_call: • comp_function_call
  114                           | • '#' IDENTIFIER '.' comp_function_call
  115                           | • '#' IDENTIFIER '[' comp_expression ']' '.' comp_function_call
  118 comp_primary_expression: • POSINT
  119                        | • SCALAR
  120                        | • '#' IDENTIFIER
  121                        | • IDENTIFIER
  122                        | • STRING
  123                        | • KW_TRUE
  124                        | • KW_FALSE
  125                        | • '(' logic_expression ')'
  126 comp_math_expression: • comp_primary_expression
  127                     | • '+' comp_math_expression
  128                     | • '-' comp_math_expression
  129                     | • comp_math_expression '+' comp_math_expression
  130                     | • comp_math_expression '-' comp_math_expression
  131                     | • comp_math_expression '*' comp_math_expression
  131                     | comp_math_expression '*' • comp_math_expression
  132                     | • comp_math_expression '/' comp_math_expression
  133                     | • comp_math_expression '%' comp_math_expression
  134                     | • comp_math_expression OP_PAW comp_math_expression
  135                     | • '#' IDENTIFIER '[' comp_expression ']'
  136                     | • '#' IDENTIFIER '[' comp_expression ']' '.' '#' IDENTIFIER
  137                     | • '#' IDENTIFIER '[' comp_expression ']' '.' '#' IDENTIFIER '[' comp_expression ']'
  138                     | • general_comp_function_call
  139                     | • '#' IDENTIFIER '.' '#' IDENTIFIER '[' comp_expression ']'
  140                     | • '#' IDENTIFIER '.' '#' IDENTIFIER

    IDENTIFIER  shift, and go to state 148
    POSINT      shift, and go to state 149
    SCALAR      shift, and go to state 150
    STRING      shift, and go to state 151
    KW_TRUE     shift, and go to state 153
    KW_FALSE    shift, and go to state 154
    '-'         shift, and go to state 155
    '+'         shift, and go to state 156
    '#'         shift, and go to state 157
    '('         shift, and go to state 158

    comp_function_call          go to state 160
    general_comp_function_call  go to state 161
    comp_primary_expression     go to state 162
    comp_math_expression        go to state 237


State 193

  111 comp_function_call: • IDENTIFIER '(' ')'
  112                   | • IDENTIFIER '(' comp_expr_comma_list ')'
  113 general_comp_function_call: • comp_function_call
  114                           | • '#' IDENTIFIER '.' comp_function_call
  115                           | • '#' IDENTIFIER '[' comp_expression ']' '.' comp_function_call
  118 comp_primary_expression: • POSINT
  119                        | • SCALAR
  120                        | • '#' IDENTIFIER
  121                        | • IDENTIFIER
  122                        | • STRING
  123                        | • KW_TRUE
  124                        | • KW_FALSE
  125                        | • '(' logic_expression ')'
  126 comp_math_expression: • comp_primary_expression
  127                     | • '+' comp_math_expression
  128                     | • '-' comp_math_expression
  129                     | • comp_math_expression '+' comp_math_expression
  130                     | • comp_math_expression '-' comp_math_expression
  131                     | • comp_math_expression '*' comp_math_expression
  132                     | • comp_math_expression '/' comp_math_expression
  132                     | comp_math_expression '/' • comp_math_expression
  133                     | • comp_math_expression '%' comp_math_expression
  134                     | • comp_math_expression OP_PAW comp_math_expression
  135                     | • '#' IDENTIFIER '[' comp_expression ']'
  136                     | • '#' IDENTIFIER '[' comp_expression ']' '.' '#' IDENTIFIER
  137                     | • '#' IDENTIFIER '[' comp_expression ']' '.' '#' IDENTIFIER '[' comp_expression ']'
  138                     | • general_comp_function_call
  139                     | • '#' IDENTIFIER '.' '#' IDENTIFIER '[' comp_expression ']'
  140                     | • '#' IDENTIFIER '.' '#' IDENTIFIER

    IDENTIFIER  shift, and go to state 148
    POSINT      shift, and go to state 149
    SCALAR      shift, and go to state 150
    STRING      shift, and go to state 151
    KW_TRUE     shift, and go to state 153
    KW_FALSE    shift, and go to state 154
    '-'         shift, and go to state 155
    '+'         shift, and go to state 156
    '#'         shift, and go to state 157
    '('         shift, and go to state 158

    comp_function_call          go to state 160
    general_comp_function_call  go to state 161
    comp_primary_expression     go to state 162
    comp_math_expression        go to state 238


State 194

  111 comp_function_call: • IDENTIFIER '(' ')'
  112                   | • IDENTIFIER '(' comp_expr_comma_list ')'
  113 general_comp_function_call: • comp_function_call
  114                           | • '#' IDENTIFIER '.' comp_function_call
  115                           | • '#' IDENTIFIER '[' comp_expression ']' '.' comp_function_call
  118 comp_primary_expression: • POSINT
  119                        | • SCALAR
  120                        | • '#' IDENTIFIER
  121                        | • IDENTIFIER
  122                        | • STRING
  123                        | • KW_TRUE
  124                        | • KW_FALSE
  125                        | • '(' logic_expression ')'
  126 comp_math_expression: • comp_primary_expression
  127                     | • '+' comp_math_expression
  128                     | • '-' comp_math_expression
  129                     | • comp_math_expression '+' comp_math_expression
  130                     | • comp_math_expression '-' comp_math_expression
  131                     | • comp_math_expression '*' comp_math_expression
  132                     | • comp_math_expression '/' comp_math_expression
  133                     | • comp_math_expression '%' comp_math_expression
  133                     | comp_math_expression '%' • comp_math_expression
  134                     | • comp_math_expression OP_PAW comp_math_expression
  135                     | • '#' IDENTIFIER '[' comp_expression ']'
  136                     | • '#' IDENTIFIER '[' comp_expression ']' '.' '#' IDENTIFIER
  137                     | • '#' IDENTIFIER '[' comp_expression ']' '.' '#' IDENTIFIER '[' comp_expression ']'
  138                     | • general_comp_function_call
  139                     | • '#' IDENTIFIER '.' '#' IDENTIFIER '[' comp_expression ']'
  140                     | • '#' IDENTIFIER '.' '#' IDENTIFIER

    IDENTIFIER  shift, and go to state 148
    POSINT      shift, and go to state 149
    SCALAR      shift, and go to state 150
    STRING      shift, and go to state 151
    KW_TRUE     shift, and go to state 153
    KW_FALSE    shift, and go to state 154
    '-'         shift, and go to state 155
    '+'         shift, and go to state 156
    '#'         shift, and go to state 157
    '('         shift, and go to state 158

    comp_function_call          go to state 160
    general_comp_function_call  go to state 161
    comp_primary_expression     go to state 162
    comp_math_expression        go to state 239


State 195

  111 comp_function_call: • IDENTIFIER '(' ')'
  112                   | • IDENTIFIER '(' comp_expr_comma_list ')'
  113 general_comp_function_call: • comp_function_call
  114                           | • '#' IDENTIFIER '.' comp_function_call
  115                           | • '#' IDENTIFIER '[' comp_expression ']' '.' comp_function_call
  118 comp_primary_expression: • POSINT
  119                        | • SCALAR
  120                        | • '#' IDENTIFIER
  121                        | • IDENTIFIER
  122                        | • STRING
  123                        | • KW_TRUE
  124                        | • KW_FALSE
  125                        | • '(' logic_expression ')'
  126 comp_math_expression: • comp_primary_expression
  127                     | • '+' comp_math_expression
  128                     | • '-' comp_math_expression
  129                     | • comp_math_expression '+' comp_math_expression
  130                     | • comp_math_expression '-' comp_math_expression
  131                     | • comp_math_expression '*' comp_math_expression
  132                     | • comp_math_expression '/' comp_math_expression
  133                     | • comp_math_expression '%' comp_math_expression
  134                     | • comp_math_expression OP_PAW comp_math_expression
  135                     | • '#' IDENTIFIER '[' comp_expression ']'
  136                     | • '#' IDENTIFIER '[' comp_expression ']' '.' '#' IDENTIFIER
  137                     | • '#' IDENTIFIER '[' comp_expression ']' '.' '#' IDENTIFIER '[' comp_expression ']'
  138                     | • general_comp_function_call
  139                     | • '#' IDENTIFIER '.' '#' IDENTIFIER '[' comp_expression ']'
  140                     | • '#' IDENTIFIER '.' '#' IDENTIFIER
  141 comp_relational_expression: • comp_math_expression
  142                           | • comp_relational_expression OP_EQUALS comp_relational_expression
  142                           | comp_relational_expression OP_EQUALS • comp_relational_expression
  143                           | • comp_relational_expression OP_NE comp_relational_expression
  144                           | • comp_relational_expression '>' comp_relational_expression
  145                           | • comp_relational_expression '<' comp_relational_expression
  146                           | • comp_relational_expression OP_LE comp_relational_expression
  147                           | • comp_relational_expression OP_GE comp_relational_expression

    IDENTIFIER  shift, and go to state 148
    POSINT      shift, and go to state 149
    SCALAR      shift, and go to state 150
    STRING      shift, and go to state 151
    KW_TRUE     shift, and go to state 153
    KW_FALSE    shift, and go to state 154
    '-'         shift, and go to state 155
    '+'         shift, and go to state 156
    '#'         shift, and go to state 157
    '('         shift, and go to state 158

    comp_function_call          go to state 160
    general_comp_function_call  go to state 161
    comp_primary_expression     go to state 162
    comp_math_expression        go to state 163
    comp_relational_expression  go to state 240


State 196

  111 comp_function_call: • IDENTIFIER '(' ')'
  112                   | • IDENTIFIER '(' comp_expr_comma_list ')'
  113 general_comp_function_call: • comp_function_call
  114                           | • '#' IDENTIFIER '.' comp_function_call
  115                           | • '#' IDENTIFIER '[' comp_expression ']' '.' comp_function_call
  118 comp_primary_expression: • POSINT
  119                        | • SCALAR
  120                        | • '#' IDENTIFIER
  121                        | • IDENTIFIER
  122                        | • STRING
  123                        | • KW_TRUE
  124                        | • KW_FALSE
  125                        | • '(' logic_expression ')'
  126 comp_math_expression: • comp_primary_expression
  127                     | • '+' comp_math_expression
  128                     | • '-' comp_math_expression
  129                     | • comp_math_expression '+' comp_math_expression
  130                     | • comp_math_expression '-' comp_math_expression
  131                     | • comp_math_expression '*' comp_math_expression
  132                     | • comp_math_expression '/' comp_math_expression
  133                     | • comp_math_expression '%' comp_math_expression
  134                     | • comp_math_expression OP_PAW comp_math_expression
  135                     | • '#' IDENTIFIER '[' comp_expression ']'
  136                     | • '#' IDENTIFIER '[' comp_expression ']' '.' '#' IDENTIFIER
  137                     | • '#' IDENTIFIER '[' comp_expression ']' '.' '#' IDENTIFIER '[' comp_expression ']'
  138                     | • general_comp_function_call
  139                     | • '#' IDENTIFIER '.' '#' IDENTIFIER '[' comp_expression ']'
  140                     | • '#' IDENTIFIER '.' '#' IDENTIFIER
  141 comp_relational_expression: • comp_math_expression
  142                           | • comp_relational_expression OP_EQUALS comp_relational_expression
  143                           | • comp_relational_expression OP_NE comp_relational_expression
  143                           | comp_relational_expression OP_NE • comp_relational_expression
  144                           | • comp_relational_expression '>' comp_relational_expression
  145                           | • comp_relational_expression '<' comp_relational_expression
  146                           | • comp_relational_expression OP_LE comp_relational_expression
  147                           | • comp_relational_expression OP_GE comp_relational_expression

    IDENTIFIER  shift, and go to state 148
    POSINT      shift, and go to state 149
    SCALAR      shift, and go to state 150
    STRING      shift, and go to state 151
    KW_TRUE     shift, and go to state 153
    KW_FALSE    shift, and go to state 154
    '-'         shift, and go to state 155
    '+'         shift, and go to state 156
    '#'         shift, and go to state 157
    '('         shift, and go to state 158

    comp_function_call          go to state 160
    general_comp_function_call  go to state 161
    comp_primary_expression     go to state 162
    comp_math_expression        go to state 163
    comp_relational_expression  go to state 241


State 197

  111 comp_function_call: • IDENTIFIER '(' ')'
  112                   | • IDENTIFIER '(' comp_expr_comma_list ')'
  113 general_comp_function_call: • comp_function_call
  114                           | • '#' IDENTIFIER '.' comp_function_call
  115                           | • '#' IDENTIFIER '[' comp_expression ']' '.' comp_function_call
  118 comp_primary_expression: • POSINT
  119                        | • SCALAR
  120                        | • '#' IDENTIFIER
  121                        | • IDENTIFIER
  122                        | • STRING
  123                        | • KW_TRUE
  124                        | • KW_FALSE
  125                        | • '(' logic_expression ')'
  126 comp_math_expression: • comp_primary_expression
  127                     | • '+' comp_math_expression
  128                     | • '-' comp_math_expression
  129                     | • comp_math_expression '+' comp_math_expression
  130                     | • comp_math_expression '-' comp_math_expression
  131                     | • comp_math_expression '*' comp_math_expression
  132                     | • comp_math_expression '/' comp_math_expression
  133                     | • comp_math_expression '%' comp_math_expression
  134                     | • comp_math_expression OP_PAW comp_math_expression
  135                     | • '#' IDENTIFIER '[' comp_expression ']'
  136                     | • '#' IDENTIFIER '[' comp_expression ']' '.' '#' IDENTIFIER
  137                     | • '#' IDENTIFIER '[' comp_expression ']' '.' '#' IDENTIFIER '[' comp_expression ']'
  138                     | • general_comp_function_call
  139                     | • '#' IDENTIFIER '.' '#' IDENTIFIER '[' comp_expression ']'
  140                     | • '#' IDENTIFIER '.' '#' IDENTIFIER
  141 comp_relational_expression: • comp_math_expression
  142                           | • comp_relational_expression OP_EQUALS comp_relational_expression
  143                           | • comp_relational_expression OP_NE comp_relational_expression
  144                           | • comp_relational_expression '>' comp_relational_expression
  145                           | • comp_relational_expression '<' comp_relational_expression
  146                           | • comp_relational_expression OP_LE comp_relational_expression
  146                           | comp_relational_expression OP_LE • comp_relational_expression
  147                           | • comp_relational_expression OP_GE comp_relational_expression

    IDENTIFIER  shift, and go to state 148
    POSINT      shift, and go to state 149
    SCALAR      shift, and go to state 150
    STRING      shift, and go to state 151
    KW_TRUE     shift, and go to state 153
    KW_FALSE    shift, and go to state 154
    '-'         shift, and go to state 155
    '+'         shift, and go to state 156
    '#'         shift, and go to state 157
    '('         shift, and go to state 158

    comp_function_call          go to state 160
    general_comp_function_call  go to state 161
    comp_primary_expression     go to state 162
    comp_math_expression        go to state 163
    comp_relational_expression  go to state 242


State 198

  111 comp_function_call: • IDENTIFIER '(' ')'
  112                   | • IDENTIFIER '(' comp_expr_comma_list ')'
  113 general_comp_function_call: • comp_function_call
  114                           | • '#' IDENTIFIER '.' comp_function_call
  115                           | • '#' IDENTIFIER '[' comp_expression ']' '.' comp_function_call
  118 comp_primary_expression: • POSINT
  119                        | • SCALAR
  120                        | • '#' IDENTIFIER
  121                        | • IDENTIFIER
  122                        | • STRING
  123                        | • KW_TRUE
  124                        | • KW_FALSE
  125                        | • '(' logic_expression ')'
  126 comp_math_expression: • comp_primary_expression
  127                     | • '+' comp_math_expression
  128                     | • '-' comp_math_expression
  129                     | • comp_math_expression '+' comp_math_expression
  130                     | • comp_math_expression '-' comp_math_expression
  131                     | • comp_math_expression '*' comp_math_expression
  132                     | • comp_math_expression '/' comp_math_expression
  133                     | • comp_math_expression '%' comp_math_expression
  134                     | • comp_math_expression OP_PAW comp_math_expression
  135                     | • '#' IDENTIFIER '[' comp_expression ']'
  136                     | • '#' IDENTIFIER '[' comp_expression ']' '.' '#' IDENTIFIER
  137                     | • '#' IDENTIFIER '[' comp_expression ']' '.' '#' IDENTIFIER '[' comp_expression ']'
  138                     | • general_comp_function_call
  139                     | • '#' IDENTIFIER '.' '#' IDENTIFIER '[' comp_expression ']'
  140                     | • '#' IDENTIFIER '.' '#' IDENTIFIER
  141 comp_relational_expression: • comp_math_expression
  142                           | • comp_relational_expression OP_EQUALS comp_relational_expression
  143                           | • comp_relational_expression OP_NE comp_relational_expression
  144                           | • comp_relational_expression '>' comp_relational_expression
  145                           | • comp_relational_expression '<' comp_relational_expression
  146                           | • comp_relational_expression OP_LE comp_relational_expression
  147                           | • comp_relational_expression OP_GE comp_relational_expression
  147                           | comp_relational_expression OP_GE • comp_relational_expression

    IDENTIFIER  shift, and go to state 148
    POSINT      shift, and go to state 149
    SCALAR      shift, and go to state 150
    STRING      shift, and go to state 151
    KW_TRUE     shift, and go to state 153
    KW_FALSE    shift, and go to state 154
    '-'         shift, and go to state 155
    '+'         shift, and go to state 156
    '#'         shift, and go to state 157
    '('         shift, and go to state 158

    comp_function_call          go to state 160
    general_comp_function_call  go to state 161
    comp_primary_expression     go to state 162
    comp_math_expression        go to state 163
    comp_relational_expression  go to state 243


State 199

  111 comp_function_call: • IDENTIFIER '(' ')'
  112                   | • IDENTIFIER '(' comp_expr_comma_list ')'
  113 general_comp_function_call: • comp_function_call
  114                           | • '#' IDENTIFIER '.' comp_function_call
  115                           | • '#' IDENTIFIER '[' comp_expression ']' '.' comp_function_call
  118 comp_primary_expression: • POSINT
  119                        | • SCALAR
  120                        | • '#' IDENTIFIER
  121                        | • IDENTIFIER
  122                        | • STRING
  123                        | • KW_TRUE
  124                        | • KW_FALSE
  125                        | • '(' logic_expression ')'
  126 comp_math_expression: • comp_primary_expression
  127                     | • '+' comp_math_expression
  128                     | • '-' comp_math_expression
  129                     | • comp_math_expression '+' comp_math_expression
  130                     | • comp_math_expression '-' comp_math_expression
  131                     | • comp_math_expression '*' comp_math_expression
  132                     | • comp_math_expression '/' comp_math_expression
  133                     | • comp_math_expression '%' comp_math_expression
  134                     | • comp_math_expression OP_PAW comp_math_expression
  135                     | • '#' IDENTIFIER '[' comp_expression ']'
  136                     | • '#' IDENTIFIER '[' comp_expression ']' '.' '#' IDENTIFIER
  137                     | • '#' IDENTIFIER '[' comp_expression ']' '.' '#' IDENTIFIER '[' comp_expression ']'
  138                     | • general_comp_function_call
  139                     | • '#' IDENTIFIER '.' '#' IDENTIFIER '[' comp_expression ']'
  140                     | • '#' IDENTIFIER '.' '#' IDENTIFIER
  141 comp_relational_expression: • comp_math_expression
  142                           | • comp_relational_expression OP_EQUALS comp_relational_expression
  143                           | • comp_relational_expression OP_NE comp_relational_expression
  144                           | • comp_relational_expression '>' comp_relational_expression
  144                           | comp_relational_expression '>' • comp_relational_expression
  145                           | • comp_relational_expression '<' comp_relational_expression
  146                           | • comp_relational_expression OP_LE comp_relational_expression
  147                           | • comp_relational_expression OP_GE comp_relational_expression

    IDENTIFIER  shift, and go to state 148
    POSINT      shift, and go to state 149
    SCALAR      shift, and go to state 150
    STRING      shift, and go to state 151
    KW_TRUE     shift, and go to state 153
    KW_FALSE    shift, and go to state 154
    '-'         shift, and go to state 155
    '+'         shift, and go to state 156
    '#'         shift, and go to state 157
    '('         shift, and go to state 158

    comp_function_call          go to state 160
    general_comp_function_call  go to state 161
    comp_primary_expression     go to state 162
    comp_math_expression        go to state 163
    comp_relational_expression  go to state 244


State 200

  111 comp_function_call: • IDENTIFIER '(' ')'
  112                   | • IDENTIFIER '(' comp_expr_comma_list ')'
  113 general_comp_function_call: • comp_function_call
  114                           | • '#' IDENTIFIER '.' comp_function_call
  115                           | • '#' IDENTIFIER '[' comp_expression ']' '.' comp_function_call
  118 comp_primary_expression: • POSINT
  119                        | • SCALAR
  120                        | • '#' IDENTIFIER
  121                        | • IDENTIFIER
  122                        | • STRING
  123                        | • KW_TRUE
  124                        | • KW_FALSE
  125                        | • '(' logic_expression ')'
  126 comp_math_expression: • comp_primary_expression
  127                     | • '+' comp_math_expression
  128                     | • '-' comp_math_expression
  129                     | • comp_math_expression '+' comp_math_expression
  130                     | • comp_math_expression '-' comp_math_expression
  131                     | • comp_math_expression '*' comp_math_expression
  132                     | • comp_math_expression '/' comp_math_expression
  133                     | • comp_math_expression '%' comp_math_expression
  134                     | • comp_math_expression OP_PAW comp_math_expression
  135                     | • '#' IDENTIFIER '[' comp_expression ']'
  136                     | • '#' IDENTIFIER '[' comp_expression ']' '.' '#' IDENTIFIER
  137                     | • '#' IDENTIFIER '[' comp_expression ']' '.' '#' IDENTIFIER '[' comp_expression ']'
  138                     | • general_comp_function_call
  139                     | • '#' IDENTIFIER '.' '#' IDENTIFIER '[' comp_expression ']'
  140                     | • '#' IDENTIFIER '.' '#' IDENTIFIER
  141 comp_relational_expression: • comp_math_expression
  142                           | • comp_relational_expression OP_EQUALS comp_relational_expression
  143                           | • comp_relational_expression OP_NE comp_relational_expression
  144                           | • comp_relational_expression '>' comp_relational_expression
  145                           | • comp_relational_expression '<' comp_relational_expression
  145                           | comp_relational_expression '<' • comp_relational_expression
  146                           | • comp_relational_expression OP_LE comp_relational_expression
  147                           | • comp_relational_expression OP_GE comp_relational_expression

    IDENTIFIER  shift, and go to state 148
    POSINT      shift, and go to state 149
    SCALAR      shift, and go to state 150
    STRING      shift, and go to state 151
    KW_TRUE     shift, and go to state 153
    KW_FALSE    shift, and go to state 154
    '-'         shift, and go to state 155
    '+'         shift, and go to state 156
    '#'         shift, and go to state 157
    '('         shift, and go to state 158

    comp_function_call          go to state 160
    general_comp_function_call  go to state 161
    comp_primary_expression     go to state 162
    comp_math_expression        go to state 163
    comp_relational_expression  go to state 245


State 201

  111 comp_function_call: • IDENTIFIER '(' ')'
  112                   | • IDENTIFIER '(' comp_expr_comma_list ')'
  113 general_comp_function_call: • comp_function_call
  114                           | • '#' IDENTIFIER '.' comp_function_call
  115                           | • '#' IDENTIFIER '[' comp_expression ']' '.' comp_function_call
  118 comp_primary_expression: • POSINT
  119                        | • SCALAR
  120                        | • '#' IDENTIFIER
  121                        | • IDENTIFIER
  122                        | • STRING
  123                        | • KW_TRUE
  124                        | • KW_FALSE
  125                        | • '(' logic_expression ')'
  126 comp_math_expression: • comp_primary_expression
  127                     | • '+' comp_math_expression
  128                     | • '-' comp_math_expression
  129                     | • comp_math_expression '+' comp_math_expression
  130                     | • comp_math_expression '-' comp_math_expression
  131                     | • comp_math_expression '*' comp_math_expression
  132                     | • comp_math_expression '/' comp_math_expression
  133                     | • comp_math_expression '%' comp_math_expression
  134                     | • comp_math_expression OP_PAW comp_math_expression
  135                     | • '#' IDENTIFIER '[' comp_expression ']'
  136                     | • '#' IDENTIFIER '[' comp_expression ']' '.' '#' IDENTIFIER
  137                     | • '#' IDENTIFIER '[' comp_expression ']' '.' '#' IDENTIFIER '[' comp_expression ']'
  138                     | • general_comp_function_call
  139                     | • '#' IDENTIFIER '.' '#' IDENTIFIER '[' comp_expression ']'
  140                     | • '#' IDENTIFIER '.' '#' IDENTIFIER
  141 comp_relational_expression: • comp_math_expression
  142                           | • comp_relational_expression OP_EQUALS comp_relational_expression
  143                           | • comp_relational_expression OP_NE comp_relational_expression
  144                           | • comp_relational_expression '>' comp_relational_expression
  145                           | • comp_relational_expression '<' comp_relational_expression
  146                           | • comp_relational_expression OP_LE comp_relational_expression
  147                           | • comp_relational_expression OP_GE comp_relational_expression
  148 comp_logic_expression: • comp_relational_expression
  149                      | • OP_NOT comp_logic_expression
  150                      | • comp_logic_expression OP_AND comp_logic_expression
  150                      | comp_logic_expression OP_AND • comp_logic_expression
  151                      | • comp_logic_expression OP_OR comp_logic_expression

    IDENTIFIER  shift, and go to state 148
    POSINT      shift, and go to state 149
    SCALAR      shift, and go to state 150
    STRING      shift, and go to state 151
    OP_NOT      shift, and go to state 152
    KW_TRUE     shift, and go to state 153
    KW_FALSE    shift, and go to state 154
    '-'         shift, and go to state 155
    '+'         shift, and go to state 156
    '#'         shift, and go to state 157
    '('         shift, and go to state 158

    comp_function_call          go to state 160
    general_comp_function_call  go to state 161
    comp_primary_expression     go to state 162
    comp_math_expression        go to state 163
    comp_relational_expression  go to state 164
    comp_logic_expression       go to state 246


State 202

  111 comp_function_call: • IDENTIFIER '(' ')'
  112                   | • IDENTIFIER '(' comp_expr_comma_list ')'
  113 general_comp_function_call: • comp_function_call
  114                           | • '#' IDENTIFIER '.' comp_function_call
  115                           | • '#' IDENTIFIER '[' comp_expression ']' '.' comp_function_call
  118 comp_primary_expression: • POSINT
  119                        | • SCALAR
  120                        | • '#' IDENTIFIER
  121                        | • IDENTIFIER
  122                        | • STRING
  123                        | • KW_TRUE
  124                        | • KW_FALSE
  125                        | • '(' logic_expression ')'
  126 comp_math_expression: • comp_primary_expression
  127                     | • '+' comp_math_expression
  128                     | • '-' comp_math_expression
  129                     | • comp_math_expression '+' comp_math_expression
  130                     | • comp_math_expression '-' comp_math_expression
  131                     | • comp_math_expression '*' comp_math_expression
  132                     | • comp_math_expression '/' comp_math_expression
  133                     | • comp_math_expression '%' comp_math_expression
  134                     | • comp_math_expression OP_PAW comp_math_expression
  135                     | • '#' IDENTIFIER '[' comp_expression ']'
  136                     | • '#' IDENTIFIER '[' comp_expression ']' '.' '#' IDENTIFIER
  137                     | • '#' IDENTIFIER '[' comp_expression ']' '.' '#' IDENTIFIER '[' comp_expression ']'
  138                     | • general_comp_function_call
  139                     | • '#' IDENTIFIER '.' '#' IDENTIFIER '[' comp_expression ']'
  140                     | • '#' IDENTIFIER '.' '#' IDENTIFIER
  141 comp_relational_expression: • comp_math_expression
  142                           | • comp_relational_expression OP_EQUALS comp_relational_expression
  143                           | • comp_relational_expression OP_NE comp_relational_expression
  144                           | • comp_relational_expression '>' comp_relational_expression
  145                           | • comp_relational_expression '<' comp_relational_expression
  146                           | • comp_relational_expression OP_LE comp_relational_expression
  147                           | • comp_relational_expression OP_GE comp_relational_expression
  148 comp_logic_expression: • comp_relational_expression
  149                      | • OP_NOT comp_logic_expression
  150                      | • comp_logic_expression OP_AND comp_logic_expression
  151                      | • comp_logic_expression OP_OR comp_logic_expression
  151                      | comp_logic_expression OP_OR • comp_logic_expression

    IDENTIFIER  shift, and go to state 148
    POSINT      shift, and go to state 149
    SCALAR      shift, and go to state 150
    STRING      shift, and go to state 151
    OP_NOT      shift, and go to state 152
    KW_TRUE     shift, and go to state 153
    KW_FALSE    shift, and go to state 154
    '-'         shift, and go to state 155
    '+'         shift, and go to state 156
    '#'         shift, and go to state 157
    '('         shift, and go to state 158

    comp_function_call          go to state 160
    general_comp_function_call  go to state 161
    comp_primary_expression     go to state 162
    comp_math_expression        go to state 163
    comp_relational_expression  go to state 164
    comp_logic_expression       go to state 247


State 203

  179 comp_identifier_list: '#' IDENTIFIER '[' comp_expression ']' •

    $default  reduce using rule 179 (comp_identifier_list)


State 204

   65 parameter_declaration_list: parameter_declaration_list • ',' parameter_declaration
  169 comp_function_definition: KW_DEF IDENTIFIER '(' parameter_declaration_list • ')' ':' local_var_const_decl_list comp_command_list KW_ENDDEF ';'
  170                         | KW_DEF IDENTIFIER '(' parameter_declaration_list • ')' ':' local_var_const_decl comp_command_list KW_ENDDEF ';'
  171                         | KW_DEF IDENTIFIER '(' parameter_declaration_list • ')' ':' comp_command_list KW_ENDDEF ';'
  172                         | KW_DEF IDENTIFIER '(' parameter_declaration_list • ')' '-' '>' basic_data_type ':' local_var_const_decl_list comp_command_list KW_RETURN comp_expression ';' KW_ENDDEF ';'
  173                         | KW_DEF IDENTIFIER '(' parameter_declaration_list • ')' '-' '>' basic_data_type ':' comp_command_list KW_RETURN comp_expression ';' KW_ENDDEF ';'
  174                         | KW_DEF IDENTIFIER '(' parameter_declaration_list • ')' '-' '>' basic_data_type ':' local_var_const_decl comp_command_list KW_RETURN comp_expression ';' KW_ENDDEF ';'

    ')'  shift, and go to state 248
    ','  shift, and go to state 181


State 205

  111 comp_function_call: • IDENTIFIER '(' ')'
  112                   | • IDENTIFIER '(' comp_expr_comma_list ')'
  113 general_comp_function_call: • comp_function_call
  114                           | • '#' IDENTIFIER '.' comp_function_call
  115                           | • '#' IDENTIFIER '[' comp_expression ']' '.' comp_function_call
  118 comp_primary_expression: • POSINT
  119                        | • SCALAR
  120                        | • '#' IDENTIFIER
  121                        | • IDENTIFIER
  122                        | • STRING
  123                        | • KW_TRUE
  124                        | • KW_FALSE
  125                        | • '(' logic_expression ')'
  126 comp_math_expression: • comp_primary_expression
  127                     | • '+' comp_math_expression
  128                     | • '-' comp_math_expression
  129                     | • comp_math_expression '+' comp_math_expression
  130                     | • comp_math_expression '-' comp_math_expression
  131                     | • comp_math_expression '*' comp_math_expression
  132                     | • comp_math_expression '/' comp_math_expression
  133                     | • comp_math_expression '%' comp_math_expression
  134                     | • comp_math_expression OP_PAW comp_math_expression
  135                     | • '#' IDENTIFIER '[' comp_expression ']'
  136                     | • '#' IDENTIFIER '[' comp_expression ']' '.' '#' IDENTIFIER
  137                     | • '#' IDENTIFIER '[' comp_expression ']' '.' '#' IDENTIFIER '[' comp_expression ']'
  138                     | • general_comp_function_call
  139                     | • '#' IDENTIFIER '.' '#' IDENTIFIER '[' comp_expression ']'
  140                     | • '#' IDENTIFIER '.' '#' IDENTIFIER
  141 comp_relational_expression: • comp_math_expression
  142                           | • comp_relational_expression OP_EQUALS comp_relational_expression
  143                           | • comp_relational_expression OP_NE comp_relational_expression
  144                           | • comp_relational_expression '>' comp_relational_expression
  145                           | • comp_relational_expression '<' comp_relational_expression
  146                           | • comp_relational_expression OP_LE comp_relational_expression
  147                           | • comp_relational_expression OP_GE comp_relational_expression
  148 comp_logic_expression: • comp_relational_expression
  149                      | • OP_NOT comp_logic_expression
  150                      | • comp_logic_expression OP_AND comp_logic_expression
  151                      | • comp_logic_expression OP_OR comp_logic_expression
  152 comp_expression: • comp_logic_expression
  182 comp_identifier_list: comp_identifier_list ',' '#' IDENTIFIER '[' • comp_expression ']'
  183                     | comp_identifier_list ',' '#' IDENTIFIER '[' • ']'

    IDENTIFIER  shift, and go to state 148
    POSINT      shift, and go to state 149
    SCALAR      shift, and go to state 150
    STRING      shift, and go to state 151
    OP_NOT      shift, and go to state 152
    KW_TRUE     shift, and go to state 153
    KW_FALSE    shift, and go to state 154
    '-'         shift, and go to state 155
    '+'         shift, and go to state 156
    '#'         shift, and go to state 157
    '('         shift, and go to state 158
    ']'         shift, and go to state 249

    comp_function_call          go to state 160
    general_comp_function_call  go to state 161
    comp_primary_expression     go to state 162
    comp_math_expression        go to state 163
    comp_relational_expression  go to state 164
    comp_logic_expression       go to state 165
    comp_expression             go to state 250


State 206

   72 expr_comma_list: expr_comma_list ',' expression •

    $default  reduce using rule 72 (expr_comma_list)


State 207

   19 math_expression: IDENTIFIER '[' expression ']' '.' • IDENTIFIER
   20                | IDENTIFIER '[' expression ']' '.' • IDENTIFIER '[' expression ']'
   68 general_function_call: IDENTIFIER '[' expression ']' '.' • function_call
   69 function_call: • IDENTIFIER '(' ')'
   70              | • IDENTIFIER '(' expr_comma_list ')'

    IDENTIFIER  shift, and go to state 251

    function_call  go to state 252


State 208

   22 math_expression: IDENTIFIER '.' IDENTIFIER '[' expression • ']'

    ']'  shift, and go to state 253


State 209

   50 constant_decl: KW_CONST IDENTIFIER '[' ']' '=' expression ':' basic_data_type • ';'

    ';'  shift, and go to state 254


State 210

   36 basic_data_type: • KW_INTEGER
   37                | • KW_BOOLEAN
   38                | • KW_CHAR
   39                | • KW_SCALAR
   40                | • KW_STR
   41                | • IDENTIFIER
   49 constant_decl: KW_CONST IDENTIFIER '[' expression ']' '=' expression ':' • basic_data_type ';'

    IDENTIFIER  shift, and go to state 29
    KW_BOOLEAN  shift, and go to state 30
    KW_STR      shift, and go to state 31
    KW_INTEGER  shift, and go to state 32
    KW_SCALAR   shift, and go to state 33
    KW_CHAR     shift, and go to state 34

    basic_data_type  go to state 255


State 211

   62 parameter_declaration: IDENTIFIER '[' ']' • ':' basic_data_type

    ':'  shift, and go to state 47


State 212

  103 function_definition: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' • '>' basic_data_type ':' local_var_const_decl_list function_command_list KW_RETURN expression ';' KW_ENDDEF ';'
  104                    | KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' • '>' basic_data_type ':' local_var_const_decl function_command_list KW_RETURN expression ';' KW_ENDDEF ';'
  105                    | KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' • '>' basic_data_type ':' function_command_list KW_RETURN expression ';' KW_ENDDEF ';'

    '>'  shift, and go to state 256


State 213

   42 identifier_single: • IDENTIFIER
   43                  | • IDENTIFIER '[' POSINT ']'
   44                  | • IDENTIFIER '[' ']'
   45 identifier_list: • identifier_single ',' identifier_single
   46                | • identifier_single ',' identifier_list
   47                | • identifier_single
   48 constant_decl: • KW_CONST IDENTIFIER '=' expression ':' basic_data_type ';'
   49              | • KW_CONST IDENTIFIER '[' expression ']' '=' expression ':' basic_data_type ';'
   50              | • KW_CONST IDENTIFIER '[' ']' '=' expression ':' basic_data_type ';'
   51 local_var_const_decl_list: • constant_decl local_var_const_decl_list
   52                          | • variable_decl local_var_const_decl_list
   53                          | • local_var_const_decl
   54                          | ε •  [IDENTIFIER, KW_IF, KW_CONTINUE, KW_FOR, KW_WHILE, KW_BREAK, KW_RETURN]
   55 local_var_const_decl: • variable_decl
   56                     | • constant_decl
   57                     | • variable_decl constant_decl
   58                     | • constant_decl variable_decl
   59 variable_decl: • identifier_list ':' basic_data_type ';'
   60              | • parameter_declaration ';'
   61 parameter_declaration: • IDENTIFIER ':' basic_data_type
   62                      | • IDENTIFIER '[' ']' ':' basic_data_type
   66 general_function_call: • function_call
   67                      | • IDENTIFIER '.' function_call
   68                      | • IDENTIFIER '[' expression ']' '.' function_call
   69 function_call: • IDENTIFIER '(' ')'
   70              | • IDENTIFIER '(' expr_comma_list ')'
   80 general_variable: • IDENTIFIER
   81                 | • IDENTIFIER '.' '#' IDENTIFIER
   82                 | • IDENTIFIER '[' expression ']'
   83                 | • IDENTIFIER '.' '#' IDENTIFIER '[' expression ']'
   84 function_command_list: • function_command
   85                      | • function_command_list function_command
   86 function_command: • general_variable assignment_operator expression ';'
   87                 | • KW_IF '(' expression ')' ':' function_command_list KW_ENDIF ';'
   88                 | • KW_IF '(' expression ')' ':' function_command_list KW_ELSE ':' function_command_list KW_ENDIF ';'
   89                 | • KW_FOR general_variable KW_IN '[' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';'
   90                 | • KW_FOR general_variable KW_IN '[' expression ':' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';'
   91                 | • general_variable OP_ASSIGN '[' expression KW_FOR general_variable ':' POSINT ']' ':' basic_data_type ';'
   92                 | • KW_WHILE '(' expression ')' ':' function_command_list KW_ENDWHILE ';'
   93                 | • KW_BREAK ';'
   94                 | • KW_CONTINUE ';'
   95                 | • KW_RETURN ';'
   96                 | • KW_RETURN expression ';'
   97                 | • general_function_call ';'
  100 function_definition: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' • local_var_const_decl_list function_command_list KW_ENDDEF ';'
  101                    | KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' • local_var_const_decl function_command_list KW_ENDDEF ';'
  102                    | KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' • function_command_list KW_ENDDEF ';'

    IDENTIFIER   shift, and go to state 215
    KW_IF        shift, and go to state 216
    KW_CONTINUE  shift, and go to state 217
    KW_FOR       shift, and go to state 218
    KW_WHILE     shift, and go to state 219
    KW_BREAK     shift, and go to state 220
    KW_CONST     shift, and go to state 6
    KW_RETURN    shift, and go to state 221

    IDENTIFIER   [reduce using rule 54 (local_var_const_decl_list)]
    KW_IF        [reduce using rule 54 (local_var_const_decl_list)]
    KW_CONTINUE  [reduce using rule 54 (local_var_const_decl_list)]
    KW_FOR       [reduce using rule 54 (local_var_const_decl_list)]
    KW_WHILE     [reduce using rule 54 (local_var_const_decl_list)]
    KW_BREAK     [reduce using rule 54 (local_var_const_decl_list)]
    KW_RETURN    [reduce using rule 54 (local_var_const_decl_list)]

    identifier_single          go to state 7
    identifier_list            go to state 8
    constant_decl              go to state 9
    local_var_const_decl_list  go to state 257
    local_var_const_decl       go to state 258
    variable_decl              go to state 12
    parameter_declaration      go to state 13
    general_function_call      go to state 224
    function_call              go to state 70
    general_variable           go to state 225
    function_command_list      go to state 259
    function_command           go to state 227

    shift/reduce conflict on token IDENTIFIER:
       54 local_var_const_decl_list: ε •
       42 identifier_single: • IDENTIFIER
      First example: comp_definition_list local_var_const_decl_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' • IDENTIFIER ',' identifier_single ':' basic_data_type ';' local_var_const_decl_list function_command_list KW_ENDDEF ';' function_definition main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                    $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list                                                                                                                                                                                                                   main_unit
                                                                 ↳ 99: function_definition                                                                                                                                                                                              function_definition
                                                                       ↳ 100: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl_list                                                                                    function_command_list KW_ENDDEF ';'
                                                                                                                                       ↳ 52: variable_decl                                                                local_var_const_decl_list
                                                                                                                                             ↳ 59: identifier_list                                ':' basic_data_type ';'
                                                                                                                                                   ↳ 45: identifier_single  ',' identifier_single
                                                                                                                                                         ↳ 42: • IDENTIFIER
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' • IDENTIFIER assignment_operator expression ';' KW_ENDDEF ';' main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list                                                                                                                                                                               main_unit
                                                                 ↳ 99: function_definition_list function_definition
                                                                                                ↳ 100: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl_list function_command_list                                           KW_ENDDEF ';'
                                                                                                                                                                ↳ 54: ε •                 ↳ 84: function_command
                                                                                                                                                                                                ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                                                                      ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       54 local_var_const_decl_list: ε •
       43 identifier_single: • IDENTIFIER '[' POSINT ']'
      First example: comp_definition_list local_var_const_decl_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' • IDENTIFIER '[' POSINT ']' ',' identifier_single ':' basic_data_type ';' local_var_const_decl_list function_command_list KW_ENDDEF ';' function_definition main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                   $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list                                                                                                                                                                                                                                  main_unit
                                                                 ↳ 99: function_definition                                                                                                                                                                                                             function_definition
                                                                       ↳ 100: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl_list                                                                                                   function_command_list KW_ENDDEF ';'
                                                                                                                                       ↳ 52: variable_decl                                                                               local_var_const_decl_list
                                                                                                                                             ↳ 59: identifier_list                                               ':' basic_data_type ';'
                                                                                                                                                   ↳ 45: identifier_single                 ',' identifier_single
                                                                                                                                                         ↳ 43: • IDENTIFIER '[' POSINT ']'
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' • IDENTIFIER assignment_operator expression ';' KW_ENDDEF ';' main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list                                                                                                                                                                               main_unit
                                                                 ↳ 99: function_definition_list function_definition
                                                                                                ↳ 100: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl_list function_command_list                                           KW_ENDDEF ';'
                                                                                                                                                                ↳ 54: ε •                 ↳ 84: function_command
                                                                                                                                                                                                ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                                                                      ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       54 local_var_const_decl_list: ε •
       44 identifier_single: • IDENTIFIER '[' ']'
      First example: comp_definition_list local_var_const_decl_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' • IDENTIFIER '[' ']' ',' identifier_single ':' basic_data_type ';' local_var_const_decl_list function_command_list KW_ENDDEF ';' function_definition main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                            $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list                                                                                                                                                                                                                           main_unit
                                                                 ↳ 99: function_definition                                                                                                                                                                                                      function_definition
                                                                       ↳ 100: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl_list                                                                                            function_command_list KW_ENDDEF ';'
                                                                                                                                       ↳ 52: variable_decl                                                                        local_var_const_decl_list
                                                                                                                                             ↳ 59: identifier_list                                        ':' basic_data_type ';'
                                                                                                                                                   ↳ 45: identifier_single          ',' identifier_single
                                                                                                                                                         ↳ 44: • IDENTIFIER '[' ']'
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' • IDENTIFIER assignment_operator expression ';' KW_ENDDEF ';' main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list                                                                                                                                                                               main_unit
                                                                 ↳ 99: function_definition_list function_definition
                                                                                                ↳ 100: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl_list function_command_list                                           KW_ENDDEF ';'
                                                                                                                                                                ↳ 54: ε •                 ↳ 84: function_command
                                                                                                                                                                                                ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                                                                      ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       54 local_var_const_decl_list: ε •
       61 parameter_declaration: • IDENTIFIER ':' basic_data_type
      First example: comp_definition_list local_var_const_decl_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' • IDENTIFIER ':' basic_data_type ';' local_var_const_decl_list function_command_list KW_ENDDEF ';' function_definition main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                        $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list                                                                                                                                                                                       main_unit
                                                                 ↳ 99: function_definition                                                                                                                                                                  function_definition
                                                                       ↳ 100: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl_list                                                        function_command_list KW_ENDDEF ';'
                                                                                                                                       ↳ 52: variable_decl                                    local_var_const_decl_list
                                                                                                                                             ↳ 60: parameter_declaration                  ';'
                                                                                                                                                   ↳ 61: • IDENTIFIER ':' basic_data_type
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' • IDENTIFIER assignment_operator expression ';' KW_ENDDEF ';' main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list                                                                                                                                                                               main_unit
                                                                 ↳ 99: function_definition_list function_definition
                                                                                                ↳ 100: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl_list function_command_list                                           KW_ENDDEF ';'
                                                                                                                                                                ↳ 54: ε •                 ↳ 84: function_command
                                                                                                                                                                                                ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                                                                      ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       54 local_var_const_decl_list: ε •
       62 parameter_declaration: • IDENTIFIER '[' ']' ':' basic_data_type
      First example: comp_definition_list local_var_const_decl_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' • IDENTIFIER '[' ']' ':' basic_data_type ';' local_var_const_decl_list function_command_list KW_ENDDEF ';' function_definition main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list                                                                                                                                                                                               main_unit
                                                                 ↳ 99: function_definition                                                                                                                                                                          function_definition
                                                                       ↳ 100: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl_list                                                                function_command_list KW_ENDDEF ';'
                                                                                                                                       ↳ 52: variable_decl                                            local_var_const_decl_list
                                                                                                                                             ↳ 60: parameter_declaration                          ';'
                                                                                                                                                   ↳ 62: • IDENTIFIER '[' ']' ':' basic_data_type
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' • IDENTIFIER assignment_operator expression ';' KW_ENDDEF ';' main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list                                                                                                                                                                               main_unit
                                                                 ↳ 99: function_definition_list function_definition
                                                                                                ↳ 100: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl_list function_command_list                                           KW_ENDDEF ';'
                                                                                                                                                                ↳ 54: ε •                 ↳ 84: function_command
                                                                                                                                                                                                ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                                                                      ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       54 local_var_const_decl_list: ε •
       67 general_function_call: • IDENTIFIER '.' function_call
      First example: comp_definition_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' • IDENTIFIER '.' function_call ';' KW_ENDDEF ';' function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                          $end
             ↳ 1: comp_definition_list function_definition_list                                                                                                                                          function_definition_list main_unit
                                       ↳ 99: function_definition_list function_definition
                                                                      ↳ 102: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' function_command_list                                KW_ENDDEF ';'
                                                                                                                                      ↳ 84: function_command
                                                                                                                                            ↳ 97: general_function_call                ';'
                                                                                                                                                  ↳ 67: • IDENTIFIER '.' function_call
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' • IDENTIFIER assignment_operator expression ';' KW_ENDDEF ';' main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list                                                                                                                                                                               main_unit
                                                                 ↳ 99: function_definition_list function_definition
                                                                                                ↳ 100: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl_list function_command_list                                           KW_ENDDEF ';'
                                                                                                                                                                ↳ 54: ε •                 ↳ 84: function_command
                                                                                                                                                                                                ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                                                                      ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       54 local_var_const_decl_list: ε •
       68 general_function_call: • IDENTIFIER '[' expression ']' '.' function_call
      First example: comp_definition_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' • IDENTIFIER '[' expression ']' '.' function_call ';' KW_ENDDEF ';' function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                             $end
             ↳ 1: comp_definition_list function_definition_list                                                                                                                                                             function_definition_list main_unit
                                       ↳ 99: function_definition_list function_definition
                                                                      ↳ 102: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' function_command_list                                                   KW_ENDDEF ';'
                                                                                                                                      ↳ 84: function_command
                                                                                                                                            ↳ 97: general_function_call                                   ';'
                                                                                                                                                  ↳ 68: • IDENTIFIER '[' expression ']' '.' function_call
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' • IDENTIFIER assignment_operator expression ';' KW_ENDDEF ';' main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list                                                                                                                                                                               main_unit
                                                                 ↳ 99: function_definition_list function_definition
                                                                                                ↳ 100: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl_list function_command_list                                           KW_ENDDEF ';'
                                                                                                                                                                ↳ 54: ε •                 ↳ 84: function_command
                                                                                                                                                                                                ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                                                                      ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       54 local_var_const_decl_list: ε •
       69 function_call: • IDENTIFIER '(' ')'
      First example: comp_definition_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' • IDENTIFIER '(' ')' ';' KW_ENDDEF ';' function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                      $end
             ↳ 1: comp_definition_list function_definition_list                                                                                                                                      function_definition_list main_unit
                                       ↳ 99: function_definition_list function_definition
                                                                      ↳ 102: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' function_command_list                            KW_ENDDEF ';'
                                                                                                                                      ↳ 84: function_command
                                                                                                                                            ↳ 97: general_function_call            ';'
                                                                                                                                                  ↳ 66: function_call
                                                                                                                                                        ↳ 69: • IDENTIFIER '(' ')'
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' • IDENTIFIER assignment_operator expression ';' KW_ENDDEF ';' main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list                                                                                                                                                                               main_unit
                                                                 ↳ 99: function_definition_list function_definition
                                                                                                ↳ 100: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl_list function_command_list                                           KW_ENDDEF ';'
                                                                                                                                                                ↳ 54: ε •                 ↳ 84: function_command
                                                                                                                                                                                                ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                                                                      ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       54 local_var_const_decl_list: ε •
       70 function_call: • IDENTIFIER '(' expr_comma_list ')'
      First example: comp_definition_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' • IDENTIFIER '(' expr_comma_list ')' ';' KW_ENDDEF ';' function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                      $end
             ↳ 1: comp_definition_list function_definition_list                                                                                                                                                      function_definition_list main_unit
                                       ↳ 99: function_definition_list function_definition
                                                                      ↳ 102: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' function_command_list                                            KW_ENDDEF ';'
                                                                                                                                      ↳ 84: function_command
                                                                                                                                            ↳ 97: general_function_call                            ';'
                                                                                                                                                  ↳ 66: function_call
                                                                                                                                                        ↳ 70: • IDENTIFIER '(' expr_comma_list ')'
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' • IDENTIFIER assignment_operator expression ';' KW_ENDDEF ';' main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list                                                                                                                                                                               main_unit
                                                                 ↳ 99: function_definition_list function_definition
                                                                                                ↳ 100: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl_list function_command_list                                           KW_ENDDEF ';'
                                                                                                                                                                ↳ 54: ε •                 ↳ 84: function_command
                                                                                                                                                                                                ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                                                                      ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       54 local_var_const_decl_list: ε •
       80 general_variable: • IDENTIFIER
      First example: comp_definition_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' • IDENTIFIER assignment_operator expression ';' KW_ENDDEF ';' function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                       $end
             ↳ 1: comp_definition_list function_definition_list                                                                                                                                                       function_definition_list main_unit
                                       ↳ 99: function_definition_list function_definition
                                                                      ↳ 102: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' function_command_list                                             KW_ENDDEF ';'
                                                                                                                                      ↳ 84: function_command
                                                                                                                                            ↳ 86: general_variable   assignment_operator expression ';'
                                                                                                                                                  ↳ 80: • IDENTIFIER
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' • IDENTIFIER assignment_operator expression ';' KW_ENDDEF ';' main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list                                                                                                                                                                               main_unit
                                                                 ↳ 99: function_definition_list function_definition
                                                                                                ↳ 100: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl_list function_command_list                                           KW_ENDDEF ';'
                                                                                                                                                                ↳ 54: ε •                 ↳ 84: function_command
                                                                                                                                                                                                ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                                                                      ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       54 local_var_const_decl_list: ε •
       81 general_variable: • IDENTIFIER '.' '#' IDENTIFIER
      First example: comp_definition_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' • IDENTIFIER '.' '#' IDENTIFIER assignment_operator expression ';' KW_ENDDEF ';' function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                          $end
             ↳ 1: comp_definition_list function_definition_list                                                                                                                                                                          function_definition_list main_unit
                                       ↳ 99: function_definition_list function_definition
                                                                      ↳ 102: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' function_command_list                                                                KW_ENDDEF ';'
                                                                                                                                      ↳ 84: function_command
                                                                                                                                            ↳ 86: general_variable                      assignment_operator expression ';'
                                                                                                                                                  ↳ 81: • IDENTIFIER '.' '#' IDENTIFIER
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' • IDENTIFIER assignment_operator expression ';' KW_ENDDEF ';' main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list                                                                                                                                                                               main_unit
                                                                 ↳ 99: function_definition_list function_definition
                                                                                                ↳ 100: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl_list function_command_list                                           KW_ENDDEF ';'
                                                                                                                                                                ↳ 54: ε •                 ↳ 84: function_command
                                                                                                                                                                                                ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                                                                      ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       54 local_var_const_decl_list: ε •
       82 general_variable: • IDENTIFIER '[' expression ']'
      First example: comp_definition_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' • IDENTIFIER '[' expression ']' assignment_operator expression ';' KW_ENDDEF ';' function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                          $end
             ↳ 1: comp_definition_list function_definition_list                                                                                                                                                                          function_definition_list main_unit
                                       ↳ 99: function_definition_list function_definition
                                                                      ↳ 102: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' function_command_list                                                                KW_ENDDEF ';'
                                                                                                                                      ↳ 84: function_command
                                                                                                                                            ↳ 86: general_variable                      assignment_operator expression ';'
                                                                                                                                                  ↳ 82: • IDENTIFIER '[' expression ']'
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' • IDENTIFIER assignment_operator expression ';' KW_ENDDEF ';' main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list                                                                                                                                                                               main_unit
                                                                 ↳ 99: function_definition_list function_definition
                                                                                                ↳ 100: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl_list function_command_list                                           KW_ENDDEF ';'
                                                                                                                                                                ↳ 54: ε •                 ↳ 84: function_command
                                                                                                                                                                                                ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                                                                      ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       54 local_var_const_decl_list: ε •
       83 general_variable: • IDENTIFIER '.' '#' IDENTIFIER '[' expression ']'
      First example: comp_definition_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' • IDENTIFIER '.' '#' IDENTIFIER '[' expression ']' assignment_operator expression ';' KW_ENDDEF ';' function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                             $end
             ↳ 1: comp_definition_list function_definition_list                                                                                                                                                                                             function_definition_list main_unit
                                       ↳ 99: function_definition_list function_definition
                                                                      ↳ 102: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' function_command_list                                                                                   KW_ENDDEF ';'
                                                                                                                                      ↳ 84: function_command
                                                                                                                                            ↳ 86: general_variable                                         assignment_operator expression ';'
                                                                                                                                                  ↳ 83: • IDENTIFIER '.' '#' IDENTIFIER '[' expression ']'
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' • IDENTIFIER assignment_operator expression ';' KW_ENDDEF ';' main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list                                                                                                                                                                               main_unit
                                                                 ↳ 99: function_definition_list function_definition
                                                                                                ↳ 100: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl_list function_command_list                                           KW_ENDDEF ';'
                                                                                                                                                                ↳ 54: ε •                 ↳ 84: function_command
                                                                                                                                                                                                ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                                                                      ↳ 80: IDENTIFIER

    shift/reduce conflict on token KW_IF:
       54 local_var_const_decl_list: ε •
       87 function_command: • KW_IF '(' expression ')' ':' function_command_list KW_ENDIF ';'
      First example: comp_definition_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' • KW_IF '(' expression ')' ':' function_command_list KW_ENDIF ';' KW_ENDDEF ';' function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                   $end
             ↳ 1: comp_definition_list function_definition_list                                                                                                                                                                   function_definition_list main_unit
                                       ↳ 99: function_definition_list function_definition
                                                                      ↳ 102: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' function_command_list                                                         KW_ENDDEF ';'
                                                                                                                                      ↳ 84: function_command
                                                                                                                                            ↳ 87: • KW_IF '(' expression ')' ':' function_command_list KW_ENDIF ';'
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' • KW_IF '(' expression ')' ':' function_command_list KW_ENDIF ';' KW_ENDDEF ';' main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                            $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list                                                                                                                                                                                           main_unit
                                                                 ↳ 99: function_definition_list function_definition
                                                                                                ↳ 100: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl_list function_command_list                                                       KW_ENDDEF ';'
                                                                                                                                                                ↳ 54: ε •                 ↳ 84: function_command
                                                                                                                                                                                                ↳ 87: KW_IF '(' expression ')' ':' function_command_list KW_ENDIF ';'

    shift/reduce conflict on token KW_IF:
       54 local_var_const_decl_list: ε •
       88 function_command: • KW_IF '(' expression ')' ':' function_command_list KW_ELSE ':' function_command_list KW_ENDIF ';'
      First example: comp_definition_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' • KW_IF '(' expression ')' ':' function_command_list KW_ELSE ':' function_command_list KW_ENDIF ';' KW_ENDDEF ';' function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                     $end
             ↳ 1: comp_definition_list function_definition_list                                                                                                                                                                                                     function_definition_list main_unit
                                       ↳ 99: function_definition_list function_definition
                                                                      ↳ 102: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' function_command_list                                                                                           KW_ENDDEF ';'
                                                                                                                                      ↳ 84: function_command
                                                                                                                                            ↳ 88: • KW_IF '(' expression ')' ':' function_command_list KW_ELSE ':' function_command_list KW_ENDIF ';'
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' • KW_IF '(' expression ')' ':' function_command_list KW_ENDIF ';' KW_ENDDEF ';' main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                            $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list                                                                                                                                                                                           main_unit
                                                                 ↳ 99: function_definition_list function_definition
                                                                                                ↳ 100: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl_list function_command_list                                                       KW_ENDDEF ';'
                                                                                                                                                                ↳ 54: ε •                 ↳ 84: function_command
                                                                                                                                                                                                ↳ 87: KW_IF '(' expression ')' ':' function_command_list KW_ENDIF ';'

    shift/reduce conflict on token KW_FOR:
       54 local_var_const_decl_list: ε •
       89 function_command: • KW_FOR general_variable KW_IN '[' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';'
      First example: comp_definition_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' • KW_FOR general_variable KW_IN '[' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';' KW_ENDDEF ';' function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                           $end
             ↳ 1: comp_definition_list function_definition_list                                                                                                                                                                                                           function_definition_list main_unit
                                       ↳ 99: function_definition_list function_definition
                                                                      ↳ 102: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' function_command_list                                                                                                 KW_ENDDEF ';'
                                                                                                                                      ↳ 84: function_command
                                                                                                                                            ↳ 89: • KW_FOR general_variable KW_IN '[' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';'
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' • KW_FOR general_variable KW_IN '[' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';' KW_ENDDEF ';' main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                    $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list                                                                                                                                                                                                                                   main_unit
                                                                 ↳ 99: function_definition_list function_definition
                                                                                                ↳ 100: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl_list function_command_list                                                                                               KW_ENDDEF ';'
                                                                                                                                                                ↳ 54: ε •                 ↳ 84: function_command
                                                                                                                                                                                                ↳ 89: KW_FOR general_variable KW_IN '[' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';'

    shift/reduce conflict on token KW_FOR:
       54 local_var_const_decl_list: ε •
       90 function_command: • KW_FOR general_variable KW_IN '[' expression ':' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';'
      First example: comp_definition_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' • KW_FOR general_variable KW_IN '[' expression ':' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';' KW_ENDDEF ';' function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                          $end
             ↳ 1: comp_definition_list function_definition_list                                                                                                                                                                                                                          function_definition_list main_unit
                                       ↳ 99: function_definition_list function_definition
                                                                      ↳ 102: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' function_command_list                                                                                                                KW_ENDDEF ';'
                                                                                                                                      ↳ 84: function_command
                                                                                                                                            ↳ 90: • KW_FOR general_variable KW_IN '[' expression ':' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';'
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' • KW_FOR general_variable KW_IN '[' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';' KW_ENDDEF ';' main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                    $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list                                                                                                                                                                                                                                   main_unit
                                                                 ↳ 99: function_definition_list function_definition
                                                                                                ↳ 100: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl_list function_command_list                                                                                               KW_ENDDEF ';'
                                                                                                                                                                ↳ 54: ε •                 ↳ 84: function_command
                                                                                                                                                                                                ↳ 89: KW_FOR general_variable KW_IN '[' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';'

    shift/reduce conflict on token KW_WHILE:
       54 local_var_const_decl_list: ε •
       92 function_command: • KW_WHILE '(' expression ')' ':' function_command_list KW_ENDWHILE ';'
      First example: comp_definition_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' • KW_WHILE '(' expression ')' ':' function_command_list KW_ENDWHILE ';' KW_ENDDEF ';' function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                         $end
             ↳ 1: comp_definition_list function_definition_list                                                                                                                                                                         function_definition_list main_unit
                                       ↳ 99: function_definition_list function_definition
                                                                      ↳ 102: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' function_command_list                                                               KW_ENDDEF ';'
                                                                                                                                      ↳ 84: function_command
                                                                                                                                            ↳ 92: • KW_WHILE '(' expression ')' ':' function_command_list KW_ENDWHILE ';'
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' • KW_WHILE '(' expression ')' ':' function_command_list KW_ENDWHILE ';' KW_ENDDEF ';' main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                  $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list                                                                                                                                                                                                 main_unit
                                                                 ↳ 99: function_definition_list function_definition
                                                                                                ↳ 100: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl_list function_command_list                                                             KW_ENDDEF ';'
                                                                                                                                                                ↳ 54: ε •                 ↳ 84: function_command
                                                                                                                                                                                                ↳ 92: KW_WHILE '(' expression ')' ':' function_command_list KW_ENDWHILE ';'

    shift/reduce conflict on token KW_BREAK:
       54 local_var_const_decl_list: ε •
       93 function_command: • KW_BREAK ';'
      First example: comp_definition_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' • KW_BREAK ';' KW_ENDDEF ';' function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                $end
             ↳ 1: comp_definition_list function_definition_list                                                                                                                function_definition_list main_unit
                                       ↳ 99: function_definition_list function_definition
                                                                      ↳ 102: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' function_command_list      KW_ENDDEF ';'
                                                                                                                                      ↳ 84: function_command
                                                                                                                                            ↳ 93: • KW_BREAK ';'
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' • KW_BREAK ';' KW_ENDDEF ';' main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                         $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list                                                                                                                                        main_unit
                                                                 ↳ 99: function_definition_list function_definition
                                                                                                ↳ 100: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl_list function_command_list    KW_ENDDEF ';'
                                                                                                                                                                ↳ 54: ε •                 ↳ 84: function_command
                                                                                                                                                                                                ↳ 93: KW_BREAK ';'

    shift/reduce conflict on token KW_CONTINUE:
       54 local_var_const_decl_list: ε •
       94 function_command: • KW_CONTINUE ';'
      First example: comp_definition_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' • KW_CONTINUE ';' KW_ENDDEF ';' function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                   $end
             ↳ 1: comp_definition_list function_definition_list                                                                                                                   function_definition_list main_unit
                                       ↳ 99: function_definition_list function_definition
                                                                      ↳ 102: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' function_command_list         KW_ENDDEF ';'
                                                                                                                                      ↳ 84: function_command
                                                                                                                                            ↳ 94: • KW_CONTINUE ';'
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' • KW_CONTINUE ';' KW_ENDDEF ';' main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                            $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list                                                                                                                                           main_unit
                                                                 ↳ 99: function_definition_list function_definition
                                                                                                ↳ 100: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl_list function_command_list       KW_ENDDEF ';'
                                                                                                                                                                ↳ 54: ε •                 ↳ 84: function_command
                                                                                                                                                                                                ↳ 94: KW_CONTINUE ';'

    shift/reduce conflict on token KW_RETURN:
       54 local_var_const_decl_list: ε •
       95 function_command: • KW_RETURN ';'
      First example: comp_definition_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' • KW_RETURN ';' KW_ENDDEF ';' function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                 $end
             ↳ 1: comp_definition_list function_definition_list                                                                                                                 function_definition_list main_unit
                                       ↳ 99: function_definition_list function_definition
                                                                      ↳ 102: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' function_command_list       KW_ENDDEF ';'
                                                                                                                                      ↳ 84: function_command
                                                                                                                                            ↳ 95: • KW_RETURN ';'
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' • KW_RETURN ';' KW_ENDDEF ';' main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                          $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list                                                                                                                                         main_unit
                                                                 ↳ 99: function_definition_list function_definition
                                                                                                ↳ 100: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl_list function_command_list     KW_ENDDEF ';'
                                                                                                                                                                ↳ 54: ε •                 ↳ 84: function_command
                                                                                                                                                                                                ↳ 95: KW_RETURN ';'

    shift/reduce conflict on token KW_RETURN:
       54 local_var_const_decl_list: ε •
       96 function_command: • KW_RETURN expression ';'
      First example: comp_definition_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' • KW_RETURN expression ';' KW_ENDDEF ';' function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                            $end
             ↳ 1: comp_definition_list function_definition_list                                                                                                                            function_definition_list main_unit
                                       ↳ 99: function_definition_list function_definition
                                                                      ↳ 102: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' function_command_list                  KW_ENDDEF ';'
                                                                                                                                      ↳ 84: function_command
                                                                                                                                            ↳ 96: • KW_RETURN expression ';'
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' • KW_RETURN ';' KW_ENDDEF ';' main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                          $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list                                                                                                                                         main_unit
                                                                 ↳ 99: function_definition_list function_definition
                                                                                                ↳ 100: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl_list function_command_list     KW_ENDDEF ';'
                                                                                                                                                                ↳ 54: ε •                 ↳ 84: function_command
                                                                                                                                                                                                ↳ 95: KW_RETURN ';'



State 214

   65 parameter_declaration_list: parameter_declaration_list ',' parameter_declaration •

    $default  reduce using rule 65 (parameter_declaration_list)


State 215

   42 identifier_single: IDENTIFIER •  [',', ':']
   43                  | IDENTIFIER • '[' POSINT ']'
   44                  | IDENTIFIER • '[' ']'
   61 parameter_declaration: IDENTIFIER • ':' basic_data_type
   62                      | IDENTIFIER • '[' ']' ':' basic_data_type
   67 general_function_call: IDENTIFIER • '.' function_call
   68                      | IDENTIFIER • '[' expression ']' '.' function_call
   69 function_call: IDENTIFIER • '(' ')'
   70              | IDENTIFIER • '(' expr_comma_list ')'
   80 general_variable: IDENTIFIER •  [OP_ASSIGN, OP_ASSIGN_PLUSEQ, OP_ASSIGN_MULEQ, OP_ASSIGN_DIVEQ, OP_ASSIGN_MODEQ, OP_ASSIGN_MINUSEQ, '=']
   81                 | IDENTIFIER • '.' '#' IDENTIFIER
   82                 | IDENTIFIER • '[' expression ']'
   83                 | IDENTIFIER • '.' '#' IDENTIFIER '[' expression ']'

    '('  shift, and go to state 86
    '['  shift, and go to state 260
    '.'  shift, and go to state 261
    ':'  shift, and go to state 16

    ','       reduce using rule 42 (identifier_single)
    ':'       [reduce using rule 42 (identifier_single)]
    $default  reduce using rule 80 (general_variable)

    shift/reduce conflict on token ':':
       42 identifier_single: IDENTIFIER •
       61 parameter_declaration: IDENTIFIER • ':' basic_data_type
      First example: comp_definition_list local_var_const_decl_list KW_DEF KW_MAIN '(' ')' ':' IDENTIFIER • ':' basic_data_type ';' local_var_const_decl_list function_command_list KW_ENDDEF ';' main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                $end
             ↳ 1: comp_definition_list local_var_const_decl_list main_unit                                                                                                                                              main_unit
                                                                 ↳ 189: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl_list                                                        function_command_list KW_ENDDEF ';'
                                                                                                   ↳ 52: variable_decl                                    local_var_const_decl_list
                                                                                                         ↳ 60: parameter_declaration                  ';'
                                                                                                               ↳ 61: IDENTIFIER • ':' basic_data_type
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' IDENTIFIER • ':' basic_data_type ';' local_var_const_decl_list function_command_list KW_ENDDEF ';' $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                     $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 189: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl_list                                                              function_command_list KW_ENDDEF ';'
                                                                                                                            ↳ 52: variable_decl                                          local_var_const_decl_list
                                                                                                                                  ↳ 59: identifier_list          ':' basic_data_type ';'
                                                                                                                                        ↳ 47: identifier_single
                                                                                                                                              ↳ 42: IDENTIFIER •



State 216

   87 function_command: KW_IF • '(' expression ')' ':' function_command_list KW_ENDIF ';'
   88                 | KW_IF • '(' expression ')' ':' function_command_list KW_ELSE ':' function_command_list KW_ENDIF ';'

    '('  shift, and go to state 262


State 217

   94 function_command: KW_CONTINUE • ';'

    ';'  shift, and go to state 263


State 218

   80 general_variable: • IDENTIFIER
   81                 | • IDENTIFIER '.' '#' IDENTIFIER
   82                 | • IDENTIFIER '[' expression ']'
   83                 | • IDENTIFIER '.' '#' IDENTIFIER '[' expression ']'
   89 function_command: KW_FOR • general_variable KW_IN '[' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';'
   90                 | KW_FOR • general_variable KW_IN '[' expression ':' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';'

    IDENTIFIER  shift, and go to state 264

    general_variable  go to state 265


State 219

   92 function_command: KW_WHILE • '(' expression ')' ':' function_command_list KW_ENDWHILE ';'

    '('  shift, and go to state 266


State 220

   93 function_command: KW_BREAK • ';'

    ';'  shift, and go to state 267


State 221

    2 primary_expression: • POSINT
    3                   | • SCALAR
    4                   | • IDENTIFIER
    5                   | • STRING
    6                   | • KW_TRUE
    7                   | • KW_FALSE
    8                   | • '(' logic_expression ')'
    9 math_expression: • primary_expression
   10                | • '+' math_expression
   11                | • '-' math_expression
   12                | • math_expression '+' math_expression
   13                | • math_expression '-' math_expression
   14                | • math_expression '*' math_expression
   15                | • math_expression '/' math_expression
   16                | • math_expression '%' math_expression
   17                | • math_expression OP_PAW math_expression
   18                | • IDENTIFIER '[' expression ']'
   19                | • IDENTIFIER '[' expression ']' '.' IDENTIFIER
   20                | • IDENTIFIER '[' expression ']' '.' IDENTIFIER '[' expression ']'
   21                | • general_function_call
   22                | • IDENTIFIER '.' IDENTIFIER '[' expression ']'
   23                | • IDENTIFIER '.' IDENTIFIER
   24 relational_expression: • math_expression
   25                      | • relational_expression OP_EQUALS relational_expression
   26                      | • relational_expression OP_NE relational_expression
   27                      | • relational_expression '>' relational_expression
   28                      | • relational_expression '<' relational_expression
   29                      | • relational_expression OP_LE relational_expression
   30                      | • relational_expression OP_GE relational_expression
   31 logic_expression: • relational_expression
   32                 | • OP_NOT logic_expression
   33                 | • logic_expression OP_AND logic_expression
   34                 | • logic_expression OP_OR logic_expression
   35 expression: • logic_expression
   66 general_function_call: • function_call
   67                      | • IDENTIFIER '.' function_call
   68                      | • IDENTIFIER '[' expression ']' '.' function_call
   69 function_call: • IDENTIFIER '(' ')'
   70              | • IDENTIFIER '(' expr_comma_list ')'
   95 function_command: KW_RETURN • ';'
   96                 | KW_RETURN • expression ';'

    IDENTIFIER  shift, and go to state 53
    POSINT      shift, and go to state 54
    SCALAR      shift, and go to state 55
    STRING      shift, and go to state 56
    OP_NOT      shift, and go to state 57
    KW_TRUE     shift, and go to state 58
    KW_FALSE    shift, and go to state 59
    '-'         shift, and go to state 60
    '+'         shift, and go to state 61
    '('         shift, and go to state 62
    ';'         shift, and go to state 268

    primary_expression     go to state 64
    math_expression        go to state 65
    relational_expression  go to state 66
    logic_expression       go to state 67
    expression             go to state 269
    general_function_call  go to state 69
    function_call          go to state 70


State 222

   66 general_function_call: • function_call
   67                      | • IDENTIFIER '.' function_call
   68                      | • IDENTIFIER '[' expression ']' '.' function_call
   69 function_call: • IDENTIFIER '(' ')'
   70              | • IDENTIFIER '(' expr_comma_list ')'
   80 general_variable: • IDENTIFIER
   81                 | • IDENTIFIER '.' '#' IDENTIFIER
   82                 | • IDENTIFIER '[' expression ']'
   83                 | • IDENTIFIER '.' '#' IDENTIFIER '[' expression ']'
   84 function_command_list: • function_command
   85                      | • function_command_list function_command
   86 function_command: • general_variable assignment_operator expression ';'
   87                 | • KW_IF '(' expression ')' ':' function_command_list KW_ENDIF ';'
   88                 | • KW_IF '(' expression ')' ':' function_command_list KW_ELSE ':' function_command_list KW_ENDIF ';'
   89                 | • KW_FOR general_variable KW_IN '[' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';'
   90                 | • KW_FOR general_variable KW_IN '[' expression ':' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';'
   91                 | • general_variable OP_ASSIGN '[' expression KW_FOR general_variable ':' POSINT ']' ':' basic_data_type ';'
   92                 | • KW_WHILE '(' expression ')' ':' function_command_list KW_ENDWHILE ';'
   93                 | • KW_BREAK ';'
   94                 | • KW_CONTINUE ';'
   95                 | • KW_RETURN ';'
   96                 | • KW_RETURN expression ';'
   97                 | • general_function_call ';'
  189 main_unit: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl_list • function_command_list KW_ENDDEF ';'

    IDENTIFIER   shift, and go to state 270
    KW_IF        shift, and go to state 216
    KW_CONTINUE  shift, and go to state 217
    KW_FOR       shift, and go to state 218
    KW_WHILE     shift, and go to state 219
    KW_BREAK     shift, and go to state 220
    KW_RETURN    shift, and go to state 221

    general_function_call  go to state 224
    function_call          go to state 70
    general_variable       go to state 225
    function_command_list  go to state 271
    function_command       go to state 227


State 223

   53 local_var_const_decl_list: local_var_const_decl •  [IDENTIFIER, KW_IF, KW_CONTINUE, KW_FOR, KW_WHILE, KW_BREAK, KW_RETURN]
   66 general_function_call: • function_call
   67                      | • IDENTIFIER '.' function_call
   68                      | • IDENTIFIER '[' expression ']' '.' function_call
   69 function_call: • IDENTIFIER '(' ')'
   70              | • IDENTIFIER '(' expr_comma_list ')'
   80 general_variable: • IDENTIFIER
   81                 | • IDENTIFIER '.' '#' IDENTIFIER
   82                 | • IDENTIFIER '[' expression ']'
   83                 | • IDENTIFIER '.' '#' IDENTIFIER '[' expression ']'
   84 function_command_list: • function_command
   85                      | • function_command_list function_command
   86 function_command: • general_variable assignment_operator expression ';'
   87                 | • KW_IF '(' expression ')' ':' function_command_list KW_ENDIF ';'
   88                 | • KW_IF '(' expression ')' ':' function_command_list KW_ELSE ':' function_command_list KW_ENDIF ';'
   89                 | • KW_FOR general_variable KW_IN '[' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';'
   90                 | • KW_FOR general_variable KW_IN '[' expression ':' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';'
   91                 | • general_variable OP_ASSIGN '[' expression KW_FOR general_variable ':' POSINT ']' ':' basic_data_type ';'
   92                 | • KW_WHILE '(' expression ')' ':' function_command_list KW_ENDWHILE ';'
   93                 | • KW_BREAK ';'
   94                 | • KW_CONTINUE ';'
   95                 | • KW_RETURN ';'
   96                 | • KW_RETURN expression ';'
   97                 | • general_function_call ';'
  190 main_unit: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl • function_command_list KW_ENDDEF ';'

    IDENTIFIER   shift, and go to state 270
    KW_IF        shift, and go to state 216
    KW_CONTINUE  shift, and go to state 217
    KW_FOR       shift, and go to state 218
    KW_WHILE     shift, and go to state 219
    KW_BREAK     shift, and go to state 220
    KW_RETURN    shift, and go to state 221

    IDENTIFIER   [reduce using rule 53 (local_var_const_decl_list)]
    KW_IF        [reduce using rule 53 (local_var_const_decl_list)]
    KW_CONTINUE  [reduce using rule 53 (local_var_const_decl_list)]
    KW_FOR       [reduce using rule 53 (local_var_const_decl_list)]
    KW_WHILE     [reduce using rule 53 (local_var_const_decl_list)]
    KW_BREAK     [reduce using rule 53 (local_var_const_decl_list)]
    KW_RETURN    [reduce using rule 53 (local_var_const_decl_list)]

    general_function_call  go to state 224
    function_call          go to state 70
    general_variable       go to state 225
    function_command_list  go to state 272
    function_command       go to state 227

    shift/reduce conflict on token IDENTIFIER:
       53 local_var_const_decl_list: local_var_const_decl •
       67 general_function_call: • IDENTIFIER '.' function_call
      First example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl • IDENTIFIER '.' function_call ';' KW_ENDDEF ';'
      Shift derivation
        input
        ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                     ↳ 190: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl function_command_list                                KW_ENDDEF ';'
                                                                                                                                            ↳ 84: function_command
                                                                                                                                                  ↳ 97: general_function_call                ';'
                                                                                                                                                        ↳ 67: • IDENTIFIER '.' function_call
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl • IDENTIFIER assignment_operator expression ';' KW_ENDDEF ';' $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                     $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 189: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl_list    function_command_list                                           KW_ENDDEF ';'
                                                                                                                            ↳ 53: local_var_const_decl • ↳ 84: function_command
                                                                                                                                                               ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                                     ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       53 local_var_const_decl_list: local_var_const_decl •
       68 general_function_call: • IDENTIFIER '[' expression ']' '.' function_call
      First example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl • IDENTIFIER '[' expression ']' '.' function_call ';' KW_ENDDEF ';'
      Shift derivation
        input
        ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                     ↳ 190: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl function_command_list                                                   KW_ENDDEF ';'
                                                                                                                                            ↳ 84: function_command
                                                                                                                                                  ↳ 97: general_function_call                                   ';'
                                                                                                                                                        ↳ 68: • IDENTIFIER '[' expression ']' '.' function_call
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl • IDENTIFIER assignment_operator expression ';' KW_ENDDEF ';' $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                     $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 189: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl_list    function_command_list                                           KW_ENDDEF ';'
                                                                                                                            ↳ 53: local_var_const_decl • ↳ 84: function_command
                                                                                                                                                               ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                                     ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       53 local_var_const_decl_list: local_var_const_decl •
       69 function_call: • IDENTIFIER '(' ')'
      First example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl • IDENTIFIER '(' ')' ';' KW_ENDDEF ';'
      Shift derivation
        input
        ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                     ↳ 190: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl function_command_list                            KW_ENDDEF ';'
                                                                                                                                            ↳ 84: function_command
                                                                                                                                                  ↳ 97: general_function_call            ';'
                                                                                                                                                        ↳ 66: function_call
                                                                                                                                                              ↳ 69: • IDENTIFIER '(' ')'
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl • IDENTIFIER assignment_operator expression ';' KW_ENDDEF ';' $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                     $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 189: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl_list    function_command_list                                           KW_ENDDEF ';'
                                                                                                                            ↳ 53: local_var_const_decl • ↳ 84: function_command
                                                                                                                                                               ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                                     ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       53 local_var_const_decl_list: local_var_const_decl •
       70 function_call: • IDENTIFIER '(' expr_comma_list ')'
      First example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl • IDENTIFIER '(' expr_comma_list ')' ';' KW_ENDDEF ';'
      Shift derivation
        input
        ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                     ↳ 190: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl function_command_list                                            KW_ENDDEF ';'
                                                                                                                                            ↳ 84: function_command
                                                                                                                                                  ↳ 97: general_function_call                            ';'
                                                                                                                                                        ↳ 66: function_call
                                                                                                                                                              ↳ 70: • IDENTIFIER '(' expr_comma_list ')'
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl • IDENTIFIER assignment_operator expression ';' KW_ENDDEF ';' $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                     $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 189: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl_list    function_command_list                                           KW_ENDDEF ';'
                                                                                                                            ↳ 53: local_var_const_decl • ↳ 84: function_command
                                                                                                                                                               ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                                     ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       53 local_var_const_decl_list: local_var_const_decl •
       80 general_variable: • IDENTIFIER
      First example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl • IDENTIFIER assignment_operator expression ';' KW_ENDDEF ';'
      Shift derivation
        input
        ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                     ↳ 190: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl function_command_list                                             KW_ENDDEF ';'
                                                                                                                                            ↳ 84: function_command
                                                                                                                                                  ↳ 86: general_variable   assignment_operator expression ';'
                                                                                                                                                        ↳ 80: • IDENTIFIER
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl • IDENTIFIER assignment_operator expression ';' KW_ENDDEF ';' $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                     $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 189: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl_list    function_command_list                                           KW_ENDDEF ';'
                                                                                                                            ↳ 53: local_var_const_decl • ↳ 84: function_command
                                                                                                                                                               ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                                     ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       53 local_var_const_decl_list: local_var_const_decl •
       81 general_variable: • IDENTIFIER '.' '#' IDENTIFIER
      First example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl • IDENTIFIER '.' '#' IDENTIFIER assignment_operator expression ';' KW_ENDDEF ';'
      Shift derivation
        input
        ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                     ↳ 190: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl function_command_list                                                                KW_ENDDEF ';'
                                                                                                                                            ↳ 84: function_command
                                                                                                                                                  ↳ 86: general_variable                      assignment_operator expression ';'
                                                                                                                                                        ↳ 81: • IDENTIFIER '.' '#' IDENTIFIER
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl • IDENTIFIER assignment_operator expression ';' KW_ENDDEF ';' $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                     $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 189: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl_list    function_command_list                                           KW_ENDDEF ';'
                                                                                                                            ↳ 53: local_var_const_decl • ↳ 84: function_command
                                                                                                                                                               ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                                     ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       53 local_var_const_decl_list: local_var_const_decl •
       82 general_variable: • IDENTIFIER '[' expression ']'
      First example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl • IDENTIFIER '[' expression ']' assignment_operator expression ';' KW_ENDDEF ';'
      Shift derivation
        input
        ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                     ↳ 190: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl function_command_list                                                                KW_ENDDEF ';'
                                                                                                                                            ↳ 84: function_command
                                                                                                                                                  ↳ 86: general_variable                      assignment_operator expression ';'
                                                                                                                                                        ↳ 82: • IDENTIFIER '[' expression ']'
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl • IDENTIFIER assignment_operator expression ';' KW_ENDDEF ';' $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                     $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 189: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl_list    function_command_list                                           KW_ENDDEF ';'
                                                                                                                            ↳ 53: local_var_const_decl • ↳ 84: function_command
                                                                                                                                                               ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                                     ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       53 local_var_const_decl_list: local_var_const_decl •
       83 general_variable: • IDENTIFIER '.' '#' IDENTIFIER '[' expression ']'
      First example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl • IDENTIFIER '.' '#' IDENTIFIER '[' expression ']' assignment_operator expression ';' KW_ENDDEF ';'
      Shift derivation
        input
        ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                     ↳ 190: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl function_command_list                                                                                   KW_ENDDEF ';'
                                                                                                                                            ↳ 84: function_command
                                                                                                                                                  ↳ 86: general_variable                                         assignment_operator expression ';'
                                                                                                                                                        ↳ 83: • IDENTIFIER '.' '#' IDENTIFIER '[' expression ']'
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl • IDENTIFIER assignment_operator expression ';' KW_ENDDEF ';' $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                     $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 189: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl_list    function_command_list                                           KW_ENDDEF ';'
                                                                                                                            ↳ 53: local_var_const_decl • ↳ 84: function_command
                                                                                                                                                               ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                                     ↳ 80: IDENTIFIER

    shift/reduce conflict on token KW_IF:
       53 local_var_const_decl_list: local_var_const_decl •
       87 function_command: • KW_IF '(' expression ')' ':' function_command_list KW_ENDIF ';'
      First example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl • KW_IF '(' expression ')' ':' function_command_list KW_ENDIF ';' KW_ENDDEF ';'
      Shift derivation
        input
        ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                     ↳ 190: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl function_command_list                                                         KW_ENDDEF ';'
                                                                                                                                            ↳ 84: function_command
                                                                                                                                                  ↳ 87: • KW_IF '(' expression ')' ':' function_command_list KW_ENDIF ';'
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl • KW_IF '(' expression ')' ':' function_command_list KW_ENDIF ';' KW_ENDDEF ';' $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                 $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 189: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl_list    function_command_list                                                       KW_ENDDEF ';'
                                                                                                                            ↳ 53: local_var_const_decl • ↳ 84: function_command
                                                                                                                                                               ↳ 87: KW_IF '(' expression ')' ':' function_command_list KW_ENDIF ';'

    shift/reduce conflict on token KW_IF:
       53 local_var_const_decl_list: local_var_const_decl •
       88 function_command: • KW_IF '(' expression ')' ':' function_command_list KW_ELSE ':' function_command_list KW_ENDIF ';'
      First example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl • KW_IF '(' expression ')' ':' function_command_list KW_ELSE ':' function_command_list KW_ENDIF ';' KW_ENDDEF ';'
      Shift derivation
        input
        ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                     ↳ 190: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl function_command_list                                                                                           KW_ENDDEF ';'
                                                                                                                                            ↳ 84: function_command
                                                                                                                                                  ↳ 88: • KW_IF '(' expression ')' ':' function_command_list KW_ELSE ':' function_command_list KW_ENDIF ';'
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl • KW_IF '(' expression ')' ':' function_command_list KW_ENDIF ';' KW_ENDDEF ';' $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                 $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 189: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl_list    function_command_list                                                       KW_ENDDEF ';'
                                                                                                                            ↳ 53: local_var_const_decl • ↳ 84: function_command
                                                                                                                                                               ↳ 87: KW_IF '(' expression ')' ':' function_command_list KW_ENDIF ';'

    shift/reduce conflict on token KW_FOR:
       53 local_var_const_decl_list: local_var_const_decl •
       89 function_command: • KW_FOR general_variable KW_IN '[' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';'
      First example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl • KW_FOR general_variable KW_IN '[' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';' KW_ENDDEF ';'
      Shift derivation
        input
        ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                     ↳ 190: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl function_command_list                                                                                                 KW_ENDDEF ';'
                                                                                                                                            ↳ 84: function_command
                                                                                                                                                  ↳ 89: • KW_FOR general_variable KW_IN '[' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';'
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl • KW_FOR general_variable KW_IN '[' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';' KW_ENDDEF ';' $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                         $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 189: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl_list    function_command_list                                                                                               KW_ENDDEF ';'
                                                                                                                            ↳ 53: local_var_const_decl • ↳ 84: function_command
                                                                                                                                                               ↳ 89: KW_FOR general_variable KW_IN '[' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';'

    shift/reduce conflict on token KW_FOR:
       53 local_var_const_decl_list: local_var_const_decl •
       90 function_command: • KW_FOR general_variable KW_IN '[' expression ':' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';'
      First example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl • KW_FOR general_variable KW_IN '[' expression ':' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';' KW_ENDDEF ';'
      Shift derivation
        input
        ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                     ↳ 190: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl function_command_list                                                                                                                KW_ENDDEF ';'
                                                                                                                                            ↳ 84: function_command
                                                                                                                                                  ↳ 90: • KW_FOR general_variable KW_IN '[' expression ':' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';'
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl • KW_FOR general_variable KW_IN '[' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';' KW_ENDDEF ';' $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                         $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 189: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl_list    function_command_list                                                                                               KW_ENDDEF ';'
                                                                                                                            ↳ 53: local_var_const_decl • ↳ 84: function_command
                                                                                                                                                               ↳ 89: KW_FOR general_variable KW_IN '[' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';'

    shift/reduce conflict on token KW_WHILE:
       53 local_var_const_decl_list: local_var_const_decl •
       92 function_command: • KW_WHILE '(' expression ')' ':' function_command_list KW_ENDWHILE ';'
      First example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl • KW_WHILE '(' expression ')' ':' function_command_list KW_ENDWHILE ';' KW_ENDDEF ';'
      Shift derivation
        input
        ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                     ↳ 190: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl function_command_list                                                               KW_ENDDEF ';'
                                                                                                                                            ↳ 84: function_command
                                                                                                                                                  ↳ 92: • KW_WHILE '(' expression ')' ':' function_command_list KW_ENDWHILE ';'
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl • KW_WHILE '(' expression ')' ':' function_command_list KW_ENDWHILE ';' KW_ENDDEF ';' $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                       $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 189: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl_list    function_command_list                                                             KW_ENDDEF ';'
                                                                                                                            ↳ 53: local_var_const_decl • ↳ 84: function_command
                                                                                                                                                               ↳ 92: KW_WHILE '(' expression ')' ':' function_command_list KW_ENDWHILE ';'

    shift/reduce conflict on token KW_BREAK:
       53 local_var_const_decl_list: local_var_const_decl •
       93 function_command: • KW_BREAK ';'
      First example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl • KW_BREAK ';' KW_ENDDEF ';'
      Shift derivation
        input
        ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                     ↳ 190: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl function_command_list      KW_ENDDEF ';'
                                                                                                                                            ↳ 84: function_command
                                                                                                                                                  ↳ 93: • KW_BREAK ';'
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl • KW_BREAK ';' KW_ENDDEF ';' $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                              $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 189: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl_list    function_command_list    KW_ENDDEF ';'
                                                                                                                            ↳ 53: local_var_const_decl • ↳ 84: function_command
                                                                                                                                                               ↳ 93: KW_BREAK ';'

    shift/reduce conflict on token KW_CONTINUE:
       53 local_var_const_decl_list: local_var_const_decl •
       94 function_command: • KW_CONTINUE ';'
      First example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl • KW_CONTINUE ';' KW_ENDDEF ';'
      Shift derivation
        input
        ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                     ↳ 190: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl function_command_list         KW_ENDDEF ';'
                                                                                                                                            ↳ 84: function_command
                                                                                                                                                  ↳ 94: • KW_CONTINUE ';'
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl • KW_CONTINUE ';' KW_ENDDEF ';' $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                 $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 189: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl_list    function_command_list       KW_ENDDEF ';'
                                                                                                                            ↳ 53: local_var_const_decl • ↳ 84: function_command
                                                                                                                                                               ↳ 94: KW_CONTINUE ';'

    shift/reduce conflict on token KW_RETURN:
       53 local_var_const_decl_list: local_var_const_decl •
       95 function_command: • KW_RETURN ';'
      First example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl • KW_RETURN ';' KW_ENDDEF ';'
      Shift derivation
        input
        ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                     ↳ 190: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl function_command_list       KW_ENDDEF ';'
                                                                                                                                            ↳ 84: function_command
                                                                                                                                                  ↳ 95: • KW_RETURN ';'
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl • KW_RETURN ';' KW_ENDDEF ';' $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                               $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 189: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl_list    function_command_list     KW_ENDDEF ';'
                                                                                                                            ↳ 53: local_var_const_decl • ↳ 84: function_command
                                                                                                                                                               ↳ 95: KW_RETURN ';'

    shift/reduce conflict on token KW_RETURN:
       53 local_var_const_decl_list: local_var_const_decl •
       96 function_command: • KW_RETURN expression ';'
      First example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl • KW_RETURN expression ';' KW_ENDDEF ';'
      Shift derivation
        input
        ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                     ↳ 190: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl function_command_list                  KW_ENDDEF ';'
                                                                                                                                            ↳ 84: function_command
                                                                                                                                                  ↳ 96: • KW_RETURN expression ';'
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl • KW_RETURN ';' KW_ENDDEF ';' $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                               $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 189: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl_list    function_command_list     KW_ENDDEF ';'
                                                                                                                            ↳ 53: local_var_const_decl • ↳ 84: function_command
                                                                                                                                                               ↳ 95: KW_RETURN ';'



State 224

   97 function_command: general_function_call • ';'

    ';'  shift, and go to state 273


State 225

   73 assignment_operator: • '='
   74                    | • OP_ASSIGN
   75                    | • OP_ASSIGN_PLUSEQ
   76                    | • OP_ASSIGN_MINUSEQ
   77                    | • OP_ASSIGN_MULEQ
   78                    | • OP_ASSIGN_DIVEQ
   79                    | • OP_ASSIGN_MODEQ
   86 function_command: general_variable • assignment_operator expression ';'
   91                 | general_variable • OP_ASSIGN '[' expression KW_FOR general_variable ':' POSINT ']' ':' basic_data_type ';'

    OP_ASSIGN          shift, and go to state 274
    OP_ASSIGN_PLUSEQ   shift, and go to state 275
    OP_ASSIGN_MULEQ    shift, and go to state 276
    OP_ASSIGN_DIVEQ    shift, and go to state 277
    OP_ASSIGN_MODEQ    shift, and go to state 278
    OP_ASSIGN_MINUSEQ  shift, and go to state 279
    '='                shift, and go to state 280

    assignment_operator  go to state 281


State 226

   66 general_function_call: • function_call
   67                      | • IDENTIFIER '.' function_call
   68                      | • IDENTIFIER '[' expression ']' '.' function_call
   69 function_call: • IDENTIFIER '(' ')'
   70              | • IDENTIFIER '(' expr_comma_list ')'
   80 general_variable: • IDENTIFIER
   81                 | • IDENTIFIER '.' '#' IDENTIFIER
   82                 | • IDENTIFIER '[' expression ']'
   83                 | • IDENTIFIER '.' '#' IDENTIFIER '[' expression ']'
   85 function_command_list: function_command_list • function_command
   86 function_command: • general_variable assignment_operator expression ';'
   87                 | • KW_IF '(' expression ')' ':' function_command_list KW_ENDIF ';'
   88                 | • KW_IF '(' expression ')' ':' function_command_list KW_ELSE ':' function_command_list KW_ENDIF ';'
   89                 | • KW_FOR general_variable KW_IN '[' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';'
   90                 | • KW_FOR general_variable KW_IN '[' expression ':' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';'
   91                 | • general_variable OP_ASSIGN '[' expression KW_FOR general_variable ':' POSINT ']' ':' basic_data_type ';'
   92                 | • KW_WHILE '(' expression ')' ':' function_command_list KW_ENDWHILE ';'
   93                 | • KW_BREAK ';'
   94                 | • KW_CONTINUE ';'
   95                 | • KW_RETURN ';'
   96                 | • KW_RETURN expression ';'
   97                 | • general_function_call ';'
  191 main_unit: KW_DEF KW_MAIN '(' ')' ':' function_command_list • KW_ENDDEF ';'

    IDENTIFIER   shift, and go to state 270
    KW_IF        shift, and go to state 216
    KW_CONTINUE  shift, and go to state 217
    KW_FOR       shift, and go to state 218
    KW_WHILE     shift, and go to state 219
    KW_BREAK     shift, and go to state 220
    KW_ENDDEF    shift, and go to state 282
    KW_RETURN    shift, and go to state 221

    general_function_call  go to state 224
    function_call          go to state 70
    general_variable       go to state 225
    function_command       go to state 283


State 227

   84 function_command_list: function_command •

    $default  reduce using rule 84 (function_command_list)


State 228

  111 comp_function_call: IDENTIFIER '(' ')' •

    $default  reduce using rule 111 (comp_function_call)


State 229

  112 comp_function_call: IDENTIFIER '(' comp_expr_comma_list • ')'
  117 comp_expr_comma_list: comp_expr_comma_list • ',' comp_expression

    ')'  shift, and go to state 284
    ','  shift, and go to state 285


State 230

  116 comp_expr_comma_list: comp_expression •

    $default  reduce using rule 116 (comp_expr_comma_list)


State 231

  111 comp_function_call: • IDENTIFIER '(' ')'
  112                   | • IDENTIFIER '(' comp_expr_comma_list ')'
  113 general_comp_function_call: • comp_function_call
  114                           | • '#' IDENTIFIER '.' comp_function_call
  115                           | • '#' IDENTIFIER '[' comp_expression ']' '.' comp_function_call
  115                           | '#' IDENTIFIER '[' • comp_expression ']' '.' comp_function_call
  118 comp_primary_expression: • POSINT
  119                        | • SCALAR
  120                        | • '#' IDENTIFIER
  121                        | • IDENTIFIER
  122                        | • STRING
  123                        | • KW_TRUE
  124                        | • KW_FALSE
  125                        | • '(' logic_expression ')'
  126 comp_math_expression: • comp_primary_expression
  127                     | • '+' comp_math_expression
  128                     | • '-' comp_math_expression
  129                     | • comp_math_expression '+' comp_math_expression
  130                     | • comp_math_expression '-' comp_math_expression
  131                     | • comp_math_expression '*' comp_math_expression
  132                     | • comp_math_expression '/' comp_math_expression
  133                     | • comp_math_expression '%' comp_math_expression
  134                     | • comp_math_expression OP_PAW comp_math_expression
  135                     | • '#' IDENTIFIER '[' comp_expression ']'
  135                     | '#' IDENTIFIER '[' • comp_expression ']'
  136                     | • '#' IDENTIFIER '[' comp_expression ']' '.' '#' IDENTIFIER
  136                     | '#' IDENTIFIER '[' • comp_expression ']' '.' '#' IDENTIFIER
  137                     | • '#' IDENTIFIER '[' comp_expression ']' '.' '#' IDENTIFIER '[' comp_expression ']'
  137                     | '#' IDENTIFIER '[' • comp_expression ']' '.' '#' IDENTIFIER '[' comp_expression ']'
  138                     | • general_comp_function_call
  139                     | • '#' IDENTIFIER '.' '#' IDENTIFIER '[' comp_expression ']'
  140                     | • '#' IDENTIFIER '.' '#' IDENTIFIER
  141 comp_relational_expression: • comp_math_expression
  142                           | • comp_relational_expression OP_EQUALS comp_relational_expression
  143                           | • comp_relational_expression OP_NE comp_relational_expression
  144                           | • comp_relational_expression '>' comp_relational_expression
  145                           | • comp_relational_expression '<' comp_relational_expression
  146                           | • comp_relational_expression OP_LE comp_relational_expression
  147                           | • comp_relational_expression OP_GE comp_relational_expression
  148 comp_logic_expression: • comp_relational_expression
  149                      | • OP_NOT comp_logic_expression
  150                      | • comp_logic_expression OP_AND comp_logic_expression
  151                      | • comp_logic_expression OP_OR comp_logic_expression
  152 comp_expression: • comp_logic_expression

    IDENTIFIER  shift, and go to state 148
    POSINT      shift, and go to state 149
    SCALAR      shift, and go to state 150
    STRING      shift, and go to state 151
    OP_NOT      shift, and go to state 152
    KW_TRUE     shift, and go to state 153
    KW_FALSE    shift, and go to state 154
    '-'         shift, and go to state 155
    '+'         shift, and go to state 156
    '#'         shift, and go to state 157
    '('         shift, and go to state 158

    comp_function_call          go to state 160
    general_comp_function_call  go to state 161
    comp_primary_expression     go to state 162
    comp_math_expression        go to state 163
    comp_relational_expression  go to state 164
    comp_logic_expression       go to state 165
    comp_expression             go to state 286


State 232

  111 comp_function_call: • IDENTIFIER '(' ')'
  112                   | • IDENTIFIER '(' comp_expr_comma_list ')'
  114 general_comp_function_call: '#' IDENTIFIER '.' • comp_function_call
  139 comp_math_expression: '#' IDENTIFIER '.' • '#' IDENTIFIER '[' comp_expression ']'
  140                     | '#' IDENTIFIER '.' • '#' IDENTIFIER

    IDENTIFIER  shift, and go to state 287
    '#'         shift, and go to state 288

    comp_function_call  go to state 289


State 233

  125 comp_primary_expression: '(' logic_expression ')' •

    $default  reduce using rule 125 (comp_primary_expression)


State 234

  129 comp_math_expression: comp_math_expression • '+' comp_math_expression
  130                     | comp_math_expression • '-' comp_math_expression
  131                     | comp_math_expression • '*' comp_math_expression
  132                     | comp_math_expression • '/' comp_math_expression
  133                     | comp_math_expression • '%' comp_math_expression
  134                     | comp_math_expression • OP_PAW comp_math_expression
  134                     | comp_math_expression OP_PAW comp_math_expression •  [KW_FOR, OP_AND, OP_OR, OP_PAW, OP_EQUALS, OP_NE, OP_LE, OP_GE, '>', '<', '-', '+', '*', '/', '%', ')', ']', ',', ':', ';']

    $default  reduce using rule 134 (comp_math_expression)

    Conflict between rule 134 and token OP_PAW resolved as reduce (%left OP_PAW).
    Conflict between rule 134 and token '-' resolved as reduce ('-' < OP_PAW).
    Conflict between rule 134 and token '+' resolved as reduce ('+' < OP_PAW).
    Conflict between rule 134 and token '*' resolved as reduce ('*' < OP_PAW).
    Conflict between rule 134 and token '/' resolved as reduce ('/' < OP_PAW).
    Conflict between rule 134 and token '%' resolved as reduce ('%' < OP_PAW).


State 235

  129 comp_math_expression: comp_math_expression • '+' comp_math_expression
  130                     | comp_math_expression • '-' comp_math_expression
  130                     | comp_math_expression '-' comp_math_expression •  [KW_FOR, OP_AND, OP_OR, OP_EQUALS, OP_NE, OP_LE, OP_GE, '>', '<', '-', '+', ')', ']', ',', ':', ';']
  131                     | comp_math_expression • '*' comp_math_expression
  132                     | comp_math_expression • '/' comp_math_expression
  133                     | comp_math_expression • '%' comp_math_expression
  134                     | comp_math_expression • OP_PAW comp_math_expression

    OP_PAW  shift, and go to state 189
    '*'     shift, and go to state 192
    '/'     shift, and go to state 193
    '%'     shift, and go to state 194

    $default  reduce using rule 130 (comp_math_expression)

    Conflict between rule 130 and token OP_PAW resolved as shift ('-' < OP_PAW).
    Conflict between rule 130 and token '-' resolved as reduce (%left '-').
    Conflict between rule 130 and token '+' resolved as reduce (%left '+').
    Conflict between rule 130 and token '*' resolved as shift ('-' < '*').
    Conflict between rule 130 and token '/' resolved as shift ('-' < '/').
    Conflict between rule 130 and token '%' resolved as shift ('-' < '%').


State 236

  129 comp_math_expression: comp_math_expression • '+' comp_math_expression
  129                     | comp_math_expression '+' comp_math_expression •  [KW_FOR, OP_AND, OP_OR, OP_EQUALS, OP_NE, OP_LE, OP_GE, '>', '<', '-', '+', ')', ']', ',', ':', ';']
  130                     | comp_math_expression • '-' comp_math_expression
  131                     | comp_math_expression • '*' comp_math_expression
  132                     | comp_math_expression • '/' comp_math_expression
  133                     | comp_math_expression • '%' comp_math_expression
  134                     | comp_math_expression • OP_PAW comp_math_expression

    OP_PAW  shift, and go to state 189
    '*'     shift, and go to state 192
    '/'     shift, and go to state 193
    '%'     shift, and go to state 194

    $default  reduce using rule 129 (comp_math_expression)

    Conflict between rule 129 and token OP_PAW resolved as shift ('+' < OP_PAW).
    Conflict between rule 129 and token '-' resolved as reduce (%left '-').
    Conflict between rule 129 and token '+' resolved as reduce (%left '+').
    Conflict between rule 129 and token '*' resolved as shift ('+' < '*').
    Conflict between rule 129 and token '/' resolved as shift ('+' < '/').
    Conflict between rule 129 and token '%' resolved as shift ('+' < '%').


State 237

  129 comp_math_expression: comp_math_expression • '+' comp_math_expression
  130                     | comp_math_expression • '-' comp_math_expression
  131                     | comp_math_expression • '*' comp_math_expression
  131                     | comp_math_expression '*' comp_math_expression •  [KW_FOR, OP_AND, OP_OR, OP_EQUALS, OP_NE, OP_LE, OP_GE, '>', '<', '-', '+', '*', '/', '%', ')', ']', ',', ':', ';']
  132                     | comp_math_expression • '/' comp_math_expression
  133                     | comp_math_expression • '%' comp_math_expression
  134                     | comp_math_expression • OP_PAW comp_math_expression

    OP_PAW  shift, and go to state 189

    $default  reduce using rule 131 (comp_math_expression)

    Conflict between rule 131 and token OP_PAW resolved as shift ('*' < OP_PAW).
    Conflict between rule 131 and token '-' resolved as reduce ('-' < '*').
    Conflict between rule 131 and token '+' resolved as reduce ('+' < '*').
    Conflict between rule 131 and token '*' resolved as reduce (%left '*').
    Conflict between rule 131 and token '/' resolved as reduce (%left '/').
    Conflict between rule 131 and token '%' resolved as reduce (%left '%').


State 238

  129 comp_math_expression: comp_math_expression • '+' comp_math_expression
  130                     | comp_math_expression • '-' comp_math_expression
  131                     | comp_math_expression • '*' comp_math_expression
  132                     | comp_math_expression • '/' comp_math_expression
  132                     | comp_math_expression '/' comp_math_expression •  [KW_FOR, OP_AND, OP_OR, OP_EQUALS, OP_NE, OP_LE, OP_GE, '>', '<', '-', '+', '*', '/', '%', ')', ']', ',', ':', ';']
  133                     | comp_math_expression • '%' comp_math_expression
  134                     | comp_math_expression • OP_PAW comp_math_expression

    OP_PAW  shift, and go to state 189

    $default  reduce using rule 132 (comp_math_expression)

    Conflict between rule 132 and token OP_PAW resolved as shift ('/' < OP_PAW).
    Conflict between rule 132 and token '-' resolved as reduce ('-' < '/').
    Conflict between rule 132 and token '+' resolved as reduce ('+' < '/').
    Conflict between rule 132 and token '*' resolved as reduce (%left '*').
    Conflict between rule 132 and token '/' resolved as reduce (%left '/').
    Conflict between rule 132 and token '%' resolved as reduce (%left '%').


State 239

  129 comp_math_expression: comp_math_expression • '+' comp_math_expression
  130                     | comp_math_expression • '-' comp_math_expression
  131                     | comp_math_expression • '*' comp_math_expression
  132                     | comp_math_expression • '/' comp_math_expression
  133                     | comp_math_expression • '%' comp_math_expression
  133                     | comp_math_expression '%' comp_math_expression •  [KW_FOR, OP_AND, OP_OR, OP_EQUALS, OP_NE, OP_LE, OP_GE, '>', '<', '-', '+', '*', '/', '%', ')', ']', ',', ':', ';']
  134                     | comp_math_expression • OP_PAW comp_math_expression

    OP_PAW  shift, and go to state 189

    $default  reduce using rule 133 (comp_math_expression)

    Conflict between rule 133 and token OP_PAW resolved as shift ('%' < OP_PAW).
    Conflict between rule 133 and token '-' resolved as reduce ('-' < '%').
    Conflict between rule 133 and token '+' resolved as reduce ('+' < '%').
    Conflict between rule 133 and token '*' resolved as reduce (%left '*').
    Conflict between rule 133 and token '/' resolved as reduce (%left '/').
    Conflict between rule 133 and token '%' resolved as reduce (%left '%').


State 240

  142 comp_relational_expression: comp_relational_expression • OP_EQUALS comp_relational_expression
  142                           | comp_relational_expression OP_EQUALS comp_relational_expression •  [KW_FOR, OP_AND, OP_OR, OP_EQUALS, OP_NE, ')', ']', ',', ':', ';']
  143                           | comp_relational_expression • OP_NE comp_relational_expression
  144                           | comp_relational_expression • '>' comp_relational_expression
  145                           | comp_relational_expression • '<' comp_relational_expression
  146                           | comp_relational_expression • OP_LE comp_relational_expression
  147                           | comp_relational_expression • OP_GE comp_relational_expression

    OP_LE  shift, and go to state 197
    OP_GE  shift, and go to state 198
    '>'    shift, and go to state 199
    '<'    shift, and go to state 200

    $default  reduce using rule 142 (comp_relational_expression)

    Conflict between rule 142 and token OP_EQUALS resolved as reduce (%left OP_EQUALS).
    Conflict between rule 142 and token OP_NE resolved as reduce (%left OP_NE).
    Conflict between rule 142 and token OP_LE resolved as shift (OP_EQUALS < OP_LE).
    Conflict between rule 142 and token OP_GE resolved as shift (OP_EQUALS < OP_GE).
    Conflict between rule 142 and token '>' resolved as shift (OP_EQUALS < '>').
    Conflict between rule 142 and token '<' resolved as shift (OP_EQUALS < '<').


State 241

  142 comp_relational_expression: comp_relational_expression • OP_EQUALS comp_relational_expression
  143                           | comp_relational_expression • OP_NE comp_relational_expression
  143                           | comp_relational_expression OP_NE comp_relational_expression •  [KW_FOR, OP_AND, OP_OR, OP_EQUALS, OP_NE, ')', ']', ',', ':', ';']
  144                           | comp_relational_expression • '>' comp_relational_expression
  145                           | comp_relational_expression • '<' comp_relational_expression
  146                           | comp_relational_expression • OP_LE comp_relational_expression
  147                           | comp_relational_expression • OP_GE comp_relational_expression

    OP_LE  shift, and go to state 197
    OP_GE  shift, and go to state 198
    '>'    shift, and go to state 199
    '<'    shift, and go to state 200

    $default  reduce using rule 143 (comp_relational_expression)

    Conflict between rule 143 and token OP_EQUALS resolved as reduce (%left OP_EQUALS).
    Conflict between rule 143 and token OP_NE resolved as reduce (%left OP_NE).
    Conflict between rule 143 and token OP_LE resolved as shift (OP_NE < OP_LE).
    Conflict between rule 143 and token OP_GE resolved as shift (OP_NE < OP_GE).
    Conflict between rule 143 and token '>' resolved as shift (OP_NE < '>').
    Conflict between rule 143 and token '<' resolved as shift (OP_NE < '<').


State 242

  142 comp_relational_expression: comp_relational_expression • OP_EQUALS comp_relational_expression
  143                           | comp_relational_expression • OP_NE comp_relational_expression
  144                           | comp_relational_expression • '>' comp_relational_expression
  145                           | comp_relational_expression • '<' comp_relational_expression
  146                           | comp_relational_expression • OP_LE comp_relational_expression
  146                           | comp_relational_expression OP_LE comp_relational_expression •  [KW_FOR, OP_AND, OP_OR, OP_EQUALS, OP_NE, OP_LE, OP_GE, '>', '<', ')', ']', ',', ':', ';']
  147                           | comp_relational_expression • OP_GE comp_relational_expression

    $default  reduce using rule 146 (comp_relational_expression)

    Conflict between rule 146 and token OP_EQUALS resolved as reduce (OP_EQUALS < OP_LE).
    Conflict between rule 146 and token OP_NE resolved as reduce (OP_NE < OP_LE).
    Conflict between rule 146 and token OP_LE resolved as reduce (%left OP_LE).
    Conflict between rule 146 and token OP_GE resolved as reduce (%left OP_GE).
    Conflict between rule 146 and token '>' resolved as reduce (%left '>').
    Conflict between rule 146 and token '<' resolved as reduce (%left '<').


State 243

  142 comp_relational_expression: comp_relational_expression • OP_EQUALS comp_relational_expression
  143                           | comp_relational_expression • OP_NE comp_relational_expression
  144                           | comp_relational_expression • '>' comp_relational_expression
  145                           | comp_relational_expression • '<' comp_relational_expression
  146                           | comp_relational_expression • OP_LE comp_relational_expression
  147                           | comp_relational_expression • OP_GE comp_relational_expression
  147                           | comp_relational_expression OP_GE comp_relational_expression •  [KW_FOR, OP_AND, OP_OR, OP_EQUALS, OP_NE, OP_LE, OP_GE, '>', '<', ')', ']', ',', ':', ';']

    $default  reduce using rule 147 (comp_relational_expression)

    Conflict between rule 147 and token OP_EQUALS resolved as reduce (OP_EQUALS < OP_GE).
    Conflict between rule 147 and token OP_NE resolved as reduce (OP_NE < OP_GE).
    Conflict between rule 147 and token OP_LE resolved as reduce (%left OP_LE).
    Conflict between rule 147 and token OP_GE resolved as reduce (%left OP_GE).
    Conflict between rule 147 and token '>' resolved as reduce (%left '>').
    Conflict between rule 147 and token '<' resolved as reduce (%left '<').


State 244

  142 comp_relational_expression: comp_relational_expression • OP_EQUALS comp_relational_expression
  143                           | comp_relational_expression • OP_NE comp_relational_expression
  144                           | comp_relational_expression • '>' comp_relational_expression
  144                           | comp_relational_expression '>' comp_relational_expression •  [KW_FOR, OP_AND, OP_OR, OP_EQUALS, OP_NE, OP_LE, OP_GE, '>', '<', ')', ']', ',', ':', ';']
  145                           | comp_relational_expression • '<' comp_relational_expression
  146                           | comp_relational_expression • OP_LE comp_relational_expression
  147                           | comp_relational_expression • OP_GE comp_relational_expression

    $default  reduce using rule 144 (comp_relational_expression)

    Conflict between rule 144 and token OP_EQUALS resolved as reduce (OP_EQUALS < '>').
    Conflict between rule 144 and token OP_NE resolved as reduce (OP_NE < '>').
    Conflict between rule 144 and token OP_LE resolved as reduce (%left OP_LE).
    Conflict between rule 144 and token OP_GE resolved as reduce (%left OP_GE).
    Conflict between rule 144 and token '>' resolved as reduce (%left '>').
    Conflict between rule 144 and token '<' resolved as reduce (%left '<').


State 245

  142 comp_relational_expression: comp_relational_expression • OP_EQUALS comp_relational_expression
  143                           | comp_relational_expression • OP_NE comp_relational_expression
  144                           | comp_relational_expression • '>' comp_relational_expression
  145                           | comp_relational_expression • '<' comp_relational_expression
  145                           | comp_relational_expression '<' comp_relational_expression •  [KW_FOR, OP_AND, OP_OR, OP_EQUALS, OP_NE, OP_LE, OP_GE, '>', '<', ')', ']', ',', ':', ';']
  146                           | comp_relational_expression • OP_LE comp_relational_expression
  147                           | comp_relational_expression • OP_GE comp_relational_expression

    $default  reduce using rule 145 (comp_relational_expression)

    Conflict between rule 145 and token OP_EQUALS resolved as reduce (OP_EQUALS < '<').
    Conflict between rule 145 and token OP_NE resolved as reduce (OP_NE < '<').
    Conflict between rule 145 and token OP_LE resolved as reduce (%left OP_LE).
    Conflict between rule 145 and token OP_GE resolved as reduce (%left OP_GE).
    Conflict between rule 145 and token '>' resolved as reduce (%left '>').
    Conflict between rule 145 and token '<' resolved as reduce (%left '<').


State 246

  150 comp_logic_expression: comp_logic_expression • OP_AND comp_logic_expression
  150                      | comp_logic_expression OP_AND comp_logic_expression •  [KW_FOR, OP_AND, OP_OR, ')', ']', ',', ':', ';']
  151                      | comp_logic_expression • OP_OR comp_logic_expression

    $default  reduce using rule 150 (comp_logic_expression)

    Conflict between rule 150 and token OP_AND resolved as reduce (%left OP_AND).
    Conflict between rule 150 and token OP_OR resolved as reduce (OP_OR < OP_AND).


State 247

  150 comp_logic_expression: comp_logic_expression • OP_AND comp_logic_expression
  151                      | comp_logic_expression • OP_OR comp_logic_expression
  151                      | comp_logic_expression OP_OR comp_logic_expression •  [KW_FOR, OP_OR, ')', ']', ',', ':', ';']

    OP_AND  shift, and go to state 201

    $default  reduce using rule 151 (comp_logic_expression)

    Conflict between rule 151 and token OP_AND resolved as shift (OP_OR < OP_AND).
    Conflict between rule 151 and token OP_OR resolved as reduce (%left OP_OR).


State 248

  169 comp_function_definition: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' • ':' local_var_const_decl_list comp_command_list KW_ENDDEF ';'
  170                         | KW_DEF IDENTIFIER '(' parameter_declaration_list ')' • ':' local_var_const_decl comp_command_list KW_ENDDEF ';'
  171                         | KW_DEF IDENTIFIER '(' parameter_declaration_list ')' • ':' comp_command_list KW_ENDDEF ';'
  172                         | KW_DEF IDENTIFIER '(' parameter_declaration_list ')' • '-' '>' basic_data_type ':' local_var_const_decl_list comp_command_list KW_RETURN comp_expression ';' KW_ENDDEF ';'
  173                         | KW_DEF IDENTIFIER '(' parameter_declaration_list ')' • '-' '>' basic_data_type ':' comp_command_list KW_RETURN comp_expression ';' KW_ENDDEF ';'
  174                         | KW_DEF IDENTIFIER '(' parameter_declaration_list ')' • '-' '>' basic_data_type ':' local_var_const_decl comp_command_list KW_RETURN comp_expression ';' KW_ENDDEF ';'

    '-'  shift, and go to state 290
    ':'  shift, and go to state 291


State 249

  183 comp_identifier_list: comp_identifier_list ',' '#' IDENTIFIER '[' ']' •

    $default  reduce using rule 183 (comp_identifier_list)


State 250

  182 comp_identifier_list: comp_identifier_list ',' '#' IDENTIFIER '[' comp_expression • ']'

    ']'  shift, and go to state 292


State 251

   19 math_expression: IDENTIFIER '[' expression ']' '.' IDENTIFIER •  [KW_FOR, OP_AND, OP_OR, OP_PAW, OP_EQUALS, OP_NE, OP_LE, OP_GE, '>', '<', '-', '+', '*', '/', '%', ')', ']', ',', ':', ';']
   20                | IDENTIFIER '[' expression ']' '.' IDENTIFIER • '[' expression ']'
   69 function_call: IDENTIFIER • '(' ')'
   70              | IDENTIFIER • '(' expr_comma_list ')'

    '('  shift, and go to state 86
    '['  shift, and go to state 293

    $default  reduce using rule 19 (math_expression)


State 252

   68 general_function_call: IDENTIFIER '[' expression ']' '.' function_call •

    $default  reduce using rule 68 (general_function_call)


State 253

   22 math_expression: IDENTIFIER '.' IDENTIFIER '[' expression ']' •

    $default  reduce using rule 22 (math_expression)


State 254

   50 constant_decl: KW_CONST IDENTIFIER '[' ']' '=' expression ':' basic_data_type ';' •

    $default  reduce using rule 50 (constant_decl)


State 255

   49 constant_decl: KW_CONST IDENTIFIER '[' expression ']' '=' expression ':' basic_data_type • ';'

    ';'  shift, and go to state 294


State 256

   36 basic_data_type: • KW_INTEGER
   37                | • KW_BOOLEAN
   38                | • KW_CHAR
   39                | • KW_SCALAR
   40                | • KW_STR
   41                | • IDENTIFIER
  103 function_definition: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' • basic_data_type ':' local_var_const_decl_list function_command_list KW_RETURN expression ';' KW_ENDDEF ';'
  104                    | KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' • basic_data_type ':' local_var_const_decl function_command_list KW_RETURN expression ';' KW_ENDDEF ';'
  105                    | KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' • basic_data_type ':' function_command_list KW_RETURN expression ';' KW_ENDDEF ';'

    IDENTIFIER  shift, and go to state 29
    KW_BOOLEAN  shift, and go to state 30
    KW_STR      shift, and go to state 31
    KW_INTEGER  shift, and go to state 32
    KW_SCALAR   shift, and go to state 33
    KW_CHAR     shift, and go to state 34

    basic_data_type  go to state 295


State 257

   66 general_function_call: • function_call
   67                      | • IDENTIFIER '.' function_call
   68                      | • IDENTIFIER '[' expression ']' '.' function_call
   69 function_call: • IDENTIFIER '(' ')'
   70              | • IDENTIFIER '(' expr_comma_list ')'
   80 general_variable: • IDENTIFIER
   81                 | • IDENTIFIER '.' '#' IDENTIFIER
   82                 | • IDENTIFIER '[' expression ']'
   83                 | • IDENTIFIER '.' '#' IDENTIFIER '[' expression ']'
   84 function_command_list: • function_command
   85                      | • function_command_list function_command
   86 function_command: • general_variable assignment_operator expression ';'
   87                 | • KW_IF '(' expression ')' ':' function_command_list KW_ENDIF ';'
   88                 | • KW_IF '(' expression ')' ':' function_command_list KW_ELSE ':' function_command_list KW_ENDIF ';'
   89                 | • KW_FOR general_variable KW_IN '[' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';'
   90                 | • KW_FOR general_variable KW_IN '[' expression ':' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';'
   91                 | • general_variable OP_ASSIGN '[' expression KW_FOR general_variable ':' POSINT ']' ':' basic_data_type ';'
   92                 | • KW_WHILE '(' expression ')' ':' function_command_list KW_ENDWHILE ';'
   93                 | • KW_BREAK ';'
   94                 | • KW_CONTINUE ';'
   95                 | • KW_RETURN ';'
   96                 | • KW_RETURN expression ';'
   97                 | • general_function_call ';'
  100 function_definition: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl_list • function_command_list KW_ENDDEF ';'

    IDENTIFIER   shift, and go to state 270
    KW_IF        shift, and go to state 216
    KW_CONTINUE  shift, and go to state 217
    KW_FOR       shift, and go to state 218
    KW_WHILE     shift, and go to state 219
    KW_BREAK     shift, and go to state 220
    KW_RETURN    shift, and go to state 221

    general_function_call  go to state 224
    function_call          go to state 70
    general_variable       go to state 225
    function_command_list  go to state 296
    function_command       go to state 227


State 258

   53 local_var_const_decl_list: local_var_const_decl •  [IDENTIFIER, KW_IF, KW_CONTINUE, KW_FOR, KW_WHILE, KW_BREAK, KW_RETURN]
   66 general_function_call: • function_call
   67                      | • IDENTIFIER '.' function_call
   68                      | • IDENTIFIER '[' expression ']' '.' function_call
   69 function_call: • IDENTIFIER '(' ')'
   70              | • IDENTIFIER '(' expr_comma_list ')'
   80 general_variable: • IDENTIFIER
   81                 | • IDENTIFIER '.' '#' IDENTIFIER
   82                 | • IDENTIFIER '[' expression ']'
   83                 | • IDENTIFIER '.' '#' IDENTIFIER '[' expression ']'
   84 function_command_list: • function_command
   85                      | • function_command_list function_command
   86 function_command: • general_variable assignment_operator expression ';'
   87                 | • KW_IF '(' expression ')' ':' function_command_list KW_ENDIF ';'
   88                 | • KW_IF '(' expression ')' ':' function_command_list KW_ELSE ':' function_command_list KW_ENDIF ';'
   89                 | • KW_FOR general_variable KW_IN '[' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';'
   90                 | • KW_FOR general_variable KW_IN '[' expression ':' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';'
   91                 | • general_variable OP_ASSIGN '[' expression KW_FOR general_variable ':' POSINT ']' ':' basic_data_type ';'
   92                 | • KW_WHILE '(' expression ')' ':' function_command_list KW_ENDWHILE ';'
   93                 | • KW_BREAK ';'
   94                 | • KW_CONTINUE ';'
   95                 | • KW_RETURN ';'
   96                 | • KW_RETURN expression ';'
   97                 | • general_function_call ';'
  101 function_definition: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl • function_command_list KW_ENDDEF ';'

    IDENTIFIER   shift, and go to state 270
    KW_IF        shift, and go to state 216
    KW_CONTINUE  shift, and go to state 217
    KW_FOR       shift, and go to state 218
    KW_WHILE     shift, and go to state 219
    KW_BREAK     shift, and go to state 220
    KW_RETURN    shift, and go to state 221

    IDENTIFIER   [reduce using rule 53 (local_var_const_decl_list)]
    KW_IF        [reduce using rule 53 (local_var_const_decl_list)]
    KW_CONTINUE  [reduce using rule 53 (local_var_const_decl_list)]
    KW_FOR       [reduce using rule 53 (local_var_const_decl_list)]
    KW_WHILE     [reduce using rule 53 (local_var_const_decl_list)]
    KW_BREAK     [reduce using rule 53 (local_var_const_decl_list)]
    KW_RETURN    [reduce using rule 53 (local_var_const_decl_list)]

    general_function_call  go to state 224
    function_call          go to state 70
    general_variable       go to state 225
    function_command_list  go to state 297
    function_command       go to state 227

    shift/reduce conflict on token IDENTIFIER:
       53 local_var_const_decl_list: local_var_const_decl •
       67 general_function_call: • IDENTIFIER '.' function_call
      First example: comp_definition_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl • IDENTIFIER '.' function_call ';' KW_ENDDEF ';' function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                               $end
             ↳ 1: comp_definition_list function_definition_list                                                                                                                                                               function_definition_list main_unit
                                       ↳ 99: function_definition_list function_definition
                                                                      ↳ 101: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl function_command_list                                KW_ENDDEF ';'
                                                                                                                                                           ↳ 84: function_command
                                                                                                                                                                 ↳ 97: general_function_call                ';'
                                                                                                                                                                       ↳ 67: • IDENTIFIER '.' function_call
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl • IDENTIFIER assignment_operator expression ';' KW_ENDDEF ';' main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                   $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list                                                                                                                                                                                  main_unit
                                                                 ↳ 99: function_definition_list function_definition
                                                                                                ↳ 100: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl_list    function_command_list                                           KW_ENDDEF ';'
                                                                                                                                                                ↳ 53: local_var_const_decl • ↳ 84: function_command
                                                                                                                                                                                                   ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                                                                         ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       53 local_var_const_decl_list: local_var_const_decl •
       68 general_function_call: • IDENTIFIER '[' expression ']' '.' function_call
      First example: comp_definition_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl • IDENTIFIER '[' expression ']' '.' function_call ';' KW_ENDDEF ';' function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                  $end
             ↳ 1: comp_definition_list function_definition_list                                                                                                                                                                                  function_definition_list main_unit
                                       ↳ 99: function_definition_list function_definition
                                                                      ↳ 101: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl function_command_list                                                   KW_ENDDEF ';'
                                                                                                                                                           ↳ 84: function_command
                                                                                                                                                                 ↳ 97: general_function_call                                   ';'
                                                                                                                                                                       ↳ 68: • IDENTIFIER '[' expression ']' '.' function_call
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl • IDENTIFIER assignment_operator expression ';' KW_ENDDEF ';' main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                   $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list                                                                                                                                                                                  main_unit
                                                                 ↳ 99: function_definition_list function_definition
                                                                                                ↳ 100: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl_list    function_command_list                                           KW_ENDDEF ';'
                                                                                                                                                                ↳ 53: local_var_const_decl • ↳ 84: function_command
                                                                                                                                                                                                   ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                                                                         ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       53 local_var_const_decl_list: local_var_const_decl •
       69 function_call: • IDENTIFIER '(' ')'
      First example: comp_definition_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl • IDENTIFIER '(' ')' ';' KW_ENDDEF ';' function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                           $end
             ↳ 1: comp_definition_list function_definition_list                                                                                                                                                           function_definition_list main_unit
                                       ↳ 99: function_definition_list function_definition
                                                                      ↳ 101: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl function_command_list                            KW_ENDDEF ';'
                                                                                                                                                           ↳ 84: function_command
                                                                                                                                                                 ↳ 97: general_function_call            ';'
                                                                                                                                                                       ↳ 66: function_call
                                                                                                                                                                             ↳ 69: • IDENTIFIER '(' ')'
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl • IDENTIFIER assignment_operator expression ';' KW_ENDDEF ';' main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                   $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list                                                                                                                                                                                  main_unit
                                                                 ↳ 99: function_definition_list function_definition
                                                                                                ↳ 100: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl_list    function_command_list                                           KW_ENDDEF ';'
                                                                                                                                                                ↳ 53: local_var_const_decl • ↳ 84: function_command
                                                                                                                                                                                                   ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                                                                         ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       53 local_var_const_decl_list: local_var_const_decl •
       70 function_call: • IDENTIFIER '(' expr_comma_list ')'
      First example: comp_definition_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl • IDENTIFIER '(' expr_comma_list ')' ';' KW_ENDDEF ';' function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                           $end
             ↳ 1: comp_definition_list function_definition_list                                                                                                                                                                           function_definition_list main_unit
                                       ↳ 99: function_definition_list function_definition
                                                                      ↳ 101: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl function_command_list                                            KW_ENDDEF ';'
                                                                                                                                                           ↳ 84: function_command
                                                                                                                                                                 ↳ 97: general_function_call                            ';'
                                                                                                                                                                       ↳ 66: function_call
                                                                                                                                                                             ↳ 70: • IDENTIFIER '(' expr_comma_list ')'
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl • IDENTIFIER assignment_operator expression ';' KW_ENDDEF ';' main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                   $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list                                                                                                                                                                                  main_unit
                                                                 ↳ 99: function_definition_list function_definition
                                                                                                ↳ 100: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl_list    function_command_list                                           KW_ENDDEF ';'
                                                                                                                                                                ↳ 53: local_var_const_decl • ↳ 84: function_command
                                                                                                                                                                                                   ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                                                                         ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       53 local_var_const_decl_list: local_var_const_decl •
       80 general_variable: • IDENTIFIER
      First example: comp_definition_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl • IDENTIFIER assignment_operator expression ';' KW_ENDDEF ';' function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                            $end
             ↳ 1: comp_definition_list function_definition_list                                                                                                                                                                            function_definition_list main_unit
                                       ↳ 99: function_definition_list function_definition
                                                                      ↳ 101: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl function_command_list                                             KW_ENDDEF ';'
                                                                                                                                                           ↳ 84: function_command
                                                                                                                                                                 ↳ 86: general_variable   assignment_operator expression ';'
                                                                                                                                                                       ↳ 80: • IDENTIFIER
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl • IDENTIFIER assignment_operator expression ';' KW_ENDDEF ';' main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                   $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list                                                                                                                                                                                  main_unit
                                                                 ↳ 99: function_definition_list function_definition
                                                                                                ↳ 100: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl_list    function_command_list                                           KW_ENDDEF ';'
                                                                                                                                                                ↳ 53: local_var_const_decl • ↳ 84: function_command
                                                                                                                                                                                                   ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                                                                         ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       53 local_var_const_decl_list: local_var_const_decl •
       81 general_variable: • IDENTIFIER '.' '#' IDENTIFIER
      First example: comp_definition_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl • IDENTIFIER '.' '#' IDENTIFIER assignment_operator expression ';' KW_ENDDEF ';' function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                               $end
             ↳ 1: comp_definition_list function_definition_list                                                                                                                                                                                               function_definition_list main_unit
                                       ↳ 99: function_definition_list function_definition
                                                                      ↳ 101: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl function_command_list                                                                KW_ENDDEF ';'
                                                                                                                                                           ↳ 84: function_command
                                                                                                                                                                 ↳ 86: general_variable                      assignment_operator expression ';'
                                                                                                                                                                       ↳ 81: • IDENTIFIER '.' '#' IDENTIFIER
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl • IDENTIFIER assignment_operator expression ';' KW_ENDDEF ';' main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                   $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list                                                                                                                                                                                  main_unit
                                                                 ↳ 99: function_definition_list function_definition
                                                                                                ↳ 100: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl_list    function_command_list                                           KW_ENDDEF ';'
                                                                                                                                                                ↳ 53: local_var_const_decl • ↳ 84: function_command
                                                                                                                                                                                                   ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                                                                         ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       53 local_var_const_decl_list: local_var_const_decl •
       82 general_variable: • IDENTIFIER '[' expression ']'
      First example: comp_definition_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl • IDENTIFIER '[' expression ']' assignment_operator expression ';' KW_ENDDEF ';' function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                               $end
             ↳ 1: comp_definition_list function_definition_list                                                                                                                                                                                               function_definition_list main_unit
                                       ↳ 99: function_definition_list function_definition
                                                                      ↳ 101: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl function_command_list                                                                KW_ENDDEF ';'
                                                                                                                                                           ↳ 84: function_command
                                                                                                                                                                 ↳ 86: general_variable                      assignment_operator expression ';'
                                                                                                                                                                       ↳ 82: • IDENTIFIER '[' expression ']'
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl • IDENTIFIER assignment_operator expression ';' KW_ENDDEF ';' main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                   $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list                                                                                                                                                                                  main_unit
                                                                 ↳ 99: function_definition_list function_definition
                                                                                                ↳ 100: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl_list    function_command_list                                           KW_ENDDEF ';'
                                                                                                                                                                ↳ 53: local_var_const_decl • ↳ 84: function_command
                                                                                                                                                                                                   ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                                                                         ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       53 local_var_const_decl_list: local_var_const_decl •
       83 general_variable: • IDENTIFIER '.' '#' IDENTIFIER '[' expression ']'
      First example: comp_definition_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl • IDENTIFIER '.' '#' IDENTIFIER '[' expression ']' assignment_operator expression ';' KW_ENDDEF ';' function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                  $end
             ↳ 1: comp_definition_list function_definition_list                                                                                                                                                                                                                  function_definition_list main_unit
                                       ↳ 99: function_definition_list function_definition
                                                                      ↳ 101: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl function_command_list                                                                                   KW_ENDDEF ';'
                                                                                                                                                           ↳ 84: function_command
                                                                                                                                                                 ↳ 86: general_variable                                         assignment_operator expression ';'
                                                                                                                                                                       ↳ 83: • IDENTIFIER '.' '#' IDENTIFIER '[' expression ']'
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl • IDENTIFIER assignment_operator expression ';' KW_ENDDEF ';' main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                   $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list                                                                                                                                                                                  main_unit
                                                                 ↳ 99: function_definition_list function_definition
                                                                                                ↳ 100: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl_list    function_command_list                                           KW_ENDDEF ';'
                                                                                                                                                                ↳ 53: local_var_const_decl • ↳ 84: function_command
                                                                                                                                                                                                   ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                                                                         ↳ 80: IDENTIFIER

    shift/reduce conflict on token KW_IF:
       53 local_var_const_decl_list: local_var_const_decl •
       87 function_command: • KW_IF '(' expression ')' ':' function_command_list KW_ENDIF ';'
      First example: comp_definition_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl • KW_IF '(' expression ')' ':' function_command_list KW_ENDIF ';' KW_ENDDEF ';' function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                        $end
             ↳ 1: comp_definition_list function_definition_list                                                                                                                                                                                        function_definition_list main_unit
                                       ↳ 99: function_definition_list function_definition
                                                                      ↳ 101: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl function_command_list                                                         KW_ENDDEF ';'
                                                                                                                                                           ↳ 84: function_command
                                                                                                                                                                 ↳ 87: • KW_IF '(' expression ')' ':' function_command_list KW_ENDIF ';'
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl • KW_IF '(' expression ')' ':' function_command_list KW_ENDIF ';' KW_ENDDEF ';' main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                               $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list                                                                                                                                                                                              main_unit
                                                                 ↳ 99: function_definition_list function_definition
                                                                                                ↳ 100: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl_list    function_command_list                                                       KW_ENDDEF ';'
                                                                                                                                                                ↳ 53: local_var_const_decl • ↳ 84: function_command
                                                                                                                                                                                                   ↳ 87: KW_IF '(' expression ')' ':' function_command_list KW_ENDIF ';'

    shift/reduce conflict on token KW_IF:
       53 local_var_const_decl_list: local_var_const_decl •
       88 function_command: • KW_IF '(' expression ')' ':' function_command_list KW_ELSE ':' function_command_list KW_ENDIF ';'
      First example: comp_definition_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl • KW_IF '(' expression ')' ':' function_command_list KW_ELSE ':' function_command_list KW_ENDIF ';' KW_ENDDEF ';' function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                          $end
             ↳ 1: comp_definition_list function_definition_list                                                                                                                                                                                                                          function_definition_list main_unit
                                       ↳ 99: function_definition_list function_definition
                                                                      ↳ 101: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl function_command_list                                                                                           KW_ENDDEF ';'
                                                                                                                                                           ↳ 84: function_command
                                                                                                                                                                 ↳ 88: • KW_IF '(' expression ')' ':' function_command_list KW_ELSE ':' function_command_list KW_ENDIF ';'
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl • KW_IF '(' expression ')' ':' function_command_list KW_ENDIF ';' KW_ENDDEF ';' main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                               $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list                                                                                                                                                                                              main_unit
                                                                 ↳ 99: function_definition_list function_definition
                                                                                                ↳ 100: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl_list    function_command_list                                                       KW_ENDDEF ';'
                                                                                                                                                                ↳ 53: local_var_const_decl • ↳ 84: function_command
                                                                                                                                                                                                   ↳ 87: KW_IF '(' expression ')' ':' function_command_list KW_ENDIF ';'

    shift/reduce conflict on token KW_FOR:
       53 local_var_const_decl_list: local_var_const_decl •
       89 function_command: • KW_FOR general_variable KW_IN '[' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';'
      First example: comp_definition_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl • KW_FOR general_variable KW_IN '[' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';' KW_ENDDEF ';' function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                $end
             ↳ 1: comp_definition_list function_definition_list                                                                                                                                                                                                                                function_definition_list main_unit
                                       ↳ 99: function_definition_list function_definition
                                                                      ↳ 101: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl function_command_list                                                                                                 KW_ENDDEF ';'
                                                                                                                                                           ↳ 84: function_command
                                                                                                                                                                 ↳ 89: • KW_FOR general_variable KW_IN '[' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';'
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl • KW_FOR general_variable KW_IN '[' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';' KW_ENDDEF ';' main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                       $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list                                                                                                                                                                                                                                      main_unit
                                                                 ↳ 99: function_definition_list function_definition
                                                                                                ↳ 100: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl_list    function_command_list                                                                                               KW_ENDDEF ';'
                                                                                                                                                                ↳ 53: local_var_const_decl • ↳ 84: function_command
                                                                                                                                                                                                   ↳ 89: KW_FOR general_variable KW_IN '[' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';'

    shift/reduce conflict on token KW_FOR:
       53 local_var_const_decl_list: local_var_const_decl •
       90 function_command: • KW_FOR general_variable KW_IN '[' expression ':' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';'
      First example: comp_definition_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl • KW_FOR general_variable KW_IN '[' expression ':' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';' KW_ENDDEF ';' function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                               $end
             ↳ 1: comp_definition_list function_definition_list                                                                                                                                                                                                                                               function_definition_list main_unit
                                       ↳ 99: function_definition_list function_definition
                                                                      ↳ 101: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl function_command_list                                                                                                                KW_ENDDEF ';'
                                                                                                                                                           ↳ 84: function_command
                                                                                                                                                                 ↳ 90: • KW_FOR general_variable KW_IN '[' expression ':' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';'
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl • KW_FOR general_variable KW_IN '[' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';' KW_ENDDEF ';' main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                       $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list                                                                                                                                                                                                                                      main_unit
                                                                 ↳ 99: function_definition_list function_definition
                                                                                                ↳ 100: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl_list    function_command_list                                                                                               KW_ENDDEF ';'
                                                                                                                                                                ↳ 53: local_var_const_decl • ↳ 84: function_command
                                                                                                                                                                                                   ↳ 89: KW_FOR general_variable KW_IN '[' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';'

    shift/reduce conflict on token KW_WHILE:
       53 local_var_const_decl_list: local_var_const_decl •
       92 function_command: • KW_WHILE '(' expression ')' ':' function_command_list KW_ENDWHILE ';'
      First example: comp_definition_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl • KW_WHILE '(' expression ')' ':' function_command_list KW_ENDWHILE ';' KW_ENDDEF ';' function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                              $end
             ↳ 1: comp_definition_list function_definition_list                                                                                                                                                                                              function_definition_list main_unit
                                       ↳ 99: function_definition_list function_definition
                                                                      ↳ 101: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl function_command_list                                                               KW_ENDDEF ';'
                                                                                                                                                           ↳ 84: function_command
                                                                                                                                                                 ↳ 92: • KW_WHILE '(' expression ')' ':' function_command_list KW_ENDWHILE ';'
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl • KW_WHILE '(' expression ')' ':' function_command_list KW_ENDWHILE ';' KW_ENDDEF ';' main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                     $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list                                                                                                                                                                                                    main_unit
                                                                 ↳ 99: function_definition_list function_definition
                                                                                                ↳ 100: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl_list    function_command_list                                                             KW_ENDDEF ';'
                                                                                                                                                                ↳ 53: local_var_const_decl • ↳ 84: function_command
                                                                                                                                                                                                   ↳ 92: KW_WHILE '(' expression ')' ':' function_command_list KW_ENDWHILE ';'

    shift/reduce conflict on token KW_BREAK:
       53 local_var_const_decl_list: local_var_const_decl •
       93 function_command: • KW_BREAK ';'
      First example: comp_definition_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl • KW_BREAK ';' KW_ENDDEF ';' function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                     $end
             ↳ 1: comp_definition_list function_definition_list                                                                                                                                     function_definition_list main_unit
                                       ↳ 99: function_definition_list function_definition
                                                                      ↳ 101: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl function_command_list      KW_ENDDEF ';'
                                                                                                                                                           ↳ 84: function_command
                                                                                                                                                                 ↳ 93: • KW_BREAK ';'
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl • KW_BREAK ';' KW_ENDDEF ';' main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                            $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list                                                                                                                                           main_unit
                                                                 ↳ 99: function_definition_list function_definition
                                                                                                ↳ 100: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl_list    function_command_list    KW_ENDDEF ';'
                                                                                                                                                                ↳ 53: local_var_const_decl • ↳ 84: function_command
                                                                                                                                                                                                   ↳ 93: KW_BREAK ';'

    shift/reduce conflict on token KW_CONTINUE:
       53 local_var_const_decl_list: local_var_const_decl •
       94 function_command: • KW_CONTINUE ';'
      First example: comp_definition_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl • KW_CONTINUE ';' KW_ENDDEF ';' function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                        $end
             ↳ 1: comp_definition_list function_definition_list                                                                                                                                        function_definition_list main_unit
                                       ↳ 99: function_definition_list function_definition
                                                                      ↳ 101: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl function_command_list         KW_ENDDEF ';'
                                                                                                                                                           ↳ 84: function_command
                                                                                                                                                                 ↳ 94: • KW_CONTINUE ';'
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl • KW_CONTINUE ';' KW_ENDDEF ';' main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                               $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list                                                                                                                                              main_unit
                                                                 ↳ 99: function_definition_list function_definition
                                                                                                ↳ 100: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl_list    function_command_list       KW_ENDDEF ';'
                                                                                                                                                                ↳ 53: local_var_const_decl • ↳ 84: function_command
                                                                                                                                                                                                   ↳ 94: KW_CONTINUE ';'

    shift/reduce conflict on token KW_RETURN:
       53 local_var_const_decl_list: local_var_const_decl •
       95 function_command: • KW_RETURN ';'
      First example: comp_definition_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl • KW_RETURN ';' KW_ENDDEF ';' function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                      $end
             ↳ 1: comp_definition_list function_definition_list                                                                                                                                      function_definition_list main_unit
                                       ↳ 99: function_definition_list function_definition
                                                                      ↳ 101: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl function_command_list       KW_ENDDEF ';'
                                                                                                                                                           ↳ 84: function_command
                                                                                                                                                                 ↳ 95: • KW_RETURN ';'
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl • KW_RETURN ';' KW_ENDDEF ';' main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                             $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list                                                                                                                                            main_unit
                                                                 ↳ 99: function_definition_list function_definition
                                                                                                ↳ 100: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl_list    function_command_list     KW_ENDDEF ';'
                                                                                                                                                                ↳ 53: local_var_const_decl • ↳ 84: function_command
                                                                                                                                                                                                   ↳ 95: KW_RETURN ';'

    shift/reduce conflict on token KW_RETURN:
       53 local_var_const_decl_list: local_var_const_decl •
       96 function_command: • KW_RETURN expression ';'
      First example: comp_definition_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl • KW_RETURN expression ';' KW_ENDDEF ';' function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                 $end
             ↳ 1: comp_definition_list function_definition_list                                                                                                                                                 function_definition_list main_unit
                                       ↳ 99: function_definition_list function_definition
                                                                      ↳ 101: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl function_command_list                  KW_ENDDEF ';'
                                                                                                                                                           ↳ 84: function_command
                                                                                                                                                                 ↳ 96: • KW_RETURN expression ';'
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl • KW_RETURN ';' KW_ENDDEF ';' main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                             $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list                                                                                                                                            main_unit
                                                                 ↳ 99: function_definition_list function_definition
                                                                                                ↳ 100: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl_list    function_command_list     KW_ENDDEF ';'
                                                                                                                                                                ↳ 53: local_var_const_decl • ↳ 84: function_command
                                                                                                                                                                                                   ↳ 95: KW_RETURN ';'



State 259

   66 general_function_call: • function_call
   67                      | • IDENTIFIER '.' function_call
   68                      | • IDENTIFIER '[' expression ']' '.' function_call
   69 function_call: • IDENTIFIER '(' ')'
   70              | • IDENTIFIER '(' expr_comma_list ')'
   80 general_variable: • IDENTIFIER
   81                 | • IDENTIFIER '.' '#' IDENTIFIER
   82                 | • IDENTIFIER '[' expression ']'
   83                 | • IDENTIFIER '.' '#' IDENTIFIER '[' expression ']'
   85 function_command_list: function_command_list • function_command
   86 function_command: • general_variable assignment_operator expression ';'
   87                 | • KW_IF '(' expression ')' ':' function_command_list KW_ENDIF ';'
   88                 | • KW_IF '(' expression ')' ':' function_command_list KW_ELSE ':' function_command_list KW_ENDIF ';'
   89                 | • KW_FOR general_variable KW_IN '[' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';'
   90                 | • KW_FOR general_variable KW_IN '[' expression ':' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';'
   91                 | • general_variable OP_ASSIGN '[' expression KW_FOR general_variable ':' POSINT ']' ':' basic_data_type ';'
   92                 | • KW_WHILE '(' expression ')' ':' function_command_list KW_ENDWHILE ';'
   93                 | • KW_BREAK ';'
   94                 | • KW_CONTINUE ';'
   95                 | • KW_RETURN ';'
   96                 | • KW_RETURN expression ';'
   97                 | • general_function_call ';'
  102 function_definition: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' function_command_list • KW_ENDDEF ';'

    IDENTIFIER   shift, and go to state 270
    KW_IF        shift, and go to state 216
    KW_CONTINUE  shift, and go to state 217
    KW_FOR       shift, and go to state 218
    KW_WHILE     shift, and go to state 219
    KW_BREAK     shift, and go to state 220
    KW_ENDDEF    shift, and go to state 298
    KW_RETURN    shift, and go to state 221

    general_function_call  go to state 224
    function_call          go to state 70
    general_variable       go to state 225
    function_command       go to state 283


State 260

    2 primary_expression: • POSINT
    3                   | • SCALAR
    4                   | • IDENTIFIER
    5                   | • STRING
    6                   | • KW_TRUE
    7                   | • KW_FALSE
    8                   | • '(' logic_expression ')'
    9 math_expression: • primary_expression
   10                | • '+' math_expression
   11                | • '-' math_expression
   12                | • math_expression '+' math_expression
   13                | • math_expression '-' math_expression
   14                | • math_expression '*' math_expression
   15                | • math_expression '/' math_expression
   16                | • math_expression '%' math_expression
   17                | • math_expression OP_PAW math_expression
   18                | • IDENTIFIER '[' expression ']'
   19                | • IDENTIFIER '[' expression ']' '.' IDENTIFIER
   20                | • IDENTIFIER '[' expression ']' '.' IDENTIFIER '[' expression ']'
   21                | • general_function_call
   22                | • IDENTIFIER '.' IDENTIFIER '[' expression ']'
   23                | • IDENTIFIER '.' IDENTIFIER
   24 relational_expression: • math_expression
   25                      | • relational_expression OP_EQUALS relational_expression
   26                      | • relational_expression OP_NE relational_expression
   27                      | • relational_expression '>' relational_expression
   28                      | • relational_expression '<' relational_expression
   29                      | • relational_expression OP_LE relational_expression
   30                      | • relational_expression OP_GE relational_expression
   31 logic_expression: • relational_expression
   32                 | • OP_NOT logic_expression
   33                 | • logic_expression OP_AND logic_expression
   34                 | • logic_expression OP_OR logic_expression
   35 expression: • logic_expression
   43 identifier_single: IDENTIFIER '[' • POSINT ']'
   44                  | IDENTIFIER '[' • ']'
   62 parameter_declaration: IDENTIFIER '[' • ']' ':' basic_data_type
   66 general_function_call: • function_call
   67                      | • IDENTIFIER '.' function_call
   68                      | • IDENTIFIER '[' expression ']' '.' function_call
   68                      | IDENTIFIER '[' • expression ']' '.' function_call
   69 function_call: • IDENTIFIER '(' ')'
   70              | • IDENTIFIER '(' expr_comma_list ')'
   82 general_variable: IDENTIFIER '[' • expression ']'

    IDENTIFIER  shift, and go to state 53
    POSINT      shift, and go to state 299
    SCALAR      shift, and go to state 55
    STRING      shift, and go to state 56
    OP_NOT      shift, and go to state 57
    KW_TRUE     shift, and go to state 58
    KW_FALSE    shift, and go to state 59
    '-'         shift, and go to state 60
    '+'         shift, and go to state 61
    '('         shift, and go to state 62
    ']'         shift, and go to state 28

    primary_expression     go to state 64
    math_expression        go to state 65
    relational_expression  go to state 66
    logic_expression       go to state 67
    expression             go to state 300
    general_function_call  go to state 69
    function_call          go to state 70


State 261

   67 general_function_call: IDENTIFIER '.' • function_call
   69 function_call: • IDENTIFIER '(' ')'
   70              | • IDENTIFIER '(' expr_comma_list ')'
   81 general_variable: IDENTIFIER '.' • '#' IDENTIFIER
   83                 | IDENTIFIER '.' • '#' IDENTIFIER '[' expression ']'

    IDENTIFIER  shift, and go to state 301
    '#'         shift, and go to state 302

    function_call  go to state 125


State 262

    2 primary_expression: • POSINT
    3                   | • SCALAR
    4                   | • IDENTIFIER
    5                   | • STRING
    6                   | • KW_TRUE
    7                   | • KW_FALSE
    8                   | • '(' logic_expression ')'
    9 math_expression: • primary_expression
   10                | • '+' math_expression
   11                | • '-' math_expression
   12                | • math_expression '+' math_expression
   13                | • math_expression '-' math_expression
   14                | • math_expression '*' math_expression
   15                | • math_expression '/' math_expression
   16                | • math_expression '%' math_expression
   17                | • math_expression OP_PAW math_expression
   18                | • IDENTIFIER '[' expression ']'
   19                | • IDENTIFIER '[' expression ']' '.' IDENTIFIER
   20                | • IDENTIFIER '[' expression ']' '.' IDENTIFIER '[' expression ']'
   21                | • general_function_call
   22                | • IDENTIFIER '.' IDENTIFIER '[' expression ']'
   23                | • IDENTIFIER '.' IDENTIFIER
   24 relational_expression: • math_expression
   25                      | • relational_expression OP_EQUALS relational_expression
   26                      | • relational_expression OP_NE relational_expression
   27                      | • relational_expression '>' relational_expression
   28                      | • relational_expression '<' relational_expression
   29                      | • relational_expression OP_LE relational_expression
   30                      | • relational_expression OP_GE relational_expression
   31 logic_expression: • relational_expression
   32                 | • OP_NOT logic_expression
   33                 | • logic_expression OP_AND logic_expression
   34                 | • logic_expression OP_OR logic_expression
   35 expression: • logic_expression
   66 general_function_call: • function_call
   67                      | • IDENTIFIER '.' function_call
   68                      | • IDENTIFIER '[' expression ']' '.' function_call
   69 function_call: • IDENTIFIER '(' ')'
   70              | • IDENTIFIER '(' expr_comma_list ')'
   87 function_command: KW_IF '(' • expression ')' ':' function_command_list KW_ENDIF ';'
   88                 | KW_IF '(' • expression ')' ':' function_command_list KW_ELSE ':' function_command_list KW_ENDIF ';'

    IDENTIFIER  shift, and go to state 53
    POSINT      shift, and go to state 54
    SCALAR      shift, and go to state 55
    STRING      shift, and go to state 56
    OP_NOT      shift, and go to state 57
    KW_TRUE     shift, and go to state 58
    KW_FALSE    shift, and go to state 59
    '-'         shift, and go to state 60
    '+'         shift, and go to state 61
    '('         shift, and go to state 62

    primary_expression     go to state 64
    math_expression        go to state 65
    relational_expression  go to state 66
    logic_expression       go to state 67
    expression             go to state 303
    general_function_call  go to state 69
    function_call          go to state 70


State 263

   94 function_command: KW_CONTINUE ';' •

    $default  reduce using rule 94 (function_command)


State 264

   80 general_variable: IDENTIFIER •  [KW_IN, '.', ':']
   81                 | IDENTIFIER • '.' '#' IDENTIFIER
   82                 | IDENTIFIER • '[' expression ']'
   83                 | IDENTIFIER • '.' '#' IDENTIFIER '[' expression ']'

    '['  shift, and go to state 304
    '.'  shift, and go to state 305

    '.'       [reduce using rule 80 (general_variable)]
    $default  reduce using rule 80 (general_variable)

    shift/reduce conflict on token '.':
       80 general_variable: IDENTIFIER •
       81 general_variable: IDENTIFIER • '.' '#' IDENTIFIER
      First example: comp_definition_list KW_COMP IDENTIFIER ':' comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' KW_FOR IDENTIFIER • '.' '#' IDENTIFIER KW_IN '[' comp_expression ':' comp_expression ']' ':' comp_command_list KW_ENDFOR ';' KW_ENDDEF ';' KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                                                          $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                                                         local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER ':' comp_function_definition_list                                                                                                                                                                                                                                       KW_ENDCOMP ';'
                                                                            ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                                 ↳ 171: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' comp_command                                                                                                                                     KW_ENDDEF ';'
                                                                                                                                                                                 ↳ 158: KW_FOR comp_variable                                KW_IN '[' comp_expression ':' comp_expression ']' ':' comp_command_list KW_ENDFOR ';'
                                                                                                                                                                                               ↳ 110: general_variable
                                                                                                                                                                                                      ↳ 81: IDENTIFIER • '.' '#' IDENTIFIER
      Second example: comp_definition_list KW_COMP IDENTIFIER ':' comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' KW_FOR IDENTIFIER • '.' '#' IDENTIFIER KW_IN '[' comp_expression ':' comp_expression ']' ':' comp_command_list KW_ENDFOR ';' KW_ENDDEF ';' KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                                                                        $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                                                                       local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER ':' comp_function_definition_list                                                                                                                                                                                                                                                     KW_ENDCOMP ';'
                                                                            ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                                 ↳ 171: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' comp_command_list                                                                                                                                              KW_ENDDEF ';'
                                                                                                                                                                                 ↳ 153: comp_command
                                                                                                                                                                                        ↳ 158: KW_FOR comp_variable                                       KW_IN '[' comp_expression ':' comp_expression ']' ':' comp_command_list KW_ENDFOR ';'
                                                                                                                                                                                                      ↳ 108: comp_variable             '.' '#' IDENTIFIER
                                                                                                                                                                                                             ↳ 110: general_variable
                                                                                                                                                                                                                    ↳ 80: IDENTIFIER •

    shift/reduce conflict on token '.':
       80 general_variable: IDENTIFIER •
       83 general_variable: IDENTIFIER • '.' '#' IDENTIFIER '[' expression ']'
      First example: comp_definition_list KW_COMP IDENTIFIER ':' comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' KW_FOR IDENTIFIER • '.' '#' IDENTIFIER '[' expression ']' KW_IN '[' comp_expression ':' comp_expression ']' ':' comp_command_list KW_ENDFOR ';' KW_ENDDEF ';' KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                                                                             $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                                                                            local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER ':' comp_function_definition_list                                                                                                                                                                                                                                                          KW_ENDCOMP ';'
                                                                            ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                                 ↳ 171: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' comp_command                                                                                                                                                        KW_ENDDEF ';'
                                                                                                                                                                                 ↳ 158: KW_FOR comp_variable                                                   KW_IN '[' comp_expression ':' comp_expression ']' ':' comp_command_list KW_ENDFOR ';'
                                                                                                                                                                                               ↳ 110: general_variable
                                                                                                                                                                                                      ↳ 83: IDENTIFIER • '.' '#' IDENTIFIER '[' expression ']'
      Second example: comp_definition_list KW_COMP IDENTIFIER ':' comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' KW_FOR IDENTIFIER • '.' '#' IDENTIFIER KW_IN '[' comp_expression ':' comp_expression ']' ':' comp_command_list KW_ENDFOR ';' KW_ENDDEF ';' KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                                                                        $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                                                                       local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER ':' comp_function_definition_list                                                                                                                                                                                                                                                     KW_ENDCOMP ';'
                                                                            ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                                 ↳ 171: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' comp_command_list                                                                                                                                              KW_ENDDEF ';'
                                                                                                                                                                                 ↳ 153: comp_command
                                                                                                                                                                                        ↳ 158: KW_FOR comp_variable                                       KW_IN '[' comp_expression ':' comp_expression ']' ':' comp_command_list KW_ENDFOR ';'
                                                                                                                                                                                                      ↳ 108: comp_variable             '.' '#' IDENTIFIER
                                                                                                                                                                                                             ↳ 110: general_variable
                                                                                                                                                                                                                    ↳ 80: IDENTIFIER •



State 265

   89 function_command: KW_FOR general_variable • KW_IN '[' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';'
   90                 | KW_FOR general_variable • KW_IN '[' expression ':' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';'

    KW_IN  shift, and go to state 306


State 266

    2 primary_expression: • POSINT
    3                   | • SCALAR
    4                   | • IDENTIFIER
    5                   | • STRING
    6                   | • KW_TRUE
    7                   | • KW_FALSE
    8                   | • '(' logic_expression ')'
    9 math_expression: • primary_expression
   10                | • '+' math_expression
   11                | • '-' math_expression
   12                | • math_expression '+' math_expression
   13                | • math_expression '-' math_expression
   14                | • math_expression '*' math_expression
   15                | • math_expression '/' math_expression
   16                | • math_expression '%' math_expression
   17                | • math_expression OP_PAW math_expression
   18                | • IDENTIFIER '[' expression ']'
   19                | • IDENTIFIER '[' expression ']' '.' IDENTIFIER
   20                | • IDENTIFIER '[' expression ']' '.' IDENTIFIER '[' expression ']'
   21                | • general_function_call
   22                | • IDENTIFIER '.' IDENTIFIER '[' expression ']'
   23                | • IDENTIFIER '.' IDENTIFIER
   24 relational_expression: • math_expression
   25                      | • relational_expression OP_EQUALS relational_expression
   26                      | • relational_expression OP_NE relational_expression
   27                      | • relational_expression '>' relational_expression
   28                      | • relational_expression '<' relational_expression
   29                      | • relational_expression OP_LE relational_expression
   30                      | • relational_expression OP_GE relational_expression
   31 logic_expression: • relational_expression
   32                 | • OP_NOT logic_expression
   33                 | • logic_expression OP_AND logic_expression
   34                 | • logic_expression OP_OR logic_expression
   35 expression: • logic_expression
   66 general_function_call: • function_call
   67                      | • IDENTIFIER '.' function_call
   68                      | • IDENTIFIER '[' expression ']' '.' function_call
   69 function_call: • IDENTIFIER '(' ')'
   70              | • IDENTIFIER '(' expr_comma_list ')'
   92 function_command: KW_WHILE '(' • expression ')' ':' function_command_list KW_ENDWHILE ';'

    IDENTIFIER  shift, and go to state 53
    POSINT      shift, and go to state 54
    SCALAR      shift, and go to state 55
    STRING      shift, and go to state 56
    OP_NOT      shift, and go to state 57
    KW_TRUE     shift, and go to state 58
    KW_FALSE    shift, and go to state 59
    '-'         shift, and go to state 60
    '+'         shift, and go to state 61
    '('         shift, and go to state 62

    primary_expression     go to state 64
    math_expression        go to state 65
    relational_expression  go to state 66
    logic_expression       go to state 67
    expression             go to state 307
    general_function_call  go to state 69
    function_call          go to state 70


State 267

   93 function_command: KW_BREAK ';' •

    $default  reduce using rule 93 (function_command)


State 268

   95 function_command: KW_RETURN ';' •

    $default  reduce using rule 95 (function_command)


State 269

   96 function_command: KW_RETURN expression • ';'

    ';'  shift, and go to state 308


State 270

   67 general_function_call: IDENTIFIER • '.' function_call
   68                      | IDENTIFIER • '[' expression ']' '.' function_call
   69 function_call: IDENTIFIER • '(' ')'
   70              | IDENTIFIER • '(' expr_comma_list ')'
   80 general_variable: IDENTIFIER •  [OP_ASSIGN, OP_ASSIGN_PLUSEQ, OP_ASSIGN_MULEQ, OP_ASSIGN_DIVEQ, OP_ASSIGN_MODEQ, OP_ASSIGN_MINUSEQ, '=']
   81                 | IDENTIFIER • '.' '#' IDENTIFIER
   82                 | IDENTIFIER • '[' expression ']'
   83                 | IDENTIFIER • '.' '#' IDENTIFIER '[' expression ']'

    '('  shift, and go to state 86
    '['  shift, and go to state 309
    '.'  shift, and go to state 261

    $default  reduce using rule 80 (general_variable)


State 271

   66 general_function_call: • function_call
   67                      | • IDENTIFIER '.' function_call
   68                      | • IDENTIFIER '[' expression ']' '.' function_call
   69 function_call: • IDENTIFIER '(' ')'
   70              | • IDENTIFIER '(' expr_comma_list ')'
   80 general_variable: • IDENTIFIER
   81                 | • IDENTIFIER '.' '#' IDENTIFIER
   82                 | • IDENTIFIER '[' expression ']'
   83                 | • IDENTIFIER '.' '#' IDENTIFIER '[' expression ']'
   85 function_command_list: function_command_list • function_command
   86 function_command: • general_variable assignment_operator expression ';'
   87                 | • KW_IF '(' expression ')' ':' function_command_list KW_ENDIF ';'
   88                 | • KW_IF '(' expression ')' ':' function_command_list KW_ELSE ':' function_command_list KW_ENDIF ';'
   89                 | • KW_FOR general_variable KW_IN '[' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';'
   90                 | • KW_FOR general_variable KW_IN '[' expression ':' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';'
   91                 | • general_variable OP_ASSIGN '[' expression KW_FOR general_variable ':' POSINT ']' ':' basic_data_type ';'
   92                 | • KW_WHILE '(' expression ')' ':' function_command_list KW_ENDWHILE ';'
   93                 | • KW_BREAK ';'
   94                 | • KW_CONTINUE ';'
   95                 | • KW_RETURN ';'
   96                 | • KW_RETURN expression ';'
   97                 | • general_function_call ';'
  189 main_unit: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl_list function_command_list • KW_ENDDEF ';'

    IDENTIFIER   shift, and go to state 270
    KW_IF        shift, and go to state 216
    KW_CONTINUE  shift, and go to state 217
    KW_FOR       shift, and go to state 218
    KW_WHILE     shift, and go to state 219
    KW_BREAK     shift, and go to state 220
    KW_ENDDEF    shift, and go to state 310
    KW_RETURN    shift, and go to state 221

    general_function_call  go to state 224
    function_call          go to state 70
    general_variable       go to state 225
    function_command       go to state 283


State 272

   66 general_function_call: • function_call
   67                      | • IDENTIFIER '.' function_call
   68                      | • IDENTIFIER '[' expression ']' '.' function_call
   69 function_call: • IDENTIFIER '(' ')'
   70              | • IDENTIFIER '(' expr_comma_list ')'
   80 general_variable: • IDENTIFIER
   81                 | • IDENTIFIER '.' '#' IDENTIFIER
   82                 | • IDENTIFIER '[' expression ']'
   83                 | • IDENTIFIER '.' '#' IDENTIFIER '[' expression ']'
   85 function_command_list: function_command_list • function_command
   86 function_command: • general_variable assignment_operator expression ';'
   87                 | • KW_IF '(' expression ')' ':' function_command_list KW_ENDIF ';'
   88                 | • KW_IF '(' expression ')' ':' function_command_list KW_ELSE ':' function_command_list KW_ENDIF ';'
   89                 | • KW_FOR general_variable KW_IN '[' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';'
   90                 | • KW_FOR general_variable KW_IN '[' expression ':' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';'
   91                 | • general_variable OP_ASSIGN '[' expression KW_FOR general_variable ':' POSINT ']' ':' basic_data_type ';'
   92                 | • KW_WHILE '(' expression ')' ':' function_command_list KW_ENDWHILE ';'
   93                 | • KW_BREAK ';'
   94                 | • KW_CONTINUE ';'
   95                 | • KW_RETURN ';'
   96                 | • KW_RETURN expression ';'
   97                 | • general_function_call ';'
  190 main_unit: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl function_command_list • KW_ENDDEF ';'

    IDENTIFIER   shift, and go to state 270
    KW_IF        shift, and go to state 216
    KW_CONTINUE  shift, and go to state 217
    KW_FOR       shift, and go to state 218
    KW_WHILE     shift, and go to state 219
    KW_BREAK     shift, and go to state 220
    KW_ENDDEF    shift, and go to state 311
    KW_RETURN    shift, and go to state 221

    general_function_call  go to state 224
    function_call          go to state 70
    general_variable       go to state 225
    function_command       go to state 283


State 273

   97 function_command: general_function_call ';' •

    $default  reduce using rule 97 (function_command)


State 274

   74 assignment_operator: OP_ASSIGN •  [IDENTIFIER, POSINT, SCALAR, STRING, OP_NOT, KW_TRUE, KW_FALSE, '-', '+', '(']
   91 function_command: general_variable OP_ASSIGN • '[' expression KW_FOR general_variable ':' POSINT ']' ':' basic_data_type ';'

    '['  shift, and go to state 312

    $default  reduce using rule 74 (assignment_operator)


State 275

   75 assignment_operator: OP_ASSIGN_PLUSEQ •

    $default  reduce using rule 75 (assignment_operator)


State 276

   77 assignment_operator: OP_ASSIGN_MULEQ •

    $default  reduce using rule 77 (assignment_operator)


State 277

   78 assignment_operator: OP_ASSIGN_DIVEQ •

    $default  reduce using rule 78 (assignment_operator)


State 278

   79 assignment_operator: OP_ASSIGN_MODEQ •

    $default  reduce using rule 79 (assignment_operator)


State 279

   76 assignment_operator: OP_ASSIGN_MINUSEQ •

    $default  reduce using rule 76 (assignment_operator)


State 280

   73 assignment_operator: '=' •

    $default  reduce using rule 73 (assignment_operator)


State 281

    2 primary_expression: • POSINT
    3                   | • SCALAR
    4                   | • IDENTIFIER
    5                   | • STRING
    6                   | • KW_TRUE
    7                   | • KW_FALSE
    8                   | • '(' logic_expression ')'
    9 math_expression: • primary_expression
   10                | • '+' math_expression
   11                | • '-' math_expression
   12                | • math_expression '+' math_expression
   13                | • math_expression '-' math_expression
   14                | • math_expression '*' math_expression
   15                | • math_expression '/' math_expression
   16                | • math_expression '%' math_expression
   17                | • math_expression OP_PAW math_expression
   18                | • IDENTIFIER '[' expression ']'
   19                | • IDENTIFIER '[' expression ']' '.' IDENTIFIER
   20                | • IDENTIFIER '[' expression ']' '.' IDENTIFIER '[' expression ']'
   21                | • general_function_call
   22                | • IDENTIFIER '.' IDENTIFIER '[' expression ']'
   23                | • IDENTIFIER '.' IDENTIFIER
   24 relational_expression: • math_expression
   25                      | • relational_expression OP_EQUALS relational_expression
   26                      | • relational_expression OP_NE relational_expression
   27                      | • relational_expression '>' relational_expression
   28                      | • relational_expression '<' relational_expression
   29                      | • relational_expression OP_LE relational_expression
   30                      | • relational_expression OP_GE relational_expression
   31 logic_expression: • relational_expression
   32                 | • OP_NOT logic_expression
   33                 | • logic_expression OP_AND logic_expression
   34                 | • logic_expression OP_OR logic_expression
   35 expression: • logic_expression
   66 general_function_call: • function_call
   67                      | • IDENTIFIER '.' function_call
   68                      | • IDENTIFIER '[' expression ']' '.' function_call
   69 function_call: • IDENTIFIER '(' ')'
   70              | • IDENTIFIER '(' expr_comma_list ')'
   86 function_command: general_variable assignment_operator • expression ';'

    IDENTIFIER  shift, and go to state 53
    POSINT      shift, and go to state 54
    SCALAR      shift, and go to state 55
    STRING      shift, and go to state 56
    OP_NOT      shift, and go to state 57
    KW_TRUE     shift, and go to state 58
    KW_FALSE    shift, and go to state 59
    '-'         shift, and go to state 60
    '+'         shift, and go to state 61
    '('         shift, and go to state 62

    primary_expression     go to state 64
    math_expression        go to state 65
    relational_expression  go to state 66
    logic_expression       go to state 67
    expression             go to state 313
    general_function_call  go to state 69
    function_call          go to state 70


State 282

  191 main_unit: KW_DEF KW_MAIN '(' ')' ':' function_command_list KW_ENDDEF • ';'

    ';'  shift, and go to state 314


State 283

   85 function_command_list: function_command_list function_command •

    $default  reduce using rule 85 (function_command_list)


State 284

  112 comp_function_call: IDENTIFIER '(' comp_expr_comma_list ')' •

    $default  reduce using rule 112 (comp_function_call)


State 285

  111 comp_function_call: • IDENTIFIER '(' ')'
  112                   | • IDENTIFIER '(' comp_expr_comma_list ')'
  113 general_comp_function_call: • comp_function_call
  114                           | • '#' IDENTIFIER '.' comp_function_call
  115                           | • '#' IDENTIFIER '[' comp_expression ']' '.' comp_function_call
  117 comp_expr_comma_list: comp_expr_comma_list ',' • comp_expression
  118 comp_primary_expression: • POSINT
  119                        | • SCALAR
  120                        | • '#' IDENTIFIER
  121                        | • IDENTIFIER
  122                        | • STRING
  123                        | • KW_TRUE
  124                        | • KW_FALSE
  125                        | • '(' logic_expression ')'
  126 comp_math_expression: • comp_primary_expression
  127                     | • '+' comp_math_expression
  128                     | • '-' comp_math_expression
  129                     | • comp_math_expression '+' comp_math_expression
  130                     | • comp_math_expression '-' comp_math_expression
  131                     | • comp_math_expression '*' comp_math_expression
  132                     | • comp_math_expression '/' comp_math_expression
  133                     | • comp_math_expression '%' comp_math_expression
  134                     | • comp_math_expression OP_PAW comp_math_expression
  135                     | • '#' IDENTIFIER '[' comp_expression ']'
  136                     | • '#' IDENTIFIER '[' comp_expression ']' '.' '#' IDENTIFIER
  137                     | • '#' IDENTIFIER '[' comp_expression ']' '.' '#' IDENTIFIER '[' comp_expression ']'
  138                     | • general_comp_function_call
  139                     | • '#' IDENTIFIER '.' '#' IDENTIFIER '[' comp_expression ']'
  140                     | • '#' IDENTIFIER '.' '#' IDENTIFIER
  141 comp_relational_expression: • comp_math_expression
  142                           | • comp_relational_expression OP_EQUALS comp_relational_expression
  143                           | • comp_relational_expression OP_NE comp_relational_expression
  144                           | • comp_relational_expression '>' comp_relational_expression
  145                           | • comp_relational_expression '<' comp_relational_expression
  146                           | • comp_relational_expression OP_LE comp_relational_expression
  147                           | • comp_relational_expression OP_GE comp_relational_expression
  148 comp_logic_expression: • comp_relational_expression
  149                      | • OP_NOT comp_logic_expression
  150                      | • comp_logic_expression OP_AND comp_logic_expression
  151                      | • comp_logic_expression OP_OR comp_logic_expression
  152 comp_expression: • comp_logic_expression

    IDENTIFIER  shift, and go to state 148
    POSINT      shift, and go to state 149
    SCALAR      shift, and go to state 150
    STRING      shift, and go to state 151
    OP_NOT      shift, and go to state 152
    KW_TRUE     shift, and go to state 153
    KW_FALSE    shift, and go to state 154
    '-'         shift, and go to state 155
    '+'         shift, and go to state 156
    '#'         shift, and go to state 157
    '('         shift, and go to state 158

    comp_function_call          go to state 160
    general_comp_function_call  go to state 161
    comp_primary_expression     go to state 162
    comp_math_expression        go to state 163
    comp_relational_expression  go to state 164
    comp_logic_expression       go to state 165
    comp_expression             go to state 315


State 286

  115 general_comp_function_call: '#' IDENTIFIER '[' comp_expression • ']' '.' comp_function_call
  135 comp_math_expression: '#' IDENTIFIER '[' comp_expression • ']'
  136                     | '#' IDENTIFIER '[' comp_expression • ']' '.' '#' IDENTIFIER
  137                     | '#' IDENTIFIER '[' comp_expression • ']' '.' '#' IDENTIFIER '[' comp_expression ']'

    ']'  shift, and go to state 316


State 287

  111 comp_function_call: IDENTIFIER • '(' ')'
  112                   | IDENTIFIER • '(' comp_expr_comma_list ')'

    '('  shift, and go to state 183


State 288

  139 comp_math_expression: '#' IDENTIFIER '.' '#' • IDENTIFIER '[' comp_expression ']'
  140                     | '#' IDENTIFIER '.' '#' • IDENTIFIER

    IDENTIFIER  shift, and go to state 317


State 289

  114 general_comp_function_call: '#' IDENTIFIER '.' comp_function_call •

    $default  reduce using rule 114 (general_comp_function_call)


State 290

  172 comp_function_definition: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' • '>' basic_data_type ':' local_var_const_decl_list comp_command_list KW_RETURN comp_expression ';' KW_ENDDEF ';'
  173                         | KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' • '>' basic_data_type ':' comp_command_list KW_RETURN comp_expression ';' KW_ENDDEF ';'
  174                         | KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' • '>' basic_data_type ':' local_var_const_decl comp_command_list KW_RETURN comp_expression ';' KW_ENDDEF ';'

    '>'  shift, and go to state 318


State 291

   42 identifier_single: • IDENTIFIER
   43                  | • IDENTIFIER '[' POSINT ']'
   44                  | • IDENTIFIER '[' ']'
   45 identifier_list: • identifier_single ',' identifier_single
   46                | • identifier_single ',' identifier_list
   47                | • identifier_single
   48 constant_decl: • KW_CONST IDENTIFIER '=' expression ':' basic_data_type ';'
   49              | • KW_CONST IDENTIFIER '[' expression ']' '=' expression ':' basic_data_type ';'
   50              | • KW_CONST IDENTIFIER '[' ']' '=' expression ':' basic_data_type ';'
   51 local_var_const_decl_list: • constant_decl local_var_const_decl_list
   52                          | • variable_decl local_var_const_decl_list
   53                          | • local_var_const_decl
   54                          | ε •  [IDENTIFIER, KW_IF, KW_CONTINUE, KW_FOR, KW_WHILE, KW_BREAK, KW_RETURN, '#']
   55 local_var_const_decl: • variable_decl
   56                     | • constant_decl
   57                     | • variable_decl constant_decl
   58                     | • constant_decl variable_decl
   59 variable_decl: • identifier_list ':' basic_data_type ';'
   60              | • parameter_declaration ';'
   61 parameter_declaration: • IDENTIFIER ':' basic_data_type
   62                      | • IDENTIFIER '[' ']' ':' basic_data_type
   80 general_variable: • IDENTIFIER
   81                 | • IDENTIFIER '.' '#' IDENTIFIER
   82                 | • IDENTIFIER '[' expression ']'
   83                 | • IDENTIFIER '.' '#' IDENTIFIER '[' expression ']'
  106 comp_variable: • '#' IDENTIFIER
  107              | • '#' IDENTIFIER '[' comp_expression ']'
  108              | • comp_variable '.' '#' IDENTIFIER
  109              | • comp_variable '.' '#' IDENTIFIER '[' POSINT ']'
  110              | • general_variable
  111 comp_function_call: • IDENTIFIER '(' ')'
  112                   | • IDENTIFIER '(' comp_expr_comma_list ')'
  113 general_comp_function_call: • comp_function_call
  114                           | • '#' IDENTIFIER '.' comp_function_call
  115                           | • '#' IDENTIFIER '[' comp_expression ']' '.' comp_function_call
  153 comp_command_list: • comp_command
  154                  | • comp_command_list comp_command
  155 comp_command: • comp_variable assignment_operator comp_expression ';'
  156             | • KW_IF '(' comp_expression ')' ':' comp_command_list KW_ENDIF ';'
  157             | • KW_IF '(' comp_expression ')' ':' comp_command_list KW_ELSE ':' comp_command_list KW_ENDIF ';'
  158             | • KW_FOR comp_variable KW_IN '[' comp_expression ':' comp_expression ']' ':' comp_command_list KW_ENDFOR ';'
  159             | • KW_FOR comp_variable KW_IN '[' comp_expression ':' comp_expression ':' comp_expression ']' ':' comp_command_list KW_ENDFOR ';'
  160             | • comp_variable OP_ASSIGN '[' comp_expression KW_FOR comp_variable ':' POSINT ']' ':' basic_data_type ';'
  161             | • KW_WHILE '(' comp_expression ')' ':' comp_command_list KW_ENDWHILE ';'
  162             | • KW_BREAK ';'
  163             | • KW_CONTINUE ';'
  164             | • KW_RETURN ';'
  165             | • KW_RETURN comp_expression ';'
  166             | • general_comp_function_call ';'
  169 comp_function_definition: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' • local_var_const_decl_list comp_command_list KW_ENDDEF ';'
  170                         | KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' • local_var_const_decl comp_command_list KW_ENDDEF ';'
  171                         | KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' • comp_command_list KW_ENDDEF ';'

    IDENTIFIER   shift, and go to state 319
    KW_IF        shift, and go to state 320
    KW_CONTINUE  shift, and go to state 321
    KW_FOR       shift, and go to state 322
    KW_WHILE     shift, and go to state 323
    KW_BREAK     shift, and go to state 324
    KW_CONST     shift, and go to state 6
    KW_RETURN    shift, and go to state 325
    '#'          shift, and go to state 326

    IDENTIFIER   [reduce using rule 54 (local_var_const_decl_list)]
    KW_IF        [reduce using rule 54 (local_var_const_decl_list)]
    KW_CONTINUE  [reduce using rule 54 (local_var_const_decl_list)]
    KW_FOR       [reduce using rule 54 (local_var_const_decl_list)]
    KW_WHILE     [reduce using rule 54 (local_var_const_decl_list)]
    KW_BREAK     [reduce using rule 54 (local_var_const_decl_list)]
    KW_RETURN    [reduce using rule 54 (local_var_const_decl_list)]
    '#'          [reduce using rule 54 (local_var_const_decl_list)]

    identifier_single           go to state 7
    identifier_list             go to state 8
    constant_decl               go to state 9
    local_var_const_decl_list   go to state 327
    local_var_const_decl        go to state 328
    variable_decl               go to state 12
    parameter_declaration       go to state 13
    general_variable            go to state 329
    comp_variable               go to state 330
    comp_function_call          go to state 160
    general_comp_function_call  go to state 331
    comp_command_list           go to state 332
    comp_command                go to state 333

    shift/reduce conflict on token IDENTIFIER:
       54 local_var_const_decl_list: ε •
       42 identifier_single: • IDENTIFIER
      First example: comp_definition_list KW_COMP IDENTIFIER ':' KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' • IDENTIFIER ',' identifier_single ':' basic_data_type ';' local_var_const_decl_list comp_command_list KW_ENDDEF ';' comp_function_definition KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                                   $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                                  local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER ':' comp_function_definition_list                                                                                                                                                                                                                KW_ENDCOMP ';'
                                                                            ↳ 168: comp_function_definition                                                                                                                                                                                     comp_function_definition
                                                                                   ↳ 169: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl_list                                                                                    comp_command_list KW_ENDDEF ';'
                                                                                                                                                   ↳ 52: variable_decl                                                                local_var_const_decl_list
                                                                                                                                                         ↳ 59: identifier_list                                ':' basic_data_type ';'
                                                                                                                                                               ↳ 45: identifier_single  ',' identifier_single
                                                                                                                                                                     ↳ 42: • IDENTIFIER
      Second example: comp_definition_list KW_COMP IDENTIFIER ':' comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' • IDENTIFIER assignment_operator comp_expression ';' KW_ENDDEF ';' KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                 $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER ':' comp_function_definition_list                                                                                                                                                                                              KW_ENDCOMP ';'
                                                                            ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                                 ↳ 169: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl_list comp_command_list                                                             KW_ENDDEF ';'
                                                                                                                                                                                 ↳ 54: ε •                 ↳ 153: comp_command
                                                                                                                                                                                                                  ↳ 155: comp_variable           assignment_operator comp_expression ';'
                                                                                                                                                                                                                         ↳ 110: general_variable
                                                                                                                                                                                                                                ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       54 local_var_const_decl_list: ε •
       43 identifier_single: • IDENTIFIER '[' POSINT ']'
      First example: comp_definition_list KW_COMP IDENTIFIER ':' KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' • IDENTIFIER '[' POSINT ']' ',' identifier_single ':' basic_data_type ';' local_var_const_decl_list comp_command_list KW_ENDDEF ';' comp_function_definition KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                                                  $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                                                 local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER ':' comp_function_definition_list                                                                                                                                                                                                                               KW_ENDCOMP ';'
                                                                            ↳ 168: comp_function_definition                                                                                                                                                                                                    comp_function_definition
                                                                                   ↳ 169: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl_list                                                                                                   comp_command_list KW_ENDDEF ';'
                                                                                                                                                   ↳ 52: variable_decl                                                                               local_var_const_decl_list
                                                                                                                                                         ↳ 59: identifier_list                                               ':' basic_data_type ';'
                                                                                                                                                               ↳ 45: identifier_single                 ',' identifier_single
                                                                                                                                                                     ↳ 43: • IDENTIFIER '[' POSINT ']'
      Second example: comp_definition_list KW_COMP IDENTIFIER ':' comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' • IDENTIFIER assignment_operator comp_expression ';' KW_ENDDEF ';' KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                 $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER ':' comp_function_definition_list                                                                                                                                                                                              KW_ENDCOMP ';'
                                                                            ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                                 ↳ 169: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl_list comp_command_list                                                             KW_ENDDEF ';'
                                                                                                                                                                                 ↳ 54: ε •                 ↳ 153: comp_command
                                                                                                                                                                                                                  ↳ 155: comp_variable           assignment_operator comp_expression ';'
                                                                                                                                                                                                                         ↳ 110: general_variable
                                                                                                                                                                                                                                ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       54 local_var_const_decl_list: ε •
       44 identifier_single: • IDENTIFIER '[' ']'
      First example: comp_definition_list KW_COMP IDENTIFIER ':' KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' • IDENTIFIER '[' ']' ',' identifier_single ':' basic_data_type ';' local_var_const_decl_list comp_command_list KW_ENDDEF ';' comp_function_definition KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                                           $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                                          local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER ':' comp_function_definition_list                                                                                                                                                                                                                        KW_ENDCOMP ';'
                                                                            ↳ 168: comp_function_definition                                                                                                                                                                                             comp_function_definition
                                                                                   ↳ 169: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl_list                                                                                            comp_command_list KW_ENDDEF ';'
                                                                                                                                                   ↳ 52: variable_decl                                                                        local_var_const_decl_list
                                                                                                                                                         ↳ 59: identifier_list                                        ':' basic_data_type ';'
                                                                                                                                                               ↳ 45: identifier_single          ',' identifier_single
                                                                                                                                                                     ↳ 44: • IDENTIFIER '[' ']'
      Second example: comp_definition_list KW_COMP IDENTIFIER ':' comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' • IDENTIFIER assignment_operator comp_expression ';' KW_ENDDEF ';' KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                 $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER ':' comp_function_definition_list                                                                                                                                                                                              KW_ENDCOMP ';'
                                                                            ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                                 ↳ 169: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl_list comp_command_list                                                             KW_ENDDEF ';'
                                                                                                                                                                                 ↳ 54: ε •                 ↳ 153: comp_command
                                                                                                                                                                                                                  ↳ 155: comp_variable           assignment_operator comp_expression ';'
                                                                                                                                                                                                                         ↳ 110: general_variable
                                                                                                                                                                                                                                ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       54 local_var_const_decl_list: ε •
       61 parameter_declaration: • IDENTIFIER ':' basic_data_type
      First example: comp_definition_list KW_COMP IDENTIFIER ':' KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' • IDENTIFIER ':' basic_data_type ';' local_var_const_decl_list comp_command_list KW_ENDDEF ';' comp_function_definition KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                       $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                      local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER ':' comp_function_definition_list                                                                                                                                                                                    KW_ENDCOMP ';'
                                                                            ↳ 168: comp_function_definition                                                                                                                                                         comp_function_definition
                                                                                   ↳ 169: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl_list                                                        comp_command_list KW_ENDDEF ';'
                                                                                                                                                   ↳ 52: variable_decl                                    local_var_const_decl_list
                                                                                                                                                         ↳ 60: parameter_declaration                  ';'
                                                                                                                                                               ↳ 61: • IDENTIFIER ':' basic_data_type
      Second example: comp_definition_list KW_COMP IDENTIFIER ':' comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' • IDENTIFIER assignment_operator comp_expression ';' KW_ENDDEF ';' KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                 $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER ':' comp_function_definition_list                                                                                                                                                                                              KW_ENDCOMP ';'
                                                                            ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                                 ↳ 169: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl_list comp_command_list                                                             KW_ENDDEF ';'
                                                                                                                                                                                 ↳ 54: ε •                 ↳ 153: comp_command
                                                                                                                                                                                                                  ↳ 155: comp_variable           assignment_operator comp_expression ';'
                                                                                                                                                                                                                         ↳ 110: general_variable
                                                                                                                                                                                                                                ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       54 local_var_const_decl_list: ε •
       62 parameter_declaration: • IDENTIFIER '[' ']' ':' basic_data_type
      First example: comp_definition_list KW_COMP IDENTIFIER ':' KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' • IDENTIFIER '[' ']' ':' basic_data_type ';' local_var_const_decl_list comp_command_list KW_ENDDEF ';' comp_function_definition KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                               $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                              local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER ':' comp_function_definition_list                                                                                                                                                                                            KW_ENDCOMP ';'
                                                                            ↳ 168: comp_function_definition                                                                                                                                                                 comp_function_definition
                                                                                   ↳ 169: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl_list                                                                comp_command_list KW_ENDDEF ';'
                                                                                                                                                   ↳ 52: variable_decl                                            local_var_const_decl_list
                                                                                                                                                         ↳ 60: parameter_declaration                          ';'
                                                                                                                                                               ↳ 62: • IDENTIFIER '[' ']' ':' basic_data_type
      Second example: comp_definition_list KW_COMP IDENTIFIER ':' comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' • IDENTIFIER assignment_operator comp_expression ';' KW_ENDDEF ';' KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                 $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER ':' comp_function_definition_list                                                                                                                                                                                              KW_ENDCOMP ';'
                                                                            ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                                 ↳ 169: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl_list comp_command_list                                                             KW_ENDDEF ';'
                                                                                                                                                                                 ↳ 54: ε •                 ↳ 153: comp_command
                                                                                                                                                                                                                  ↳ 155: comp_variable           assignment_operator comp_expression ';'
                                                                                                                                                                                                                         ↳ 110: general_variable
                                                                                                                                                                                                                                ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       54 local_var_const_decl_list: ε •
       80 general_variable: • IDENTIFIER
      First example: comp_definition_list KW_COMP IDENTIFIER comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' • IDENTIFIER assignment_operator comp_expression ';' KW_ENDDEF ';' comp_function_definition_list KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                   $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                  local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER comp_function_definition_list                                                                                                                                                                      comp_function_definition_list KW_ENDCOMP ';'
                                                                        ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                             ↳ 171: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' comp_command_list                                                               KW_ENDDEF ';'
                                                                                                                                                                             ↳ 153: comp_command
                                                                                                                                                                                    ↳ 155: comp_variable             assignment_operator comp_expression ';'
                                                                                                                                                                                           ↳ 110: general_variable
                                                                                                                                                                                                  ↳ 80: • IDENTIFIER
      Second example: comp_definition_list KW_COMP IDENTIFIER ':' comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' • IDENTIFIER assignment_operator comp_expression ';' KW_ENDDEF ';' KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                 $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER ':' comp_function_definition_list                                                                                                                                                                                              KW_ENDCOMP ';'
                                                                            ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                                 ↳ 169: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl_list comp_command_list                                                             KW_ENDDEF ';'
                                                                                                                                                                                 ↳ 54: ε •                 ↳ 153: comp_command
                                                                                                                                                                                                                  ↳ 155: comp_variable           assignment_operator comp_expression ';'
                                                                                                                                                                                                                         ↳ 110: general_variable
                                                                                                                                                                                                                                ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       54 local_var_const_decl_list: ε •
       81 general_variable: • IDENTIFIER '.' '#' IDENTIFIER
      First example: comp_definition_list KW_COMP IDENTIFIER comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' • IDENTIFIER '.' '#' IDENTIFIER assignment_operator comp_expression ';' KW_ENDDEF ';' comp_function_definition_list KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                                      $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                                     local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER comp_function_definition_list                                                                                                                                                                                         comp_function_definition_list KW_ENDCOMP ';'
                                                                        ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                             ↳ 171: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' comp_command_list                                                                                  KW_ENDDEF ';'
                                                                                                                                                                             ↳ 153: comp_command
                                                                                                                                                                                    ↳ 155: comp_variable                                assignment_operator comp_expression ';'
                                                                                                                                                                                           ↳ 110: general_variable
                                                                                                                                                                                                  ↳ 81: • IDENTIFIER '.' '#' IDENTIFIER
      Second example: comp_definition_list KW_COMP IDENTIFIER ':' comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' • IDENTIFIER assignment_operator comp_expression ';' KW_ENDDEF ';' KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                 $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER ':' comp_function_definition_list                                                                                                                                                                                              KW_ENDCOMP ';'
                                                                            ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                                 ↳ 169: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl_list comp_command_list                                                             KW_ENDDEF ';'
                                                                                                                                                                                 ↳ 54: ε •                 ↳ 153: comp_command
                                                                                                                                                                                                                  ↳ 155: comp_variable           assignment_operator comp_expression ';'
                                                                                                                                                                                                                         ↳ 110: general_variable
                                                                                                                                                                                                                                ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       54 local_var_const_decl_list: ε •
       82 general_variable: • IDENTIFIER '[' expression ']'
      First example: comp_definition_list KW_COMP IDENTIFIER comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' • IDENTIFIER '[' expression ']' assignment_operator comp_expression ';' KW_ENDDEF ';' comp_function_definition_list KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                                      $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                                     local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER comp_function_definition_list                                                                                                                                                                                         comp_function_definition_list KW_ENDCOMP ';'
                                                                        ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                             ↳ 171: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' comp_command_list                                                                                  KW_ENDDEF ';'
                                                                                                                                                                             ↳ 153: comp_command
                                                                                                                                                                                    ↳ 155: comp_variable                                assignment_operator comp_expression ';'
                                                                                                                                                                                           ↳ 110: general_variable
                                                                                                                                                                                                  ↳ 82: • IDENTIFIER '[' expression ']'
      Second example: comp_definition_list KW_COMP IDENTIFIER ':' comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' • IDENTIFIER assignment_operator comp_expression ';' KW_ENDDEF ';' KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                 $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER ':' comp_function_definition_list                                                                                                                                                                                              KW_ENDCOMP ';'
                                                                            ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                                 ↳ 169: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl_list comp_command_list                                                             KW_ENDDEF ';'
                                                                                                                                                                                 ↳ 54: ε •                 ↳ 153: comp_command
                                                                                                                                                                                                                  ↳ 155: comp_variable           assignment_operator comp_expression ';'
                                                                                                                                                                                                                         ↳ 110: general_variable
                                                                                                                                                                                                                                ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       54 local_var_const_decl_list: ε •
       83 general_variable: • IDENTIFIER '.' '#' IDENTIFIER '[' expression ']'
      First example: comp_definition_list KW_COMP IDENTIFIER comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' • IDENTIFIER '.' '#' IDENTIFIER '[' expression ']' assignment_operator comp_expression ';' KW_ENDDEF ';' comp_function_definition_list KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                                                         $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                                                        local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER comp_function_definition_list                                                                                                                                                                                                            comp_function_definition_list KW_ENDCOMP ';'
                                                                        ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                             ↳ 171: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' comp_command_list                                                                                                     KW_ENDDEF ';'
                                                                                                                                                                             ↳ 153: comp_command
                                                                                                                                                                                    ↳ 155: comp_variable                                                   assignment_operator comp_expression ';'
                                                                                                                                                                                           ↳ 110: general_variable
                                                                                                                                                                                                  ↳ 83: • IDENTIFIER '.' '#' IDENTIFIER '[' expression ']'
      Second example: comp_definition_list KW_COMP IDENTIFIER ':' comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' • IDENTIFIER assignment_operator comp_expression ';' KW_ENDDEF ';' KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                 $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER ':' comp_function_definition_list                                                                                                                                                                                              KW_ENDCOMP ';'
                                                                            ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                                 ↳ 169: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl_list comp_command_list                                                             KW_ENDDEF ';'
                                                                                                                                                                                 ↳ 54: ε •                 ↳ 153: comp_command
                                                                                                                                                                                                                  ↳ 155: comp_variable           assignment_operator comp_expression ';'
                                                                                                                                                                                                                         ↳ 110: general_variable
                                                                                                                                                                                                                                ↳ 80: IDENTIFIER

    shift/reduce conflict on token '#':
       54 local_var_const_decl_list: ε •
      106 comp_variable: • '#' IDENTIFIER
      First example: comp_definition_list KW_COMP IDENTIFIER comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' • '#' IDENTIFIER assignment_operator comp_expression ';' KW_ENDDEF ';' comp_function_definition_list KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                 $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER comp_function_definition_list                                                                                                                                                                    comp_function_definition_list KW_ENDCOMP ';'
                                                                        ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                             ↳ 171: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' comp_command_list                                                             KW_ENDDEF ';'
                                                                                                                                                                             ↳ 153: comp_command
                                                                                                                                                                                    ↳ 155: comp_variable           assignment_operator comp_expression ';'
                                                                                                                                                                                           ↳ 106: • '#' IDENTIFIER
      Second example: comp_definition_list KW_COMP IDENTIFIER ':' comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' • '#' IDENTIFIER assignment_operator comp_expression ';' KW_ENDDEF ';' KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                               $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                              local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER ':' comp_function_definition_list                                                                                                                                                                                            KW_ENDCOMP ';'
                                                                            ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                                 ↳ 169: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl_list comp_command_list                                                           KW_ENDDEF ';'
                                                                                                                                                                                 ↳ 54: ε •                 ↳ 153: comp_command
                                                                                                                                                                                                                  ↳ 155: comp_variable         assignment_operator comp_expression ';'
                                                                                                                                                                                                                         ↳ 106: '#' IDENTIFIER

    shift/reduce conflict on token '#':
       54 local_var_const_decl_list: ε •
      107 comp_variable: • '#' IDENTIFIER '[' comp_expression ']'
      First example: comp_definition_list KW_COMP IDENTIFIER comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' • '#' IDENTIFIER '[' comp_expression ']' assignment_operator comp_expression ';' KW_ENDDEF ';' comp_function_definition_list KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                                         $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                                        local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER comp_function_definition_list                                                                                                                                                                                            comp_function_definition_list KW_ENDCOMP ';'
                                                                        ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                             ↳ 171: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' comp_command_list                                                                                     KW_ENDDEF ';'
                                                                                                                                                                             ↳ 153: comp_command
                                                                                                                                                                                    ↳ 155: comp_variable                                   assignment_operator comp_expression ';'
                                                                                                                                                                                           ↳ 107: • '#' IDENTIFIER '[' comp_expression ']'
      Second example: comp_definition_list KW_COMP IDENTIFIER ':' comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' • '#' IDENTIFIER assignment_operator comp_expression ';' KW_ENDDEF ';' KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                               $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                              local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER ':' comp_function_definition_list                                                                                                                                                                                            KW_ENDCOMP ';'
                                                                            ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                                 ↳ 169: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl_list comp_command_list                                                           KW_ENDDEF ';'
                                                                                                                                                                                 ↳ 54: ε •                 ↳ 153: comp_command
                                                                                                                                                                                                                  ↳ 155: comp_variable         assignment_operator comp_expression ';'
                                                                                                                                                                                                                         ↳ 106: '#' IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       54 local_var_const_decl_list: ε •
      111 comp_function_call: • IDENTIFIER '(' ')'
      First example: comp_definition_list KW_COMP IDENTIFIER comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' • IDENTIFIER '(' ')' ';' KW_ENDDEF ';' comp_function_definition_list KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                        $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                       local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER comp_function_definition_list                                                                                                                                           comp_function_definition_list KW_ENDCOMP ';'
                                                                        ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                             ↳ 171: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' comp_command_list                                    KW_ENDDEF ';'
                                                                                                                                                                             ↳ 153: comp_command
                                                                                                                                                                                    ↳ 166: general_comp_function_call         ';'
                                                                                                                                                                                           ↳ 113: comp_function_call
                                                                                                                                                                                                  ↳ 111: • IDENTIFIER '(' ')'
      Second example: comp_definition_list KW_COMP IDENTIFIER ':' comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' • IDENTIFIER assignment_operator comp_expression ';' KW_ENDDEF ';' KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                 $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER ':' comp_function_definition_list                                                                                                                                                                                              KW_ENDCOMP ';'
                                                                            ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                                 ↳ 169: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl_list comp_command_list                                                             KW_ENDDEF ';'
                                                                                                                                                                                 ↳ 54: ε •                 ↳ 153: comp_command
                                                                                                                                                                                                                  ↳ 155: comp_variable           assignment_operator comp_expression ';'
                                                                                                                                                                                                                         ↳ 110: general_variable
                                                                                                                                                                                                                                ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       54 local_var_const_decl_list: ε •
      112 comp_function_call: • IDENTIFIER '(' comp_expr_comma_list ')'
      First example: comp_definition_list KW_COMP IDENTIFIER comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' • IDENTIFIER '(' comp_expr_comma_list ')' ';' KW_ENDDEF ';' comp_function_definition_list KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                             $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                            local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER comp_function_definition_list                                                                                                                                                                comp_function_definition_list KW_ENDCOMP ';'
                                                                        ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                             ↳ 171: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' comp_command_list                                                         KW_ENDDEF ';'
                                                                                                                                                                             ↳ 153: comp_command
                                                                                                                                                                                    ↳ 166: general_comp_function_call                              ';'
                                                                                                                                                                                           ↳ 113: comp_function_call
                                                                                                                                                                                                  ↳ 112: • IDENTIFIER '(' comp_expr_comma_list ')'
      Second example: comp_definition_list KW_COMP IDENTIFIER ':' comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' • IDENTIFIER assignment_operator comp_expression ';' KW_ENDDEF ';' KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                 $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER ':' comp_function_definition_list                                                                                                                                                                                              KW_ENDCOMP ';'
                                                                            ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                                 ↳ 169: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl_list comp_command_list                                                             KW_ENDDEF ';'
                                                                                                                                                                                 ↳ 54: ε •                 ↳ 153: comp_command
                                                                                                                                                                                                                  ↳ 155: comp_variable           assignment_operator comp_expression ';'
                                                                                                                                                                                                                         ↳ 110: general_variable
                                                                                                                                                                                                                                ↳ 80: IDENTIFIER

    shift/reduce conflict on token '#':
       54 local_var_const_decl_list: ε •
      114 general_comp_function_call: • '#' IDENTIFIER '.' comp_function_call
      First example: comp_definition_list KW_COMP IDENTIFIER comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' • '#' IDENTIFIER '.' comp_function_call ';' KW_ENDDEF ';' comp_function_definition_list KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                    $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                   local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER comp_function_definition_list                                                                                                                                                       comp_function_definition_list KW_ENDCOMP ';'
                                                                        ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                             ↳ 171: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' comp_command_list                                                KW_ENDDEF ';'
                                                                                                                                                                             ↳ 153: comp_command
                                                                                                                                                                                    ↳ 166: general_comp_function_call                     ';'
                                                                                                                                                                                           ↳ 114: • '#' IDENTIFIER '.' comp_function_call
      Second example: comp_definition_list KW_COMP IDENTIFIER ':' comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' • '#' IDENTIFIER assignment_operator comp_expression ';' KW_ENDDEF ';' KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                               $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                              local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER ':' comp_function_definition_list                                                                                                                                                                                            KW_ENDCOMP ';'
                                                                            ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                                 ↳ 169: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl_list comp_command_list                                                           KW_ENDDEF ';'
                                                                                                                                                                                 ↳ 54: ε •                 ↳ 153: comp_command
                                                                                                                                                                                                                  ↳ 155: comp_variable         assignment_operator comp_expression ';'
                                                                                                                                                                                                                         ↳ 106: '#' IDENTIFIER

    shift/reduce conflict on token '#':
       54 local_var_const_decl_list: ε •
      115 general_comp_function_call: • '#' IDENTIFIER '[' comp_expression ']' '.' comp_function_call
      First example: comp_definition_list KW_COMP IDENTIFIER comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' • '#' IDENTIFIER '[' comp_expression ']' '.' comp_function_call ';' KW_ENDDEF ';' comp_function_definition_list KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                            $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                           local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER comp_function_definition_list                                                                                                                                                                               comp_function_definition_list KW_ENDCOMP ';'
                                                                        ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                             ↳ 171: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' comp_command_list                                                                        KW_ENDDEF ';'
                                                                                                                                                                             ↳ 153: comp_command
                                                                                                                                                                                    ↳ 166: general_comp_function_call                                             ';'
                                                                                                                                                                                           ↳ 115: • '#' IDENTIFIER '[' comp_expression ']' '.' comp_function_call
      Second example: comp_definition_list KW_COMP IDENTIFIER ':' comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' • '#' IDENTIFIER assignment_operator comp_expression ';' KW_ENDDEF ';' KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                               $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                              local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER ':' comp_function_definition_list                                                                                                                                                                                            KW_ENDCOMP ';'
                                                                            ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                                 ↳ 169: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl_list comp_command_list                                                           KW_ENDDEF ';'
                                                                                                                                                                                 ↳ 54: ε •                 ↳ 153: comp_command
                                                                                                                                                                                                                  ↳ 155: comp_variable         assignment_operator comp_expression ';'
                                                                                                                                                                                                                         ↳ 106: '#' IDENTIFIER

    shift/reduce conflict on token KW_IF:
       54 local_var_const_decl_list: ε •
      156 comp_command: • KW_IF '(' comp_expression ')' ':' comp_command_list KW_ENDIF ';'
      First example: comp_definition_list KW_COMP IDENTIFIER comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' • KW_IF '(' comp_expression ')' ':' comp_command_list KW_ENDIF ';' KW_ENDDEF ';' comp_function_definition_list KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                    $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                   local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER comp_function_definition_list                                                                                                                                                                       comp_function_definition_list KW_ENDCOMP ';'
                                                                        ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                             ↳ 171: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' comp_command_list                                                                KW_ENDDEF ';'
                                                                                                                                                                             ↳ 153: comp_command
                                                                                                                                                                                    ↳ 156: • KW_IF '(' comp_expression ')' ':' comp_command_list KW_ENDIF ';'
      Second example: comp_definition_list KW_COMP IDENTIFIER ':' comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' • KW_IF '(' comp_expression ')' ':' comp_command_list KW_ENDIF ';' KW_ENDDEF ';' KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                  $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                 local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER ':' comp_function_definition_list                                                                                                                                                                                               KW_ENDCOMP ';'
                                                                            ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                                 ↳ 169: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl_list comp_command_list                                                              KW_ENDDEF ';'
                                                                                                                                                                                 ↳ 54: ε •                 ↳ 153: comp_command
                                                                                                                                                                                                                  ↳ 156: KW_IF '(' comp_expression ')' ':' comp_command_list KW_ENDIF ';'

    shift/reduce conflict on token KW_IF:
       54 local_var_const_decl_list: ε •
      157 comp_command: • KW_IF '(' comp_expression ')' ':' comp_command_list KW_ELSE ':' comp_command_list KW_ENDIF ';'
      First example: comp_definition_list KW_COMP IDENTIFIER comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' • KW_IF '(' comp_expression ')' ':' comp_command_list KW_ELSE ':' comp_command_list KW_ENDIF ';' KW_ENDDEF ';' comp_function_definition_list KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                                                  $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                                                 local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER comp_function_definition_list                                                                                                                                                                                                     comp_function_definition_list KW_ENDCOMP ';'
                                                                        ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                             ↳ 171: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' comp_command_list                                                                                              KW_ENDDEF ';'
                                                                                                                                                                             ↳ 153: comp_command
                                                                                                                                                                                    ↳ 157: • KW_IF '(' comp_expression ')' ':' comp_command_list KW_ELSE ':' comp_command_list KW_ENDIF ';'
      Second example: comp_definition_list KW_COMP IDENTIFIER ':' comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' • KW_IF '(' comp_expression ')' ':' comp_command_list KW_ENDIF ';' KW_ENDDEF ';' KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                  $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                 local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER ':' comp_function_definition_list                                                                                                                                                                                               KW_ENDCOMP ';'
                                                                            ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                                 ↳ 169: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl_list comp_command_list                                                              KW_ENDDEF ';'
                                                                                                                                                                                 ↳ 54: ε •                 ↳ 153: comp_command
                                                                                                                                                                                                                  ↳ 156: KW_IF '(' comp_expression ')' ':' comp_command_list KW_ENDIF ';'

    shift/reduce conflict on token KW_FOR:
       54 local_var_const_decl_list: ε •
      158 comp_command: • KW_FOR comp_variable KW_IN '[' comp_expression ':' comp_expression ']' ':' comp_command_list KW_ENDFOR ';'
      First example: comp_definition_list KW_COMP IDENTIFIER comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' • KW_FOR comp_variable KW_IN '[' comp_expression ':' comp_expression ']' ':' comp_command_list KW_ENDFOR ';' KW_ENDDEF ';' comp_function_definition_list KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                                                              $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                                                             local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER comp_function_definition_list                                                                                                                                                                                                                 comp_function_definition_list KW_ENDCOMP ';'
                                                                        ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                             ↳ 171: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' comp_command_list                                                                                                          KW_ENDDEF ';'
                                                                                                                                                                             ↳ 153: comp_command
                                                                                                                                                                                    ↳ 158: • KW_FOR comp_variable KW_IN '[' comp_expression ':' comp_expression ']' ':' comp_command_list KW_ENDFOR ';'
      Second example: comp_definition_list KW_COMP IDENTIFIER ':' comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' • KW_FOR comp_variable KW_IN '[' comp_expression ':' comp_expression ']' ':' comp_command_list KW_ENDFOR ';' KW_ENDDEF ';' KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                                                            $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                                                           local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER ':' comp_function_definition_list                                                                                                                                                                                                                                         KW_ENDCOMP ';'
                                                                            ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                                 ↳ 169: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl_list comp_command_list                                                                                                        KW_ENDDEF ';'
                                                                                                                                                                                 ↳ 54: ε •                 ↳ 153: comp_command
                                                                                                                                                                                                                  ↳ 158: KW_FOR comp_variable KW_IN '[' comp_expression ':' comp_expression ']' ':' comp_command_list KW_ENDFOR ';'

    shift/reduce conflict on token KW_FOR:
       54 local_var_const_decl_list: ε •
      159 comp_command: • KW_FOR comp_variable KW_IN '[' comp_expression ':' comp_expression ':' comp_expression ']' ':' comp_command_list KW_ENDFOR ';'
      First example: comp_definition_list KW_COMP IDENTIFIER comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' • KW_FOR comp_variable KW_IN '[' comp_expression ':' comp_expression ':' comp_expression ']' ':' comp_command_list KW_ENDFOR ';' KW_ENDDEF ';' comp_function_definition_list KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                                                                                  $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                                                                                 local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER comp_function_definition_list                                                                                                                                                                                                                                     comp_function_definition_list KW_ENDCOMP ';'
                                                                        ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                             ↳ 171: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' comp_command_list                                                                                                                              KW_ENDDEF ';'
                                                                                                                                                                             ↳ 153: comp_command
                                                                                                                                                                                    ↳ 159: • KW_FOR comp_variable KW_IN '[' comp_expression ':' comp_expression ':' comp_expression ']' ':' comp_command_list KW_ENDFOR ';'
      Second example: comp_definition_list KW_COMP IDENTIFIER ':' comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' • KW_FOR comp_variable KW_IN '[' comp_expression ':' comp_expression ']' ':' comp_command_list KW_ENDFOR ';' KW_ENDDEF ';' KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                                                            $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                                                           local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER ':' comp_function_definition_list                                                                                                                                                                                                                                         KW_ENDCOMP ';'
                                                                            ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                                 ↳ 169: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl_list comp_command_list                                                                                                        KW_ENDDEF ';'
                                                                                                                                                                                 ↳ 54: ε •                 ↳ 153: comp_command
                                                                                                                                                                                                                  ↳ 158: KW_FOR comp_variable KW_IN '[' comp_expression ':' comp_expression ']' ':' comp_command_list KW_ENDFOR ';'

    shift/reduce conflict on token KW_WHILE:
       54 local_var_const_decl_list: ε •
      161 comp_command: • KW_WHILE '(' comp_expression ')' ':' comp_command_list KW_ENDWHILE ';'
      First example: comp_definition_list KW_COMP IDENTIFIER comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' • KW_WHILE '(' comp_expression ')' ':' comp_command_list KW_ENDWHILE ';' KW_ENDDEF ';' comp_function_definition_list KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                          $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                         local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER comp_function_definition_list                                                                                                                                                                             comp_function_definition_list KW_ENDCOMP ';'
                                                                        ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                             ↳ 171: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' comp_command_list                                                                      KW_ENDDEF ';'
                                                                                                                                                                             ↳ 153: comp_command
                                                                                                                                                                                    ↳ 161: • KW_WHILE '(' comp_expression ')' ':' comp_command_list KW_ENDWHILE ';'
      Second example: comp_definition_list KW_COMP IDENTIFIER ':' comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' • KW_WHILE '(' comp_expression ')' ':' comp_command_list KW_ENDWHILE ';' KW_ENDDEF ';' KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                        $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                       local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER ':' comp_function_definition_list                                                                                                                                                                                                     KW_ENDCOMP ';'
                                                                            ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                                 ↳ 169: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl_list comp_command_list                                                                    KW_ENDDEF ';'
                                                                                                                                                                                 ↳ 54: ε •                 ↳ 153: comp_command
                                                                                                                                                                                                                  ↳ 161: KW_WHILE '(' comp_expression ')' ':' comp_command_list KW_ENDWHILE ';'

    shift/reduce conflict on token KW_BREAK:
       54 local_var_const_decl_list: ε •
      162 comp_command: • KW_BREAK ';'
      First example: comp_definition_list KW_COMP IDENTIFIER comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' • KW_BREAK ';' KW_ENDDEF ';' comp_function_definition_list KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                               local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER comp_function_definition_list                                                                                                                   comp_function_definition_list KW_ENDCOMP ';'
                                                                        ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                             ↳ 171: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' comp_command_list            KW_ENDDEF ';'
                                                                                                                                                                             ↳ 153: comp_command
                                                                                                                                                                                    ↳ 162: • KW_BREAK ';'
      Second example: comp_definition_list KW_COMP IDENTIFIER ':' comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' • KW_BREAK ';' KW_ENDDEF ';' KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                              $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                             local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER ':' comp_function_definition_list                                                                                                                                           KW_ENDCOMP ';'
                                                                            ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                                 ↳ 169: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl_list comp_command_list          KW_ENDDEF ';'
                                                                                                                                                                                 ↳ 54: ε •                 ↳ 153: comp_command
                                                                                                                                                                                                                  ↳ 162: KW_BREAK ';'

    shift/reduce conflict on token KW_CONTINUE:
       54 local_var_const_decl_list: ε •
      163 comp_command: • KW_CONTINUE ';'
      First example: comp_definition_list KW_COMP IDENTIFIER comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' • KW_CONTINUE ';' KW_ENDDEF ';' comp_function_definition_list KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                   $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                  local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER comp_function_definition_list                                                                                                                      comp_function_definition_list KW_ENDCOMP ';'
                                                                        ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                             ↳ 171: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' comp_command_list               KW_ENDDEF ';'
                                                                                                                                                                             ↳ 153: comp_command
                                                                                                                                                                                    ↳ 163: • KW_CONTINUE ';'
      Second example: comp_definition_list KW_COMP IDENTIFIER ':' comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' • KW_CONTINUE ';' KW_ENDDEF ';' KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                 $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER ':' comp_function_definition_list                                                                                                                                              KW_ENDCOMP ';'
                                                                            ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                                 ↳ 169: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl_list comp_command_list             KW_ENDDEF ';'
                                                                                                                                                                                 ↳ 54: ε •                 ↳ 153: comp_command
                                                                                                                                                                                                                  ↳ 163: KW_CONTINUE ';'

    shift/reduce conflict on token KW_RETURN:
       54 local_var_const_decl_list: ε •
      164 comp_command: • KW_RETURN ';'
      First example: comp_definition_list KW_COMP IDENTIFIER comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' • KW_RETURN ';' KW_ENDDEF ';' comp_function_definition_list KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                 $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER comp_function_definition_list                                                                                                                    comp_function_definition_list KW_ENDCOMP ';'
                                                                        ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                             ↳ 171: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' comp_command_list             KW_ENDDEF ';'
                                                                                                                                                                             ↳ 153: comp_command
                                                                                                                                                                                    ↳ 164: • KW_RETURN ';'
      Second example: comp_definition_list KW_COMP IDENTIFIER ':' comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' • KW_RETURN ';' KW_ENDDEF ';' KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                               $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                              local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER ':' comp_function_definition_list                                                                                                                                            KW_ENDCOMP ';'
                                                                            ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                                 ↳ 169: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl_list comp_command_list           KW_ENDDEF ';'
                                                                                                                                                                                 ↳ 54: ε •                 ↳ 153: comp_command
                                                                                                                                                                                                                  ↳ 164: KW_RETURN ';'

    shift/reduce conflict on token KW_RETURN:
       54 local_var_const_decl_list: ε •
      165 comp_command: • KW_RETURN comp_expression ';'
      First example: comp_definition_list KW_COMP IDENTIFIER comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' • KW_RETURN comp_expression ';' KW_ENDDEF ';' comp_function_definition_list KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                 $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER comp_function_definition_list                                                                                                                                    comp_function_definition_list KW_ENDCOMP ';'
                                                                        ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                             ↳ 171: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' comp_command_list                             KW_ENDDEF ';'
                                                                                                                                                                             ↳ 153: comp_command
                                                                                                                                                                                    ↳ 165: • KW_RETURN comp_expression ';'
      Second example: comp_definition_list KW_COMP IDENTIFIER ':' comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' • KW_RETURN ';' KW_ENDDEF ';' KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                               $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                              local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER ':' comp_function_definition_list                                                                                                                                            KW_ENDCOMP ';'
                                                                            ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                                 ↳ 169: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl_list comp_command_list           KW_ENDDEF ';'
                                                                                                                                                                                 ↳ 54: ε •                 ↳ 153: comp_command
                                                                                                                                                                                                                  ↳ 164: KW_RETURN ';'



State 292

  182 comp_identifier_list: comp_identifier_list ',' '#' IDENTIFIER '[' comp_expression ']' •

    $default  reduce using rule 182 (comp_identifier_list)


State 293

    2 primary_expression: • POSINT
    3                   | • SCALAR
    4                   | • IDENTIFIER
    5                   | • STRING
    6                   | • KW_TRUE
    7                   | • KW_FALSE
    8                   | • '(' logic_expression ')'
    9 math_expression: • primary_expression
   10                | • '+' math_expression
   11                | • '-' math_expression
   12                | • math_expression '+' math_expression
   13                | • math_expression '-' math_expression
   14                | • math_expression '*' math_expression
   15                | • math_expression '/' math_expression
   16                | • math_expression '%' math_expression
   17                | • math_expression OP_PAW math_expression
   18                | • IDENTIFIER '[' expression ']'
   19                | • IDENTIFIER '[' expression ']' '.' IDENTIFIER
   20                | • IDENTIFIER '[' expression ']' '.' IDENTIFIER '[' expression ']'
   20                | IDENTIFIER '[' expression ']' '.' IDENTIFIER '[' • expression ']'
   21                | • general_function_call
   22                | • IDENTIFIER '.' IDENTIFIER '[' expression ']'
   23                | • IDENTIFIER '.' IDENTIFIER
   24 relational_expression: • math_expression
   25                      | • relational_expression OP_EQUALS relational_expression
   26                      | • relational_expression OP_NE relational_expression
   27                      | • relational_expression '>' relational_expression
   28                      | • relational_expression '<' relational_expression
   29                      | • relational_expression OP_LE relational_expression
   30                      | • relational_expression OP_GE relational_expression
   31 logic_expression: • relational_expression
   32                 | • OP_NOT logic_expression
   33                 | • logic_expression OP_AND logic_expression
   34                 | • logic_expression OP_OR logic_expression
   35 expression: • logic_expression
   66 general_function_call: • function_call
   67                      | • IDENTIFIER '.' function_call
   68                      | • IDENTIFIER '[' expression ']' '.' function_call
   69 function_call: • IDENTIFIER '(' ')'
   70              | • IDENTIFIER '(' expr_comma_list ')'

    IDENTIFIER  shift, and go to state 53
    POSINT      shift, and go to state 54
    SCALAR      shift, and go to state 55
    STRING      shift, and go to state 56
    OP_NOT      shift, and go to state 57
    KW_TRUE     shift, and go to state 58
    KW_FALSE    shift, and go to state 59
    '-'         shift, and go to state 60
    '+'         shift, and go to state 61
    '('         shift, and go to state 62

    primary_expression     go to state 64
    math_expression        go to state 65
    relational_expression  go to state 66
    logic_expression       go to state 67
    expression             go to state 334
    general_function_call  go to state 69
    function_call          go to state 70


State 294

   49 constant_decl: KW_CONST IDENTIFIER '[' expression ']' '=' expression ':' basic_data_type ';' •

    $default  reduce using rule 49 (constant_decl)


State 295

  103 function_definition: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type • ':' local_var_const_decl_list function_command_list KW_RETURN expression ';' KW_ENDDEF ';'
  104                    | KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type • ':' local_var_const_decl function_command_list KW_RETURN expression ';' KW_ENDDEF ';'
  105                    | KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type • ':' function_command_list KW_RETURN expression ';' KW_ENDDEF ';'

    ':'  shift, and go to state 335


State 296

   66 general_function_call: • function_call
   67                      | • IDENTIFIER '.' function_call
   68                      | • IDENTIFIER '[' expression ']' '.' function_call
   69 function_call: • IDENTIFIER '(' ')'
   70              | • IDENTIFIER '(' expr_comma_list ')'
   80 general_variable: • IDENTIFIER
   81                 | • IDENTIFIER '.' '#' IDENTIFIER
   82                 | • IDENTIFIER '[' expression ']'
   83                 | • IDENTIFIER '.' '#' IDENTIFIER '[' expression ']'
   85 function_command_list: function_command_list • function_command
   86 function_command: • general_variable assignment_operator expression ';'
   87                 | • KW_IF '(' expression ')' ':' function_command_list KW_ENDIF ';'
   88                 | • KW_IF '(' expression ')' ':' function_command_list KW_ELSE ':' function_command_list KW_ENDIF ';'
   89                 | • KW_FOR general_variable KW_IN '[' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';'
   90                 | • KW_FOR general_variable KW_IN '[' expression ':' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';'
   91                 | • general_variable OP_ASSIGN '[' expression KW_FOR general_variable ':' POSINT ']' ':' basic_data_type ';'
   92                 | • KW_WHILE '(' expression ')' ':' function_command_list KW_ENDWHILE ';'
   93                 | • KW_BREAK ';'
   94                 | • KW_CONTINUE ';'
   95                 | • KW_RETURN ';'
   96                 | • KW_RETURN expression ';'
   97                 | • general_function_call ';'
  100 function_definition: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl_list function_command_list • KW_ENDDEF ';'

    IDENTIFIER   shift, and go to state 270
    KW_IF        shift, and go to state 216
    KW_CONTINUE  shift, and go to state 217
    KW_FOR       shift, and go to state 218
    KW_WHILE     shift, and go to state 219
    KW_BREAK     shift, and go to state 220
    KW_ENDDEF    shift, and go to state 336
    KW_RETURN    shift, and go to state 221

    general_function_call  go to state 224
    function_call          go to state 70
    general_variable       go to state 225
    function_command       go to state 283


State 297

   66 general_function_call: • function_call
   67                      | • IDENTIFIER '.' function_call
   68                      | • IDENTIFIER '[' expression ']' '.' function_call
   69 function_call: • IDENTIFIER '(' ')'
   70              | • IDENTIFIER '(' expr_comma_list ')'
   80 general_variable: • IDENTIFIER
   81                 | • IDENTIFIER '.' '#' IDENTIFIER
   82                 | • IDENTIFIER '[' expression ']'
   83                 | • IDENTIFIER '.' '#' IDENTIFIER '[' expression ']'
   85 function_command_list: function_command_list • function_command
   86 function_command: • general_variable assignment_operator expression ';'
   87                 | • KW_IF '(' expression ')' ':' function_command_list KW_ENDIF ';'
   88                 | • KW_IF '(' expression ')' ':' function_command_list KW_ELSE ':' function_command_list KW_ENDIF ';'
   89                 | • KW_FOR general_variable KW_IN '[' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';'
   90                 | • KW_FOR general_variable KW_IN '[' expression ':' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';'
   91                 | • general_variable OP_ASSIGN '[' expression KW_FOR general_variable ':' POSINT ']' ':' basic_data_type ';'
   92                 | • KW_WHILE '(' expression ')' ':' function_command_list KW_ENDWHILE ';'
   93                 | • KW_BREAK ';'
   94                 | • KW_CONTINUE ';'
   95                 | • KW_RETURN ';'
   96                 | • KW_RETURN expression ';'
   97                 | • general_function_call ';'
  101 function_definition: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl function_command_list • KW_ENDDEF ';'

    IDENTIFIER   shift, and go to state 270
    KW_IF        shift, and go to state 216
    KW_CONTINUE  shift, and go to state 217
    KW_FOR       shift, and go to state 218
    KW_WHILE     shift, and go to state 219
    KW_BREAK     shift, and go to state 220
    KW_ENDDEF    shift, and go to state 337
    KW_RETURN    shift, and go to state 221

    general_function_call  go to state 224
    function_call          go to state 70
    general_variable       go to state 225
    function_command       go to state 283


State 298

  102 function_definition: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' function_command_list KW_ENDDEF • ';'

    ';'  shift, and go to state 338


State 299

    2 primary_expression: POSINT •  [OP_AND, OP_OR, OP_PAW, OP_EQUALS, OP_NE, OP_LE, OP_GE, '>', '<', '-', '+', '*', '/', '%', ']']
   43 identifier_single: IDENTIFIER '[' POSINT • ']'

    ']'  shift, and go to state 46

    ']'       [reduce using rule 2 (primary_expression)]
    $default  reduce using rule 2 (primary_expression)

    shift/reduce conflict on token ']':
        2 primary_expression: POSINT •
       43 identifier_single: IDENTIFIER '[' POSINT • ']'
      First example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' IDENTIFIER '[' POSINT • ']' ',' identifier_single ':' basic_data_type ';' local_var_const_decl_list function_command_list KW_ENDDEF ';'
      Shift derivation
        input
        ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                     ↳ 189: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl_list                                                                                                   function_command_list KW_ENDDEF ';'
                                                                                                                       ↳ 52: variable_decl                                                                               local_var_const_decl_list
                                                                                                                             ↳ 59: identifier_list                                               ':' basic_data_type ';'
                                                                                                                                   ↳ 45: identifier_single                 ',' identifier_single
                                                                                                                                         ↳ 43: IDENTIFIER '[' POSINT • ']'
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF KW_MAIN '(' ')' ':' IDENTIFIER '[' POSINT • ']' assignment_operator expression ';' KW_ENDDEF ';' $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                          $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list main_unit
                                                                                          ↳ 191: KW_DEF KW_MAIN '(' ')' ':' function_command_list                                                                                             KW_ENDDEF ';'
                                                                                                                            ↳ 84: function_command
                                                                                                                                  ↳ 86: general_variable                                                   assignment_operator expression ';'
                                                                                                                                        ↳ 82: IDENTIFIER '[' expression                                ']'
                                                                                                                                                             ↳ 35: logic_expression
                                                                                                                                                                   ↳ 31: relational_expression
                                                                                                                                                                         ↳ 24: math_expression
                                                                                                                                                                               ↳ 9: primary_expression
                                                                                                                                                                                    ↳ 2: POSINT •



State 300

   68 general_function_call: IDENTIFIER '[' expression • ']' '.' function_call
   82 general_variable: IDENTIFIER '[' expression • ']'

    ']'  shift, and go to state 339


State 301

   69 function_call: IDENTIFIER • '(' ')'
   70              | IDENTIFIER • '(' expr_comma_list ')'

    '('  shift, and go to state 86


State 302

   81 general_variable: IDENTIFIER '.' '#' • IDENTIFIER
   83                 | IDENTIFIER '.' '#' • IDENTIFIER '[' expression ']'

    IDENTIFIER  shift, and go to state 340


State 303

   87 function_command: KW_IF '(' expression • ')' ':' function_command_list KW_ENDIF ';'
   88                 | KW_IF '(' expression • ')' ':' function_command_list KW_ELSE ':' function_command_list KW_ENDIF ';'

    ')'  shift, and go to state 341


State 304

    2 primary_expression: • POSINT
    3                   | • SCALAR
    4                   | • IDENTIFIER
    5                   | • STRING
    6                   | • KW_TRUE
    7                   | • KW_FALSE
    8                   | • '(' logic_expression ')'
    9 math_expression: • primary_expression
   10                | • '+' math_expression
   11                | • '-' math_expression
   12                | • math_expression '+' math_expression
   13                | • math_expression '-' math_expression
   14                | • math_expression '*' math_expression
   15                | • math_expression '/' math_expression
   16                | • math_expression '%' math_expression
   17                | • math_expression OP_PAW math_expression
   18                | • IDENTIFIER '[' expression ']'
   19                | • IDENTIFIER '[' expression ']' '.' IDENTIFIER
   20                | • IDENTIFIER '[' expression ']' '.' IDENTIFIER '[' expression ']'
   21                | • general_function_call
   22                | • IDENTIFIER '.' IDENTIFIER '[' expression ']'
   23                | • IDENTIFIER '.' IDENTIFIER
   24 relational_expression: • math_expression
   25                      | • relational_expression OP_EQUALS relational_expression
   26                      | • relational_expression OP_NE relational_expression
   27                      | • relational_expression '>' relational_expression
   28                      | • relational_expression '<' relational_expression
   29                      | • relational_expression OP_LE relational_expression
   30                      | • relational_expression OP_GE relational_expression
   31 logic_expression: • relational_expression
   32                 | • OP_NOT logic_expression
   33                 | • logic_expression OP_AND logic_expression
   34                 | • logic_expression OP_OR logic_expression
   35 expression: • logic_expression
   66 general_function_call: • function_call
   67                      | • IDENTIFIER '.' function_call
   68                      | • IDENTIFIER '[' expression ']' '.' function_call
   69 function_call: • IDENTIFIER '(' ')'
   70              | • IDENTIFIER '(' expr_comma_list ')'
   82 general_variable: IDENTIFIER '[' • expression ']'

    IDENTIFIER  shift, and go to state 53
    POSINT      shift, and go to state 54
    SCALAR      shift, and go to state 55
    STRING      shift, and go to state 56
    OP_NOT      shift, and go to state 57
    KW_TRUE     shift, and go to state 58
    KW_FALSE    shift, and go to state 59
    '-'         shift, and go to state 60
    '+'         shift, and go to state 61
    '('         shift, and go to state 62

    primary_expression     go to state 64
    math_expression        go to state 65
    relational_expression  go to state 66
    logic_expression       go to state 67
    expression             go to state 342
    general_function_call  go to state 69
    function_call          go to state 70


State 305

   81 general_variable: IDENTIFIER '.' • '#' IDENTIFIER
   83                 | IDENTIFIER '.' • '#' IDENTIFIER '[' expression ']'

    '#'  shift, and go to state 302


State 306

   89 function_command: KW_FOR general_variable KW_IN • '[' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';'
   90                 | KW_FOR general_variable KW_IN • '[' expression ':' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';'

    '['  shift, and go to state 343


State 307

   92 function_command: KW_WHILE '(' expression • ')' ':' function_command_list KW_ENDWHILE ';'

    ')'  shift, and go to state 344


State 308

   96 function_command: KW_RETURN expression ';' •

    $default  reduce using rule 96 (function_command)


State 309

    2 primary_expression: • POSINT
    3                   | • SCALAR
    4                   | • IDENTIFIER
    5                   | • STRING
    6                   | • KW_TRUE
    7                   | • KW_FALSE
    8                   | • '(' logic_expression ')'
    9 math_expression: • primary_expression
   10                | • '+' math_expression
   11                | • '-' math_expression
   12                | • math_expression '+' math_expression
   13                | • math_expression '-' math_expression
   14                | • math_expression '*' math_expression
   15                | • math_expression '/' math_expression
   16                | • math_expression '%' math_expression
   17                | • math_expression OP_PAW math_expression
   18                | • IDENTIFIER '[' expression ']'
   19                | • IDENTIFIER '[' expression ']' '.' IDENTIFIER
   20                | • IDENTIFIER '[' expression ']' '.' IDENTIFIER '[' expression ']'
   21                | • general_function_call
   22                | • IDENTIFIER '.' IDENTIFIER '[' expression ']'
   23                | • IDENTIFIER '.' IDENTIFIER
   24 relational_expression: • math_expression
   25                      | • relational_expression OP_EQUALS relational_expression
   26                      | • relational_expression OP_NE relational_expression
   27                      | • relational_expression '>' relational_expression
   28                      | • relational_expression '<' relational_expression
   29                      | • relational_expression OP_LE relational_expression
   30                      | • relational_expression OP_GE relational_expression
   31 logic_expression: • relational_expression
   32                 | • OP_NOT logic_expression
   33                 | • logic_expression OP_AND logic_expression
   34                 | • logic_expression OP_OR logic_expression
   35 expression: • logic_expression
   66 general_function_call: • function_call
   67                      | • IDENTIFIER '.' function_call
   68                      | • IDENTIFIER '[' expression ']' '.' function_call
   68                      | IDENTIFIER '[' • expression ']' '.' function_call
   69 function_call: • IDENTIFIER '(' ')'
   70              | • IDENTIFIER '(' expr_comma_list ')'
   82 general_variable: IDENTIFIER '[' • expression ']'

    IDENTIFIER  shift, and go to state 53
    POSINT      shift, and go to state 54
    SCALAR      shift, and go to state 55
    STRING      shift, and go to state 56
    OP_NOT      shift, and go to state 57
    KW_TRUE     shift, and go to state 58
    KW_FALSE    shift, and go to state 59
    '-'         shift, and go to state 60
    '+'         shift, and go to state 61
    '('         shift, and go to state 62

    primary_expression     go to state 64
    math_expression        go to state 65
    relational_expression  go to state 66
    logic_expression       go to state 67
    expression             go to state 300
    general_function_call  go to state 69
    function_call          go to state 70


State 310

  189 main_unit: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl_list function_command_list KW_ENDDEF • ';'

    ';'  shift, and go to state 345


State 311

  190 main_unit: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl function_command_list KW_ENDDEF • ';'

    ';'  shift, and go to state 346


State 312

    2 primary_expression: • POSINT
    3                   | • SCALAR
    4                   | • IDENTIFIER
    5                   | • STRING
    6                   | • KW_TRUE
    7                   | • KW_FALSE
    8                   | • '(' logic_expression ')'
    9 math_expression: • primary_expression
   10                | • '+' math_expression
   11                | • '-' math_expression
   12                | • math_expression '+' math_expression
   13                | • math_expression '-' math_expression
   14                | • math_expression '*' math_expression
   15                | • math_expression '/' math_expression
   16                | • math_expression '%' math_expression
   17                | • math_expression OP_PAW math_expression
   18                | • IDENTIFIER '[' expression ']'
   19                | • IDENTIFIER '[' expression ']' '.' IDENTIFIER
   20                | • IDENTIFIER '[' expression ']' '.' IDENTIFIER '[' expression ']'
   21                | • general_function_call
   22                | • IDENTIFIER '.' IDENTIFIER '[' expression ']'
   23                | • IDENTIFIER '.' IDENTIFIER
   24 relational_expression: • math_expression
   25                      | • relational_expression OP_EQUALS relational_expression
   26                      | • relational_expression OP_NE relational_expression
   27                      | • relational_expression '>' relational_expression
   28                      | • relational_expression '<' relational_expression
   29                      | • relational_expression OP_LE relational_expression
   30                      | • relational_expression OP_GE relational_expression
   31 logic_expression: • relational_expression
   32                 | • OP_NOT logic_expression
   33                 | • logic_expression OP_AND logic_expression
   34                 | • logic_expression OP_OR logic_expression
   35 expression: • logic_expression
   66 general_function_call: • function_call
   67                      | • IDENTIFIER '.' function_call
   68                      | • IDENTIFIER '[' expression ']' '.' function_call
   69 function_call: • IDENTIFIER '(' ')'
   70              | • IDENTIFIER '(' expr_comma_list ')'
   91 function_command: general_variable OP_ASSIGN '[' • expression KW_FOR general_variable ':' POSINT ']' ':' basic_data_type ';'

    IDENTIFIER  shift, and go to state 53
    POSINT      shift, and go to state 54
    SCALAR      shift, and go to state 55
    STRING      shift, and go to state 56
    OP_NOT      shift, and go to state 57
    KW_TRUE     shift, and go to state 58
    KW_FALSE    shift, and go to state 59
    '-'         shift, and go to state 60
    '+'         shift, and go to state 61
    '('         shift, and go to state 62

    primary_expression     go to state 64
    math_expression        go to state 65
    relational_expression  go to state 66
    logic_expression       go to state 67
    expression             go to state 347
    general_function_call  go to state 69
    function_call          go to state 70


State 313

   86 function_command: general_variable assignment_operator expression • ';'

    ';'  shift, and go to state 348


State 314

  191 main_unit: KW_DEF KW_MAIN '(' ')' ':' function_command_list KW_ENDDEF ';' •

    $default  reduce using rule 191 (main_unit)


State 315

  117 comp_expr_comma_list: comp_expr_comma_list ',' comp_expression •

    $default  reduce using rule 117 (comp_expr_comma_list)


State 316

  115 general_comp_function_call: '#' IDENTIFIER '[' comp_expression ']' • '.' comp_function_call
  135 comp_math_expression: '#' IDENTIFIER '[' comp_expression ']' •  [KW_FOR, OP_AND, OP_OR, OP_PAW, OP_EQUALS, OP_NE, OP_LE, OP_GE, '>', '<', '-', '+', '*', '/', '%', ')', ']', ',', ':', ';']
  136                     | '#' IDENTIFIER '[' comp_expression ']' • '.' '#' IDENTIFIER
  137                     | '#' IDENTIFIER '[' comp_expression ']' • '.' '#' IDENTIFIER '[' comp_expression ']'

    '.'  shift, and go to state 349

    $default  reduce using rule 135 (comp_math_expression)


State 317

  139 comp_math_expression: '#' IDENTIFIER '.' '#' IDENTIFIER • '[' comp_expression ']'
  140                     | '#' IDENTIFIER '.' '#' IDENTIFIER •  [KW_FOR, OP_AND, OP_OR, OP_PAW, OP_EQUALS, OP_NE, OP_LE, OP_GE, '>', '<', '-', '+', '*', '/', '%', ')', ']', ',', ':', ';']

    '['  shift, and go to state 350

    $default  reduce using rule 140 (comp_math_expression)


State 318

   36 basic_data_type: • KW_INTEGER
   37                | • KW_BOOLEAN
   38                | • KW_CHAR
   39                | • KW_SCALAR
   40                | • KW_STR
   41                | • IDENTIFIER
  172 comp_function_definition: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' • basic_data_type ':' local_var_const_decl_list comp_command_list KW_RETURN comp_expression ';' KW_ENDDEF ';'
  173                         | KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' • basic_data_type ':' comp_command_list KW_RETURN comp_expression ';' KW_ENDDEF ';'
  174                         | KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' • basic_data_type ':' local_var_const_decl comp_command_list KW_RETURN comp_expression ';' KW_ENDDEF ';'

    IDENTIFIER  shift, and go to state 29
    KW_BOOLEAN  shift, and go to state 30
    KW_STR      shift, and go to state 31
    KW_INTEGER  shift, and go to state 32
    KW_SCALAR   shift, and go to state 33
    KW_CHAR     shift, and go to state 34

    basic_data_type  go to state 351


State 319

   42 identifier_single: IDENTIFIER •  [',', ':']
   43                  | IDENTIFIER • '[' POSINT ']'
   44                  | IDENTIFIER • '[' ']'
   61 parameter_declaration: IDENTIFIER • ':' basic_data_type
   62                      | IDENTIFIER • '[' ']' ':' basic_data_type
   80 general_variable: IDENTIFIER •  [OP_ASSIGN, OP_ASSIGN_PLUSEQ, OP_ASSIGN_MULEQ, OP_ASSIGN_DIVEQ, OP_ASSIGN_MODEQ, OP_ASSIGN_MINUSEQ, '.', '=']
   81                 | IDENTIFIER • '.' '#' IDENTIFIER
   82                 | IDENTIFIER • '[' expression ']'
   83                 | IDENTIFIER • '.' '#' IDENTIFIER '[' expression ']'
  111 comp_function_call: IDENTIFIER • '(' ')'
  112                   | IDENTIFIER • '(' comp_expr_comma_list ')'

    '('  shift, and go to state 183
    '['  shift, and go to state 352
    '.'  shift, and go to state 305
    ':'  shift, and go to state 16

    '.'       [reduce using rule 80 (general_variable)]
    ','       reduce using rule 42 (identifier_single)
    ':'       [reduce using rule 42 (identifier_single)]
    $default  reduce using rule 80 (general_variable)

    shift/reduce conflict on token ':':
       42 identifier_single: IDENTIFIER •
       61 parameter_declaration: IDENTIFIER • ':' basic_data_type
      First example: comp_definition_list KW_COMP IDENTIFIER ':' KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' IDENTIFIER • ':' basic_data_type ';' local_var_const_decl_list comp_command_list KW_ENDDEF ';' comp_function_definition KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                       $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                      local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER ':' comp_function_definition_list                                                                                                                                                                                    KW_ENDCOMP ';'
                                                                            ↳ 168: comp_function_definition                                                                                                                                                         comp_function_definition
                                                                                   ↳ 169: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl_list                                                        comp_command_list KW_ENDDEF ';'
                                                                                                                                                   ↳ 52: variable_decl                                    local_var_const_decl_list
                                                                                                                                                         ↳ 60: parameter_declaration                  ';'
                                                                                                                                                               ↳ 61: IDENTIFIER • ':' basic_data_type
      Second example: comp_definition_list KW_COMP IDENTIFIER ':' comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' IDENTIFIER • ':' basic_data_type ';' local_var_const_decl_list comp_command_list KW_ENDDEF ';' KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                  $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                 local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER ':' comp_function_definition_list                                                                                                                                                                                               KW_ENDCOMP ';'
                                                                            ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                                 ↳ 169: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl_list                                                              comp_command_list KW_ENDDEF ';'
                                                                                                                                                                                 ↳ 52: variable_decl                                          local_var_const_decl_list
                                                                                                                                                                                       ↳ 59: identifier_list          ':' basic_data_type ';'
                                                                                                                                                                                             ↳ 47: identifier_single
                                                                                                                                                                                                   ↳ 42: IDENTIFIER •

    shift/reduce conflict on token '.':
       80 general_variable: IDENTIFIER •
       81 general_variable: IDENTIFIER • '.' '#' IDENTIFIER
      First example: comp_definition_list KW_COMP IDENTIFIER ':' KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' IDENTIFIER • '.' '#' IDENTIFIER assignment_operator comp_expression ';' KW_ENDDEF ';' comp_function_definition KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                       $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                      local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER ':' comp_function_definition_list                                                                                                                                                                                    KW_ENDCOMP ';'
                                                                            ↳ 168: comp_function_definition                                                                                                                                                         comp_function_definition
                                                                                   ↳ 171: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' comp_command_list                                                                                  KW_ENDDEF ';'
                                                                                                                                                   ↳ 153: comp_command
                                                                                                                                                          ↳ 155: comp_variable                                assignment_operator comp_expression ';'
                                                                                                                                                                 ↳ 110: general_variable
                                                                                                                                                                        ↳ 81: IDENTIFIER • '.' '#' IDENTIFIER
      Second example: comp_definition_list KW_COMP IDENTIFIER ':' comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' IDENTIFIER • '.' '#' IDENTIFIER assignment_operator comp_expression ';' KW_ENDDEF ';' KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                   $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                  local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER ':' comp_function_definition_list                                                                                                                                                                                                KW_ENDCOMP ';'
                                                                            ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                                 ↳ 171: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' comp_command_list                                                                                         KW_ENDDEF ';'
                                                                                                                                                                                 ↳ 153: comp_command
                                                                                                                                                                                        ↳ 155: comp_variable                                       assignment_operator comp_expression ';'
                                                                                                                                                                                               ↳ 108: comp_variable             '.' '#' IDENTIFIER
                                                                                                                                                                                                      ↳ 110: general_variable
                                                                                                                                                                                                             ↳ 80: IDENTIFIER •

    shift/reduce conflict on token '.':
       80 general_variable: IDENTIFIER •
       83 general_variable: IDENTIFIER • '.' '#' IDENTIFIER '[' expression ']'
      First example: comp_definition_list KW_COMP IDENTIFIER ':' KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' IDENTIFIER • '.' '#' IDENTIFIER '[' expression ']' assignment_operator comp_expression ';' KW_ENDDEF ';' comp_function_definition KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                          $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                         local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER ':' comp_function_definition_list                                                                                                                                                                                                       KW_ENDCOMP ';'
                                                                            ↳ 168: comp_function_definition                                                                                                                                                                            comp_function_definition
                                                                                   ↳ 171: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' comp_command_list                                                                                                     KW_ENDDEF ';'
                                                                                                                                                   ↳ 153: comp_command
                                                                                                                                                          ↳ 155: comp_variable                                                   assignment_operator comp_expression ';'
                                                                                                                                                                 ↳ 110: general_variable
                                                                                                                                                                        ↳ 83: IDENTIFIER • '.' '#' IDENTIFIER '[' expression ']'
      Second example: comp_definition_list KW_COMP IDENTIFIER ':' comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' IDENTIFIER • '.' '#' IDENTIFIER assignment_operator comp_expression ';' KW_ENDDEF ';' KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                   $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                  local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER ':' comp_function_definition_list                                                                                                                                                                                                KW_ENDCOMP ';'
                                                                            ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                                 ↳ 171: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' comp_command_list                                                                                         KW_ENDDEF ';'
                                                                                                                                                                                 ↳ 153: comp_command
                                                                                                                                                                                        ↳ 155: comp_variable                                       assignment_operator comp_expression ';'
                                                                                                                                                                                               ↳ 108: comp_variable             '.' '#' IDENTIFIER
                                                                                                                                                                                                      ↳ 110: general_variable
                                                                                                                                                                                                             ↳ 80: IDENTIFIER •



State 320

  156 comp_command: KW_IF • '(' comp_expression ')' ':' comp_command_list KW_ENDIF ';'
  157             | KW_IF • '(' comp_expression ')' ':' comp_command_list KW_ELSE ':' comp_command_list KW_ENDIF ';'

    '('  shift, and go to state 353


State 321

  163 comp_command: KW_CONTINUE • ';'

    ';'  shift, and go to state 354


State 322

   80 general_variable: • IDENTIFIER
   81                 | • IDENTIFIER '.' '#' IDENTIFIER
   82                 | • IDENTIFIER '[' expression ']'
   83                 | • IDENTIFIER '.' '#' IDENTIFIER '[' expression ']'
  106 comp_variable: • '#' IDENTIFIER
  107              | • '#' IDENTIFIER '[' comp_expression ']'
  108              | • comp_variable '.' '#' IDENTIFIER
  109              | • comp_variable '.' '#' IDENTIFIER '[' POSINT ']'
  110              | • general_variable
  158 comp_command: KW_FOR • comp_variable KW_IN '[' comp_expression ':' comp_expression ']' ':' comp_command_list KW_ENDFOR ';'
  159             | KW_FOR • comp_variable KW_IN '[' comp_expression ':' comp_expression ':' comp_expression ']' ':' comp_command_list KW_ENDFOR ';'

    IDENTIFIER  shift, and go to state 264
    '#'         shift, and go to state 355

    general_variable  go to state 329
    comp_variable     go to state 356


State 323

  161 comp_command: KW_WHILE • '(' comp_expression ')' ':' comp_command_list KW_ENDWHILE ';'

    '('  shift, and go to state 357


State 324

  162 comp_command: KW_BREAK • ';'

    ';'  shift, and go to state 358


State 325

  111 comp_function_call: • IDENTIFIER '(' ')'
  112                   | • IDENTIFIER '(' comp_expr_comma_list ')'
  113 general_comp_function_call: • comp_function_call
  114                           | • '#' IDENTIFIER '.' comp_function_call
  115                           | • '#' IDENTIFIER '[' comp_expression ']' '.' comp_function_call
  118 comp_primary_expression: • POSINT
  119                        | • SCALAR
  120                        | • '#' IDENTIFIER
  121                        | • IDENTIFIER
  122                        | • STRING
  123                        | • KW_TRUE
  124                        | • KW_FALSE
  125                        | • '(' logic_expression ')'
  126 comp_math_expression: • comp_primary_expression
  127                     | • '+' comp_math_expression
  128                     | • '-' comp_math_expression
  129                     | • comp_math_expression '+' comp_math_expression
  130                     | • comp_math_expression '-' comp_math_expression
  131                     | • comp_math_expression '*' comp_math_expression
  132                     | • comp_math_expression '/' comp_math_expression
  133                     | • comp_math_expression '%' comp_math_expression
  134                     | • comp_math_expression OP_PAW comp_math_expression
  135                     | • '#' IDENTIFIER '[' comp_expression ']'
  136                     | • '#' IDENTIFIER '[' comp_expression ']' '.' '#' IDENTIFIER
  137                     | • '#' IDENTIFIER '[' comp_expression ']' '.' '#' IDENTIFIER '[' comp_expression ']'
  138                     | • general_comp_function_call
  139                     | • '#' IDENTIFIER '.' '#' IDENTIFIER '[' comp_expression ']'
  140                     | • '#' IDENTIFIER '.' '#' IDENTIFIER
  141 comp_relational_expression: • comp_math_expression
  142                           | • comp_relational_expression OP_EQUALS comp_relational_expression
  143                           | • comp_relational_expression OP_NE comp_relational_expression
  144                           | • comp_relational_expression '>' comp_relational_expression
  145                           | • comp_relational_expression '<' comp_relational_expression
  146                           | • comp_relational_expression OP_LE comp_relational_expression
  147                           | • comp_relational_expression OP_GE comp_relational_expression
  148 comp_logic_expression: • comp_relational_expression
  149                      | • OP_NOT comp_logic_expression
  150                      | • comp_logic_expression OP_AND comp_logic_expression
  151                      | • comp_logic_expression OP_OR comp_logic_expression
  152 comp_expression: • comp_logic_expression
  164 comp_command: KW_RETURN • ';'
  165             | KW_RETURN • comp_expression ';'

    IDENTIFIER  shift, and go to state 148
    POSINT      shift, and go to state 149
    SCALAR      shift, and go to state 150
    STRING      shift, and go to state 151
    OP_NOT      shift, and go to state 152
    KW_TRUE     shift, and go to state 153
    KW_FALSE    shift, and go to state 154
    '-'         shift, and go to state 155
    '+'         shift, and go to state 156
    '#'         shift, and go to state 157
    '('         shift, and go to state 158
    ';'         shift, and go to state 359

    comp_function_call          go to state 160
    general_comp_function_call  go to state 161
    comp_primary_expression     go to state 162
    comp_math_expression        go to state 163
    comp_relational_expression  go to state 164
    comp_logic_expression       go to state 165
    comp_expression             go to state 360


State 326

  106 comp_variable: '#' • IDENTIFIER
  107              | '#' • IDENTIFIER '[' comp_expression ']'
  114 general_comp_function_call: '#' • IDENTIFIER '.' comp_function_call
  115                           | '#' • IDENTIFIER '[' comp_expression ']' '.' comp_function_call

    IDENTIFIER  shift, and go to state 361


State 327

   80 general_variable: • IDENTIFIER
   81                 | • IDENTIFIER '.' '#' IDENTIFIER
   82                 | • IDENTIFIER '[' expression ']'
   83                 | • IDENTIFIER '.' '#' IDENTIFIER '[' expression ']'
  106 comp_variable: • '#' IDENTIFIER
  107              | • '#' IDENTIFIER '[' comp_expression ']'
  108              | • comp_variable '.' '#' IDENTIFIER
  109              | • comp_variable '.' '#' IDENTIFIER '[' POSINT ']'
  110              | • general_variable
  111 comp_function_call: • IDENTIFIER '(' ')'
  112                   | • IDENTIFIER '(' comp_expr_comma_list ')'
  113 general_comp_function_call: • comp_function_call
  114                           | • '#' IDENTIFIER '.' comp_function_call
  115                           | • '#' IDENTIFIER '[' comp_expression ']' '.' comp_function_call
  153 comp_command_list: • comp_command
  154                  | • comp_command_list comp_command
  155 comp_command: • comp_variable assignment_operator comp_expression ';'
  156             | • KW_IF '(' comp_expression ')' ':' comp_command_list KW_ENDIF ';'
  157             | • KW_IF '(' comp_expression ')' ':' comp_command_list KW_ELSE ':' comp_command_list KW_ENDIF ';'
  158             | • KW_FOR comp_variable KW_IN '[' comp_expression ':' comp_expression ']' ':' comp_command_list KW_ENDFOR ';'
  159             | • KW_FOR comp_variable KW_IN '[' comp_expression ':' comp_expression ':' comp_expression ']' ':' comp_command_list KW_ENDFOR ';'
  160             | • comp_variable OP_ASSIGN '[' comp_expression KW_FOR comp_variable ':' POSINT ']' ':' basic_data_type ';'
  161             | • KW_WHILE '(' comp_expression ')' ':' comp_command_list KW_ENDWHILE ';'
  162             | • KW_BREAK ';'
  163             | • KW_CONTINUE ';'
  164             | • KW_RETURN ';'
  165             | • KW_RETURN comp_expression ';'
  166             | • general_comp_function_call ';'
  169 comp_function_definition: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl_list • comp_command_list KW_ENDDEF ';'

    IDENTIFIER   shift, and go to state 362
    KW_IF        shift, and go to state 320
    KW_CONTINUE  shift, and go to state 321
    KW_FOR       shift, and go to state 322
    KW_WHILE     shift, and go to state 323
    KW_BREAK     shift, and go to state 324
    KW_RETURN    shift, and go to state 325
    '#'          shift, and go to state 326

    general_variable            go to state 329
    comp_variable               go to state 330
    comp_function_call          go to state 160
    general_comp_function_call  go to state 331
    comp_command_list           go to state 363
    comp_command                go to state 333


State 328

   53 local_var_const_decl_list: local_var_const_decl •  [IDENTIFIER, KW_IF, KW_CONTINUE, KW_FOR, KW_WHILE, KW_BREAK, KW_RETURN, '#']
   80 general_variable: • IDENTIFIER
   81                 | • IDENTIFIER '.' '#' IDENTIFIER
   82                 | • IDENTIFIER '[' expression ']'
   83                 | • IDENTIFIER '.' '#' IDENTIFIER '[' expression ']'
  106 comp_variable: • '#' IDENTIFIER
  107              | • '#' IDENTIFIER '[' comp_expression ']'
  108              | • comp_variable '.' '#' IDENTIFIER
  109              | • comp_variable '.' '#' IDENTIFIER '[' POSINT ']'
  110              | • general_variable
  111 comp_function_call: • IDENTIFIER '(' ')'
  112                   | • IDENTIFIER '(' comp_expr_comma_list ')'
  113 general_comp_function_call: • comp_function_call
  114                           | • '#' IDENTIFIER '.' comp_function_call
  115                           | • '#' IDENTIFIER '[' comp_expression ']' '.' comp_function_call
  153 comp_command_list: • comp_command
  154                  | • comp_command_list comp_command
  155 comp_command: • comp_variable assignment_operator comp_expression ';'
  156             | • KW_IF '(' comp_expression ')' ':' comp_command_list KW_ENDIF ';'
  157             | • KW_IF '(' comp_expression ')' ':' comp_command_list KW_ELSE ':' comp_command_list KW_ENDIF ';'
  158             | • KW_FOR comp_variable KW_IN '[' comp_expression ':' comp_expression ']' ':' comp_command_list KW_ENDFOR ';'
  159             | • KW_FOR comp_variable KW_IN '[' comp_expression ':' comp_expression ':' comp_expression ']' ':' comp_command_list KW_ENDFOR ';'
  160             | • comp_variable OP_ASSIGN '[' comp_expression KW_FOR comp_variable ':' POSINT ']' ':' basic_data_type ';'
  161             | • KW_WHILE '(' comp_expression ')' ':' comp_command_list KW_ENDWHILE ';'
  162             | • KW_BREAK ';'
  163             | • KW_CONTINUE ';'
  164             | • KW_RETURN ';'
  165             | • KW_RETURN comp_expression ';'
  166             | • general_comp_function_call ';'
  170 comp_function_definition: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl • comp_command_list KW_ENDDEF ';'

    IDENTIFIER   shift, and go to state 362
    KW_IF        shift, and go to state 320
    KW_CONTINUE  shift, and go to state 321
    KW_FOR       shift, and go to state 322
    KW_WHILE     shift, and go to state 323
    KW_BREAK     shift, and go to state 324
    KW_RETURN    shift, and go to state 325
    '#'          shift, and go to state 326

    IDENTIFIER   [reduce using rule 53 (local_var_const_decl_list)]
    KW_IF        [reduce using rule 53 (local_var_const_decl_list)]
    KW_CONTINUE  [reduce using rule 53 (local_var_const_decl_list)]
    KW_FOR       [reduce using rule 53 (local_var_const_decl_list)]
    KW_WHILE     [reduce using rule 53 (local_var_const_decl_list)]
    KW_BREAK     [reduce using rule 53 (local_var_const_decl_list)]
    KW_RETURN    [reduce using rule 53 (local_var_const_decl_list)]
    '#'          [reduce using rule 53 (local_var_const_decl_list)]

    general_variable            go to state 329
    comp_variable               go to state 330
    comp_function_call          go to state 160
    general_comp_function_call  go to state 331
    comp_command_list           go to state 364
    comp_command                go to state 333

    shift/reduce conflict on token IDENTIFIER:
       53 local_var_const_decl_list: local_var_const_decl •
       80 general_variable: • IDENTIFIER
      First example: comp_definition_list KW_COMP IDENTIFIER comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl • IDENTIFIER assignment_operator comp_expression ';' KW_ENDDEF ';' comp_function_definition_list KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                                        $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                                       local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER comp_function_definition_list                                                                                                                                                                                           comp_function_definition_list KW_ENDCOMP ';'
                                                                        ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                             ↳ 170: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl comp_command_list                                                               KW_ENDDEF ';'
                                                                                                                                                                                                  ↳ 153: comp_command
                                                                                                                                                                                                         ↳ 155: comp_variable             assignment_operator comp_expression ';'
                                                                                                                                                                                                                ↳ 110: general_variable
                                                                                                                                                                                                                       ↳ 80: • IDENTIFIER
      Second example: comp_definition_list KW_COMP IDENTIFIER ':' comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl • IDENTIFIER assignment_operator comp_expression ';' KW_ENDDEF ';' KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                    $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                   local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER ':' comp_function_definition_list                                                                                                                                                                                                 KW_ENDCOMP ';'
                                                                            ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                                 ↳ 169: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl_list    comp_command_list                                                             KW_ENDDEF ';'
                                                                                                                                                                                 ↳ 53: local_var_const_decl • ↳ 153: comp_command
                                                                                                                                                                                                                     ↳ 155: comp_variable           assignment_operator comp_expression ';'
                                                                                                                                                                                                                            ↳ 110: general_variable
                                                                                                                                                                                                                                   ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       53 local_var_const_decl_list: local_var_const_decl •
       81 general_variable: • IDENTIFIER '.' '#' IDENTIFIER
      First example: comp_definition_list KW_COMP IDENTIFIER comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl • IDENTIFIER '.' '#' IDENTIFIER assignment_operator comp_expression ';' KW_ENDDEF ';' comp_function_definition_list KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                                                           $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                                                          local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER comp_function_definition_list                                                                                                                                                                                                              comp_function_definition_list KW_ENDCOMP ';'
                                                                        ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                             ↳ 170: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl comp_command_list                                                                                  KW_ENDDEF ';'
                                                                                                                                                                                                  ↳ 153: comp_command
                                                                                                                                                                                                         ↳ 155: comp_variable                                assignment_operator comp_expression ';'
                                                                                                                                                                                                                ↳ 110: general_variable
                                                                                                                                                                                                                       ↳ 81: • IDENTIFIER '.' '#' IDENTIFIER
      Second example: comp_definition_list KW_COMP IDENTIFIER ':' comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl • IDENTIFIER assignment_operator comp_expression ';' KW_ENDDEF ';' KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                    $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                   local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER ':' comp_function_definition_list                                                                                                                                                                                                 KW_ENDCOMP ';'
                                                                            ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                                 ↳ 169: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl_list    comp_command_list                                                             KW_ENDDEF ';'
                                                                                                                                                                                 ↳ 53: local_var_const_decl • ↳ 153: comp_command
                                                                                                                                                                                                                     ↳ 155: comp_variable           assignment_operator comp_expression ';'
                                                                                                                                                                                                                            ↳ 110: general_variable
                                                                                                                                                                                                                                   ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       53 local_var_const_decl_list: local_var_const_decl •
       82 general_variable: • IDENTIFIER '[' expression ']'
      First example: comp_definition_list KW_COMP IDENTIFIER comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl • IDENTIFIER '[' expression ']' assignment_operator comp_expression ';' KW_ENDDEF ';' comp_function_definition_list KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                                                           $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                                                          local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER comp_function_definition_list                                                                                                                                                                                                              comp_function_definition_list KW_ENDCOMP ';'
                                                                        ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                             ↳ 170: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl comp_command_list                                                                                  KW_ENDDEF ';'
                                                                                                                                                                                                  ↳ 153: comp_command
                                                                                                                                                                                                         ↳ 155: comp_variable                                assignment_operator comp_expression ';'
                                                                                                                                                                                                                ↳ 110: general_variable
                                                                                                                                                                                                                       ↳ 82: • IDENTIFIER '[' expression ']'
      Second example: comp_definition_list KW_COMP IDENTIFIER ':' comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl • IDENTIFIER assignment_operator comp_expression ';' KW_ENDDEF ';' KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                    $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                   local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER ':' comp_function_definition_list                                                                                                                                                                                                 KW_ENDCOMP ';'
                                                                            ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                                 ↳ 169: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl_list    comp_command_list                                                             KW_ENDDEF ';'
                                                                                                                                                                                 ↳ 53: local_var_const_decl • ↳ 153: comp_command
                                                                                                                                                                                                                     ↳ 155: comp_variable           assignment_operator comp_expression ';'
                                                                                                                                                                                                                            ↳ 110: general_variable
                                                                                                                                                                                                                                   ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       53 local_var_const_decl_list: local_var_const_decl •
       83 general_variable: • IDENTIFIER '.' '#' IDENTIFIER '[' expression ']'
      First example: comp_definition_list KW_COMP IDENTIFIER comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl • IDENTIFIER '.' '#' IDENTIFIER '[' expression ']' assignment_operator comp_expression ';' KW_ENDDEF ';' comp_function_definition_list KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                                                                              $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                                                                             local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER comp_function_definition_list                                                                                                                                                                                                                                 comp_function_definition_list KW_ENDCOMP ';'
                                                                        ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                             ↳ 170: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl comp_command_list                                                                                                     KW_ENDDEF ';'
                                                                                                                                                                                                  ↳ 153: comp_command
                                                                                                                                                                                                         ↳ 155: comp_variable                                                   assignment_operator comp_expression ';'
                                                                                                                                                                                                                ↳ 110: general_variable
                                                                                                                                                                                                                       ↳ 83: • IDENTIFIER '.' '#' IDENTIFIER '[' expression ']'
      Second example: comp_definition_list KW_COMP IDENTIFIER ':' comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl • IDENTIFIER assignment_operator comp_expression ';' KW_ENDDEF ';' KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                    $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                   local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER ':' comp_function_definition_list                                                                                                                                                                                                 KW_ENDCOMP ';'
                                                                            ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                                 ↳ 169: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl_list    comp_command_list                                                             KW_ENDDEF ';'
                                                                                                                                                                                 ↳ 53: local_var_const_decl • ↳ 153: comp_command
                                                                                                                                                                                                                     ↳ 155: comp_variable           assignment_operator comp_expression ';'
                                                                                                                                                                                                                            ↳ 110: general_variable
                                                                                                                                                                                                                                   ↳ 80: IDENTIFIER

    shift/reduce conflict on token '#':
       53 local_var_const_decl_list: local_var_const_decl •
      106 comp_variable: • '#' IDENTIFIER
      First example: comp_definition_list KW_COMP IDENTIFIER comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl • '#' IDENTIFIER assignment_operator comp_expression ';' KW_ENDDEF ';' comp_function_definition_list KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                                      $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                                     local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER comp_function_definition_list                                                                                                                                                                                         comp_function_definition_list KW_ENDCOMP ';'
                                                                        ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                             ↳ 170: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl comp_command_list                                                             KW_ENDDEF ';'
                                                                                                                                                                                                  ↳ 153: comp_command
                                                                                                                                                                                                         ↳ 155: comp_variable           assignment_operator comp_expression ';'
                                                                                                                                                                                                                ↳ 106: • '#' IDENTIFIER
      Second example: comp_definition_list KW_COMP IDENTIFIER ':' comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl • '#' IDENTIFIER assignment_operator comp_expression ';' KW_ENDDEF ';' KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                  $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                 local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER ':' comp_function_definition_list                                                                                                                                                                                               KW_ENDCOMP ';'
                                                                            ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                                 ↳ 169: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl_list    comp_command_list                                                           KW_ENDDEF ';'
                                                                                                                                                                                 ↳ 53: local_var_const_decl • ↳ 153: comp_command
                                                                                                                                                                                                                     ↳ 155: comp_variable         assignment_operator comp_expression ';'
                                                                                                                                                                                                                            ↳ 106: '#' IDENTIFIER

    shift/reduce conflict on token '#':
       53 local_var_const_decl_list: local_var_const_decl •
      107 comp_variable: • '#' IDENTIFIER '[' comp_expression ']'
      First example: comp_definition_list KW_COMP IDENTIFIER comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl • '#' IDENTIFIER '[' comp_expression ']' assignment_operator comp_expression ';' KW_ENDDEF ';' comp_function_definition_list KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                                                              $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                                                             local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER comp_function_definition_list                                                                                                                                                                                                                 comp_function_definition_list KW_ENDCOMP ';'
                                                                        ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                             ↳ 170: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl comp_command_list                                                                                     KW_ENDDEF ';'
                                                                                                                                                                                                  ↳ 153: comp_command
                                                                                                                                                                                                         ↳ 155: comp_variable                                   assignment_operator comp_expression ';'
                                                                                                                                                                                                                ↳ 107: • '#' IDENTIFIER '[' comp_expression ']'
      Second example: comp_definition_list KW_COMP IDENTIFIER ':' comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl • '#' IDENTIFIER assignment_operator comp_expression ';' KW_ENDDEF ';' KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                  $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                 local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER ':' comp_function_definition_list                                                                                                                                                                                               KW_ENDCOMP ';'
                                                                            ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                                 ↳ 169: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl_list    comp_command_list                                                           KW_ENDDEF ';'
                                                                                                                                                                                 ↳ 53: local_var_const_decl • ↳ 153: comp_command
                                                                                                                                                                                                                     ↳ 155: comp_variable         assignment_operator comp_expression ';'
                                                                                                                                                                                                                            ↳ 106: '#' IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       53 local_var_const_decl_list: local_var_const_decl •
      111 comp_function_call: • IDENTIFIER '(' ')'
      First example: comp_definition_list KW_COMP IDENTIFIER comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl • IDENTIFIER '(' ')' ';' KW_ENDDEF ';' comp_function_definition_list KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                             $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                            local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER comp_function_definition_list                                                                                                                                                                comp_function_definition_list KW_ENDCOMP ';'
                                                                        ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                             ↳ 170: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl comp_command_list                                    KW_ENDDEF ';'
                                                                                                                                                                                                  ↳ 153: comp_command
                                                                                                                                                                                                         ↳ 166: general_comp_function_call         ';'
                                                                                                                                                                                                                ↳ 113: comp_function_call
                                                                                                                                                                                                                       ↳ 111: • IDENTIFIER '(' ')'
      Second example: comp_definition_list KW_COMP IDENTIFIER ':' comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl • IDENTIFIER assignment_operator comp_expression ';' KW_ENDDEF ';' KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                    $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                   local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER ':' comp_function_definition_list                                                                                                                                                                                                 KW_ENDCOMP ';'
                                                                            ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                                 ↳ 169: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl_list    comp_command_list                                                             KW_ENDDEF ';'
                                                                                                                                                                                 ↳ 53: local_var_const_decl • ↳ 153: comp_command
                                                                                                                                                                                                                     ↳ 155: comp_variable           assignment_operator comp_expression ';'
                                                                                                                                                                                                                            ↳ 110: general_variable
                                                                                                                                                                                                                                   ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       53 local_var_const_decl_list: local_var_const_decl •
      112 comp_function_call: • IDENTIFIER '(' comp_expr_comma_list ')'
      First example: comp_definition_list KW_COMP IDENTIFIER comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl • IDENTIFIER '(' comp_expr_comma_list ')' ';' KW_ENDDEF ';' comp_function_definition_list KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                                  $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                                 local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER comp_function_definition_list                                                                                                                                                                                     comp_function_definition_list KW_ENDCOMP ';'
                                                                        ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                             ↳ 170: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl comp_command_list                                                         KW_ENDDEF ';'
                                                                                                                                                                                                  ↳ 153: comp_command
                                                                                                                                                                                                         ↳ 166: general_comp_function_call                              ';'
                                                                                                                                                                                                                ↳ 113: comp_function_call
                                                                                                                                                                                                                       ↳ 112: • IDENTIFIER '(' comp_expr_comma_list ')'
      Second example: comp_definition_list KW_COMP IDENTIFIER ':' comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl • IDENTIFIER assignment_operator comp_expression ';' KW_ENDDEF ';' KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                    $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                   local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER ':' comp_function_definition_list                                                                                                                                                                                                 KW_ENDCOMP ';'
                                                                            ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                                 ↳ 169: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl_list    comp_command_list                                                             KW_ENDDEF ';'
                                                                                                                                                                                 ↳ 53: local_var_const_decl • ↳ 153: comp_command
                                                                                                                                                                                                                     ↳ 155: comp_variable           assignment_operator comp_expression ';'
                                                                                                                                                                                                                            ↳ 110: general_variable
                                                                                                                                                                                                                                   ↳ 80: IDENTIFIER

    shift/reduce conflict on token '#':
       53 local_var_const_decl_list: local_var_const_decl •
      114 general_comp_function_call: • '#' IDENTIFIER '.' comp_function_call
      First example: comp_definition_list KW_COMP IDENTIFIER comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl • '#' IDENTIFIER '.' comp_function_call ';' KW_ENDDEF ';' comp_function_definition_list KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                         $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                        local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER comp_function_definition_list                                                                                                                                                                            comp_function_definition_list KW_ENDCOMP ';'
                                                                        ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                             ↳ 170: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl comp_command_list                                                KW_ENDDEF ';'
                                                                                                                                                                                                  ↳ 153: comp_command
                                                                                                                                                                                                         ↳ 166: general_comp_function_call                     ';'
                                                                                                                                                                                                                ↳ 114: • '#' IDENTIFIER '.' comp_function_call
      Second example: comp_definition_list KW_COMP IDENTIFIER ':' comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl • '#' IDENTIFIER assignment_operator comp_expression ';' KW_ENDDEF ';' KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                  $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                 local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER ':' comp_function_definition_list                                                                                                                                                                                               KW_ENDCOMP ';'
                                                                            ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                                 ↳ 169: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl_list    comp_command_list                                                           KW_ENDDEF ';'
                                                                                                                                                                                 ↳ 53: local_var_const_decl • ↳ 153: comp_command
                                                                                                                                                                                                                     ↳ 155: comp_variable         assignment_operator comp_expression ';'
                                                                                                                                                                                                                            ↳ 106: '#' IDENTIFIER

    shift/reduce conflict on token '#':
       53 local_var_const_decl_list: local_var_const_decl •
      115 general_comp_function_call: • '#' IDENTIFIER '[' comp_expression ']' '.' comp_function_call
      First example: comp_definition_list KW_COMP IDENTIFIER comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl • '#' IDENTIFIER '[' comp_expression ']' '.' comp_function_call ';' KW_ENDDEF ';' comp_function_definition_list KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                                                 $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                                                local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER comp_function_definition_list                                                                                                                                                                                                    comp_function_definition_list KW_ENDCOMP ';'
                                                                        ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                             ↳ 170: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl comp_command_list                                                                        KW_ENDDEF ';'
                                                                                                                                                                                                  ↳ 153: comp_command
                                                                                                                                                                                                         ↳ 166: general_comp_function_call                                             ';'
                                                                                                                                                                                                                ↳ 115: • '#' IDENTIFIER '[' comp_expression ']' '.' comp_function_call
      Second example: comp_definition_list KW_COMP IDENTIFIER ':' comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl • '#' IDENTIFIER assignment_operator comp_expression ';' KW_ENDDEF ';' KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                  $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                 local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER ':' comp_function_definition_list                                                                                                                                                                                               KW_ENDCOMP ';'
                                                                            ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                                 ↳ 169: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl_list    comp_command_list                                                           KW_ENDDEF ';'
                                                                                                                                                                                 ↳ 53: local_var_const_decl • ↳ 153: comp_command
                                                                                                                                                                                                                     ↳ 155: comp_variable         assignment_operator comp_expression ';'
                                                                                                                                                                                                                            ↳ 106: '#' IDENTIFIER

    shift/reduce conflict on token KW_IF:
       53 local_var_const_decl_list: local_var_const_decl •
      156 comp_command: • KW_IF '(' comp_expression ')' ':' comp_command_list KW_ENDIF ';'
      First example: comp_definition_list KW_COMP IDENTIFIER comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl • KW_IF '(' comp_expression ')' ':' comp_command_list KW_ENDIF ';' KW_ENDDEF ';' comp_function_definition_list KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                                         $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                                        local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER comp_function_definition_list                                                                                                                                                                                            comp_function_definition_list KW_ENDCOMP ';'
                                                                        ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                             ↳ 170: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl comp_command_list                                                                KW_ENDDEF ';'
                                                                                                                                                                                                  ↳ 153: comp_command
                                                                                                                                                                                                         ↳ 156: • KW_IF '(' comp_expression ')' ':' comp_command_list KW_ENDIF ';'
      Second example: comp_definition_list KW_COMP IDENTIFIER ':' comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl • KW_IF '(' comp_expression ')' ':' comp_command_list KW_ENDIF ';' KW_ENDDEF ';' KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                     $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                    local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER ':' comp_function_definition_list                                                                                                                                                                                                  KW_ENDCOMP ';'
                                                                            ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                                 ↳ 169: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl_list    comp_command_list                                                              KW_ENDDEF ';'
                                                                                                                                                                                 ↳ 53: local_var_const_decl • ↳ 153: comp_command
                                                                                                                                                                                                                     ↳ 156: KW_IF '(' comp_expression ')' ':' comp_command_list KW_ENDIF ';'

    shift/reduce conflict on token KW_IF:
       53 local_var_const_decl_list: local_var_const_decl •
      157 comp_command: • KW_IF '(' comp_expression ')' ':' comp_command_list KW_ELSE ':' comp_command_list KW_ENDIF ';'
      First example: comp_definition_list KW_COMP IDENTIFIER comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl • KW_IF '(' comp_expression ')' ':' comp_command_list KW_ELSE ':' comp_command_list KW_ENDIF ';' KW_ENDDEF ';' comp_function_definition_list KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                                                                       $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                                                                      local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER comp_function_definition_list                                                                                                                                                                                                                          comp_function_definition_list KW_ENDCOMP ';'
                                                                        ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                             ↳ 170: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl comp_command_list                                                                                              KW_ENDDEF ';'
                                                                                                                                                                                                  ↳ 153: comp_command
                                                                                                                                                                                                         ↳ 157: • KW_IF '(' comp_expression ')' ':' comp_command_list KW_ELSE ':' comp_command_list KW_ENDIF ';'
      Second example: comp_definition_list KW_COMP IDENTIFIER ':' comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl • KW_IF '(' comp_expression ')' ':' comp_command_list KW_ENDIF ';' KW_ENDDEF ';' KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                     $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                    local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER ':' comp_function_definition_list                                                                                                                                                                                                  KW_ENDCOMP ';'
                                                                            ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                                 ↳ 169: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl_list    comp_command_list                                                              KW_ENDDEF ';'
                                                                                                                                                                                 ↳ 53: local_var_const_decl • ↳ 153: comp_command
                                                                                                                                                                                                                     ↳ 156: KW_IF '(' comp_expression ')' ':' comp_command_list KW_ENDIF ';'

    shift/reduce conflict on token KW_FOR:
       53 local_var_const_decl_list: local_var_const_decl •
      158 comp_command: • KW_FOR comp_variable KW_IN '[' comp_expression ':' comp_expression ']' ':' comp_command_list KW_ENDFOR ';'
      First example: comp_definition_list KW_COMP IDENTIFIER comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl • KW_FOR comp_variable KW_IN '[' comp_expression ':' comp_expression ']' ':' comp_command_list KW_ENDFOR ';' KW_ENDDEF ';' comp_function_definition_list KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                                                                                   $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                                                                                  local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER comp_function_definition_list                                                                                                                                                                                                                                      comp_function_definition_list KW_ENDCOMP ';'
                                                                        ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                             ↳ 170: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl comp_command_list                                                                                                          KW_ENDDEF ';'
                                                                                                                                                                                                  ↳ 153: comp_command
                                                                                                                                                                                                         ↳ 158: • KW_FOR comp_variable KW_IN '[' comp_expression ':' comp_expression ']' ':' comp_command_list KW_ENDFOR ';'
      Second example: comp_definition_list KW_COMP IDENTIFIER ':' comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl • KW_FOR comp_variable KW_IN '[' comp_expression ':' comp_expression ']' ':' comp_command_list KW_ENDFOR ';' KW_ENDDEF ';' KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                                                               $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                                                              local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER ':' comp_function_definition_list                                                                                                                                                                                                                                            KW_ENDCOMP ';'
                                                                            ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                                 ↳ 169: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl_list    comp_command_list                                                                                                        KW_ENDDEF ';'
                                                                                                                                                                                 ↳ 53: local_var_const_decl • ↳ 153: comp_command
                                                                                                                                                                                                                     ↳ 158: KW_FOR comp_variable KW_IN '[' comp_expression ':' comp_expression ']' ':' comp_command_list KW_ENDFOR ';'

    shift/reduce conflict on token KW_FOR:
       53 local_var_const_decl_list: local_var_const_decl •
      159 comp_command: • KW_FOR comp_variable KW_IN '[' comp_expression ':' comp_expression ':' comp_expression ']' ':' comp_command_list KW_ENDFOR ';'
      First example: comp_definition_list KW_COMP IDENTIFIER comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl • KW_FOR comp_variable KW_IN '[' comp_expression ':' comp_expression ':' comp_expression ']' ':' comp_command_list KW_ENDFOR ';' KW_ENDDEF ';' comp_function_definition_list KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                                                                                                       $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                                                                                                      local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER comp_function_definition_list                                                                                                                                                                                                                                                          comp_function_definition_list KW_ENDCOMP ';'
                                                                        ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                             ↳ 170: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl comp_command_list                                                                                                                              KW_ENDDEF ';'
                                                                                                                                                                                                  ↳ 153: comp_command
                                                                                                                                                                                                         ↳ 159: • KW_FOR comp_variable KW_IN '[' comp_expression ':' comp_expression ':' comp_expression ']' ':' comp_command_list KW_ENDFOR ';'
      Second example: comp_definition_list KW_COMP IDENTIFIER ':' comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl • KW_FOR comp_variable KW_IN '[' comp_expression ':' comp_expression ']' ':' comp_command_list KW_ENDFOR ';' KW_ENDDEF ';' KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                                                               $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                                                              local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER ':' comp_function_definition_list                                                                                                                                                                                                                                            KW_ENDCOMP ';'
                                                                            ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                                 ↳ 169: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl_list    comp_command_list                                                                                                        KW_ENDDEF ';'
                                                                                                                                                                                 ↳ 53: local_var_const_decl • ↳ 153: comp_command
                                                                                                                                                                                                                     ↳ 158: KW_FOR comp_variable KW_IN '[' comp_expression ':' comp_expression ']' ':' comp_command_list KW_ENDFOR ';'

    shift/reduce conflict on token KW_WHILE:
       53 local_var_const_decl_list: local_var_const_decl •
      161 comp_command: • KW_WHILE '(' comp_expression ')' ':' comp_command_list KW_ENDWHILE ';'
      First example: comp_definition_list KW_COMP IDENTIFIER comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl • KW_WHILE '(' comp_expression ')' ':' comp_command_list KW_ENDWHILE ';' KW_ENDDEF ';' comp_function_definition_list KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                                               $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                                              local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER comp_function_definition_list                                                                                                                                                                                                  comp_function_definition_list KW_ENDCOMP ';'
                                                                        ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                             ↳ 170: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl comp_command_list                                                                      KW_ENDDEF ';'
                                                                                                                                                                                                  ↳ 153: comp_command
                                                                                                                                                                                                         ↳ 161: • KW_WHILE '(' comp_expression ')' ':' comp_command_list KW_ENDWHILE ';'
      Second example: comp_definition_list KW_COMP IDENTIFIER ':' comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl • KW_WHILE '(' comp_expression ')' ':' comp_command_list KW_ENDWHILE ';' KW_ENDDEF ';' KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                           $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                          local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER ':' comp_function_definition_list                                                                                                                                                                                                        KW_ENDCOMP ';'
                                                                            ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                                 ↳ 169: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl_list    comp_command_list                                                                    KW_ENDDEF ';'
                                                                                                                                                                                 ↳ 53: local_var_const_decl • ↳ 153: comp_command
                                                                                                                                                                                                                     ↳ 161: KW_WHILE '(' comp_expression ')' ':' comp_command_list KW_ENDWHILE ';'

    shift/reduce conflict on token KW_BREAK:
       53 local_var_const_decl_list: local_var_const_decl •
      162 comp_command: • KW_BREAK ';'
      First example: comp_definition_list KW_COMP IDENTIFIER comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl • KW_BREAK ';' KW_ENDDEF ';' comp_function_definition_list KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                     $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                    local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER comp_function_definition_list                                                                                                                                        comp_function_definition_list KW_ENDCOMP ';'
                                                                        ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                             ↳ 170: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl comp_command_list            KW_ENDDEF ';'
                                                                                                                                                                                                  ↳ 153: comp_command
                                                                                                                                                                                                         ↳ 162: • KW_BREAK ';'
      Second example: comp_definition_list KW_COMP IDENTIFIER ':' comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl • KW_BREAK ';' KW_ENDDEF ';' KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                 $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER ':' comp_function_definition_list                                                                                                                                              KW_ENDCOMP ';'
                                                                            ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                                 ↳ 169: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl_list    comp_command_list          KW_ENDDEF ';'
                                                                                                                                                                                 ↳ 53: local_var_const_decl • ↳ 153: comp_command
                                                                                                                                                                                                                     ↳ 162: KW_BREAK ';'

    shift/reduce conflict on token KW_CONTINUE:
       53 local_var_const_decl_list: local_var_const_decl •
      163 comp_command: • KW_CONTINUE ';'
      First example: comp_definition_list KW_COMP IDENTIFIER comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl • KW_CONTINUE ';' KW_ENDDEF ';' comp_function_definition_list KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                        $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                       local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER comp_function_definition_list                                                                                                                                           comp_function_definition_list KW_ENDCOMP ';'
                                                                        ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                             ↳ 170: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl comp_command_list               KW_ENDDEF ';'
                                                                                                                                                                                                  ↳ 153: comp_command
                                                                                                                                                                                                         ↳ 163: • KW_CONTINUE ';'
      Second example: comp_definition_list KW_COMP IDENTIFIER ':' comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl • KW_CONTINUE ';' KW_ENDDEF ';' KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                    $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                   local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER ':' comp_function_definition_list                                                                                                                                                 KW_ENDCOMP ';'
                                                                            ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                                 ↳ 169: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl_list    comp_command_list             KW_ENDDEF ';'
                                                                                                                                                                                 ↳ 53: local_var_const_decl • ↳ 153: comp_command
                                                                                                                                                                                                                     ↳ 163: KW_CONTINUE ';'

    shift/reduce conflict on token KW_RETURN:
       53 local_var_const_decl_list: local_var_const_decl •
      164 comp_command: • KW_RETURN ';'
      First example: comp_definition_list KW_COMP IDENTIFIER comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl • KW_RETURN ';' KW_ENDDEF ';' comp_function_definition_list KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                      $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                     local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER comp_function_definition_list                                                                                                                                         comp_function_definition_list KW_ENDCOMP ';'
                                                                        ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                             ↳ 170: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl comp_command_list             KW_ENDDEF ';'
                                                                                                                                                                                                  ↳ 153: comp_command
                                                                                                                                                                                                         ↳ 164: • KW_RETURN ';'
      Second example: comp_definition_list KW_COMP IDENTIFIER ':' comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl • KW_RETURN ';' KW_ENDDEF ';' KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                  $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                 local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER ':' comp_function_definition_list                                                                                                                                               KW_ENDCOMP ';'
                                                                            ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                                 ↳ 169: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl_list    comp_command_list           KW_ENDDEF ';'
                                                                                                                                                                                 ↳ 53: local_var_const_decl • ↳ 153: comp_command
                                                                                                                                                                                                                     ↳ 164: KW_RETURN ';'

    shift/reduce conflict on token KW_RETURN:
       53 local_var_const_decl_list: local_var_const_decl •
      165 comp_command: • KW_RETURN comp_expression ';'
      First example: comp_definition_list KW_COMP IDENTIFIER comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl • KW_RETURN comp_expression ';' KW_ENDDEF ';' comp_function_definition_list KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                      $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                     local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER comp_function_definition_list                                                                                                                                                         comp_function_definition_list KW_ENDCOMP ';'
                                                                        ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                             ↳ 170: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl comp_command_list                             KW_ENDDEF ';'
                                                                                                                                                                                                  ↳ 153: comp_command
                                                                                                                                                                                                         ↳ 165: • KW_RETURN comp_expression ';'
      Second example: comp_definition_list KW_COMP IDENTIFIER ':' comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl • KW_RETURN ';' KW_ENDDEF ';' KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                  $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                 local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER ':' comp_function_definition_list                                                                                                                                               KW_ENDCOMP ';'
                                                                            ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                                 ↳ 169: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl_list    comp_command_list           KW_ENDDEF ';'
                                                                                                                                                                                 ↳ 53: local_var_const_decl • ↳ 153: comp_command
                                                                                                                                                                                                                     ↳ 164: KW_RETURN ';'



State 329

  110 comp_variable: general_variable •

    $default  reduce using rule 110 (comp_variable)


State 330

   73 assignment_operator: • '='
   74                    | • OP_ASSIGN
   75                    | • OP_ASSIGN_PLUSEQ
   76                    | • OP_ASSIGN_MINUSEQ
   77                    | • OP_ASSIGN_MULEQ
   78                    | • OP_ASSIGN_DIVEQ
   79                    | • OP_ASSIGN_MODEQ
  108 comp_variable: comp_variable • '.' '#' IDENTIFIER
  109              | comp_variable • '.' '#' IDENTIFIER '[' POSINT ']'
  155 comp_command: comp_variable • assignment_operator comp_expression ';'
  160             | comp_variable • OP_ASSIGN '[' comp_expression KW_FOR comp_variable ':' POSINT ']' ':' basic_data_type ';'

    OP_ASSIGN          shift, and go to state 365
    OP_ASSIGN_PLUSEQ   shift, and go to state 275
    OP_ASSIGN_MULEQ    shift, and go to state 276
    OP_ASSIGN_DIVEQ    shift, and go to state 277
    OP_ASSIGN_MODEQ    shift, and go to state 278
    OP_ASSIGN_MINUSEQ  shift, and go to state 279
    '.'                shift, and go to state 366
    '='                shift, and go to state 280

    assignment_operator  go to state 367


State 331

  166 comp_command: general_comp_function_call • ';'

    ';'  shift, and go to state 368


State 332

   80 general_variable: • IDENTIFIER
   81                 | • IDENTIFIER '.' '#' IDENTIFIER
   82                 | • IDENTIFIER '[' expression ']'
   83                 | • IDENTIFIER '.' '#' IDENTIFIER '[' expression ']'
  106 comp_variable: • '#' IDENTIFIER
  107              | • '#' IDENTIFIER '[' comp_expression ']'
  108              | • comp_variable '.' '#' IDENTIFIER
  109              | • comp_variable '.' '#' IDENTIFIER '[' POSINT ']'
  110              | • general_variable
  111 comp_function_call: • IDENTIFIER '(' ')'
  112                   | • IDENTIFIER '(' comp_expr_comma_list ')'
  113 general_comp_function_call: • comp_function_call
  114                           | • '#' IDENTIFIER '.' comp_function_call
  115                           | • '#' IDENTIFIER '[' comp_expression ']' '.' comp_function_call
  154 comp_command_list: comp_command_list • comp_command
  155 comp_command: • comp_variable assignment_operator comp_expression ';'
  156             | • KW_IF '(' comp_expression ')' ':' comp_command_list KW_ENDIF ';'
  157             | • KW_IF '(' comp_expression ')' ':' comp_command_list KW_ELSE ':' comp_command_list KW_ENDIF ';'
  158             | • KW_FOR comp_variable KW_IN '[' comp_expression ':' comp_expression ']' ':' comp_command_list KW_ENDFOR ';'
  159             | • KW_FOR comp_variable KW_IN '[' comp_expression ':' comp_expression ':' comp_expression ']' ':' comp_command_list KW_ENDFOR ';'
  160             | • comp_variable OP_ASSIGN '[' comp_expression KW_FOR comp_variable ':' POSINT ']' ':' basic_data_type ';'
  161             | • KW_WHILE '(' comp_expression ')' ':' comp_command_list KW_ENDWHILE ';'
  162             | • KW_BREAK ';'
  163             | • KW_CONTINUE ';'
  164             | • KW_RETURN ';'
  165             | • KW_RETURN comp_expression ';'
  166             | • general_comp_function_call ';'
  171 comp_function_definition: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' comp_command_list • KW_ENDDEF ';'

    IDENTIFIER   shift, and go to state 362
    KW_IF        shift, and go to state 320
    KW_CONTINUE  shift, and go to state 321
    KW_FOR       shift, and go to state 322
    KW_WHILE     shift, and go to state 323
    KW_BREAK     shift, and go to state 324
    KW_ENDDEF    shift, and go to state 369
    KW_RETURN    shift, and go to state 325
    '#'          shift, and go to state 326

    general_variable            go to state 329
    comp_variable               go to state 330
    comp_function_call          go to state 160
    general_comp_function_call  go to state 331
    comp_command                go to state 370


State 333

  153 comp_command_list: comp_command •

    $default  reduce using rule 153 (comp_command_list)


State 334

   20 math_expression: IDENTIFIER '[' expression ']' '.' IDENTIFIER '[' expression • ']'

    ']'  shift, and go to state 371


State 335

   42 identifier_single: • IDENTIFIER
   43                  | • IDENTIFIER '[' POSINT ']'
   44                  | • IDENTIFIER '[' ']'
   45 identifier_list: • identifier_single ',' identifier_single
   46                | • identifier_single ',' identifier_list
   47                | • identifier_single
   48 constant_decl: • KW_CONST IDENTIFIER '=' expression ':' basic_data_type ';'
   49              | • KW_CONST IDENTIFIER '[' expression ']' '=' expression ':' basic_data_type ';'
   50              | • KW_CONST IDENTIFIER '[' ']' '=' expression ':' basic_data_type ';'
   51 local_var_const_decl_list: • constant_decl local_var_const_decl_list
   52                          | • variable_decl local_var_const_decl_list
   53                          | • local_var_const_decl
   54                          | ε •  [IDENTIFIER, KW_IF, KW_CONTINUE, KW_FOR, KW_WHILE, KW_BREAK, KW_RETURN]
   55 local_var_const_decl: • variable_decl
   56                     | • constant_decl
   57                     | • variable_decl constant_decl
   58                     | • constant_decl variable_decl
   59 variable_decl: • identifier_list ':' basic_data_type ';'
   60              | • parameter_declaration ';'
   61 parameter_declaration: • IDENTIFIER ':' basic_data_type
   62                      | • IDENTIFIER '[' ']' ':' basic_data_type
   66 general_function_call: • function_call
   67                      | • IDENTIFIER '.' function_call
   68                      | • IDENTIFIER '[' expression ']' '.' function_call
   69 function_call: • IDENTIFIER '(' ')'
   70              | • IDENTIFIER '(' expr_comma_list ')'
   80 general_variable: • IDENTIFIER
   81                 | • IDENTIFIER '.' '#' IDENTIFIER
   82                 | • IDENTIFIER '[' expression ']'
   83                 | • IDENTIFIER '.' '#' IDENTIFIER '[' expression ']'
   84 function_command_list: • function_command
   85                      | • function_command_list function_command
   86 function_command: • general_variable assignment_operator expression ';'
   87                 | • KW_IF '(' expression ')' ':' function_command_list KW_ENDIF ';'
   88                 | • KW_IF '(' expression ')' ':' function_command_list KW_ELSE ':' function_command_list KW_ENDIF ';'
   89                 | • KW_FOR general_variable KW_IN '[' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';'
   90                 | • KW_FOR general_variable KW_IN '[' expression ':' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';'
   91                 | • general_variable OP_ASSIGN '[' expression KW_FOR general_variable ':' POSINT ']' ':' basic_data_type ';'
   92                 | • KW_WHILE '(' expression ')' ':' function_command_list KW_ENDWHILE ';'
   93                 | • KW_BREAK ';'
   94                 | • KW_CONTINUE ';'
   95                 | • KW_RETURN ';'
   96                 | • KW_RETURN expression ';'
   97                 | • general_function_call ';'
  103 function_definition: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' • local_var_const_decl_list function_command_list KW_RETURN expression ';' KW_ENDDEF ';'
  104                    | KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' • local_var_const_decl function_command_list KW_RETURN expression ';' KW_ENDDEF ';'
  105                    | KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' • function_command_list KW_RETURN expression ';' KW_ENDDEF ';'

    IDENTIFIER   shift, and go to state 215
    KW_IF        shift, and go to state 216
    KW_CONTINUE  shift, and go to state 217
    KW_FOR       shift, and go to state 218
    KW_WHILE     shift, and go to state 219
    KW_BREAK     shift, and go to state 220
    KW_CONST     shift, and go to state 6
    KW_RETURN    shift, and go to state 221

    IDENTIFIER   [reduce using rule 54 (local_var_const_decl_list)]
    KW_IF        [reduce using rule 54 (local_var_const_decl_list)]
    KW_CONTINUE  [reduce using rule 54 (local_var_const_decl_list)]
    KW_FOR       [reduce using rule 54 (local_var_const_decl_list)]
    KW_WHILE     [reduce using rule 54 (local_var_const_decl_list)]
    KW_BREAK     [reduce using rule 54 (local_var_const_decl_list)]
    KW_RETURN    [reduce using rule 54 (local_var_const_decl_list)]

    identifier_single          go to state 7
    identifier_list            go to state 8
    constant_decl              go to state 9
    local_var_const_decl_list  go to state 372
    local_var_const_decl       go to state 373
    variable_decl              go to state 12
    parameter_declaration      go to state 13
    general_function_call      go to state 224
    function_call              go to state 70
    general_variable           go to state 225
    function_command_list      go to state 374
    function_command           go to state 227

    shift/reduce conflict on token IDENTIFIER:
       54 local_var_const_decl_list: ε •
       42 identifier_single: • IDENTIFIER
      First example: comp_definition_list local_var_const_decl_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' • IDENTIFIER ',' identifier_single ':' basic_data_type ';' local_var_const_decl_list function_command_list KW_RETURN expression ';' KW_ENDDEF ';' function_definition main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                     $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list                                                                                                                                                                                                                                                                    main_unit
                                                                 ↳ 99: function_definition                                                                                                                                                                                                                                               function_definition
                                                                       ↳ 103: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl_list                                                                                    function_command_list KW_RETURN expression ';' KW_ENDDEF ';'
                                                                                                                                                               ↳ 52: variable_decl                                                                local_var_const_decl_list
                                                                                                                                                                     ↳ 59: identifier_list                                ':' basic_data_type ';'
                                                                                                                                                                           ↳ 45: identifier_single  ',' identifier_single
                                                                                                                                                                                 ↳ 42: • IDENTIFIER
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' • IDENTIFIER assignment_operator expression ';' KW_RETURN expression ';' KW_ENDDEF ';' main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                 $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list                                                                                                                                                                                                                                main_unit
                                                                 ↳ 99: function_definition_list function_definition
                                                                                                ↳ 103: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl_list function_command_list                                           KW_RETURN expression ';' KW_ENDDEF ';'
                                                                                                                                                                                        ↳ 54: ε •                 ↳ 84: function_command
                                                                                                                                                                                                                        ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                                                                                              ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       54 local_var_const_decl_list: ε •
       43 identifier_single: • IDENTIFIER '[' POSINT ']'
      First example: comp_definition_list local_var_const_decl_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' • IDENTIFIER '[' POSINT ']' ',' identifier_single ':' basic_data_type ';' local_var_const_decl_list function_command_list KW_RETURN expression ';' KW_ENDDEF ';' function_definition main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                    $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list                                                                                                                                                                                                                                                                                   main_unit
                                                                 ↳ 99: function_definition                                                                                                                                                                                                                                                              function_definition
                                                                       ↳ 103: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl_list                                                                                                   function_command_list KW_RETURN expression ';' KW_ENDDEF ';'
                                                                                                                                                               ↳ 52: variable_decl                                                                               local_var_const_decl_list
                                                                                                                                                                     ↳ 59: identifier_list                                               ':' basic_data_type ';'
                                                                                                                                                                           ↳ 45: identifier_single                 ',' identifier_single
                                                                                                                                                                                 ↳ 43: • IDENTIFIER '[' POSINT ']'
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' • IDENTIFIER assignment_operator expression ';' KW_RETURN expression ';' KW_ENDDEF ';' main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                 $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list                                                                                                                                                                                                                                main_unit
                                                                 ↳ 99: function_definition_list function_definition
                                                                                                ↳ 103: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl_list function_command_list                                           KW_RETURN expression ';' KW_ENDDEF ';'
                                                                                                                                                                                        ↳ 54: ε •                 ↳ 84: function_command
                                                                                                                                                                                                                        ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                                                                                              ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       54 local_var_const_decl_list: ε •
       44 identifier_single: • IDENTIFIER '[' ']'
      First example: comp_definition_list local_var_const_decl_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' • IDENTIFIER '[' ']' ',' identifier_single ':' basic_data_type ';' local_var_const_decl_list function_command_list KW_RETURN expression ';' KW_ENDDEF ';' function_definition main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                             $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list                                                                                                                                                                                                                                                                            main_unit
                                                                 ↳ 99: function_definition                                                                                                                                                                                                                                                       function_definition
                                                                       ↳ 103: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl_list                                                                                            function_command_list KW_RETURN expression ';' KW_ENDDEF ';'
                                                                                                                                                               ↳ 52: variable_decl                                                                        local_var_const_decl_list
                                                                                                                                                                     ↳ 59: identifier_list                                        ':' basic_data_type ';'
                                                                                                                                                                           ↳ 45: identifier_single          ',' identifier_single
                                                                                                                                                                                 ↳ 44: • IDENTIFIER '[' ']'
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' • IDENTIFIER assignment_operator expression ';' KW_RETURN expression ';' KW_ENDDEF ';' main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                 $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list                                                                                                                                                                                                                                main_unit
                                                                 ↳ 99: function_definition_list function_definition
                                                                                                ↳ 103: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl_list function_command_list                                           KW_RETURN expression ';' KW_ENDDEF ';'
                                                                                                                                                                                        ↳ 54: ε •                 ↳ 84: function_command
                                                                                                                                                                                                                        ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                                                                                              ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       54 local_var_const_decl_list: ε •
       61 parameter_declaration: • IDENTIFIER ':' basic_data_type
      First example: comp_definition_list local_var_const_decl_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' • IDENTIFIER ':' basic_data_type ';' local_var_const_decl_list function_command_list KW_RETURN expression ';' KW_ENDDEF ';' function_definition main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                         $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list                                                                                                                                                                                                                                        main_unit
                                                                 ↳ 99: function_definition                                                                                                                                                                                                                   function_definition
                                                                       ↳ 103: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl_list                                                        function_command_list KW_RETURN expression ';' KW_ENDDEF ';'
                                                                                                                                                               ↳ 52: variable_decl                                    local_var_const_decl_list
                                                                                                                                                                     ↳ 60: parameter_declaration                  ';'
                                                                                                                                                                           ↳ 61: • IDENTIFIER ':' basic_data_type
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' • IDENTIFIER assignment_operator expression ';' KW_RETURN expression ';' KW_ENDDEF ';' main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                 $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list                                                                                                                                                                                                                                main_unit
                                                                 ↳ 99: function_definition_list function_definition
                                                                                                ↳ 103: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl_list function_command_list                                           KW_RETURN expression ';' KW_ENDDEF ';'
                                                                                                                                                                                        ↳ 54: ε •                 ↳ 84: function_command
                                                                                                                                                                                                                        ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                                                                                              ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       54 local_var_const_decl_list: ε •
       62 parameter_declaration: • IDENTIFIER '[' ']' ':' basic_data_type
      First example: comp_definition_list local_var_const_decl_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' • IDENTIFIER '[' ']' ':' basic_data_type ';' local_var_const_decl_list function_command_list KW_RETURN expression ';' KW_ENDDEF ';' function_definition main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                 $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list                                                                                                                                                                                                                                                main_unit
                                                                 ↳ 99: function_definition                                                                                                                                                                                                                           function_definition
                                                                       ↳ 103: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl_list                                                                function_command_list KW_RETURN expression ';' KW_ENDDEF ';'
                                                                                                                                                               ↳ 52: variable_decl                                            local_var_const_decl_list
                                                                                                                                                                     ↳ 60: parameter_declaration                          ';'
                                                                                                                                                                           ↳ 62: • IDENTIFIER '[' ']' ':' basic_data_type
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' • IDENTIFIER assignment_operator expression ';' KW_RETURN expression ';' KW_ENDDEF ';' main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                 $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list                                                                                                                                                                                                                                main_unit
                                                                 ↳ 99: function_definition_list function_definition
                                                                                                ↳ 103: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl_list function_command_list                                           KW_RETURN expression ';' KW_ENDDEF ';'
                                                                                                                                                                                        ↳ 54: ε •                 ↳ 84: function_command
                                                                                                                                                                                                                        ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                                                                                              ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       54 local_var_const_decl_list: ε •
       67 general_function_call: • IDENTIFIER '.' function_call
      First example: comp_definition_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' • IDENTIFIER '.' function_call ';' KW_RETURN expression ';' KW_ENDDEF ';' function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                           $end
             ↳ 1: comp_definition_list function_definition_list                                                                                                                                                                                           function_definition_list main_unit
                                       ↳ 99: function_definition_list function_definition
                                                                      ↳ 105: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' function_command_list                                KW_RETURN expression ';' KW_ENDDEF ';'
                                                                                                                                                              ↳ 84: function_command
                                                                                                                                                                    ↳ 97: general_function_call                ';'
                                                                                                                                                                          ↳ 67: • IDENTIFIER '.' function_call
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' • IDENTIFIER assignment_operator expression ';' KW_RETURN expression ';' KW_ENDDEF ';' main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                 $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list                                                                                                                                                                                                                                main_unit
                                                                 ↳ 99: function_definition_list function_definition
                                                                                                ↳ 103: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl_list function_command_list                                           KW_RETURN expression ';' KW_ENDDEF ';'
                                                                                                                                                                                        ↳ 54: ε •                 ↳ 84: function_command
                                                                                                                                                                                                                        ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                                                                                              ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       54 local_var_const_decl_list: ε •
       68 general_function_call: • IDENTIFIER '[' expression ']' '.' function_call
      First example: comp_definition_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' • IDENTIFIER '[' expression ']' '.' function_call ';' KW_RETURN expression ';' KW_ENDDEF ';' function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                              $end
             ↳ 1: comp_definition_list function_definition_list                                                                                                                                                                                                              function_definition_list main_unit
                                       ↳ 99: function_definition_list function_definition
                                                                      ↳ 105: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' function_command_list                                                   KW_RETURN expression ';' KW_ENDDEF ';'
                                                                                                                                                              ↳ 84: function_command
                                                                                                                                                                    ↳ 97: general_function_call                                   ';'
                                                                                                                                                                          ↳ 68: • IDENTIFIER '[' expression ']' '.' function_call
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' • IDENTIFIER assignment_operator expression ';' KW_RETURN expression ';' KW_ENDDEF ';' main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                 $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list                                                                                                                                                                                                                                main_unit
                                                                 ↳ 99: function_definition_list function_definition
                                                                                                ↳ 103: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl_list function_command_list                                           KW_RETURN expression ';' KW_ENDDEF ';'
                                                                                                                                                                                        ↳ 54: ε •                 ↳ 84: function_command
                                                                                                                                                                                                                        ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                                                                                              ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       54 local_var_const_decl_list: ε •
       69 function_call: • IDENTIFIER '(' ')'
      First example: comp_definition_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' • IDENTIFIER '(' ')' ';' KW_RETURN expression ';' KW_ENDDEF ';' function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                       $end
             ↳ 1: comp_definition_list function_definition_list                                                                                                                                                                                       function_definition_list main_unit
                                       ↳ 99: function_definition_list function_definition
                                                                      ↳ 105: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' function_command_list                            KW_RETURN expression ';' KW_ENDDEF ';'
                                                                                                                                                              ↳ 84: function_command
                                                                                                                                                                    ↳ 97: general_function_call            ';'
                                                                                                                                                                          ↳ 66: function_call
                                                                                                                                                                                ↳ 69: • IDENTIFIER '(' ')'
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' • IDENTIFIER assignment_operator expression ';' KW_RETURN expression ';' KW_ENDDEF ';' main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                 $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list                                                                                                                                                                                                                                main_unit
                                                                 ↳ 99: function_definition_list function_definition
                                                                                                ↳ 103: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl_list function_command_list                                           KW_RETURN expression ';' KW_ENDDEF ';'
                                                                                                                                                                                        ↳ 54: ε •                 ↳ 84: function_command
                                                                                                                                                                                                                        ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                                                                                              ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       54 local_var_const_decl_list: ε •
       70 function_call: • IDENTIFIER '(' expr_comma_list ')'
      First example: comp_definition_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' • IDENTIFIER '(' expr_comma_list ')' ';' KW_RETURN expression ';' KW_ENDDEF ';' function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                       $end
             ↳ 1: comp_definition_list function_definition_list                                                                                                                                                                                                       function_definition_list main_unit
                                       ↳ 99: function_definition_list function_definition
                                                                      ↳ 105: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' function_command_list                                            KW_RETURN expression ';' KW_ENDDEF ';'
                                                                                                                                                              ↳ 84: function_command
                                                                                                                                                                    ↳ 97: general_function_call                            ';'
                                                                                                                                                                          ↳ 66: function_call
                                                                                                                                                                                ↳ 70: • IDENTIFIER '(' expr_comma_list ')'
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' • IDENTIFIER assignment_operator expression ';' KW_RETURN expression ';' KW_ENDDEF ';' main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                 $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list                                                                                                                                                                                                                                main_unit
                                                                 ↳ 99: function_definition_list function_definition
                                                                                                ↳ 103: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl_list function_command_list                                           KW_RETURN expression ';' KW_ENDDEF ';'
                                                                                                                                                                                        ↳ 54: ε •                 ↳ 84: function_command
                                                                                                                                                                                                                        ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                                                                                              ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       54 local_var_const_decl_list: ε •
       80 general_variable: • IDENTIFIER
      First example: comp_definition_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' • IDENTIFIER assignment_operator expression ';' KW_RETURN expression ';' KW_ENDDEF ';' function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                        $end
             ↳ 1: comp_definition_list function_definition_list                                                                                                                                                                                                        function_definition_list main_unit
                                       ↳ 99: function_definition_list function_definition
                                                                      ↳ 105: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' function_command_list                                             KW_RETURN expression ';' KW_ENDDEF ';'
                                                                                                                                                              ↳ 84: function_command
                                                                                                                                                                    ↳ 86: general_variable   assignment_operator expression ';'
                                                                                                                                                                          ↳ 80: • IDENTIFIER
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' • IDENTIFIER assignment_operator expression ';' KW_RETURN expression ';' KW_ENDDEF ';' main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                 $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list                                                                                                                                                                                                                                main_unit
                                                                 ↳ 99: function_definition_list function_definition
                                                                                                ↳ 103: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl_list function_command_list                                           KW_RETURN expression ';' KW_ENDDEF ';'
                                                                                                                                                                                        ↳ 54: ε •                 ↳ 84: function_command
                                                                                                                                                                                                                        ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                                                                                              ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       54 local_var_const_decl_list: ε •
       81 general_variable: • IDENTIFIER '.' '#' IDENTIFIER
      First example: comp_definition_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' • IDENTIFIER '.' '#' IDENTIFIER assignment_operator expression ';' KW_RETURN expression ';' KW_ENDDEF ';' function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                           $end
             ↳ 1: comp_definition_list function_definition_list                                                                                                                                                                                                                           function_definition_list main_unit
                                       ↳ 99: function_definition_list function_definition
                                                                      ↳ 105: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' function_command_list                                                                KW_RETURN expression ';' KW_ENDDEF ';'
                                                                                                                                                              ↳ 84: function_command
                                                                                                                                                                    ↳ 86: general_variable                      assignment_operator expression ';'
                                                                                                                                                                          ↳ 81: • IDENTIFIER '.' '#' IDENTIFIER
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' • IDENTIFIER assignment_operator expression ';' KW_RETURN expression ';' KW_ENDDEF ';' main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                 $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list                                                                                                                                                                                                                                main_unit
                                                                 ↳ 99: function_definition_list function_definition
                                                                                                ↳ 103: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl_list function_command_list                                           KW_RETURN expression ';' KW_ENDDEF ';'
                                                                                                                                                                                        ↳ 54: ε •                 ↳ 84: function_command
                                                                                                                                                                                                                        ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                                                                                              ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       54 local_var_const_decl_list: ε •
       82 general_variable: • IDENTIFIER '[' expression ']'
      First example: comp_definition_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' • IDENTIFIER '[' expression ']' assignment_operator expression ';' KW_RETURN expression ';' KW_ENDDEF ';' function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                           $end
             ↳ 1: comp_definition_list function_definition_list                                                                                                                                                                                                                           function_definition_list main_unit
                                       ↳ 99: function_definition_list function_definition
                                                                      ↳ 105: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' function_command_list                                                                KW_RETURN expression ';' KW_ENDDEF ';'
                                                                                                                                                              ↳ 84: function_command
                                                                                                                                                                    ↳ 86: general_variable                      assignment_operator expression ';'
                                                                                                                                                                          ↳ 82: • IDENTIFIER '[' expression ']'
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' • IDENTIFIER assignment_operator expression ';' KW_RETURN expression ';' KW_ENDDEF ';' main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                 $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list                                                                                                                                                                                                                                main_unit
                                                                 ↳ 99: function_definition_list function_definition
                                                                                                ↳ 103: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl_list function_command_list                                           KW_RETURN expression ';' KW_ENDDEF ';'
                                                                                                                                                                                        ↳ 54: ε •                 ↳ 84: function_command
                                                                                                                                                                                                                        ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                                                                                              ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       54 local_var_const_decl_list: ε •
       83 general_variable: • IDENTIFIER '.' '#' IDENTIFIER '[' expression ']'
      First example: comp_definition_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' • IDENTIFIER '.' '#' IDENTIFIER '[' expression ']' assignment_operator expression ';' KW_RETURN expression ';' KW_ENDDEF ';' function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                              $end
             ↳ 1: comp_definition_list function_definition_list                                                                                                                                                                                                                                              function_definition_list main_unit
                                       ↳ 99: function_definition_list function_definition
                                                                      ↳ 105: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' function_command_list                                                                                   KW_RETURN expression ';' KW_ENDDEF ';'
                                                                                                                                                              ↳ 84: function_command
                                                                                                                                                                    ↳ 86: general_variable                                         assignment_operator expression ';'
                                                                                                                                                                          ↳ 83: • IDENTIFIER '.' '#' IDENTIFIER '[' expression ']'
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' • IDENTIFIER assignment_operator expression ';' KW_RETURN expression ';' KW_ENDDEF ';' main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                 $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list                                                                                                                                                                                                                                main_unit
                                                                 ↳ 99: function_definition_list function_definition
                                                                                                ↳ 103: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl_list function_command_list                                           KW_RETURN expression ';' KW_ENDDEF ';'
                                                                                                                                                                                        ↳ 54: ε •                 ↳ 84: function_command
                                                                                                                                                                                                                        ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                                                                                              ↳ 80: IDENTIFIER

    shift/reduce conflict on token KW_IF:
       54 local_var_const_decl_list: ε •
       87 function_command: • KW_IF '(' expression ')' ':' function_command_list KW_ENDIF ';'
      First example: comp_definition_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' • KW_IF '(' expression ')' ':' function_command_list KW_ENDIF ';' KW_RETURN expression ';' KW_ENDDEF ';' function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                    $end
             ↳ 1: comp_definition_list function_definition_list                                                                                                                                                                                                                    function_definition_list main_unit
                                       ↳ 99: function_definition_list function_definition
                                                                      ↳ 105: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' function_command_list                                                         KW_RETURN expression ';' KW_ENDDEF ';'
                                                                                                                                                              ↳ 84: function_command
                                                                                                                                                                    ↳ 87: • KW_IF '(' expression ')' ':' function_command_list KW_ENDIF ';'
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' • KW_IF '(' expression ')' ':' function_command_list KW_ENDIF ';' KW_RETURN expression ';' KW_ENDDEF ';' main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                             $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list                                                                                                                                                                                                                                            main_unit
                                                                 ↳ 99: function_definition_list function_definition
                                                                                                ↳ 103: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl_list function_command_list                                                       KW_RETURN expression ';' KW_ENDDEF ';'
                                                                                                                                                                                        ↳ 54: ε •                 ↳ 84: function_command
                                                                                                                                                                                                                        ↳ 87: KW_IF '(' expression ')' ':' function_command_list KW_ENDIF ';'

    shift/reduce conflict on token KW_IF:
       54 local_var_const_decl_list: ε •
       88 function_command: • KW_IF '(' expression ')' ':' function_command_list KW_ELSE ':' function_command_list KW_ENDIF ';'
      First example: comp_definition_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' • KW_IF '(' expression ')' ':' function_command_list KW_ELSE ':' function_command_list KW_ENDIF ';' KW_RETURN expression ';' KW_ENDDEF ';' function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                      $end
             ↳ 1: comp_definition_list function_definition_list                                                                                                                                                                                                                                                      function_definition_list main_unit
                                       ↳ 99: function_definition_list function_definition
                                                                      ↳ 105: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' function_command_list                                                                                           KW_RETURN expression ';' KW_ENDDEF ';'
                                                                                                                                                              ↳ 84: function_command
                                                                                                                                                                    ↳ 88: • KW_IF '(' expression ')' ':' function_command_list KW_ELSE ':' function_command_list KW_ENDIF ';'
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' • KW_IF '(' expression ')' ':' function_command_list KW_ENDIF ';' KW_RETURN expression ';' KW_ENDDEF ';' main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                             $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list                                                                                                                                                                                                                                            main_unit
                                                                 ↳ 99: function_definition_list function_definition
                                                                                                ↳ 103: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl_list function_command_list                                                       KW_RETURN expression ';' KW_ENDDEF ';'
                                                                                                                                                                                        ↳ 54: ε •                 ↳ 84: function_command
                                                                                                                                                                                                                        ↳ 87: KW_IF '(' expression ')' ':' function_command_list KW_ENDIF ';'

    shift/reduce conflict on token KW_FOR:
       54 local_var_const_decl_list: ε •
       89 function_command: • KW_FOR general_variable KW_IN '[' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';'
      First example: comp_definition_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' • KW_FOR general_variable KW_IN '[' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';' KW_RETURN expression ';' KW_ENDDEF ';' function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                            $end
             ↳ 1: comp_definition_list function_definition_list                                                                                                                                                                                                                                                            function_definition_list main_unit
                                       ↳ 99: function_definition_list function_definition
                                                                      ↳ 105: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' function_command_list                                                                                                 KW_RETURN expression ';' KW_ENDDEF ';'
                                                                                                                                                              ↳ 84: function_command
                                                                                                                                                                    ↳ 89: • KW_FOR general_variable KW_IN '[' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';'
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' • KW_FOR general_variable KW_IN '[' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';' KW_RETURN expression ';' KW_ENDDEF ';' main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                     $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list                                                                                                                                                                                                                                                                                    main_unit
                                                                 ↳ 99: function_definition_list function_definition
                                                                                                ↳ 103: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl_list function_command_list                                                                                               KW_RETURN expression ';' KW_ENDDEF ';'
                                                                                                                                                                                        ↳ 54: ε •                 ↳ 84: function_command
                                                                                                                                                                                                                        ↳ 89: KW_FOR general_variable KW_IN '[' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';'

    shift/reduce conflict on token KW_FOR:
       54 local_var_const_decl_list: ε •
       90 function_command: • KW_FOR general_variable KW_IN '[' expression ':' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';'
      First example: comp_definition_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' • KW_FOR general_variable KW_IN '[' expression ':' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';' KW_RETURN expression ';' KW_ENDDEF ';' function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                           $end
             ↳ 1: comp_definition_list function_definition_list                                                                                                                                                                                                                                                                           function_definition_list main_unit
                                       ↳ 99: function_definition_list function_definition
                                                                      ↳ 105: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' function_command_list                                                                                                                KW_RETURN expression ';' KW_ENDDEF ';'
                                                                                                                                                              ↳ 84: function_command
                                                                                                                                                                    ↳ 90: • KW_FOR general_variable KW_IN '[' expression ':' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';'
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' • KW_FOR general_variable KW_IN '[' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';' KW_RETURN expression ';' KW_ENDDEF ';' main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                     $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list                                                                                                                                                                                                                                                                                    main_unit
                                                                 ↳ 99: function_definition_list function_definition
                                                                                                ↳ 103: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl_list function_command_list                                                                                               KW_RETURN expression ';' KW_ENDDEF ';'
                                                                                                                                                                                        ↳ 54: ε •                 ↳ 84: function_command
                                                                                                                                                                                                                        ↳ 89: KW_FOR general_variable KW_IN '[' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';'

    shift/reduce conflict on token KW_WHILE:
       54 local_var_const_decl_list: ε •
       92 function_command: • KW_WHILE '(' expression ')' ':' function_command_list KW_ENDWHILE ';'
      First example: comp_definition_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' • KW_WHILE '(' expression ')' ':' function_command_list KW_ENDWHILE ';' KW_RETURN expression ';' KW_ENDDEF ';' function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                          $end
             ↳ 1: comp_definition_list function_definition_list                                                                                                                                                                                                                          function_definition_list main_unit
                                       ↳ 99: function_definition_list function_definition
                                                                      ↳ 105: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' function_command_list                                                               KW_RETURN expression ';' KW_ENDDEF ';'
                                                                                                                                                              ↳ 84: function_command
                                                                                                                                                                    ↳ 92: • KW_WHILE '(' expression ')' ':' function_command_list KW_ENDWHILE ';'
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' • KW_WHILE '(' expression ')' ':' function_command_list KW_ENDWHILE ';' KW_RETURN expression ';' KW_ENDDEF ';' main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                   $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list                                                                                                                                                                                                                                                  main_unit
                                                                 ↳ 99: function_definition_list function_definition
                                                                                                ↳ 103: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl_list function_command_list                                                             KW_RETURN expression ';' KW_ENDDEF ';'
                                                                                                                                                                                        ↳ 54: ε •                 ↳ 84: function_command
                                                                                                                                                                                                                        ↳ 92: KW_WHILE '(' expression ')' ':' function_command_list KW_ENDWHILE ';'

    shift/reduce conflict on token KW_BREAK:
       54 local_var_const_decl_list: ε •
       93 function_command: • KW_BREAK ';'
      First example: comp_definition_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' • KW_BREAK ';' KW_RETURN expression ';' KW_ENDDEF ';' function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                 $end
             ↳ 1: comp_definition_list function_definition_list                                                                                                                                                                 function_definition_list main_unit
                                       ↳ 99: function_definition_list function_definition
                                                                      ↳ 105: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' function_command_list      KW_RETURN expression ';' KW_ENDDEF ';'
                                                                                                                                                              ↳ 84: function_command
                                                                                                                                                                    ↳ 93: • KW_BREAK ';'
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' • KW_BREAK ';' KW_RETURN expression ';' KW_ENDDEF ';' main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                          $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list                                                                                                                                                                                         main_unit
                                                                 ↳ 99: function_definition_list function_definition
                                                                                                ↳ 103: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl_list function_command_list    KW_RETURN expression ';' KW_ENDDEF ';'
                                                                                                                                                                                        ↳ 54: ε •                 ↳ 84: function_command
                                                                                                                                                                                                                        ↳ 93: KW_BREAK ';'

    shift/reduce conflict on token KW_CONTINUE:
       54 local_var_const_decl_list: ε •
       94 function_command: • KW_CONTINUE ';'
      First example: comp_definition_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' • KW_CONTINUE ';' KW_RETURN expression ';' KW_ENDDEF ';' function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                    $end
             ↳ 1: comp_definition_list function_definition_list                                                                                                                                                                    function_definition_list main_unit
                                       ↳ 99: function_definition_list function_definition
                                                                      ↳ 105: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' function_command_list         KW_RETURN expression ';' KW_ENDDEF ';'
                                                                                                                                                              ↳ 84: function_command
                                                                                                                                                                    ↳ 94: • KW_CONTINUE ';'
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' • KW_CONTINUE ';' KW_RETURN expression ';' KW_ENDDEF ';' main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                             $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list                                                                                                                                                                                            main_unit
                                                                 ↳ 99: function_definition_list function_definition
                                                                                                ↳ 103: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl_list function_command_list       KW_RETURN expression ';' KW_ENDDEF ';'
                                                                                                                                                                                        ↳ 54: ε •                 ↳ 84: function_command
                                                                                                                                                                                                                        ↳ 94: KW_CONTINUE ';'

    shift/reduce conflict on token KW_RETURN:
       54 local_var_const_decl_list: ε •
       95 function_command: • KW_RETURN ';'
      First example: comp_definition_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' • KW_RETURN ';' KW_RETURN expression ';' KW_ENDDEF ';' function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                  $end
             ↳ 1: comp_definition_list function_definition_list                                                                                                                                                                  function_definition_list main_unit
                                       ↳ 99: function_definition_list function_definition
                                                                      ↳ 105: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' function_command_list       KW_RETURN expression ';' KW_ENDDEF ';'
                                                                                                                                                              ↳ 84: function_command
                                                                                                                                                                    ↳ 95: • KW_RETURN ';'
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' • KW_RETURN ';' KW_RETURN expression ';' KW_ENDDEF ';' main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                           $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list                                                                                                                                                                                          main_unit
                                                                 ↳ 99: function_definition_list function_definition
                                                                                                ↳ 103: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl_list function_command_list     KW_RETURN expression ';' KW_ENDDEF ';'
                                                                                                                                                                                        ↳ 54: ε •                 ↳ 84: function_command
                                                                                                                                                                                                                        ↳ 95: KW_RETURN ';'

    shift/reduce conflict on token KW_RETURN:
       54 local_var_const_decl_list: ε •
       96 function_command: • KW_RETURN expression ';'
      First example: comp_definition_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' • KW_RETURN expression ';' KW_RETURN expression ';' KW_ENDDEF ';' function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                             $end
             ↳ 1: comp_definition_list function_definition_list                                                                                                                                                                             function_definition_list main_unit
                                       ↳ 99: function_definition_list function_definition
                                                                      ↳ 105: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' function_command_list                  KW_RETURN expression ';' KW_ENDDEF ';'
                                                                                                                                                              ↳ 84: function_command
                                                                                                                                                                    ↳ 96: • KW_RETURN expression ';'
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' • KW_RETURN ';' KW_RETURN expression ';' KW_ENDDEF ';' main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                           $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list                                                                                                                                                                                          main_unit
                                                                 ↳ 99: function_definition_list function_definition
                                                                                                ↳ 103: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl_list function_command_list     KW_RETURN expression ';' KW_ENDDEF ';'
                                                                                                                                                                                        ↳ 54: ε •                 ↳ 84: function_command
                                                                                                                                                                                                                        ↳ 95: KW_RETURN ';'



State 336

  100 function_definition: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl_list function_command_list KW_ENDDEF • ';'

    ';'  shift, and go to state 375


State 337

  101 function_definition: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl function_command_list KW_ENDDEF • ';'

    ';'  shift, and go to state 376


State 338

  102 function_definition: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' function_command_list KW_ENDDEF ';' •

    $default  reduce using rule 102 (function_definition)


State 339

   68 general_function_call: IDENTIFIER '[' expression ']' • '.' function_call
   82 general_variable: IDENTIFIER '[' expression ']' •  [OP_ASSIGN, OP_ASSIGN_PLUSEQ, OP_ASSIGN_MULEQ, OP_ASSIGN_DIVEQ, OP_ASSIGN_MODEQ, OP_ASSIGN_MINUSEQ, '=']

    '.'  shift, and go to state 377

    $default  reduce using rule 82 (general_variable)


State 340

   81 general_variable: IDENTIFIER '.' '#' IDENTIFIER •  [KW_IN, OP_ASSIGN, OP_ASSIGN_PLUSEQ, OP_ASSIGN_MULEQ, OP_ASSIGN_DIVEQ, OP_ASSIGN_MODEQ, OP_ASSIGN_MINUSEQ, '.', '=', ':']
   83                 | IDENTIFIER '.' '#' IDENTIFIER • '[' expression ']'

    '['  shift, and go to state 378

    $default  reduce using rule 81 (general_variable)


State 341

   87 function_command: KW_IF '(' expression ')' • ':' function_command_list KW_ENDIF ';'
   88                 | KW_IF '(' expression ')' • ':' function_command_list KW_ELSE ':' function_command_list KW_ENDIF ';'

    ':'  shift, and go to state 379


State 342

   82 general_variable: IDENTIFIER '[' expression • ']'

    ']'  shift, and go to state 380


State 343

    2 primary_expression: • POSINT
    3                   | • SCALAR
    4                   | • IDENTIFIER
    5                   | • STRING
    6                   | • KW_TRUE
    7                   | • KW_FALSE
    8                   | • '(' logic_expression ')'
    9 math_expression: • primary_expression
   10                | • '+' math_expression
   11                | • '-' math_expression
   12                | • math_expression '+' math_expression
   13                | • math_expression '-' math_expression
   14                | • math_expression '*' math_expression
   15                | • math_expression '/' math_expression
   16                | • math_expression '%' math_expression
   17                | • math_expression OP_PAW math_expression
   18                | • IDENTIFIER '[' expression ']'
   19                | • IDENTIFIER '[' expression ']' '.' IDENTIFIER
   20                | • IDENTIFIER '[' expression ']' '.' IDENTIFIER '[' expression ']'
   21                | • general_function_call
   22                | • IDENTIFIER '.' IDENTIFIER '[' expression ']'
   23                | • IDENTIFIER '.' IDENTIFIER
   24 relational_expression: • math_expression
   25                      | • relational_expression OP_EQUALS relational_expression
   26                      | • relational_expression OP_NE relational_expression
   27                      | • relational_expression '>' relational_expression
   28                      | • relational_expression '<' relational_expression
   29                      | • relational_expression OP_LE relational_expression
   30                      | • relational_expression OP_GE relational_expression
   31 logic_expression: • relational_expression
   32                 | • OP_NOT logic_expression
   33                 | • logic_expression OP_AND logic_expression
   34                 | • logic_expression OP_OR logic_expression
   35 expression: • logic_expression
   66 general_function_call: • function_call
   67                      | • IDENTIFIER '.' function_call
   68                      | • IDENTIFIER '[' expression ']' '.' function_call
   69 function_call: • IDENTIFIER '(' ')'
   70              | • IDENTIFIER '(' expr_comma_list ')'
   89 function_command: KW_FOR general_variable KW_IN '[' • expression ':' expression ']' ':' function_command_list KW_ENDFOR ';'
   90                 | KW_FOR general_variable KW_IN '[' • expression ':' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';'

    IDENTIFIER  shift, and go to state 53
    POSINT      shift, and go to state 54
    SCALAR      shift, and go to state 55
    STRING      shift, and go to state 56
    OP_NOT      shift, and go to state 57
    KW_TRUE     shift, and go to state 58
    KW_FALSE    shift, and go to state 59
    '-'         shift, and go to state 60
    '+'         shift, and go to state 61
    '('         shift, and go to state 62

    primary_expression     go to state 64
    math_expression        go to state 65
    relational_expression  go to state 66
    logic_expression       go to state 67
    expression             go to state 381
    general_function_call  go to state 69
    function_call          go to state 70


State 344

   92 function_command: KW_WHILE '(' expression ')' • ':' function_command_list KW_ENDWHILE ';'

    ':'  shift, and go to state 382


State 345

  189 main_unit: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl_list function_command_list KW_ENDDEF ';' •

    $default  reduce using rule 189 (main_unit)


State 346

  190 main_unit: KW_DEF KW_MAIN '(' ')' ':' local_var_const_decl function_command_list KW_ENDDEF ';' •

    $default  reduce using rule 190 (main_unit)


State 347

   91 function_command: general_variable OP_ASSIGN '[' expression • KW_FOR general_variable ':' POSINT ']' ':' basic_data_type ';'

    KW_FOR  shift, and go to state 383


State 348

   86 function_command: general_variable assignment_operator expression ';' •

    $default  reduce using rule 86 (function_command)


State 349

  111 comp_function_call: • IDENTIFIER '(' ')'
  112                   | • IDENTIFIER '(' comp_expr_comma_list ')'
  115 general_comp_function_call: '#' IDENTIFIER '[' comp_expression ']' '.' • comp_function_call
  136 comp_math_expression: '#' IDENTIFIER '[' comp_expression ']' '.' • '#' IDENTIFIER
  137                     | '#' IDENTIFIER '[' comp_expression ']' '.' • '#' IDENTIFIER '[' comp_expression ']'

    IDENTIFIER  shift, and go to state 287
    '#'         shift, and go to state 384

    comp_function_call  go to state 385


State 350

  111 comp_function_call: • IDENTIFIER '(' ')'
  112                   | • IDENTIFIER '(' comp_expr_comma_list ')'
  113 general_comp_function_call: • comp_function_call
  114                           | • '#' IDENTIFIER '.' comp_function_call
  115                           | • '#' IDENTIFIER '[' comp_expression ']' '.' comp_function_call
  118 comp_primary_expression: • POSINT
  119                        | • SCALAR
  120                        | • '#' IDENTIFIER
  121                        | • IDENTIFIER
  122                        | • STRING
  123                        | • KW_TRUE
  124                        | • KW_FALSE
  125                        | • '(' logic_expression ')'
  126 comp_math_expression: • comp_primary_expression
  127                     | • '+' comp_math_expression
  128                     | • '-' comp_math_expression
  129                     | • comp_math_expression '+' comp_math_expression
  130                     | • comp_math_expression '-' comp_math_expression
  131                     | • comp_math_expression '*' comp_math_expression
  132                     | • comp_math_expression '/' comp_math_expression
  133                     | • comp_math_expression '%' comp_math_expression
  134                     | • comp_math_expression OP_PAW comp_math_expression
  135                     | • '#' IDENTIFIER '[' comp_expression ']'
  136                     | • '#' IDENTIFIER '[' comp_expression ']' '.' '#' IDENTIFIER
  137                     | • '#' IDENTIFIER '[' comp_expression ']' '.' '#' IDENTIFIER '[' comp_expression ']'
  138                     | • general_comp_function_call
  139                     | • '#' IDENTIFIER '.' '#' IDENTIFIER '[' comp_expression ']'
  139                     | '#' IDENTIFIER '.' '#' IDENTIFIER '[' • comp_expression ']'
  140                     | • '#' IDENTIFIER '.' '#' IDENTIFIER
  141 comp_relational_expression: • comp_math_expression
  142                           | • comp_relational_expression OP_EQUALS comp_relational_expression
  143                           | • comp_relational_expression OP_NE comp_relational_expression
  144                           | • comp_relational_expression '>' comp_relational_expression
  145                           | • comp_relational_expression '<' comp_relational_expression
  146                           | • comp_relational_expression OP_LE comp_relational_expression
  147                           | • comp_relational_expression OP_GE comp_relational_expression
  148 comp_logic_expression: • comp_relational_expression
  149                      | • OP_NOT comp_logic_expression
  150                      | • comp_logic_expression OP_AND comp_logic_expression
  151                      | • comp_logic_expression OP_OR comp_logic_expression
  152 comp_expression: • comp_logic_expression

    IDENTIFIER  shift, and go to state 148
    POSINT      shift, and go to state 149
    SCALAR      shift, and go to state 150
    STRING      shift, and go to state 151
    OP_NOT      shift, and go to state 152
    KW_TRUE     shift, and go to state 153
    KW_FALSE    shift, and go to state 154
    '-'         shift, and go to state 155
    '+'         shift, and go to state 156
    '#'         shift, and go to state 157
    '('         shift, and go to state 158

    comp_function_call          go to state 160
    general_comp_function_call  go to state 161
    comp_primary_expression     go to state 162
    comp_math_expression        go to state 163
    comp_relational_expression  go to state 164
    comp_logic_expression       go to state 165
    comp_expression             go to state 386


State 351

  172 comp_function_definition: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type • ':' local_var_const_decl_list comp_command_list KW_RETURN comp_expression ';' KW_ENDDEF ';'
  173                         | KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type • ':' comp_command_list KW_RETURN comp_expression ';' KW_ENDDEF ';'
  174                         | KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type • ':' local_var_const_decl comp_command_list KW_RETURN comp_expression ';' KW_ENDDEF ';'

    ':'  shift, and go to state 387


State 352

    2 primary_expression: • POSINT
    3                   | • SCALAR
    4                   | • IDENTIFIER
    5                   | • STRING
    6                   | • KW_TRUE
    7                   | • KW_FALSE
    8                   | • '(' logic_expression ')'
    9 math_expression: • primary_expression
   10                | • '+' math_expression
   11                | • '-' math_expression
   12                | • math_expression '+' math_expression
   13                | • math_expression '-' math_expression
   14                | • math_expression '*' math_expression
   15                | • math_expression '/' math_expression
   16                | • math_expression '%' math_expression
   17                | • math_expression OP_PAW math_expression
   18                | • IDENTIFIER '[' expression ']'
   19                | • IDENTIFIER '[' expression ']' '.' IDENTIFIER
   20                | • IDENTIFIER '[' expression ']' '.' IDENTIFIER '[' expression ']'
   21                | • general_function_call
   22                | • IDENTIFIER '.' IDENTIFIER '[' expression ']'
   23                | • IDENTIFIER '.' IDENTIFIER
   24 relational_expression: • math_expression
   25                      | • relational_expression OP_EQUALS relational_expression
   26                      | • relational_expression OP_NE relational_expression
   27                      | • relational_expression '>' relational_expression
   28                      | • relational_expression '<' relational_expression
   29                      | • relational_expression OP_LE relational_expression
   30                      | • relational_expression OP_GE relational_expression
   31 logic_expression: • relational_expression
   32                 | • OP_NOT logic_expression
   33                 | • logic_expression OP_AND logic_expression
   34                 | • logic_expression OP_OR logic_expression
   35 expression: • logic_expression
   43 identifier_single: IDENTIFIER '[' • POSINT ']'
   44                  | IDENTIFIER '[' • ']'
   62 parameter_declaration: IDENTIFIER '[' • ']' ':' basic_data_type
   66 general_function_call: • function_call
   67                      | • IDENTIFIER '.' function_call
   68                      | • IDENTIFIER '[' expression ']' '.' function_call
   69 function_call: • IDENTIFIER '(' ')'
   70              | • IDENTIFIER '(' expr_comma_list ')'
   82 general_variable: IDENTIFIER '[' • expression ']'

    IDENTIFIER  shift, and go to state 53
    POSINT      shift, and go to state 299
    SCALAR      shift, and go to state 55
    STRING      shift, and go to state 56
    OP_NOT      shift, and go to state 57
    KW_TRUE     shift, and go to state 58
    KW_FALSE    shift, and go to state 59
    '-'         shift, and go to state 60
    '+'         shift, and go to state 61
    '('         shift, and go to state 62
    ']'         shift, and go to state 28

    primary_expression     go to state 64
    math_expression        go to state 65
    relational_expression  go to state 66
    logic_expression       go to state 67
    expression             go to state 342
    general_function_call  go to state 69
    function_call          go to state 70


State 353

  111 comp_function_call: • IDENTIFIER '(' ')'
  112                   | • IDENTIFIER '(' comp_expr_comma_list ')'
  113 general_comp_function_call: • comp_function_call
  114                           | • '#' IDENTIFIER '.' comp_function_call
  115                           | • '#' IDENTIFIER '[' comp_expression ']' '.' comp_function_call
  118 comp_primary_expression: • POSINT
  119                        | • SCALAR
  120                        | • '#' IDENTIFIER
  121                        | • IDENTIFIER
  122                        | • STRING
  123                        | • KW_TRUE
  124                        | • KW_FALSE
  125                        | • '(' logic_expression ')'
  126 comp_math_expression: • comp_primary_expression
  127                     | • '+' comp_math_expression
  128                     | • '-' comp_math_expression
  129                     | • comp_math_expression '+' comp_math_expression
  130                     | • comp_math_expression '-' comp_math_expression
  131                     | • comp_math_expression '*' comp_math_expression
  132                     | • comp_math_expression '/' comp_math_expression
  133                     | • comp_math_expression '%' comp_math_expression
  134                     | • comp_math_expression OP_PAW comp_math_expression
  135                     | • '#' IDENTIFIER '[' comp_expression ']'
  136                     | • '#' IDENTIFIER '[' comp_expression ']' '.' '#' IDENTIFIER
  137                     | • '#' IDENTIFIER '[' comp_expression ']' '.' '#' IDENTIFIER '[' comp_expression ']'
  138                     | • general_comp_function_call
  139                     | • '#' IDENTIFIER '.' '#' IDENTIFIER '[' comp_expression ']'
  140                     | • '#' IDENTIFIER '.' '#' IDENTIFIER
  141 comp_relational_expression: • comp_math_expression
  142                           | • comp_relational_expression OP_EQUALS comp_relational_expression
  143                           | • comp_relational_expression OP_NE comp_relational_expression
  144                           | • comp_relational_expression '>' comp_relational_expression
  145                           | • comp_relational_expression '<' comp_relational_expression
  146                           | • comp_relational_expression OP_LE comp_relational_expression
  147                           | • comp_relational_expression OP_GE comp_relational_expression
  148 comp_logic_expression: • comp_relational_expression
  149                      | • OP_NOT comp_logic_expression
  150                      | • comp_logic_expression OP_AND comp_logic_expression
  151                      | • comp_logic_expression OP_OR comp_logic_expression
  152 comp_expression: • comp_logic_expression
  156 comp_command: KW_IF '(' • comp_expression ')' ':' comp_command_list KW_ENDIF ';'
  157             | KW_IF '(' • comp_expression ')' ':' comp_command_list KW_ELSE ':' comp_command_list KW_ENDIF ';'

    IDENTIFIER  shift, and go to state 148
    POSINT      shift, and go to state 149
    SCALAR      shift, and go to state 150
    STRING      shift, and go to state 151
    OP_NOT      shift, and go to state 152
    KW_TRUE     shift, and go to state 153
    KW_FALSE    shift, and go to state 154
    '-'         shift, and go to state 155
    '+'         shift, and go to state 156
    '#'         shift, and go to state 157
    '('         shift, and go to state 158

    comp_function_call          go to state 160
    general_comp_function_call  go to state 161
    comp_primary_expression     go to state 162
    comp_math_expression        go to state 163
    comp_relational_expression  go to state 164
    comp_logic_expression       go to state 165
    comp_expression             go to state 388


State 354

  163 comp_command: KW_CONTINUE ';' •

    $default  reduce using rule 163 (comp_command)


State 355

  106 comp_variable: '#' • IDENTIFIER
  107              | '#' • IDENTIFIER '[' comp_expression ']'

    IDENTIFIER  shift, and go to state 389


State 356

  108 comp_variable: comp_variable • '.' '#' IDENTIFIER
  109              | comp_variable • '.' '#' IDENTIFIER '[' POSINT ']'
  158 comp_command: KW_FOR comp_variable • KW_IN '[' comp_expression ':' comp_expression ']' ':' comp_command_list KW_ENDFOR ';'
  159             | KW_FOR comp_variable • KW_IN '[' comp_expression ':' comp_expression ':' comp_expression ']' ':' comp_command_list KW_ENDFOR ';'

    KW_IN  shift, and go to state 390
    '.'    shift, and go to state 366


State 357

  111 comp_function_call: • IDENTIFIER '(' ')'
  112                   | • IDENTIFIER '(' comp_expr_comma_list ')'
  113 general_comp_function_call: • comp_function_call
  114                           | • '#' IDENTIFIER '.' comp_function_call
  115                           | • '#' IDENTIFIER '[' comp_expression ']' '.' comp_function_call
  118 comp_primary_expression: • POSINT
  119                        | • SCALAR
  120                        | • '#' IDENTIFIER
  121                        | • IDENTIFIER
  122                        | • STRING
  123                        | • KW_TRUE
  124                        | • KW_FALSE
  125                        | • '(' logic_expression ')'
  126 comp_math_expression: • comp_primary_expression
  127                     | • '+' comp_math_expression
  128                     | • '-' comp_math_expression
  129                     | • comp_math_expression '+' comp_math_expression
  130                     | • comp_math_expression '-' comp_math_expression
  131                     | • comp_math_expression '*' comp_math_expression
  132                     | • comp_math_expression '/' comp_math_expression
  133                     | • comp_math_expression '%' comp_math_expression
  134                     | • comp_math_expression OP_PAW comp_math_expression
  135                     | • '#' IDENTIFIER '[' comp_expression ']'
  136                     | • '#' IDENTIFIER '[' comp_expression ']' '.' '#' IDENTIFIER
  137                     | • '#' IDENTIFIER '[' comp_expression ']' '.' '#' IDENTIFIER '[' comp_expression ']'
  138                     | • general_comp_function_call
  139                     | • '#' IDENTIFIER '.' '#' IDENTIFIER '[' comp_expression ']'
  140                     | • '#' IDENTIFIER '.' '#' IDENTIFIER
  141 comp_relational_expression: • comp_math_expression
  142                           | • comp_relational_expression OP_EQUALS comp_relational_expression
  143                           | • comp_relational_expression OP_NE comp_relational_expression
  144                           | • comp_relational_expression '>' comp_relational_expression
  145                           | • comp_relational_expression '<' comp_relational_expression
  146                           | • comp_relational_expression OP_LE comp_relational_expression
  147                           | • comp_relational_expression OP_GE comp_relational_expression
  148 comp_logic_expression: • comp_relational_expression
  149                      | • OP_NOT comp_logic_expression
  150                      | • comp_logic_expression OP_AND comp_logic_expression
  151                      | • comp_logic_expression OP_OR comp_logic_expression
  152 comp_expression: • comp_logic_expression
  161 comp_command: KW_WHILE '(' • comp_expression ')' ':' comp_command_list KW_ENDWHILE ';'

    IDENTIFIER  shift, and go to state 148
    POSINT      shift, and go to state 149
    SCALAR      shift, and go to state 150
    STRING      shift, and go to state 151
    OP_NOT      shift, and go to state 152
    KW_TRUE     shift, and go to state 153
    KW_FALSE    shift, and go to state 154
    '-'         shift, and go to state 155
    '+'         shift, and go to state 156
    '#'         shift, and go to state 157
    '('         shift, and go to state 158

    comp_function_call          go to state 160
    general_comp_function_call  go to state 161
    comp_primary_expression     go to state 162
    comp_math_expression        go to state 163
    comp_relational_expression  go to state 164
    comp_logic_expression       go to state 165
    comp_expression             go to state 391


State 358

  162 comp_command: KW_BREAK ';' •

    $default  reduce using rule 162 (comp_command)


State 359

  164 comp_command: KW_RETURN ';' •

    $default  reduce using rule 164 (comp_command)


State 360

  165 comp_command: KW_RETURN comp_expression • ';'

    ';'  shift, and go to state 392


State 361

  106 comp_variable: '#' IDENTIFIER •  [OP_ASSIGN, OP_ASSIGN_PLUSEQ, OP_ASSIGN_MULEQ, OP_ASSIGN_DIVEQ, OP_ASSIGN_MODEQ, OP_ASSIGN_MINUSEQ, '.', '=']
  107              | '#' IDENTIFIER • '[' comp_expression ']'
  114 general_comp_function_call: '#' IDENTIFIER • '.' comp_function_call
  115                           | '#' IDENTIFIER • '[' comp_expression ']' '.' comp_function_call

    '['  shift, and go to state 393
    '.'  shift, and go to state 394

    '.'       [reduce using rule 106 (comp_variable)]
    $default  reduce using rule 106 (comp_variable)

    shift/reduce conflict on token '.':
      106 comp_variable: '#' IDENTIFIER •
      114 general_comp_function_call: '#' IDENTIFIER • '.' comp_function_call
      First example: comp_definition_list KW_COMP IDENTIFIER ':' KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' '#' IDENTIFIER • '.' comp_function_call ';' KW_ENDDEF ';' comp_function_definition KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                     $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                    local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER ':' comp_function_definition_list                                                                                                                                                  KW_ENDCOMP ';'
                                                                            ↳ 168: comp_function_definition                                                                                                                       comp_function_definition
                                                                                   ↳ 171: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' comp_command_list                                                KW_ENDDEF ';'
                                                                                                                                                   ↳ 153: comp_command
                                                                                                                                                          ↳ 166: general_comp_function_call                     ';'
                                                                                                                                                                 ↳ 114: '#' IDENTIFIER • '.' comp_function_call
      Second example: comp_definition_list KW_COMP IDENTIFIER ':' comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' '#' IDENTIFIER • '.' '#' IDENTIFIER assignment_operator comp_expression ';' KW_ENDDEF ';' KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                 $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER ':' comp_function_definition_list                                                                                                                                                                                              KW_ENDCOMP ';'
                                                                            ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                                 ↳ 171: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' comp_command_list                                                                                       KW_ENDDEF ';'
                                                                                                                                                                                 ↳ 153: comp_command
                                                                                                                                                                                        ↳ 155: comp_variable                                     assignment_operator comp_expression ';'
                                                                                                                                                                                               ↳ 108: comp_variable           '.' '#' IDENTIFIER
                                                                                                                                                                                                      ↳ 106: '#' IDENTIFIER •



State 362

   80 general_variable: IDENTIFIER •  [OP_ASSIGN, OP_ASSIGN_PLUSEQ, OP_ASSIGN_MULEQ, OP_ASSIGN_DIVEQ, OP_ASSIGN_MODEQ, OP_ASSIGN_MINUSEQ, '.', '=']
   81                 | IDENTIFIER • '.' '#' IDENTIFIER
   82                 | IDENTIFIER • '[' expression ']'
   83                 | IDENTIFIER • '.' '#' IDENTIFIER '[' expression ']'
  111 comp_function_call: IDENTIFIER • '(' ')'
  112                   | IDENTIFIER • '(' comp_expr_comma_list ')'

    '('  shift, and go to state 183
    '['  shift, and go to state 304
    '.'  shift, and go to state 305

    '.'       [reduce using rule 80 (general_variable)]
    $default  reduce using rule 80 (general_variable)

    shift/reduce conflict on token '.':
       80 general_variable: IDENTIFIER •
       81 general_variable: IDENTIFIER • '.' '#' IDENTIFIER
      First example: comp_definition_list KW_COMP IDENTIFIER ':' KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl_list IDENTIFIER • '.' '#' IDENTIFIER assignment_operator comp_expression ';' KW_ENDDEF ';' comp_function_definition KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                                 $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                                local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER ':' comp_function_definition_list                                                                                                                                                                                                              KW_ENDCOMP ';'
                                                                            ↳ 168: comp_function_definition                                                                                                                                                                                   comp_function_definition
                                                                                   ↳ 169: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl_list comp_command_list                                                                                  KW_ENDDEF ';'
                                                                                                                                                                             ↳ 153: comp_command
                                                                                                                                                                                    ↳ 155: comp_variable                                assignment_operator comp_expression ';'
                                                                                                                                                                                           ↳ 110: general_variable
                                                                                                                                                                                                  ↳ 81: IDENTIFIER • '.' '#' IDENTIFIER
      Second example: comp_definition_list KW_COMP IDENTIFIER ':' comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl_list IDENTIFIER • '.' '#' IDENTIFIER assignment_operator comp_expression ';' KW_ENDDEF ';' KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                                             $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                                            local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER ':' comp_function_definition_list                                                                                                                                                                                                                          KW_ENDCOMP ';'
                                                                            ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                                 ↳ 169: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl_list comp_command_list                                                                                         KW_ENDDEF ';'
                                                                                                                                                                                                           ↳ 153: comp_command
                                                                                                                                                                                                                  ↳ 155: comp_variable                                       assignment_operator comp_expression ';'
                                                                                                                                                                                                                         ↳ 108: comp_variable             '.' '#' IDENTIFIER
                                                                                                                                                                                                                                ↳ 110: general_variable
                                                                                                                                                                                                                                       ↳ 80: IDENTIFIER •

    shift/reduce conflict on token '.':
       80 general_variable: IDENTIFIER •
       83 general_variable: IDENTIFIER • '.' '#' IDENTIFIER '[' expression ']'
      First example: comp_definition_list KW_COMP IDENTIFIER ':' KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl_list IDENTIFIER • '.' '#' IDENTIFIER '[' expression ']' assignment_operator comp_expression ';' KW_ENDDEF ';' comp_function_definition KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                                                    $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                                                   local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER ':' comp_function_definition_list                                                                                                                                                                                                                                 KW_ENDCOMP ';'
                                                                            ↳ 168: comp_function_definition                                                                                                                                                                                                      comp_function_definition
                                                                                   ↳ 169: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl_list comp_command_list                                                                                                     KW_ENDDEF ';'
                                                                                                                                                                             ↳ 153: comp_command
                                                                                                                                                                                    ↳ 155: comp_variable                                                   assignment_operator comp_expression ';'
                                                                                                                                                                                           ↳ 110: general_variable
                                                                                                                                                                                                  ↳ 83: IDENTIFIER • '.' '#' IDENTIFIER '[' expression ']'
      Second example: comp_definition_list KW_COMP IDENTIFIER ':' comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl_list IDENTIFIER • '.' '#' IDENTIFIER assignment_operator comp_expression ';' KW_ENDDEF ';' KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                                             $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                                            local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER ':' comp_function_definition_list                                                                                                                                                                                                                          KW_ENDCOMP ';'
                                                                            ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                                 ↳ 169: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl_list comp_command_list                                                                                         KW_ENDDEF ';'
                                                                                                                                                                                                           ↳ 153: comp_command
                                                                                                                                                                                                                  ↳ 155: comp_variable                                       assignment_operator comp_expression ';'
                                                                                                                                                                                                                         ↳ 108: comp_variable             '.' '#' IDENTIFIER
                                                                                                                                                                                                                                ↳ 110: general_variable
                                                                                                                                                                                                                                       ↳ 80: IDENTIFIER •



State 363

   80 general_variable: • IDENTIFIER
   81                 | • IDENTIFIER '.' '#' IDENTIFIER
   82                 | • IDENTIFIER '[' expression ']'
   83                 | • IDENTIFIER '.' '#' IDENTIFIER '[' expression ']'
  106 comp_variable: • '#' IDENTIFIER
  107              | • '#' IDENTIFIER '[' comp_expression ']'
  108              | • comp_variable '.' '#' IDENTIFIER
  109              | • comp_variable '.' '#' IDENTIFIER '[' POSINT ']'
  110              | • general_variable
  111 comp_function_call: • IDENTIFIER '(' ')'
  112                   | • IDENTIFIER '(' comp_expr_comma_list ')'
  113 general_comp_function_call: • comp_function_call
  114                           | • '#' IDENTIFIER '.' comp_function_call
  115                           | • '#' IDENTIFIER '[' comp_expression ']' '.' comp_function_call
  154 comp_command_list: comp_command_list • comp_command
  155 comp_command: • comp_variable assignment_operator comp_expression ';'
  156             | • KW_IF '(' comp_expression ')' ':' comp_command_list KW_ENDIF ';'
  157             | • KW_IF '(' comp_expression ')' ':' comp_command_list KW_ELSE ':' comp_command_list KW_ENDIF ';'
  158             | • KW_FOR comp_variable KW_IN '[' comp_expression ':' comp_expression ']' ':' comp_command_list KW_ENDFOR ';'
  159             | • KW_FOR comp_variable KW_IN '[' comp_expression ':' comp_expression ':' comp_expression ']' ':' comp_command_list KW_ENDFOR ';'
  160             | • comp_variable OP_ASSIGN '[' comp_expression KW_FOR comp_variable ':' POSINT ']' ':' basic_data_type ';'
  161             | • KW_WHILE '(' comp_expression ')' ':' comp_command_list KW_ENDWHILE ';'
  162             | • KW_BREAK ';'
  163             | • KW_CONTINUE ';'
  164             | • KW_RETURN ';'
  165             | • KW_RETURN comp_expression ';'
  166             | • general_comp_function_call ';'
  169 comp_function_definition: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl_list comp_command_list • KW_ENDDEF ';'

    IDENTIFIER   shift, and go to state 362
    KW_IF        shift, and go to state 320
    KW_CONTINUE  shift, and go to state 321
    KW_FOR       shift, and go to state 322
    KW_WHILE     shift, and go to state 323
    KW_BREAK     shift, and go to state 324
    KW_ENDDEF    shift, and go to state 395
    KW_RETURN    shift, and go to state 325
    '#'          shift, and go to state 326

    general_variable            go to state 329
    comp_variable               go to state 330
    comp_function_call          go to state 160
    general_comp_function_call  go to state 331
    comp_command                go to state 370


State 364

   80 general_variable: • IDENTIFIER
   81                 | • IDENTIFIER '.' '#' IDENTIFIER
   82                 | • IDENTIFIER '[' expression ']'
   83                 | • IDENTIFIER '.' '#' IDENTIFIER '[' expression ']'
  106 comp_variable: • '#' IDENTIFIER
  107              | • '#' IDENTIFIER '[' comp_expression ']'
  108              | • comp_variable '.' '#' IDENTIFIER
  109              | • comp_variable '.' '#' IDENTIFIER '[' POSINT ']'
  110              | • general_variable
  111 comp_function_call: • IDENTIFIER '(' ')'
  112                   | • IDENTIFIER '(' comp_expr_comma_list ')'
  113 general_comp_function_call: • comp_function_call
  114                           | • '#' IDENTIFIER '.' comp_function_call
  115                           | • '#' IDENTIFIER '[' comp_expression ']' '.' comp_function_call
  154 comp_command_list: comp_command_list • comp_command
  155 comp_command: • comp_variable assignment_operator comp_expression ';'
  156             | • KW_IF '(' comp_expression ')' ':' comp_command_list KW_ENDIF ';'
  157             | • KW_IF '(' comp_expression ')' ':' comp_command_list KW_ELSE ':' comp_command_list KW_ENDIF ';'
  158             | • KW_FOR comp_variable KW_IN '[' comp_expression ':' comp_expression ']' ':' comp_command_list KW_ENDFOR ';'
  159             | • KW_FOR comp_variable KW_IN '[' comp_expression ':' comp_expression ':' comp_expression ']' ':' comp_command_list KW_ENDFOR ';'
  160             | • comp_variable OP_ASSIGN '[' comp_expression KW_FOR comp_variable ':' POSINT ']' ':' basic_data_type ';'
  161             | • KW_WHILE '(' comp_expression ')' ':' comp_command_list KW_ENDWHILE ';'
  162             | • KW_BREAK ';'
  163             | • KW_CONTINUE ';'
  164             | • KW_RETURN ';'
  165             | • KW_RETURN comp_expression ';'
  166             | • general_comp_function_call ';'
  170 comp_function_definition: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl comp_command_list • KW_ENDDEF ';'

    IDENTIFIER   shift, and go to state 362
    KW_IF        shift, and go to state 320
    KW_CONTINUE  shift, and go to state 321
    KW_FOR       shift, and go to state 322
    KW_WHILE     shift, and go to state 323
    KW_BREAK     shift, and go to state 324
    KW_ENDDEF    shift, and go to state 396
    KW_RETURN    shift, and go to state 325
    '#'          shift, and go to state 326

    general_variable            go to state 329
    comp_variable               go to state 330
    comp_function_call          go to state 160
    general_comp_function_call  go to state 331
    comp_command                go to state 370


State 365

   74 assignment_operator: OP_ASSIGN •  [IDENTIFIER, POSINT, SCALAR, STRING, OP_NOT, KW_TRUE, KW_FALSE, '-', '+', '#', '(']
  160 comp_command: comp_variable OP_ASSIGN • '[' comp_expression KW_FOR comp_variable ':' POSINT ']' ':' basic_data_type ';'

    '['  shift, and go to state 397

    $default  reduce using rule 74 (assignment_operator)


State 366

  108 comp_variable: comp_variable '.' • '#' IDENTIFIER
  109              | comp_variable '.' • '#' IDENTIFIER '[' POSINT ']'

    '#'  shift, and go to state 398


State 367

  111 comp_function_call: • IDENTIFIER '(' ')'
  112                   | • IDENTIFIER '(' comp_expr_comma_list ')'
  113 general_comp_function_call: • comp_function_call
  114                           | • '#' IDENTIFIER '.' comp_function_call
  115                           | • '#' IDENTIFIER '[' comp_expression ']' '.' comp_function_call
  118 comp_primary_expression: • POSINT
  119                        | • SCALAR
  120                        | • '#' IDENTIFIER
  121                        | • IDENTIFIER
  122                        | • STRING
  123                        | • KW_TRUE
  124                        | • KW_FALSE
  125                        | • '(' logic_expression ')'
  126 comp_math_expression: • comp_primary_expression
  127                     | • '+' comp_math_expression
  128                     | • '-' comp_math_expression
  129                     | • comp_math_expression '+' comp_math_expression
  130                     | • comp_math_expression '-' comp_math_expression
  131                     | • comp_math_expression '*' comp_math_expression
  132                     | • comp_math_expression '/' comp_math_expression
  133                     | • comp_math_expression '%' comp_math_expression
  134                     | • comp_math_expression OP_PAW comp_math_expression
  135                     | • '#' IDENTIFIER '[' comp_expression ']'
  136                     | • '#' IDENTIFIER '[' comp_expression ']' '.' '#' IDENTIFIER
  137                     | • '#' IDENTIFIER '[' comp_expression ']' '.' '#' IDENTIFIER '[' comp_expression ']'
  138                     | • general_comp_function_call
  139                     | • '#' IDENTIFIER '.' '#' IDENTIFIER '[' comp_expression ']'
  140                     | • '#' IDENTIFIER '.' '#' IDENTIFIER
  141 comp_relational_expression: • comp_math_expression
  142                           | • comp_relational_expression OP_EQUALS comp_relational_expression
  143                           | • comp_relational_expression OP_NE comp_relational_expression
  144                           | • comp_relational_expression '>' comp_relational_expression
  145                           | • comp_relational_expression '<' comp_relational_expression
  146                           | • comp_relational_expression OP_LE comp_relational_expression
  147                           | • comp_relational_expression OP_GE comp_relational_expression
  148 comp_logic_expression: • comp_relational_expression
  149                      | • OP_NOT comp_logic_expression
  150                      | • comp_logic_expression OP_AND comp_logic_expression
  151                      | • comp_logic_expression OP_OR comp_logic_expression
  152 comp_expression: • comp_logic_expression
  155 comp_command: comp_variable assignment_operator • comp_expression ';'

    IDENTIFIER  shift, and go to state 148
    POSINT      shift, and go to state 149
    SCALAR      shift, and go to state 150
    STRING      shift, and go to state 151
    OP_NOT      shift, and go to state 152
    KW_TRUE     shift, and go to state 153
    KW_FALSE    shift, and go to state 154
    '-'         shift, and go to state 155
    '+'         shift, and go to state 156
    '#'         shift, and go to state 157
    '('         shift, and go to state 158

    comp_function_call          go to state 160
    general_comp_function_call  go to state 161
    comp_primary_expression     go to state 162
    comp_math_expression        go to state 163
    comp_relational_expression  go to state 164
    comp_logic_expression       go to state 165
    comp_expression             go to state 399


State 368

  166 comp_command: general_comp_function_call ';' •

    $default  reduce using rule 166 (comp_command)


State 369

  171 comp_function_definition: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' comp_command_list KW_ENDDEF • ';'

    ';'  shift, and go to state 400


State 370

  154 comp_command_list: comp_command_list comp_command •

    $default  reduce using rule 154 (comp_command_list)


State 371

   20 math_expression: IDENTIFIER '[' expression ']' '.' IDENTIFIER '[' expression ']' •

    $default  reduce using rule 20 (math_expression)


State 372

   66 general_function_call: • function_call
   67                      | • IDENTIFIER '.' function_call
   68                      | • IDENTIFIER '[' expression ']' '.' function_call
   69 function_call: • IDENTIFIER '(' ')'
   70              | • IDENTIFIER '(' expr_comma_list ')'
   80 general_variable: • IDENTIFIER
   81                 | • IDENTIFIER '.' '#' IDENTIFIER
   82                 | • IDENTIFIER '[' expression ']'
   83                 | • IDENTIFIER '.' '#' IDENTIFIER '[' expression ']'
   84 function_command_list: • function_command
   85                      | • function_command_list function_command
   86 function_command: • general_variable assignment_operator expression ';'
   87                 | • KW_IF '(' expression ')' ':' function_command_list KW_ENDIF ';'
   88                 | • KW_IF '(' expression ')' ':' function_command_list KW_ELSE ':' function_command_list KW_ENDIF ';'
   89                 | • KW_FOR general_variable KW_IN '[' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';'
   90                 | • KW_FOR general_variable KW_IN '[' expression ':' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';'
   91                 | • general_variable OP_ASSIGN '[' expression KW_FOR general_variable ':' POSINT ']' ':' basic_data_type ';'
   92                 | • KW_WHILE '(' expression ')' ':' function_command_list KW_ENDWHILE ';'
   93                 | • KW_BREAK ';'
   94                 | • KW_CONTINUE ';'
   95                 | • KW_RETURN ';'
   96                 | • KW_RETURN expression ';'
   97                 | • general_function_call ';'
  103 function_definition: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl_list • function_command_list KW_RETURN expression ';' KW_ENDDEF ';'

    IDENTIFIER   shift, and go to state 270
    KW_IF        shift, and go to state 216
    KW_CONTINUE  shift, and go to state 217
    KW_FOR       shift, and go to state 218
    KW_WHILE     shift, and go to state 219
    KW_BREAK     shift, and go to state 220
    KW_RETURN    shift, and go to state 221

    general_function_call  go to state 224
    function_call          go to state 70
    general_variable       go to state 225
    function_command_list  go to state 401
    function_command       go to state 227


State 373

   53 local_var_const_decl_list: local_var_const_decl •  [IDENTIFIER, KW_IF, KW_CONTINUE, KW_FOR, KW_WHILE, KW_BREAK, KW_RETURN]
   66 general_function_call: • function_call
   67                      | • IDENTIFIER '.' function_call
   68                      | • IDENTIFIER '[' expression ']' '.' function_call
   69 function_call: • IDENTIFIER '(' ')'
   70              | • IDENTIFIER '(' expr_comma_list ')'
   80 general_variable: • IDENTIFIER
   81                 | • IDENTIFIER '.' '#' IDENTIFIER
   82                 | • IDENTIFIER '[' expression ']'
   83                 | • IDENTIFIER '.' '#' IDENTIFIER '[' expression ']'
   84 function_command_list: • function_command
   85                      | • function_command_list function_command
   86 function_command: • general_variable assignment_operator expression ';'
   87                 | • KW_IF '(' expression ')' ':' function_command_list KW_ENDIF ';'
   88                 | • KW_IF '(' expression ')' ':' function_command_list KW_ELSE ':' function_command_list KW_ENDIF ';'
   89                 | • KW_FOR general_variable KW_IN '[' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';'
   90                 | • KW_FOR general_variable KW_IN '[' expression ':' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';'
   91                 | • general_variable OP_ASSIGN '[' expression KW_FOR general_variable ':' POSINT ']' ':' basic_data_type ';'
   92                 | • KW_WHILE '(' expression ')' ':' function_command_list KW_ENDWHILE ';'
   93                 | • KW_BREAK ';'
   94                 | • KW_CONTINUE ';'
   95                 | • KW_RETURN ';'
   96                 | • KW_RETURN expression ';'
   97                 | • general_function_call ';'
  104 function_definition: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl • function_command_list KW_RETURN expression ';' KW_ENDDEF ';'

    IDENTIFIER   shift, and go to state 270
    KW_IF        shift, and go to state 216
    KW_CONTINUE  shift, and go to state 217
    KW_FOR       shift, and go to state 218
    KW_WHILE     shift, and go to state 219
    KW_BREAK     shift, and go to state 220
    KW_RETURN    shift, and go to state 221

    IDENTIFIER   [reduce using rule 53 (local_var_const_decl_list)]
    KW_IF        [reduce using rule 53 (local_var_const_decl_list)]
    KW_CONTINUE  [reduce using rule 53 (local_var_const_decl_list)]
    KW_FOR       [reduce using rule 53 (local_var_const_decl_list)]
    KW_WHILE     [reduce using rule 53 (local_var_const_decl_list)]
    KW_BREAK     [reduce using rule 53 (local_var_const_decl_list)]
    KW_RETURN    [reduce using rule 53 (local_var_const_decl_list)]

    general_function_call  go to state 224
    function_call          go to state 70
    general_variable       go to state 225
    function_command_list  go to state 402
    function_command       go to state 227

    shift/reduce conflict on token IDENTIFIER:
       53 local_var_const_decl_list: local_var_const_decl •
       67 general_function_call: • IDENTIFIER '.' function_call
      First example: comp_definition_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl • IDENTIFIER '.' function_call ';' KW_RETURN expression ';' KW_ENDDEF ';' function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                $end
             ↳ 1: comp_definition_list function_definition_list                                                                                                                                                                                                                function_definition_list main_unit
                                       ↳ 99: function_definition_list function_definition
                                                                      ↳ 104: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl function_command_list                                KW_RETURN expression ';' KW_ENDDEF ';'
                                                                                                                                                                                   ↳ 84: function_command
                                                                                                                                                                                         ↳ 97: general_function_call                ';'
                                                                                                                                                                                               ↳ 67: • IDENTIFIER '.' function_call
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl • IDENTIFIER assignment_operator expression ';' KW_RETURN expression ';' KW_ENDDEF ';' main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                    $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list                                                                                                                                                                                                                                   main_unit
                                                                 ↳ 99: function_definition_list function_definition
                                                                                                ↳ 103: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl_list    function_command_list                                           KW_RETURN expression ';' KW_ENDDEF ';'
                                                                                                                                                                                        ↳ 53: local_var_const_decl • ↳ 84: function_command
                                                                                                                                                                                                                           ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                                                                                                 ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       53 local_var_const_decl_list: local_var_const_decl •
       68 general_function_call: • IDENTIFIER '[' expression ']' '.' function_call
      First example: comp_definition_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl • IDENTIFIER '[' expression ']' '.' function_call ';' KW_RETURN expression ';' KW_ENDDEF ';' function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                   $end
             ↳ 1: comp_definition_list function_definition_list                                                                                                                                                                                                                                   function_definition_list main_unit
                                       ↳ 99: function_definition_list function_definition
                                                                      ↳ 104: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl function_command_list                                                   KW_RETURN expression ';' KW_ENDDEF ';'
                                                                                                                                                                                   ↳ 84: function_command
                                                                                                                                                                                         ↳ 97: general_function_call                                   ';'
                                                                                                                                                                                               ↳ 68: • IDENTIFIER '[' expression ']' '.' function_call
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl • IDENTIFIER assignment_operator expression ';' KW_RETURN expression ';' KW_ENDDEF ';' main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                    $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list                                                                                                                                                                                                                                   main_unit
                                                                 ↳ 99: function_definition_list function_definition
                                                                                                ↳ 103: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl_list    function_command_list                                           KW_RETURN expression ';' KW_ENDDEF ';'
                                                                                                                                                                                        ↳ 53: local_var_const_decl • ↳ 84: function_command
                                                                                                                                                                                                                           ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                                                                                                 ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       53 local_var_const_decl_list: local_var_const_decl •
       69 function_call: • IDENTIFIER '(' ')'
      First example: comp_definition_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl • IDENTIFIER '(' ')' ';' KW_RETURN expression ';' KW_ENDDEF ';' function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                            $end
             ↳ 1: comp_definition_list function_definition_list                                                                                                                                                                                                            function_definition_list main_unit
                                       ↳ 99: function_definition_list function_definition
                                                                      ↳ 104: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl function_command_list                            KW_RETURN expression ';' KW_ENDDEF ';'
                                                                                                                                                                                   ↳ 84: function_command
                                                                                                                                                                                         ↳ 97: general_function_call            ';'
                                                                                                                                                                                               ↳ 66: function_call
                                                                                                                                                                                                     ↳ 69: • IDENTIFIER '(' ')'
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl • IDENTIFIER assignment_operator expression ';' KW_RETURN expression ';' KW_ENDDEF ';' main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                    $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list                                                                                                                                                                                                                                   main_unit
                                                                 ↳ 99: function_definition_list function_definition
                                                                                                ↳ 103: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl_list    function_command_list                                           KW_RETURN expression ';' KW_ENDDEF ';'
                                                                                                                                                                                        ↳ 53: local_var_const_decl • ↳ 84: function_command
                                                                                                                                                                                                                           ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                                                                                                 ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       53 local_var_const_decl_list: local_var_const_decl •
       70 function_call: • IDENTIFIER '(' expr_comma_list ')'
      First example: comp_definition_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl • IDENTIFIER '(' expr_comma_list ')' ';' KW_RETURN expression ';' KW_ENDDEF ';' function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                            $end
             ↳ 1: comp_definition_list function_definition_list                                                                                                                                                                                                                            function_definition_list main_unit
                                       ↳ 99: function_definition_list function_definition
                                                                      ↳ 104: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl function_command_list                                            KW_RETURN expression ';' KW_ENDDEF ';'
                                                                                                                                                                                   ↳ 84: function_command
                                                                                                                                                                                         ↳ 97: general_function_call                            ';'
                                                                                                                                                                                               ↳ 66: function_call
                                                                                                                                                                                                     ↳ 70: • IDENTIFIER '(' expr_comma_list ')'
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl • IDENTIFIER assignment_operator expression ';' KW_RETURN expression ';' KW_ENDDEF ';' main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                    $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list                                                                                                                                                                                                                                   main_unit
                                                                 ↳ 99: function_definition_list function_definition
                                                                                                ↳ 103: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl_list    function_command_list                                           KW_RETURN expression ';' KW_ENDDEF ';'
                                                                                                                                                                                        ↳ 53: local_var_const_decl • ↳ 84: function_command
                                                                                                                                                                                                                           ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                                                                                                 ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       53 local_var_const_decl_list: local_var_const_decl •
       80 general_variable: • IDENTIFIER
      First example: comp_definition_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl • IDENTIFIER assignment_operator expression ';' KW_RETURN expression ';' KW_ENDDEF ';' function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                             $end
             ↳ 1: comp_definition_list function_definition_list                                                                                                                                                                                                                             function_definition_list main_unit
                                       ↳ 99: function_definition_list function_definition
                                                                      ↳ 104: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl function_command_list                                             KW_RETURN expression ';' KW_ENDDEF ';'
                                                                                                                                                                                   ↳ 84: function_command
                                                                                                                                                                                         ↳ 86: general_variable   assignment_operator expression ';'
                                                                                                                                                                                               ↳ 80: • IDENTIFIER
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl • IDENTIFIER assignment_operator expression ';' KW_RETURN expression ';' KW_ENDDEF ';' main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                    $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list                                                                                                                                                                                                                                   main_unit
                                                                 ↳ 99: function_definition_list function_definition
                                                                                                ↳ 103: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl_list    function_command_list                                           KW_RETURN expression ';' KW_ENDDEF ';'
                                                                                                                                                                                        ↳ 53: local_var_const_decl • ↳ 84: function_command
                                                                                                                                                                                                                           ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                                                                                                 ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       53 local_var_const_decl_list: local_var_const_decl •
       81 general_variable: • IDENTIFIER '.' '#' IDENTIFIER
      First example: comp_definition_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl • IDENTIFIER '.' '#' IDENTIFIER assignment_operator expression ';' KW_RETURN expression ';' KW_ENDDEF ';' function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                $end
             ↳ 1: comp_definition_list function_definition_list                                                                                                                                                                                                                                                function_definition_list main_unit
                                       ↳ 99: function_definition_list function_definition
                                                                      ↳ 104: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl function_command_list                                                                KW_RETURN expression ';' KW_ENDDEF ';'
                                                                                                                                                                                   ↳ 84: function_command
                                                                                                                                                                                         ↳ 86: general_variable                      assignment_operator expression ';'
                                                                                                                                                                                               ↳ 81: • IDENTIFIER '.' '#' IDENTIFIER
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl • IDENTIFIER assignment_operator expression ';' KW_RETURN expression ';' KW_ENDDEF ';' main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                    $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list                                                                                                                                                                                                                                   main_unit
                                                                 ↳ 99: function_definition_list function_definition
                                                                                                ↳ 103: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl_list    function_command_list                                           KW_RETURN expression ';' KW_ENDDEF ';'
                                                                                                                                                                                        ↳ 53: local_var_const_decl • ↳ 84: function_command
                                                                                                                                                                                                                           ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                                                                                                 ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       53 local_var_const_decl_list: local_var_const_decl •
       82 general_variable: • IDENTIFIER '[' expression ']'
      First example: comp_definition_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl • IDENTIFIER '[' expression ']' assignment_operator expression ';' KW_RETURN expression ';' KW_ENDDEF ';' function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                $end
             ↳ 1: comp_definition_list function_definition_list                                                                                                                                                                                                                                                function_definition_list main_unit
                                       ↳ 99: function_definition_list function_definition
                                                                      ↳ 104: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl function_command_list                                                                KW_RETURN expression ';' KW_ENDDEF ';'
                                                                                                                                                                                   ↳ 84: function_command
                                                                                                                                                                                         ↳ 86: general_variable                      assignment_operator expression ';'
                                                                                                                                                                                               ↳ 82: • IDENTIFIER '[' expression ']'
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl • IDENTIFIER assignment_operator expression ';' KW_RETURN expression ';' KW_ENDDEF ';' main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                    $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list                                                                                                                                                                                                                                   main_unit
                                                                 ↳ 99: function_definition_list function_definition
                                                                                                ↳ 103: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl_list    function_command_list                                           KW_RETURN expression ';' KW_ENDDEF ';'
                                                                                                                                                                                        ↳ 53: local_var_const_decl • ↳ 84: function_command
                                                                                                                                                                                                                           ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                                                                                                 ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       53 local_var_const_decl_list: local_var_const_decl •
       83 general_variable: • IDENTIFIER '.' '#' IDENTIFIER '[' expression ']'
      First example: comp_definition_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl • IDENTIFIER '.' '#' IDENTIFIER '[' expression ']' assignment_operator expression ';' KW_RETURN expression ';' KW_ENDDEF ';' function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                   $end
             ↳ 1: comp_definition_list function_definition_list                                                                                                                                                                                                                                                                   function_definition_list main_unit
                                       ↳ 99: function_definition_list function_definition
                                                                      ↳ 104: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl function_command_list                                                                                   KW_RETURN expression ';' KW_ENDDEF ';'
                                                                                                                                                                                   ↳ 84: function_command
                                                                                                                                                                                         ↳ 86: general_variable                                         assignment_operator expression ';'
                                                                                                                                                                                               ↳ 83: • IDENTIFIER '.' '#' IDENTIFIER '[' expression ']'
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl • IDENTIFIER assignment_operator expression ';' KW_RETURN expression ';' KW_ENDDEF ';' main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                    $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list                                                                                                                                                                                                                                   main_unit
                                                                 ↳ 99: function_definition_list function_definition
                                                                                                ↳ 103: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl_list    function_command_list                                           KW_RETURN expression ';' KW_ENDDEF ';'
                                                                                                                                                                                        ↳ 53: local_var_const_decl • ↳ 84: function_command
                                                                                                                                                                                                                           ↳ 86: general_variable assignment_operator expression ';'
                                                                                                                                                                                                                                 ↳ 80: IDENTIFIER

    shift/reduce conflict on token KW_IF:
       53 local_var_const_decl_list: local_var_const_decl •
       87 function_command: • KW_IF '(' expression ')' ':' function_command_list KW_ENDIF ';'
      First example: comp_definition_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl • KW_IF '(' expression ')' ':' function_command_list KW_ENDIF ';' KW_RETURN expression ';' KW_ENDDEF ';' function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                         $end
             ↳ 1: comp_definition_list function_definition_list                                                                                                                                                                                                                                         function_definition_list main_unit
                                       ↳ 99: function_definition_list function_definition
                                                                      ↳ 104: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl function_command_list                                                         KW_RETURN expression ';' KW_ENDDEF ';'
                                                                                                                                                                                   ↳ 84: function_command
                                                                                                                                                                                         ↳ 87: • KW_IF '(' expression ')' ':' function_command_list KW_ENDIF ';'
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl • KW_IF '(' expression ')' ':' function_command_list KW_ENDIF ';' KW_RETURN expression ';' KW_ENDDEF ';' main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list                                                                                                                                                                                                                                               main_unit
                                                                 ↳ 99: function_definition_list function_definition
                                                                                                ↳ 103: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl_list    function_command_list                                                       KW_RETURN expression ';' KW_ENDDEF ';'
                                                                                                                                                                                        ↳ 53: local_var_const_decl • ↳ 84: function_command
                                                                                                                                                                                                                           ↳ 87: KW_IF '(' expression ')' ':' function_command_list KW_ENDIF ';'

    shift/reduce conflict on token KW_IF:
       53 local_var_const_decl_list: local_var_const_decl •
       88 function_command: • KW_IF '(' expression ')' ':' function_command_list KW_ELSE ':' function_command_list KW_ENDIF ';'
      First example: comp_definition_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl • KW_IF '(' expression ')' ':' function_command_list KW_ELSE ':' function_command_list KW_ENDIF ';' KW_RETURN expression ';' KW_ENDDEF ';' function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                           $end
             ↳ 1: comp_definition_list function_definition_list                                                                                                                                                                                                                                                                           function_definition_list main_unit
                                       ↳ 99: function_definition_list function_definition
                                                                      ↳ 104: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl function_command_list                                                                                           KW_RETURN expression ';' KW_ENDDEF ';'
                                                                                                                                                                                   ↳ 84: function_command
                                                                                                                                                                                         ↳ 88: • KW_IF '(' expression ')' ':' function_command_list KW_ELSE ':' function_command_list KW_ENDIF ';'
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl • KW_IF '(' expression ')' ':' function_command_list KW_ENDIF ';' KW_RETURN expression ';' KW_ENDDEF ';' main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list                                                                                                                                                                                                                                               main_unit
                                                                 ↳ 99: function_definition_list function_definition
                                                                                                ↳ 103: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl_list    function_command_list                                                       KW_RETURN expression ';' KW_ENDDEF ';'
                                                                                                                                                                                        ↳ 53: local_var_const_decl • ↳ 84: function_command
                                                                                                                                                                                                                           ↳ 87: KW_IF '(' expression ')' ':' function_command_list KW_ENDIF ';'

    shift/reduce conflict on token KW_FOR:
       53 local_var_const_decl_list: local_var_const_decl •
       89 function_command: • KW_FOR general_variable KW_IN '[' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';'
      First example: comp_definition_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl • KW_FOR general_variable KW_IN '[' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';' KW_RETURN expression ';' KW_ENDDEF ';' function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                 $end
             ↳ 1: comp_definition_list function_definition_list                                                                                                                                                                                                                                                                                 function_definition_list main_unit
                                       ↳ 99: function_definition_list function_definition
                                                                      ↳ 104: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl function_command_list                                                                                                 KW_RETURN expression ';' KW_ENDDEF ';'
                                                                                                                                                                                   ↳ 84: function_command
                                                                                                                                                                                         ↳ 89: • KW_FOR general_variable KW_IN '[' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';'
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl • KW_FOR general_variable KW_IN '[' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';' KW_RETURN expression ';' KW_ENDDEF ';' main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                        $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list                                                                                                                                                                                                                                                                                       main_unit
                                                                 ↳ 99: function_definition_list function_definition
                                                                                                ↳ 103: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl_list    function_command_list                                                                                               KW_RETURN expression ';' KW_ENDDEF ';'
                                                                                                                                                                                        ↳ 53: local_var_const_decl • ↳ 84: function_command
                                                                                                                                                                                                                           ↳ 89: KW_FOR general_variable KW_IN '[' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';'

    shift/reduce conflict on token KW_FOR:
       53 local_var_const_decl_list: local_var_const_decl •
       90 function_command: • KW_FOR general_variable KW_IN '[' expression ':' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';'
      First example: comp_definition_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl • KW_FOR general_variable KW_IN '[' expression ':' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';' KW_RETURN expression ';' KW_ENDDEF ';' function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                                $end
             ↳ 1: comp_definition_list function_definition_list                                                                                                                                                                                                                                                                                                function_definition_list main_unit
                                       ↳ 99: function_definition_list function_definition
                                                                      ↳ 104: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl function_command_list                                                                                                                KW_RETURN expression ';' KW_ENDDEF ';'
                                                                                                                                                                                   ↳ 84: function_command
                                                                                                                                                                                         ↳ 90: • KW_FOR general_variable KW_IN '[' expression ':' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';'
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl • KW_FOR general_variable KW_IN '[' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';' KW_RETURN expression ';' KW_ENDDEF ';' main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                        $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list                                                                                                                                                                                                                                                                                       main_unit
                                                                 ↳ 99: function_definition_list function_definition
                                                                                                ↳ 103: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl_list    function_command_list                                                                                               KW_RETURN expression ';' KW_ENDDEF ';'
                                                                                                                                                                                        ↳ 53: local_var_const_decl • ↳ 84: function_command
                                                                                                                                                                                                                           ↳ 89: KW_FOR general_variable KW_IN '[' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';'

    shift/reduce conflict on token KW_WHILE:
       53 local_var_const_decl_list: local_var_const_decl •
       92 function_command: • KW_WHILE '(' expression ')' ':' function_command_list KW_ENDWHILE ';'
      First example: comp_definition_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl • KW_WHILE '(' expression ')' ':' function_command_list KW_ENDWHILE ';' KW_RETURN expression ';' KW_ENDDEF ';' function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                               $end
             ↳ 1: comp_definition_list function_definition_list                                                                                                                                                                                                                                               function_definition_list main_unit
                                       ↳ 99: function_definition_list function_definition
                                                                      ↳ 104: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl function_command_list                                                               KW_RETURN expression ';' KW_ENDDEF ';'
                                                                                                                                                                                   ↳ 84: function_command
                                                                                                                                                                                         ↳ 92: • KW_WHILE '(' expression ')' ':' function_command_list KW_ENDWHILE ';'
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl • KW_WHILE '(' expression ')' ':' function_command_list KW_ENDWHILE ';' KW_RETURN expression ';' KW_ENDDEF ';' main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                      $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list                                                                                                                                                                                                                                                     main_unit
                                                                 ↳ 99: function_definition_list function_definition
                                                                                                ↳ 103: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl_list    function_command_list                                                             KW_RETURN expression ';' KW_ENDDEF ';'
                                                                                                                                                                                        ↳ 53: local_var_const_decl • ↳ 84: function_command
                                                                                                                                                                                                                           ↳ 92: KW_WHILE '(' expression ')' ':' function_command_list KW_ENDWHILE ';'

    shift/reduce conflict on token KW_BREAK:
       53 local_var_const_decl_list: local_var_const_decl •
       93 function_command: • KW_BREAK ';'
      First example: comp_definition_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl • KW_BREAK ';' KW_RETURN expression ';' KW_ENDDEF ';' function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                      $end
             ↳ 1: comp_definition_list function_definition_list                                                                                                                                                                                      function_definition_list main_unit
                                       ↳ 99: function_definition_list function_definition
                                                                      ↳ 104: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl function_command_list      KW_RETURN expression ';' KW_ENDDEF ';'
                                                                                                                                                                                   ↳ 84: function_command
                                                                                                                                                                                         ↳ 93: • KW_BREAK ';'
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl • KW_BREAK ';' KW_RETURN expression ';' KW_ENDDEF ';' main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                             $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list                                                                                                                                                                                            main_unit
                                                                 ↳ 99: function_definition_list function_definition
                                                                                                ↳ 103: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl_list    function_command_list    KW_RETURN expression ';' KW_ENDDEF ';'
                                                                                                                                                                                        ↳ 53: local_var_const_decl • ↳ 84: function_command
                                                                                                                                                                                                                           ↳ 93: KW_BREAK ';'

    shift/reduce conflict on token KW_CONTINUE:
       53 local_var_const_decl_list: local_var_const_decl •
       94 function_command: • KW_CONTINUE ';'
      First example: comp_definition_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl • KW_CONTINUE ';' KW_RETURN expression ';' KW_ENDDEF ';' function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                         $end
             ↳ 1: comp_definition_list function_definition_list                                                                                                                                                                                         function_definition_list main_unit
                                       ↳ 99: function_definition_list function_definition
                                                                      ↳ 104: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl function_command_list         KW_RETURN expression ';' KW_ENDDEF ';'
                                                                                                                                                                                   ↳ 84: function_command
                                                                                                                                                                                         ↳ 94: • KW_CONTINUE ';'
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl • KW_CONTINUE ';' KW_RETURN expression ';' KW_ENDDEF ';' main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list                                                                                                                                                                                               main_unit
                                                                 ↳ 99: function_definition_list function_definition
                                                                                                ↳ 103: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl_list    function_command_list       KW_RETURN expression ';' KW_ENDDEF ';'
                                                                                                                                                                                        ↳ 53: local_var_const_decl • ↳ 84: function_command
                                                                                                                                                                                                                           ↳ 94: KW_CONTINUE ';'

    shift/reduce conflict on token KW_RETURN:
       53 local_var_const_decl_list: local_var_const_decl •
       95 function_command: • KW_RETURN ';'
      First example: comp_definition_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl • KW_RETURN ';' KW_RETURN expression ';' KW_ENDDEF ';' function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                       $end
             ↳ 1: comp_definition_list function_definition_list                                                                                                                                                                                       function_definition_list main_unit
                                       ↳ 99: function_definition_list function_definition
                                                                      ↳ 104: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl function_command_list       KW_RETURN expression ';' KW_ENDDEF ';'
                                                                                                                                                                                   ↳ 84: function_command
                                                                                                                                                                                         ↳ 95: • KW_RETURN ';'
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl • KW_RETURN ';' KW_RETURN expression ';' KW_ENDDEF ';' main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                              $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list                                                                                                                                                                                             main_unit
                                                                 ↳ 99: function_definition_list function_definition
                                                                                                ↳ 103: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl_list    function_command_list     KW_RETURN expression ';' KW_ENDDEF ';'
                                                                                                                                                                                        ↳ 53: local_var_const_decl • ↳ 84: function_command
                                                                                                                                                                                                                           ↳ 95: KW_RETURN ';'

    shift/reduce conflict on token KW_RETURN:
       53 local_var_const_decl_list: local_var_const_decl •
       96 function_command: • KW_RETURN expression ';'
      First example: comp_definition_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl • KW_RETURN expression ';' KW_RETURN expression ';' KW_ENDDEF ';' function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                  $end
             ↳ 1: comp_definition_list function_definition_list                                                                                                                                                                                                  function_definition_list main_unit
                                       ↳ 99: function_definition_list function_definition
                                                                      ↳ 104: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl function_command_list                  KW_RETURN expression ';' KW_ENDDEF ';'
                                                                                                                                                                                   ↳ 84: function_command
                                                                                                                                                                                         ↳ 96: • KW_RETURN expression ';'
      Second example: comp_definition_list local_var_const_decl_list function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl • KW_RETURN ';' KW_RETURN expression ';' KW_ENDDEF ';' main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                              $end
             ↳ 1: comp_definition_list local_var_const_decl_list function_definition_list                                                                                                                                                                                             main_unit
                                                                 ↳ 99: function_definition_list function_definition
                                                                                                ↳ 103: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl_list    function_command_list     KW_RETURN expression ';' KW_ENDDEF ';'
                                                                                                                                                                                        ↳ 53: local_var_const_decl • ↳ 84: function_command
                                                                                                                                                                                                                           ↳ 95: KW_RETURN ';'



State 374

   66 general_function_call: • function_call
   67                      | • IDENTIFIER '.' function_call
   68                      | • IDENTIFIER '[' expression ']' '.' function_call
   69 function_call: • IDENTIFIER '(' ')'
   70              | • IDENTIFIER '(' expr_comma_list ')'
   80 general_variable: • IDENTIFIER
   81                 | • IDENTIFIER '.' '#' IDENTIFIER
   82                 | • IDENTIFIER '[' expression ']'
   83                 | • IDENTIFIER '.' '#' IDENTIFIER '[' expression ']'
   85 function_command_list: function_command_list • function_command
   86 function_command: • general_variable assignment_operator expression ';'
   87                 | • KW_IF '(' expression ')' ':' function_command_list KW_ENDIF ';'
   88                 | • KW_IF '(' expression ')' ':' function_command_list KW_ELSE ':' function_command_list KW_ENDIF ';'
   89                 | • KW_FOR general_variable KW_IN '[' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';'
   90                 | • KW_FOR general_variable KW_IN '[' expression ':' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';'
   91                 | • general_variable OP_ASSIGN '[' expression KW_FOR general_variable ':' POSINT ']' ':' basic_data_type ';'
   92                 | • KW_WHILE '(' expression ')' ':' function_command_list KW_ENDWHILE ';'
   93                 | • KW_BREAK ';'
   94                 | • KW_CONTINUE ';'
   95                 | • KW_RETURN ';'
   96                 | • KW_RETURN expression ';'
   97                 | • general_function_call ';'
  105 function_definition: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' function_command_list • KW_RETURN expression ';' KW_ENDDEF ';'

    IDENTIFIER   shift, and go to state 270
    KW_IF        shift, and go to state 216
    KW_CONTINUE  shift, and go to state 217
    KW_FOR       shift, and go to state 218
    KW_WHILE     shift, and go to state 219
    KW_BREAK     shift, and go to state 220
    KW_RETURN    shift, and go to state 403

    general_function_call  go to state 224
    function_call          go to state 70
    general_variable       go to state 225
    function_command       go to state 283


State 375

  100 function_definition: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl_list function_command_list KW_ENDDEF ';' •

    $default  reduce using rule 100 (function_definition)


State 376

  101 function_definition: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl function_command_list KW_ENDDEF ';' •

    $default  reduce using rule 101 (function_definition)


State 377

   68 general_function_call: IDENTIFIER '[' expression ']' '.' • function_call
   69 function_call: • IDENTIFIER '(' ')'
   70              | • IDENTIFIER '(' expr_comma_list ')'

    IDENTIFIER  shift, and go to state 301

    function_call  go to state 252


State 378

    2 primary_expression: • POSINT
    3                   | • SCALAR
    4                   | • IDENTIFIER
    5                   | • STRING
    6                   | • KW_TRUE
    7                   | • KW_FALSE
    8                   | • '(' logic_expression ')'
    9 math_expression: • primary_expression
   10                | • '+' math_expression
   11                | • '-' math_expression
   12                | • math_expression '+' math_expression
   13                | • math_expression '-' math_expression
   14                | • math_expression '*' math_expression
   15                | • math_expression '/' math_expression
   16                | • math_expression '%' math_expression
   17                | • math_expression OP_PAW math_expression
   18                | • IDENTIFIER '[' expression ']'
   19                | • IDENTIFIER '[' expression ']' '.' IDENTIFIER
   20                | • IDENTIFIER '[' expression ']' '.' IDENTIFIER '[' expression ']'
   21                | • general_function_call
   22                | • IDENTIFIER '.' IDENTIFIER '[' expression ']'
   23                | • IDENTIFIER '.' IDENTIFIER
   24 relational_expression: • math_expression
   25                      | • relational_expression OP_EQUALS relational_expression
   26                      | • relational_expression OP_NE relational_expression
   27                      | • relational_expression '>' relational_expression
   28                      | • relational_expression '<' relational_expression
   29                      | • relational_expression OP_LE relational_expression
   30                      | • relational_expression OP_GE relational_expression
   31 logic_expression: • relational_expression
   32                 | • OP_NOT logic_expression
   33                 | • logic_expression OP_AND logic_expression
   34                 | • logic_expression OP_OR logic_expression
   35 expression: • logic_expression
   66 general_function_call: • function_call
   67                      | • IDENTIFIER '.' function_call
   68                      | • IDENTIFIER '[' expression ']' '.' function_call
   69 function_call: • IDENTIFIER '(' ')'
   70              | • IDENTIFIER '(' expr_comma_list ')'
   83 general_variable: IDENTIFIER '.' '#' IDENTIFIER '[' • expression ']'

    IDENTIFIER  shift, and go to state 53
    POSINT      shift, and go to state 54
    SCALAR      shift, and go to state 55
    STRING      shift, and go to state 56
    OP_NOT      shift, and go to state 57
    KW_TRUE     shift, and go to state 58
    KW_FALSE    shift, and go to state 59
    '-'         shift, and go to state 60
    '+'         shift, and go to state 61
    '('         shift, and go to state 62

    primary_expression     go to state 64
    math_expression        go to state 65
    relational_expression  go to state 66
    logic_expression       go to state 67
    expression             go to state 404
    general_function_call  go to state 69
    function_call          go to state 70


State 379

   66 general_function_call: • function_call
   67                      | • IDENTIFIER '.' function_call
   68                      | • IDENTIFIER '[' expression ']' '.' function_call
   69 function_call: • IDENTIFIER '(' ')'
   70              | • IDENTIFIER '(' expr_comma_list ')'
   80 general_variable: • IDENTIFIER
   81                 | • IDENTIFIER '.' '#' IDENTIFIER
   82                 | • IDENTIFIER '[' expression ']'
   83                 | • IDENTIFIER '.' '#' IDENTIFIER '[' expression ']'
   84 function_command_list: • function_command
   85                      | • function_command_list function_command
   86 function_command: • general_variable assignment_operator expression ';'
   87                 | • KW_IF '(' expression ')' ':' function_command_list KW_ENDIF ';'
   87                 | KW_IF '(' expression ')' ':' • function_command_list KW_ENDIF ';'
   88                 | • KW_IF '(' expression ')' ':' function_command_list KW_ELSE ':' function_command_list KW_ENDIF ';'
   88                 | KW_IF '(' expression ')' ':' • function_command_list KW_ELSE ':' function_command_list KW_ENDIF ';'
   89                 | • KW_FOR general_variable KW_IN '[' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';'
   90                 | • KW_FOR general_variable KW_IN '[' expression ':' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';'
   91                 | • general_variable OP_ASSIGN '[' expression KW_FOR general_variable ':' POSINT ']' ':' basic_data_type ';'
   92                 | • KW_WHILE '(' expression ')' ':' function_command_list KW_ENDWHILE ';'
   93                 | • KW_BREAK ';'
   94                 | • KW_CONTINUE ';'
   95                 | • KW_RETURN ';'
   96                 | • KW_RETURN expression ';'
   97                 | • general_function_call ';'

    IDENTIFIER   shift, and go to state 270
    KW_IF        shift, and go to state 216
    KW_CONTINUE  shift, and go to state 217
    KW_FOR       shift, and go to state 218
    KW_WHILE     shift, and go to state 219
    KW_BREAK     shift, and go to state 220
    KW_RETURN    shift, and go to state 221

    general_function_call  go to state 224
    function_call          go to state 70
    general_variable       go to state 225
    function_command_list  go to state 405
    function_command       go to state 227


State 380

   82 general_variable: IDENTIFIER '[' expression ']' •

    $default  reduce using rule 82 (general_variable)


State 381

   89 function_command: KW_FOR general_variable KW_IN '[' expression • ':' expression ']' ':' function_command_list KW_ENDFOR ';'
   90                 | KW_FOR general_variable KW_IN '[' expression • ':' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';'

    ':'  shift, and go to state 406


State 382

   66 general_function_call: • function_call
   67                      | • IDENTIFIER '.' function_call
   68                      | • IDENTIFIER '[' expression ']' '.' function_call
   69 function_call: • IDENTIFIER '(' ')'
   70              | • IDENTIFIER '(' expr_comma_list ')'
   80 general_variable: • IDENTIFIER
   81                 | • IDENTIFIER '.' '#' IDENTIFIER
   82                 | • IDENTIFIER '[' expression ']'
   83                 | • IDENTIFIER '.' '#' IDENTIFIER '[' expression ']'
   84 function_command_list: • function_command
   85                      | • function_command_list function_command
   86 function_command: • general_variable assignment_operator expression ';'
   87                 | • KW_IF '(' expression ')' ':' function_command_list KW_ENDIF ';'
   88                 | • KW_IF '(' expression ')' ':' function_command_list KW_ELSE ':' function_command_list KW_ENDIF ';'
   89                 | • KW_FOR general_variable KW_IN '[' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';'
   90                 | • KW_FOR general_variable KW_IN '[' expression ':' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';'
   91                 | • general_variable OP_ASSIGN '[' expression KW_FOR general_variable ':' POSINT ']' ':' basic_data_type ';'
   92                 | • KW_WHILE '(' expression ')' ':' function_command_list KW_ENDWHILE ';'
   92                 | KW_WHILE '(' expression ')' ':' • function_command_list KW_ENDWHILE ';'
   93                 | • KW_BREAK ';'
   94                 | • KW_CONTINUE ';'
   95                 | • KW_RETURN ';'
   96                 | • KW_RETURN expression ';'
   97                 | • general_function_call ';'

    IDENTIFIER   shift, and go to state 270
    KW_IF        shift, and go to state 216
    KW_CONTINUE  shift, and go to state 217
    KW_FOR       shift, and go to state 218
    KW_WHILE     shift, and go to state 219
    KW_BREAK     shift, and go to state 220
    KW_RETURN    shift, and go to state 221

    general_function_call  go to state 224
    function_call          go to state 70
    general_variable       go to state 225
    function_command_list  go to state 407
    function_command       go to state 227


State 383

   80 general_variable: • IDENTIFIER
   81                 | • IDENTIFIER '.' '#' IDENTIFIER
   82                 | • IDENTIFIER '[' expression ']'
   83                 | • IDENTIFIER '.' '#' IDENTIFIER '[' expression ']'
   91 function_command: general_variable OP_ASSIGN '[' expression KW_FOR • general_variable ':' POSINT ']' ':' basic_data_type ';'

    IDENTIFIER  shift, and go to state 264

    general_variable  go to state 408


State 384

  136 comp_math_expression: '#' IDENTIFIER '[' comp_expression ']' '.' '#' • IDENTIFIER
  137                     | '#' IDENTIFIER '[' comp_expression ']' '.' '#' • IDENTIFIER '[' comp_expression ']'

    IDENTIFIER  shift, and go to state 409


State 385

  115 general_comp_function_call: '#' IDENTIFIER '[' comp_expression ']' '.' comp_function_call •

    $default  reduce using rule 115 (general_comp_function_call)


State 386

  139 comp_math_expression: '#' IDENTIFIER '.' '#' IDENTIFIER '[' comp_expression • ']'

    ']'  shift, and go to state 410


State 387

   42 identifier_single: • IDENTIFIER
   43                  | • IDENTIFIER '[' POSINT ']'
   44                  | • IDENTIFIER '[' ']'
   45 identifier_list: • identifier_single ',' identifier_single
   46                | • identifier_single ',' identifier_list
   47                | • identifier_single
   48 constant_decl: • KW_CONST IDENTIFIER '=' expression ':' basic_data_type ';'
   49              | • KW_CONST IDENTIFIER '[' expression ']' '=' expression ':' basic_data_type ';'
   50              | • KW_CONST IDENTIFIER '[' ']' '=' expression ':' basic_data_type ';'
   51 local_var_const_decl_list: • constant_decl local_var_const_decl_list
   52                          | • variable_decl local_var_const_decl_list
   53                          | • local_var_const_decl
   54                          | ε •  [IDENTIFIER, KW_IF, KW_CONTINUE, KW_FOR, KW_WHILE, KW_BREAK, KW_RETURN, '#']
   55 local_var_const_decl: • variable_decl
   56                     | • constant_decl
   57                     | • variable_decl constant_decl
   58                     | • constant_decl variable_decl
   59 variable_decl: • identifier_list ':' basic_data_type ';'
   60              | • parameter_declaration ';'
   61 parameter_declaration: • IDENTIFIER ':' basic_data_type
   62                      | • IDENTIFIER '[' ']' ':' basic_data_type
   80 general_variable: • IDENTIFIER
   81                 | • IDENTIFIER '.' '#' IDENTIFIER
   82                 | • IDENTIFIER '[' expression ']'
   83                 | • IDENTIFIER '.' '#' IDENTIFIER '[' expression ']'
  106 comp_variable: • '#' IDENTIFIER
  107              | • '#' IDENTIFIER '[' comp_expression ']'
  108              | • comp_variable '.' '#' IDENTIFIER
  109              | • comp_variable '.' '#' IDENTIFIER '[' POSINT ']'
  110              | • general_variable
  111 comp_function_call: • IDENTIFIER '(' ')'
  112                   | • IDENTIFIER '(' comp_expr_comma_list ')'
  113 general_comp_function_call: • comp_function_call
  114                           | • '#' IDENTIFIER '.' comp_function_call
  115                           | • '#' IDENTIFIER '[' comp_expression ']' '.' comp_function_call
  153 comp_command_list: • comp_command
  154                  | • comp_command_list comp_command
  155 comp_command: • comp_variable assignment_operator comp_expression ';'
  156             | • KW_IF '(' comp_expression ')' ':' comp_command_list KW_ENDIF ';'
  157             | • KW_IF '(' comp_expression ')' ':' comp_command_list KW_ELSE ':' comp_command_list KW_ENDIF ';'
  158             | • KW_FOR comp_variable KW_IN '[' comp_expression ':' comp_expression ']' ':' comp_command_list KW_ENDFOR ';'
  159             | • KW_FOR comp_variable KW_IN '[' comp_expression ':' comp_expression ':' comp_expression ']' ':' comp_command_list KW_ENDFOR ';'
  160             | • comp_variable OP_ASSIGN '[' comp_expression KW_FOR comp_variable ':' POSINT ']' ':' basic_data_type ';'
  161             | • KW_WHILE '(' comp_expression ')' ':' comp_command_list KW_ENDWHILE ';'
  162             | • KW_BREAK ';'
  163             | • KW_CONTINUE ';'
  164             | • KW_RETURN ';'
  165             | • KW_RETURN comp_expression ';'
  166             | • general_comp_function_call ';'
  172 comp_function_definition: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' • local_var_const_decl_list comp_command_list KW_RETURN comp_expression ';' KW_ENDDEF ';'
  173                         | KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' • comp_command_list KW_RETURN comp_expression ';' KW_ENDDEF ';'
  174                         | KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' • local_var_const_decl comp_command_list KW_RETURN comp_expression ';' KW_ENDDEF ';'

    IDENTIFIER   shift, and go to state 319
    KW_IF        shift, and go to state 320
    KW_CONTINUE  shift, and go to state 321
    KW_FOR       shift, and go to state 322
    KW_WHILE     shift, and go to state 323
    KW_BREAK     shift, and go to state 324
    KW_CONST     shift, and go to state 6
    KW_RETURN    shift, and go to state 325
    '#'          shift, and go to state 326

    IDENTIFIER   [reduce using rule 54 (local_var_const_decl_list)]
    KW_IF        [reduce using rule 54 (local_var_const_decl_list)]
    KW_CONTINUE  [reduce using rule 54 (local_var_const_decl_list)]
    KW_FOR       [reduce using rule 54 (local_var_const_decl_list)]
    KW_WHILE     [reduce using rule 54 (local_var_const_decl_list)]
    KW_BREAK     [reduce using rule 54 (local_var_const_decl_list)]
    KW_RETURN    [reduce using rule 54 (local_var_const_decl_list)]
    '#'          [reduce using rule 54 (local_var_const_decl_list)]

    identifier_single           go to state 7
    identifier_list             go to state 8
    constant_decl               go to state 9
    local_var_const_decl_list   go to state 411
    local_var_const_decl        go to state 412
    variable_decl               go to state 12
    parameter_declaration       go to state 13
    general_variable            go to state 329
    comp_variable               go to state 330
    comp_function_call          go to state 160
    general_comp_function_call  go to state 331
    comp_command_list           go to state 413
    comp_command                go to state 333

    shift/reduce conflict on token IDENTIFIER:
       54 local_var_const_decl_list: ε •
       42 identifier_single: • IDENTIFIER
      First example: comp_definition_list KW_COMP IDENTIFIER ':' KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' • IDENTIFIER ',' identifier_single ':' basic_data_type ';' local_var_const_decl_list comp_command_list KW_RETURN comp_expression ';' KW_ENDDEF ';' comp_function_definition KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                                                                                         $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                                                                                        local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER ':' comp_function_definition_list                                                                                                                                                                                                                                                                      KW_ENDCOMP ';'
                                                                            ↳ 168: comp_function_definition                                                                                                                                                                                                                                           comp_function_definition
                                                                                   ↳ 172: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl_list                                                                                    comp_command_list KW_RETURN comp_expression ';' KW_ENDDEF ';'
                                                                                                                                                                           ↳ 52: variable_decl                                                                local_var_const_decl_list
                                                                                                                                                                                 ↳ 59: identifier_list                                ':' basic_data_type ';'
                                                                                                                                                                                       ↳ 45: identifier_single  ',' identifier_single
                                                                                                                                                                                             ↳ 42: • IDENTIFIER
      Second example: comp_definition_list KW_COMP IDENTIFIER ':' comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' • IDENTIFIER assignment_operator comp_expression ';' KW_RETURN comp_expression ';' KW_ENDDEF ';' KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                                                                       $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                                                                      local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER ':' comp_function_definition_list                                                                                                                                                                                                                                                    KW_ENDCOMP ';'
                                                                            ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                                 ↳ 172: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl_list comp_command_list                                                             KW_RETURN comp_expression ';' KW_ENDDEF ';'
                                                                                                                                                                                                         ↳ 54: ε •                 ↳ 153: comp_command
                                                                                                                                                                                                                                          ↳ 155: comp_variable           assignment_operator comp_expression ';'
                                                                                                                                                                                                                                                 ↳ 110: general_variable
                                                                                                                                                                                                                                                        ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       54 local_var_const_decl_list: ε •
       43 identifier_single: • IDENTIFIER '[' POSINT ']'
      First example: comp_definition_list KW_COMP IDENTIFIER ':' KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' • IDENTIFIER '[' POSINT ']' ',' identifier_single ':' basic_data_type ';' local_var_const_decl_list comp_command_list KW_RETURN comp_expression ';' KW_ENDDEF ';' comp_function_definition KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                                                                                                        $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                                                                                                       local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER ':' comp_function_definition_list                                                                                                                                                                                                                                                                                     KW_ENDCOMP ';'
                                                                            ↳ 168: comp_function_definition                                                                                                                                                                                                                                                          comp_function_definition
                                                                                   ↳ 172: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl_list                                                                                                   comp_command_list KW_RETURN comp_expression ';' KW_ENDDEF ';'
                                                                                                                                                                           ↳ 52: variable_decl                                                                               local_var_const_decl_list
                                                                                                                                                                                 ↳ 59: identifier_list                                               ':' basic_data_type ';'
                                                                                                                                                                                       ↳ 45: identifier_single                 ',' identifier_single
                                                                                                                                                                                             ↳ 43: • IDENTIFIER '[' POSINT ']'
      Second example: comp_definition_list KW_COMP IDENTIFIER ':' comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' • IDENTIFIER assignment_operator comp_expression ';' KW_RETURN comp_expression ';' KW_ENDDEF ';' KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                                                                       $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                                                                      local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER ':' comp_function_definition_list                                                                                                                                                                                                                                                    KW_ENDCOMP ';'
                                                                            ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                                 ↳ 172: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl_list comp_command_list                                                             KW_RETURN comp_expression ';' KW_ENDDEF ';'
                                                                                                                                                                                                         ↳ 54: ε •                 ↳ 153: comp_command
                                                                                                                                                                                                                                          ↳ 155: comp_variable           assignment_operator comp_expression ';'
                                                                                                                                                                                                                                                 ↳ 110: general_variable
                                                                                                                                                                                                                                                        ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       54 local_var_const_decl_list: ε •
       44 identifier_single: • IDENTIFIER '[' ']'
      First example: comp_definition_list KW_COMP IDENTIFIER ':' KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' • IDENTIFIER '[' ']' ',' identifier_single ':' basic_data_type ';' local_var_const_decl_list comp_command_list KW_RETURN comp_expression ';' KW_ENDDEF ';' comp_function_definition KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                                                                                                 $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                                                                                                local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER ':' comp_function_definition_list                                                                                                                                                                                                                                                                              KW_ENDCOMP ';'
                                                                            ↳ 168: comp_function_definition                                                                                                                                                                                                                                                   comp_function_definition
                                                                                   ↳ 172: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl_list                                                                                            comp_command_list KW_RETURN comp_expression ';' KW_ENDDEF ';'
                                                                                                                                                                           ↳ 52: variable_decl                                                                        local_var_const_decl_list
                                                                                                                                                                                 ↳ 59: identifier_list                                        ':' basic_data_type ';'
                                                                                                                                                                                       ↳ 45: identifier_single          ',' identifier_single
                                                                                                                                                                                             ↳ 44: • IDENTIFIER '[' ']'
      Second example: comp_definition_list KW_COMP IDENTIFIER ':' comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' • IDENTIFIER assignment_operator comp_expression ';' KW_RETURN comp_expression ';' KW_ENDDEF ';' KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                                                                       $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                                                                      local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER ':' comp_function_definition_list                                                                                                                                                                                                                                                    KW_ENDCOMP ';'
                                                                            ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                                 ↳ 172: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl_list comp_command_list                                                             KW_RETURN comp_expression ';' KW_ENDDEF ';'
                                                                                                                                                                                                         ↳ 54: ε •                 ↳ 153: comp_command
                                                                                                                                                                                                                                          ↳ 155: comp_variable           assignment_operator comp_expression ';'
                                                                                                                                                                                                                                                 ↳ 110: general_variable
                                                                                                                                                                                                                                                        ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       54 local_var_const_decl_list: ε •
       61 parameter_declaration: • IDENTIFIER ':' basic_data_type
      First example: comp_definition_list KW_COMP IDENTIFIER ':' KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' • IDENTIFIER ':' basic_data_type ';' local_var_const_decl_list comp_command_list KW_RETURN comp_expression ';' KW_ENDDEF ';' comp_function_definition KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                                                             $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                                                            local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER ':' comp_function_definition_list                                                                                                                                                                                                                                          KW_ENDCOMP ';'
                                                                            ↳ 168: comp_function_definition                                                                                                                                                                                                               comp_function_definition
                                                                                   ↳ 172: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl_list                                                        comp_command_list KW_RETURN comp_expression ';' KW_ENDDEF ';'
                                                                                                                                                                           ↳ 52: variable_decl                                    local_var_const_decl_list
                                                                                                                                                                                 ↳ 60: parameter_declaration                  ';'
                                                                                                                                                                                       ↳ 61: • IDENTIFIER ':' basic_data_type
      Second example: comp_definition_list KW_COMP IDENTIFIER ':' comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' • IDENTIFIER assignment_operator comp_expression ';' KW_RETURN comp_expression ';' KW_ENDDEF ';' KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                                                                       $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                                                                      local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER ':' comp_function_definition_list                                                                                                                                                                                                                                                    KW_ENDCOMP ';'
                                                                            ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                                 ↳ 172: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl_list comp_command_list                                                             KW_RETURN comp_expression ';' KW_ENDDEF ';'
                                                                                                                                                                                                         ↳ 54: ε •                 ↳ 153: comp_command
                                                                                                                                                                                                                                          ↳ 155: comp_variable           assignment_operator comp_expression ';'
                                                                                                                                                                                                                                                 ↳ 110: general_variable
                                                                                                                                                                                                                                                        ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       54 local_var_const_decl_list: ε •
       62 parameter_declaration: • IDENTIFIER '[' ']' ':' basic_data_type
      First example: comp_definition_list KW_COMP IDENTIFIER ':' KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' • IDENTIFIER '[' ']' ':' basic_data_type ';' local_var_const_decl_list comp_command_list KW_RETURN comp_expression ';' KW_ENDDEF ';' comp_function_definition KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                                                                     $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                                                                    local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER ':' comp_function_definition_list                                                                                                                                                                                                                                                  KW_ENDCOMP ';'
                                                                            ↳ 168: comp_function_definition                                                                                                                                                                                                                       comp_function_definition
                                                                                   ↳ 172: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl_list                                                                comp_command_list KW_RETURN comp_expression ';' KW_ENDDEF ';'
                                                                                                                                                                           ↳ 52: variable_decl                                            local_var_const_decl_list
                                                                                                                                                                                 ↳ 60: parameter_declaration                          ';'
                                                                                                                                                                                       ↳ 62: • IDENTIFIER '[' ']' ':' basic_data_type
      Second example: comp_definition_list KW_COMP IDENTIFIER ':' comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' • IDENTIFIER assignment_operator comp_expression ';' KW_RETURN comp_expression ';' KW_ENDDEF ';' KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                                                                       $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                                                                      local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER ':' comp_function_definition_list                                                                                                                                                                                                                                                    KW_ENDCOMP ';'
                                                                            ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                                 ↳ 172: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl_list comp_command_list                                                             KW_RETURN comp_expression ';' KW_ENDDEF ';'
                                                                                                                                                                                                         ↳ 54: ε •                 ↳ 153: comp_command
                                                                                                                                                                                                                                          ↳ 155: comp_variable           assignment_operator comp_expression ';'
                                                                                                                                                                                                                                                 ↳ 110: general_variable
                                                                                                                                                                                                                                                        ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       54 local_var_const_decl_list: ε •
       80 general_variable: • IDENTIFIER
      First example: comp_definition_list KW_COMP IDENTIFIER comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' • IDENTIFIER assignment_operator comp_expression ';' KW_RETURN comp_expression ';' KW_ENDDEF ';' comp_function_definition_list KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                                                                         $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                                                                        local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER comp_function_definition_list                                                                                                                                                                                                                            comp_function_definition_list KW_ENDCOMP ';'
                                                                        ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                             ↳ 173: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' comp_command_list                                                               KW_RETURN comp_expression ';' KW_ENDDEF ';'
                                                                                                                                                                                                     ↳ 153: comp_command
                                                                                                                                                                                                            ↳ 155: comp_variable             assignment_operator comp_expression ';'
                                                                                                                                                                                                                   ↳ 110: general_variable
                                                                                                                                                                                                                          ↳ 80: • IDENTIFIER
      Second example: comp_definition_list KW_COMP IDENTIFIER ':' comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' • IDENTIFIER assignment_operator comp_expression ';' KW_RETURN comp_expression ';' KW_ENDDEF ';' KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                                                                       $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                                                                      local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER ':' comp_function_definition_list                                                                                                                                                                                                                                                    KW_ENDCOMP ';'
                                                                            ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                                 ↳ 172: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl_list comp_command_list                                                             KW_RETURN comp_expression ';' KW_ENDDEF ';'
                                                                                                                                                                                                         ↳ 54: ε •                 ↳ 153: comp_command
                                                                                                                                                                                                                                          ↳ 155: comp_variable           assignment_operator comp_expression ';'
                                                                                                                                                                                                                                                 ↳ 110: general_variable
                                                                                                                                                                                                                                                        ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       54 local_var_const_decl_list: ε •
       81 general_variable: • IDENTIFIER '.' '#' IDENTIFIER
      First example: comp_definition_list KW_COMP IDENTIFIER comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' • IDENTIFIER '.' '#' IDENTIFIER assignment_operator comp_expression ';' KW_RETURN comp_expression ';' KW_ENDDEF ';' comp_function_definition_list KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                                                                                            $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                                                                                           local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER comp_function_definition_list                                                                                                                                                                                                                                               comp_function_definition_list KW_ENDCOMP ';'
                                                                        ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                             ↳ 173: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' comp_command_list                                                                                  KW_RETURN comp_expression ';' KW_ENDDEF ';'
                                                                                                                                                                                                     ↳ 153: comp_command
                                                                                                                                                                                                            ↳ 155: comp_variable                                assignment_operator comp_expression ';'
                                                                                                                                                                                                                   ↳ 110: general_variable
                                                                                                                                                                                                                          ↳ 81: • IDENTIFIER '.' '#' IDENTIFIER
      Second example: comp_definition_list KW_COMP IDENTIFIER ':' comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' • IDENTIFIER assignment_operator comp_expression ';' KW_RETURN comp_expression ';' KW_ENDDEF ';' KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                                                                       $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                                                                      local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER ':' comp_function_definition_list                                                                                                                                                                                                                                                    KW_ENDCOMP ';'
                                                                            ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                                 ↳ 172: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl_list comp_command_list                                                             KW_RETURN comp_expression ';' KW_ENDDEF ';'
                                                                                                                                                                                                         ↳ 54: ε •                 ↳ 153: comp_command
                                                                                                                                                                                                                                          ↳ 155: comp_variable           assignment_operator comp_expression ';'
                                                                                                                                                                                                                                                 ↳ 110: general_variable
                                                                                                                                                                                                                                                        ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       54 local_var_const_decl_list: ε •
       82 general_variable: • IDENTIFIER '[' expression ']'
      First example: comp_definition_list KW_COMP IDENTIFIER comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' • IDENTIFIER '[' expression ']' assignment_operator comp_expression ';' KW_RETURN comp_expression ';' KW_ENDDEF ';' comp_function_definition_list KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                                                                                            $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                                                                                           local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER comp_function_definition_list                                                                                                                                                                                                                                               comp_function_definition_list KW_ENDCOMP ';'
                                                                        ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                             ↳ 173: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' comp_command_list                                                                                  KW_RETURN comp_expression ';' KW_ENDDEF ';'
                                                                                                                                                                                                     ↳ 153: comp_command
                                                                                                                                                                                                            ↳ 155: comp_variable                                assignment_operator comp_expression ';'
                                                                                                                                                                                                                   ↳ 110: general_variable
                                                                                                                                                                                                                          ↳ 82: • IDENTIFIER '[' expression ']'
      Second example: comp_definition_list KW_COMP IDENTIFIER ':' comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' • IDENTIFIER assignment_operator comp_expression ';' KW_RETURN comp_expression ';' KW_ENDDEF ';' KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                                                                       $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                                                                      local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER ':' comp_function_definition_list                                                                                                                                                                                                                                                    KW_ENDCOMP ';'
                                                                            ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                                 ↳ 172: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl_list comp_command_list                                                             KW_RETURN comp_expression ';' KW_ENDDEF ';'
                                                                                                                                                                                                         ↳ 54: ε •                 ↳ 153: comp_command
                                                                                                                                                                                                                                          ↳ 155: comp_variable           assignment_operator comp_expression ';'
                                                                                                                                                                                                                                                 ↳ 110: general_variable
                                                                                                                                                                                                                                                        ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       54 local_var_const_decl_list: ε •
       83 general_variable: • IDENTIFIER '.' '#' IDENTIFIER '[' expression ']'
      First example: comp_definition_list KW_COMP IDENTIFIER comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' • IDENTIFIER '.' '#' IDENTIFIER '[' expression ']' assignment_operator comp_expression ';' KW_RETURN comp_expression ';' KW_ENDDEF ';' comp_function_definition_list KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                                                                                                               $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                                                                                                              local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER comp_function_definition_list                                                                                                                                                                                                                                                                  comp_function_definition_list KW_ENDCOMP ';'
                                                                        ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                             ↳ 173: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' comp_command_list                                                                                                     KW_RETURN comp_expression ';' KW_ENDDEF ';'
                                                                                                                                                                                                     ↳ 153: comp_command
                                                                                                                                                                                                            ↳ 155: comp_variable                                                   assignment_operator comp_expression ';'
                                                                                                                                                                                                                   ↳ 110: general_variable
                                                                                                                                                                                                                          ↳ 83: • IDENTIFIER '.' '#' IDENTIFIER '[' expression ']'
      Second example: comp_definition_list KW_COMP IDENTIFIER ':' comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' • IDENTIFIER assignment_operator comp_expression ';' KW_RETURN comp_expression ';' KW_ENDDEF ';' KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                                                                       $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                                                                      local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER ':' comp_function_definition_list                                                                                                                                                                                                                                                    KW_ENDCOMP ';'
                                                                            ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                                 ↳ 172: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl_list comp_command_list                                                             KW_RETURN comp_expression ';' KW_ENDDEF ';'
                                                                                                                                                                                                         ↳ 54: ε •                 ↳ 153: comp_command
                                                                                                                                                                                                                                          ↳ 155: comp_variable           assignment_operator comp_expression ';'
                                                                                                                                                                                                                                                 ↳ 110: general_variable
                                                                                                                                                                                                                                                        ↳ 80: IDENTIFIER

    shift/reduce conflict on token '#':
       54 local_var_const_decl_list: ε •
      106 comp_variable: • '#' IDENTIFIER
      First example: comp_definition_list KW_COMP IDENTIFIER comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' • '#' IDENTIFIER assignment_operator comp_expression ';' KW_RETURN comp_expression ';' KW_ENDDEF ';' comp_function_definition_list KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                                                                       $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                                                                      local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER comp_function_definition_list                                                                                                                                                                                                                          comp_function_definition_list KW_ENDCOMP ';'
                                                                        ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                             ↳ 173: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' comp_command_list                                                             KW_RETURN comp_expression ';' KW_ENDDEF ';'
                                                                                                                                                                                                     ↳ 153: comp_command
                                                                                                                                                                                                            ↳ 155: comp_variable           assignment_operator comp_expression ';'
                                                                                                                                                                                                                   ↳ 106: • '#' IDENTIFIER
      Second example: comp_definition_list KW_COMP IDENTIFIER ':' comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' • '#' IDENTIFIER assignment_operator comp_expression ';' KW_RETURN comp_expression ';' KW_ENDDEF ';' KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                                                                     $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                                                                    local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER ':' comp_function_definition_list                                                                                                                                                                                                                                                  KW_ENDCOMP ';'
                                                                            ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                                 ↳ 172: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl_list comp_command_list                                                           KW_RETURN comp_expression ';' KW_ENDDEF ';'
                                                                                                                                                                                                         ↳ 54: ε •                 ↳ 153: comp_command
                                                                                                                                                                                                                                          ↳ 155: comp_variable         assignment_operator comp_expression ';'
                                                                                                                                                                                                                                                 ↳ 106: '#' IDENTIFIER

    shift/reduce conflict on token '#':
       54 local_var_const_decl_list: ε •
      107 comp_variable: • '#' IDENTIFIER '[' comp_expression ']'
      First example: comp_definition_list KW_COMP IDENTIFIER comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' • '#' IDENTIFIER '[' comp_expression ']' assignment_operator comp_expression ';' KW_RETURN comp_expression ';' KW_ENDDEF ';' comp_function_definition_list KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                                                                                               $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                                                                                              local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER comp_function_definition_list                                                                                                                                                                                                                                                  comp_function_definition_list KW_ENDCOMP ';'
                                                                        ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                             ↳ 173: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' comp_command_list                                                                                     KW_RETURN comp_expression ';' KW_ENDDEF ';'
                                                                                                                                                                                                     ↳ 153: comp_command
                                                                                                                                                                                                            ↳ 155: comp_variable                                   assignment_operator comp_expression ';'
                                                                                                                                                                                                                   ↳ 107: • '#' IDENTIFIER '[' comp_expression ']'
      Second example: comp_definition_list KW_COMP IDENTIFIER ':' comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' • '#' IDENTIFIER assignment_operator comp_expression ';' KW_RETURN comp_expression ';' KW_ENDDEF ';' KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                                                                     $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                                                                    local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER ':' comp_function_definition_list                                                                                                                                                                                                                                                  KW_ENDCOMP ';'
                                                                            ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                                 ↳ 172: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl_list comp_command_list                                                           KW_RETURN comp_expression ';' KW_ENDDEF ';'
                                                                                                                                                                                                         ↳ 54: ε •                 ↳ 153: comp_command
                                                                                                                                                                                                                                          ↳ 155: comp_variable         assignment_operator comp_expression ';'
                                                                                                                                                                                                                                                 ↳ 106: '#' IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       54 local_var_const_decl_list: ε •
      111 comp_function_call: • IDENTIFIER '(' ')'
      First example: comp_definition_list KW_COMP IDENTIFIER comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' • IDENTIFIER '(' ')' ';' KW_RETURN comp_expression ';' KW_ENDDEF ';' comp_function_definition_list KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                                              $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                                             local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER comp_function_definition_list                                                                                                                                                                                                 comp_function_definition_list KW_ENDCOMP ';'
                                                                        ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                             ↳ 173: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' comp_command_list                                    KW_RETURN comp_expression ';' KW_ENDDEF ';'
                                                                                                                                                                                                     ↳ 153: comp_command
                                                                                                                                                                                                            ↳ 166: general_comp_function_call         ';'
                                                                                                                                                                                                                   ↳ 113: comp_function_call
                                                                                                                                                                                                                          ↳ 111: • IDENTIFIER '(' ')'
      Second example: comp_definition_list KW_COMP IDENTIFIER ':' comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' • IDENTIFIER assignment_operator comp_expression ';' KW_RETURN comp_expression ';' KW_ENDDEF ';' KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                                                                       $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                                                                      local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER ':' comp_function_definition_list                                                                                                                                                                                                                                                    KW_ENDCOMP ';'
                                                                            ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                                 ↳ 172: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl_list comp_command_list                                                             KW_RETURN comp_expression ';' KW_ENDDEF ';'
                                                                                                                                                                                                         ↳ 54: ε •                 ↳ 153: comp_command
                                                                                                                                                                                                                                          ↳ 155: comp_variable           assignment_operator comp_expression ';'
                                                                                                                                                                                                                                                 ↳ 110: general_variable
                                                                                                                                                                                                                                                        ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       54 local_var_const_decl_list: ε •
      112 comp_function_call: • IDENTIFIER '(' comp_expr_comma_list ')'
      First example: comp_definition_list KW_COMP IDENTIFIER comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' • IDENTIFIER '(' comp_expr_comma_list ')' ';' KW_RETURN comp_expression ';' KW_ENDDEF ';' comp_function_definition_list KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                                                                   $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                                                                  local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER comp_function_definition_list                                                                                                                                                                                                                      comp_function_definition_list KW_ENDCOMP ';'
                                                                        ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                             ↳ 173: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' comp_command_list                                                         KW_RETURN comp_expression ';' KW_ENDDEF ';'
                                                                                                                                                                                                     ↳ 153: comp_command
                                                                                                                                                                                                            ↳ 166: general_comp_function_call                              ';'
                                                                                                                                                                                                                   ↳ 113: comp_function_call
                                                                                                                                                                                                                          ↳ 112: • IDENTIFIER '(' comp_expr_comma_list ')'
      Second example: comp_definition_list KW_COMP IDENTIFIER ':' comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' • IDENTIFIER assignment_operator comp_expression ';' KW_RETURN comp_expression ';' KW_ENDDEF ';' KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                                                                       $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                                                                      local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER ':' comp_function_definition_list                                                                                                                                                                                                                                                    KW_ENDCOMP ';'
                                                                            ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                                 ↳ 172: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl_list comp_command_list                                                             KW_RETURN comp_expression ';' KW_ENDDEF ';'
                                                                                                                                                                                                         ↳ 54: ε •                 ↳ 153: comp_command
                                                                                                                                                                                                                                          ↳ 155: comp_variable           assignment_operator comp_expression ';'
                                                                                                                                                                                                                                                 ↳ 110: general_variable
                                                                                                                                                                                                                                                        ↳ 80: IDENTIFIER

    shift/reduce conflict on token '#':
       54 local_var_const_decl_list: ε •
      114 general_comp_function_call: • '#' IDENTIFIER '.' comp_function_call
      First example: comp_definition_list KW_COMP IDENTIFIER comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' • '#' IDENTIFIER '.' comp_function_call ';' KW_RETURN comp_expression ';' KW_ENDDEF ';' comp_function_definition_list KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                                                          $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                                                         local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER comp_function_definition_list                                                                                                                                                                                                             comp_function_definition_list KW_ENDCOMP ';'
                                                                        ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                             ↳ 173: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' comp_command_list                                                KW_RETURN comp_expression ';' KW_ENDDEF ';'
                                                                                                                                                                                                     ↳ 153: comp_command
                                                                                                                                                                                                            ↳ 166: general_comp_function_call                     ';'
                                                                                                                                                                                                                   ↳ 114: • '#' IDENTIFIER '.' comp_function_call
      Second example: comp_definition_list KW_COMP IDENTIFIER ':' comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' • '#' IDENTIFIER assignment_operator comp_expression ';' KW_RETURN comp_expression ';' KW_ENDDEF ';' KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                                                                     $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                                                                    local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER ':' comp_function_definition_list                                                                                                                                                                                                                                                  KW_ENDCOMP ';'
                                                                            ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                                 ↳ 172: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl_list comp_command_list                                                           KW_RETURN comp_expression ';' KW_ENDDEF ';'
                                                                                                                                                                                                         ↳ 54: ε •                 ↳ 153: comp_command
                                                                                                                                                                                                                                          ↳ 155: comp_variable         assignment_operator comp_expression ';'
                                                                                                                                                                                                                                                 ↳ 106: '#' IDENTIFIER

    shift/reduce conflict on token '#':
       54 local_var_const_decl_list: ε •
      115 general_comp_function_call: • '#' IDENTIFIER '[' comp_expression ']' '.' comp_function_call
      First example: comp_definition_list KW_COMP IDENTIFIER comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' • '#' IDENTIFIER '[' comp_expression ']' '.' comp_function_call ';' KW_RETURN comp_expression ';' KW_ENDDEF ';' comp_function_definition_list KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                                                                                  $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                                                                                 local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER comp_function_definition_list                                                                                                                                                                                                                                     comp_function_definition_list KW_ENDCOMP ';'
                                                                        ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                             ↳ 173: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' comp_command_list                                                                        KW_RETURN comp_expression ';' KW_ENDDEF ';'
                                                                                                                                                                                                     ↳ 153: comp_command
                                                                                                                                                                                                            ↳ 166: general_comp_function_call                                             ';'
                                                                                                                                                                                                                   ↳ 115: • '#' IDENTIFIER '[' comp_expression ']' '.' comp_function_call
      Second example: comp_definition_list KW_COMP IDENTIFIER ':' comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' • '#' IDENTIFIER assignment_operator comp_expression ';' KW_RETURN comp_expression ';' KW_ENDDEF ';' KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                                                                     $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                                                                    local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER ':' comp_function_definition_list                                                                                                                                                                                                                                                  KW_ENDCOMP ';'
                                                                            ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                                 ↳ 172: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl_list comp_command_list                                                           KW_RETURN comp_expression ';' KW_ENDDEF ';'
                                                                                                                                                                                                         ↳ 54: ε •                 ↳ 153: comp_command
                                                                                                                                                                                                                                          ↳ 155: comp_variable         assignment_operator comp_expression ';'
                                                                                                                                                                                                                                                 ↳ 106: '#' IDENTIFIER

    shift/reduce conflict on token KW_IF:
       54 local_var_const_decl_list: ε •
      156 comp_command: • KW_IF '(' comp_expression ')' ':' comp_command_list KW_ENDIF ';'
      First example: comp_definition_list KW_COMP IDENTIFIER comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' • KW_IF '(' comp_expression ')' ':' comp_command_list KW_ENDIF ';' KW_RETURN comp_expression ';' KW_ENDDEF ';' comp_function_definition_list KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                                                                          $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                                                                         local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER comp_function_definition_list                                                                                                                                                                                                                             comp_function_definition_list KW_ENDCOMP ';'
                                                                        ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                             ↳ 173: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' comp_command_list                                                                KW_RETURN comp_expression ';' KW_ENDDEF ';'
                                                                                                                                                                                                     ↳ 153: comp_command
                                                                                                                                                                                                            ↳ 156: • KW_IF '(' comp_expression ')' ':' comp_command_list KW_ENDIF ';'
      Second example: comp_definition_list KW_COMP IDENTIFIER ':' comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' • KW_IF '(' comp_expression ')' ':' comp_command_list KW_ENDIF ';' KW_RETURN comp_expression ';' KW_ENDDEF ';' KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                                                                        $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                                                                       local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER ':' comp_function_definition_list                                                                                                                                                                                                                                                     KW_ENDCOMP ';'
                                                                            ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                                 ↳ 172: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl_list comp_command_list                                                              KW_RETURN comp_expression ';' KW_ENDDEF ';'
                                                                                                                                                                                                         ↳ 54: ε •                 ↳ 153: comp_command
                                                                                                                                                                                                                                          ↳ 156: KW_IF '(' comp_expression ')' ':' comp_command_list KW_ENDIF ';'

    shift/reduce conflict on token KW_IF:
       54 local_var_const_decl_list: ε •
      157 comp_command: • KW_IF '(' comp_expression ')' ':' comp_command_list KW_ELSE ':' comp_command_list KW_ENDIF ';'
      First example: comp_definition_list KW_COMP IDENTIFIER comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' • KW_IF '(' comp_expression ')' ':' comp_command_list KW_ELSE ':' comp_command_list KW_ENDIF ';' KW_RETURN comp_expression ';' KW_ENDDEF ';' comp_function_definition_list KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                                                                                                        $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                                                                                                       local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER comp_function_definition_list                                                                                                                                                                                                                                                           comp_function_definition_list KW_ENDCOMP ';'
                                                                        ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                             ↳ 173: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' comp_command_list                                                                                              KW_RETURN comp_expression ';' KW_ENDDEF ';'
                                                                                                                                                                                                     ↳ 153: comp_command
                                                                                                                                                                                                            ↳ 157: • KW_IF '(' comp_expression ')' ':' comp_command_list KW_ELSE ':' comp_command_list KW_ENDIF ';'
      Second example: comp_definition_list KW_COMP IDENTIFIER ':' comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' • KW_IF '(' comp_expression ')' ':' comp_command_list KW_ENDIF ';' KW_RETURN comp_expression ';' KW_ENDDEF ';' KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                                                                        $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                                                                       local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER ':' comp_function_definition_list                                                                                                                                                                                                                                                     KW_ENDCOMP ';'
                                                                            ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                                 ↳ 172: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl_list comp_command_list                                                              KW_RETURN comp_expression ';' KW_ENDDEF ';'
                                                                                                                                                                                                         ↳ 54: ε •                 ↳ 153: comp_command
                                                                                                                                                                                                                                          ↳ 156: KW_IF '(' comp_expression ')' ':' comp_command_list KW_ENDIF ';'

    shift/reduce conflict on token KW_FOR:
       54 local_var_const_decl_list: ε •
      158 comp_command: • KW_FOR comp_variable KW_IN '[' comp_expression ':' comp_expression ']' ':' comp_command_list KW_ENDFOR ';'
      First example: comp_definition_list KW_COMP IDENTIFIER comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' • KW_FOR comp_variable KW_IN '[' comp_expression ':' comp_expression ']' ':' comp_command_list KW_ENDFOR ';' KW_RETURN comp_expression ';' KW_ENDDEF ';' comp_function_definition_list KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                                                                                                                    $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                                                                                                                   local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER comp_function_definition_list                                                                                                                                                                                                                                                                       comp_function_definition_list KW_ENDCOMP ';'
                                                                        ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                             ↳ 173: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' comp_command_list                                                                                                          KW_RETURN comp_expression ';' KW_ENDDEF ';'
                                                                                                                                                                                                     ↳ 153: comp_command
                                                                                                                                                                                                            ↳ 158: • KW_FOR comp_variable KW_IN '[' comp_expression ':' comp_expression ']' ':' comp_command_list KW_ENDFOR ';'
      Second example: comp_definition_list KW_COMP IDENTIFIER ':' comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' • KW_FOR comp_variable KW_IN '[' comp_expression ':' comp_expression ']' ':' comp_command_list KW_ENDFOR ';' KW_RETURN comp_expression ';' KW_ENDDEF ';' KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                                                                                                                  $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                                                                                                                 local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER ':' comp_function_definition_list                                                                                                                                                                                                                                                                                               KW_ENDCOMP ';'
                                                                            ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                                 ↳ 172: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl_list comp_command_list                                                                                                        KW_RETURN comp_expression ';' KW_ENDDEF ';'
                                                                                                                                                                                                         ↳ 54: ε •                 ↳ 153: comp_command
                                                                                                                                                                                                                                          ↳ 158: KW_FOR comp_variable KW_IN '[' comp_expression ':' comp_expression ']' ':' comp_command_list KW_ENDFOR ';'

    shift/reduce conflict on token KW_FOR:
       54 local_var_const_decl_list: ε •
      159 comp_command: • KW_FOR comp_variable KW_IN '[' comp_expression ':' comp_expression ':' comp_expression ']' ':' comp_command_list KW_ENDFOR ';'
      First example: comp_definition_list KW_COMP IDENTIFIER comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' • KW_FOR comp_variable KW_IN '[' comp_expression ':' comp_expression ':' comp_expression ']' ':' comp_command_list KW_ENDFOR ';' KW_RETURN comp_expression ';' KW_ENDDEF ';' comp_function_definition_list KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                                                                                                                                       local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER comp_function_definition_list                                                                                                                                                                                                                                                                                           comp_function_definition_list KW_ENDCOMP ';'
                                                                        ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                             ↳ 173: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' comp_command_list                                                                                                                              KW_RETURN comp_expression ';' KW_ENDDEF ';'
                                                                                                                                                                                                     ↳ 153: comp_command
                                                                                                                                                                                                            ↳ 159: • KW_FOR comp_variable KW_IN '[' comp_expression ':' comp_expression ':' comp_expression ']' ':' comp_command_list KW_ENDFOR ';'
      Second example: comp_definition_list KW_COMP IDENTIFIER ':' comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' • KW_FOR comp_variable KW_IN '[' comp_expression ':' comp_expression ']' ':' comp_command_list KW_ENDFOR ';' KW_RETURN comp_expression ';' KW_ENDDEF ';' KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                                                                                                                  $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                                                                                                                 local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER ':' comp_function_definition_list                                                                                                                                                                                                                                                                                               KW_ENDCOMP ';'
                                                                            ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                                 ↳ 172: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl_list comp_command_list                                                                                                        KW_RETURN comp_expression ';' KW_ENDDEF ';'
                                                                                                                                                                                                         ↳ 54: ε •                 ↳ 153: comp_command
                                                                                                                                                                                                                                          ↳ 158: KW_FOR comp_variable KW_IN '[' comp_expression ':' comp_expression ']' ':' comp_command_list KW_ENDFOR ';'

    shift/reduce conflict on token KW_WHILE:
       54 local_var_const_decl_list: ε •
      161 comp_command: • KW_WHILE '(' comp_expression ')' ':' comp_command_list KW_ENDWHILE ';'
      First example: comp_definition_list KW_COMP IDENTIFIER comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' • KW_WHILE '(' comp_expression ')' ':' comp_command_list KW_ENDWHILE ';' KW_RETURN comp_expression ';' KW_ENDDEF ';' comp_function_definition_list KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                                                                                $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                                                                               local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER comp_function_definition_list                                                                                                                                                                                                                                   comp_function_definition_list KW_ENDCOMP ';'
                                                                        ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                             ↳ 173: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' comp_command_list                                                                      KW_RETURN comp_expression ';' KW_ENDDEF ';'
                                                                                                                                                                                                     ↳ 153: comp_command
                                                                                                                                                                                                            ↳ 161: • KW_WHILE '(' comp_expression ')' ':' comp_command_list KW_ENDWHILE ';'
      Second example: comp_definition_list KW_COMP IDENTIFIER ':' comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' • KW_WHILE '(' comp_expression ')' ':' comp_command_list KW_ENDWHILE ';' KW_RETURN comp_expression ';' KW_ENDDEF ';' KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                                                                              $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                                                                             local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER ':' comp_function_definition_list                                                                                                                                                                                                                                                           KW_ENDCOMP ';'
                                                                            ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                                 ↳ 172: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl_list comp_command_list                                                                    KW_RETURN comp_expression ';' KW_ENDDEF ';'
                                                                                                                                                                                                         ↳ 54: ε •                 ↳ 153: comp_command
                                                                                                                                                                                                                                          ↳ 161: KW_WHILE '(' comp_expression ')' ':' comp_command_list KW_ENDWHILE ';'

    shift/reduce conflict on token KW_BREAK:
       54 local_var_const_decl_list: ε •
      162 comp_command: • KW_BREAK ';'
      First example: comp_definition_list KW_COMP IDENTIFIER comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' • KW_BREAK ';' KW_RETURN comp_expression ';' KW_ENDDEF ';' comp_function_definition_list KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                      $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                     local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER comp_function_definition_list                                                                                                                                                                         comp_function_definition_list KW_ENDCOMP ';'
                                                                        ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                             ↳ 173: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' comp_command_list            KW_RETURN comp_expression ';' KW_ENDDEF ';'
                                                                                                                                                                                                     ↳ 153: comp_command
                                                                                                                                                                                                            ↳ 162: • KW_BREAK ';'
      Second example: comp_definition_list KW_COMP IDENTIFIER ':' comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' • KW_BREAK ';' KW_RETURN comp_expression ';' KW_ENDDEF ';' KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                    $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                   local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER ':' comp_function_definition_list                                                                                                                                                                                                 KW_ENDCOMP ';'
                                                                            ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                                 ↳ 172: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl_list comp_command_list          KW_RETURN comp_expression ';' KW_ENDDEF ';'
                                                                                                                                                                                                         ↳ 54: ε •                 ↳ 153: comp_command
                                                                                                                                                                                                                                          ↳ 162: KW_BREAK ';'

    shift/reduce conflict on token KW_CONTINUE:
       54 local_var_const_decl_list: ε •
      163 comp_command: • KW_CONTINUE ';'
      First example: comp_definition_list KW_COMP IDENTIFIER comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' • KW_CONTINUE ';' KW_RETURN comp_expression ';' KW_ENDDEF ';' comp_function_definition_list KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                         $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                        local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER comp_function_definition_list                                                                                                                                                                            comp_function_definition_list KW_ENDCOMP ';'
                                                                        ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                             ↳ 173: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' comp_command_list               KW_RETURN comp_expression ';' KW_ENDDEF ';'
                                                                                                                                                                                                     ↳ 153: comp_command
                                                                                                                                                                                                            ↳ 163: • KW_CONTINUE ';'
      Second example: comp_definition_list KW_COMP IDENTIFIER ':' comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' • KW_CONTINUE ';' KW_RETURN comp_expression ';' KW_ENDDEF ';' KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                       $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                      local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER ':' comp_function_definition_list                                                                                                                                                                                                    KW_ENDCOMP ';'
                                                                            ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                                 ↳ 172: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl_list comp_command_list             KW_RETURN comp_expression ';' KW_ENDDEF ';'
                                                                                                                                                                                                         ↳ 54: ε •                 ↳ 153: comp_command
                                                                                                                                                                                                                                          ↳ 163: KW_CONTINUE ';'

    shift/reduce conflict on token KW_RETURN:
       54 local_var_const_decl_list: ε •
      164 comp_command: • KW_RETURN ';'
      First example: comp_definition_list KW_COMP IDENTIFIER comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' • KW_RETURN ';' KW_RETURN comp_expression ';' KW_ENDDEF ';' comp_function_definition_list KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                       $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                      local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER comp_function_definition_list                                                                                                                                                                          comp_function_definition_list KW_ENDCOMP ';'
                                                                        ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                             ↳ 173: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' comp_command_list             KW_RETURN comp_expression ';' KW_ENDDEF ';'
                                                                                                                                                                                                     ↳ 153: comp_command
                                                                                                                                                                                                            ↳ 164: • KW_RETURN ';'
      Second example: comp_definition_list KW_COMP IDENTIFIER ':' comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' • KW_RETURN ';' KW_RETURN comp_expression ';' KW_ENDDEF ';' KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                     $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                    local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER ':' comp_function_definition_list                                                                                                                                                                                                  KW_ENDCOMP ';'
                                                                            ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                                 ↳ 172: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl_list comp_command_list           KW_RETURN comp_expression ';' KW_ENDDEF ';'
                                                                                                                                                                                                         ↳ 54: ε •                 ↳ 153: comp_command
                                                                                                                                                                                                                                          ↳ 164: KW_RETURN ';'

    shift/reduce conflict on token KW_RETURN:
       54 local_var_const_decl_list: ε •
      165 comp_command: • KW_RETURN comp_expression ';'
      First example: comp_definition_list KW_COMP IDENTIFIER comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' • KW_RETURN comp_expression ';' KW_RETURN comp_expression ';' KW_ENDDEF ';' comp_function_definition_list KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                                       $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                                      local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER comp_function_definition_list                                                                                                                                                                                          comp_function_definition_list KW_ENDCOMP ';'
                                                                        ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                             ↳ 173: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' comp_command_list                             KW_RETURN comp_expression ';' KW_ENDDEF ';'
                                                                                                                                                                                                     ↳ 153: comp_command
                                                                                                                                                                                                            ↳ 165: • KW_RETURN comp_expression ';'
      Second example: comp_definition_list KW_COMP IDENTIFIER ':' comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' • KW_RETURN ';' KW_RETURN comp_expression ';' KW_ENDDEF ';' KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                     $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                    local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER ':' comp_function_definition_list                                                                                                                                                                                                  KW_ENDCOMP ';'
                                                                            ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                                 ↳ 172: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl_list comp_command_list           KW_RETURN comp_expression ';' KW_ENDDEF ';'
                                                                                                                                                                                                         ↳ 54: ε •                 ↳ 153: comp_command
                                                                                                                                                                                                                                          ↳ 164: KW_RETURN ';'



State 388

  156 comp_command: KW_IF '(' comp_expression • ')' ':' comp_command_list KW_ENDIF ';'
  157             | KW_IF '(' comp_expression • ')' ':' comp_command_list KW_ELSE ':' comp_command_list KW_ENDIF ';'

    ')'  shift, and go to state 414


State 389

  106 comp_variable: '#' IDENTIFIER •  [KW_IN, '.', ':']
  107              | '#' IDENTIFIER • '[' comp_expression ']'

    '['  shift, and go to state 415

    $default  reduce using rule 106 (comp_variable)


State 390

  158 comp_command: KW_FOR comp_variable KW_IN • '[' comp_expression ':' comp_expression ']' ':' comp_command_list KW_ENDFOR ';'
  159             | KW_FOR comp_variable KW_IN • '[' comp_expression ':' comp_expression ':' comp_expression ']' ':' comp_command_list KW_ENDFOR ';'

    '['  shift, and go to state 416


State 391

  161 comp_command: KW_WHILE '(' comp_expression • ')' ':' comp_command_list KW_ENDWHILE ';'

    ')'  shift, and go to state 417


State 392

  165 comp_command: KW_RETURN comp_expression ';' •

    $default  reduce using rule 165 (comp_command)


State 393

  107 comp_variable: '#' IDENTIFIER '[' • comp_expression ']'
  111 comp_function_call: • IDENTIFIER '(' ')'
  112                   | • IDENTIFIER '(' comp_expr_comma_list ')'
  113 general_comp_function_call: • comp_function_call
  114                           | • '#' IDENTIFIER '.' comp_function_call
  115                           | • '#' IDENTIFIER '[' comp_expression ']' '.' comp_function_call
  115                           | '#' IDENTIFIER '[' • comp_expression ']' '.' comp_function_call
  118 comp_primary_expression: • POSINT
  119                        | • SCALAR
  120                        | • '#' IDENTIFIER
  121                        | • IDENTIFIER
  122                        | • STRING
  123                        | • KW_TRUE
  124                        | • KW_FALSE
  125                        | • '(' logic_expression ')'
  126 comp_math_expression: • comp_primary_expression
  127                     | • '+' comp_math_expression
  128                     | • '-' comp_math_expression
  129                     | • comp_math_expression '+' comp_math_expression
  130                     | • comp_math_expression '-' comp_math_expression
  131                     | • comp_math_expression '*' comp_math_expression
  132                     | • comp_math_expression '/' comp_math_expression
  133                     | • comp_math_expression '%' comp_math_expression
  134                     | • comp_math_expression OP_PAW comp_math_expression
  135                     | • '#' IDENTIFIER '[' comp_expression ']'
  136                     | • '#' IDENTIFIER '[' comp_expression ']' '.' '#' IDENTIFIER
  137                     | • '#' IDENTIFIER '[' comp_expression ']' '.' '#' IDENTIFIER '[' comp_expression ']'
  138                     | • general_comp_function_call
  139                     | • '#' IDENTIFIER '.' '#' IDENTIFIER '[' comp_expression ']'
  140                     | • '#' IDENTIFIER '.' '#' IDENTIFIER
  141 comp_relational_expression: • comp_math_expression
  142                           | • comp_relational_expression OP_EQUALS comp_relational_expression
  143                           | • comp_relational_expression OP_NE comp_relational_expression
  144                           | • comp_relational_expression '>' comp_relational_expression
  145                           | • comp_relational_expression '<' comp_relational_expression
  146                           | • comp_relational_expression OP_LE comp_relational_expression
  147                           | • comp_relational_expression OP_GE comp_relational_expression
  148 comp_logic_expression: • comp_relational_expression
  149                      | • OP_NOT comp_logic_expression
  150                      | • comp_logic_expression OP_AND comp_logic_expression
  151                      | • comp_logic_expression OP_OR comp_logic_expression
  152 comp_expression: • comp_logic_expression

    IDENTIFIER  shift, and go to state 148
    POSINT      shift, and go to state 149
    SCALAR      shift, and go to state 150
    STRING      shift, and go to state 151
    OP_NOT      shift, and go to state 152
    KW_TRUE     shift, and go to state 153
    KW_FALSE    shift, and go to state 154
    '-'         shift, and go to state 155
    '+'         shift, and go to state 156
    '#'         shift, and go to state 157
    '('         shift, and go to state 158

    comp_function_call          go to state 160
    general_comp_function_call  go to state 161
    comp_primary_expression     go to state 162
    comp_math_expression        go to state 163
    comp_relational_expression  go to state 164
    comp_logic_expression       go to state 165
    comp_expression             go to state 418


State 394

  111 comp_function_call: • IDENTIFIER '(' ')'
  112                   | • IDENTIFIER '(' comp_expr_comma_list ')'
  114 general_comp_function_call: '#' IDENTIFIER '.' • comp_function_call

    IDENTIFIER  shift, and go to state 287

    comp_function_call  go to state 289


State 395

  169 comp_function_definition: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl_list comp_command_list KW_ENDDEF • ';'

    ';'  shift, and go to state 419


State 396

  170 comp_function_definition: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl comp_command_list KW_ENDDEF • ';'

    ';'  shift, and go to state 420


State 397

  111 comp_function_call: • IDENTIFIER '(' ')'
  112                   | • IDENTIFIER '(' comp_expr_comma_list ')'
  113 general_comp_function_call: • comp_function_call
  114                           | • '#' IDENTIFIER '.' comp_function_call
  115                           | • '#' IDENTIFIER '[' comp_expression ']' '.' comp_function_call
  118 comp_primary_expression: • POSINT
  119                        | • SCALAR
  120                        | • '#' IDENTIFIER
  121                        | • IDENTIFIER
  122                        | • STRING
  123                        | • KW_TRUE
  124                        | • KW_FALSE
  125                        | • '(' logic_expression ')'
  126 comp_math_expression: • comp_primary_expression
  127                     | • '+' comp_math_expression
  128                     | • '-' comp_math_expression
  129                     | • comp_math_expression '+' comp_math_expression
  130                     | • comp_math_expression '-' comp_math_expression
  131                     | • comp_math_expression '*' comp_math_expression
  132                     | • comp_math_expression '/' comp_math_expression
  133                     | • comp_math_expression '%' comp_math_expression
  134                     | • comp_math_expression OP_PAW comp_math_expression
  135                     | • '#' IDENTIFIER '[' comp_expression ']'
  136                     | • '#' IDENTIFIER '[' comp_expression ']' '.' '#' IDENTIFIER
  137                     | • '#' IDENTIFIER '[' comp_expression ']' '.' '#' IDENTIFIER '[' comp_expression ']'
  138                     | • general_comp_function_call
  139                     | • '#' IDENTIFIER '.' '#' IDENTIFIER '[' comp_expression ']'
  140                     | • '#' IDENTIFIER '.' '#' IDENTIFIER
  141 comp_relational_expression: • comp_math_expression
  142                           | • comp_relational_expression OP_EQUALS comp_relational_expression
  143                           | • comp_relational_expression OP_NE comp_relational_expression
  144                           | • comp_relational_expression '>' comp_relational_expression
  145                           | • comp_relational_expression '<' comp_relational_expression
  146                           | • comp_relational_expression OP_LE comp_relational_expression
  147                           | • comp_relational_expression OP_GE comp_relational_expression
  148 comp_logic_expression: • comp_relational_expression
  149                      | • OP_NOT comp_logic_expression
  150                      | • comp_logic_expression OP_AND comp_logic_expression
  151                      | • comp_logic_expression OP_OR comp_logic_expression
  152 comp_expression: • comp_logic_expression
  160 comp_command: comp_variable OP_ASSIGN '[' • comp_expression KW_FOR comp_variable ':' POSINT ']' ':' basic_data_type ';'

    IDENTIFIER  shift, and go to state 148
    POSINT      shift, and go to state 149
    SCALAR      shift, and go to state 150
    STRING      shift, and go to state 151
    OP_NOT      shift, and go to state 152
    KW_TRUE     shift, and go to state 153
    KW_FALSE    shift, and go to state 154
    '-'         shift, and go to state 155
    '+'         shift, and go to state 156
    '#'         shift, and go to state 157
    '('         shift, and go to state 158

    comp_function_call          go to state 160
    general_comp_function_call  go to state 161
    comp_primary_expression     go to state 162
    comp_math_expression        go to state 163
    comp_relational_expression  go to state 164
    comp_logic_expression       go to state 165
    comp_expression             go to state 421


State 398

  108 comp_variable: comp_variable '.' '#' • IDENTIFIER
  109              | comp_variable '.' '#' • IDENTIFIER '[' POSINT ']'

    IDENTIFIER  shift, and go to state 422


State 399

  155 comp_command: comp_variable assignment_operator comp_expression • ';'

    ';'  shift, and go to state 423


State 400

  171 comp_function_definition: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' comp_command_list KW_ENDDEF ';' •

    $default  reduce using rule 171 (comp_function_definition)


State 401

   66 general_function_call: • function_call
   67                      | • IDENTIFIER '.' function_call
   68                      | • IDENTIFIER '[' expression ']' '.' function_call
   69 function_call: • IDENTIFIER '(' ')'
   70              | • IDENTIFIER '(' expr_comma_list ')'
   80 general_variable: • IDENTIFIER
   81                 | • IDENTIFIER '.' '#' IDENTIFIER
   82                 | • IDENTIFIER '[' expression ']'
   83                 | • IDENTIFIER '.' '#' IDENTIFIER '[' expression ']'
   85 function_command_list: function_command_list • function_command
   86 function_command: • general_variable assignment_operator expression ';'
   87                 | • KW_IF '(' expression ')' ':' function_command_list KW_ENDIF ';'
   88                 | • KW_IF '(' expression ')' ':' function_command_list KW_ELSE ':' function_command_list KW_ENDIF ';'
   89                 | • KW_FOR general_variable KW_IN '[' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';'
   90                 | • KW_FOR general_variable KW_IN '[' expression ':' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';'
   91                 | • general_variable OP_ASSIGN '[' expression KW_FOR general_variable ':' POSINT ']' ':' basic_data_type ';'
   92                 | • KW_WHILE '(' expression ')' ':' function_command_list KW_ENDWHILE ';'
   93                 | • KW_BREAK ';'
   94                 | • KW_CONTINUE ';'
   95                 | • KW_RETURN ';'
   96                 | • KW_RETURN expression ';'
   97                 | • general_function_call ';'
  103 function_definition: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl_list function_command_list • KW_RETURN expression ';' KW_ENDDEF ';'

    IDENTIFIER   shift, and go to state 270
    KW_IF        shift, and go to state 216
    KW_CONTINUE  shift, and go to state 217
    KW_FOR       shift, and go to state 218
    KW_WHILE     shift, and go to state 219
    KW_BREAK     shift, and go to state 220
    KW_RETURN    shift, and go to state 424

    general_function_call  go to state 224
    function_call          go to state 70
    general_variable       go to state 225
    function_command       go to state 283


State 402

   66 general_function_call: • function_call
   67                      | • IDENTIFIER '.' function_call
   68                      | • IDENTIFIER '[' expression ']' '.' function_call
   69 function_call: • IDENTIFIER '(' ')'
   70              | • IDENTIFIER '(' expr_comma_list ')'
   80 general_variable: • IDENTIFIER
   81                 | • IDENTIFIER '.' '#' IDENTIFIER
   82                 | • IDENTIFIER '[' expression ']'
   83                 | • IDENTIFIER '.' '#' IDENTIFIER '[' expression ']'
   85 function_command_list: function_command_list • function_command
   86 function_command: • general_variable assignment_operator expression ';'
   87                 | • KW_IF '(' expression ')' ':' function_command_list KW_ENDIF ';'
   88                 | • KW_IF '(' expression ')' ':' function_command_list KW_ELSE ':' function_command_list KW_ENDIF ';'
   89                 | • KW_FOR general_variable KW_IN '[' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';'
   90                 | • KW_FOR general_variable KW_IN '[' expression ':' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';'
   91                 | • general_variable OP_ASSIGN '[' expression KW_FOR general_variable ':' POSINT ']' ':' basic_data_type ';'
   92                 | • KW_WHILE '(' expression ')' ':' function_command_list KW_ENDWHILE ';'
   93                 | • KW_BREAK ';'
   94                 | • KW_CONTINUE ';'
   95                 | • KW_RETURN ';'
   96                 | • KW_RETURN expression ';'
   97                 | • general_function_call ';'
  104 function_definition: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl function_command_list • KW_RETURN expression ';' KW_ENDDEF ';'

    IDENTIFIER   shift, and go to state 270
    KW_IF        shift, and go to state 216
    KW_CONTINUE  shift, and go to state 217
    KW_FOR       shift, and go to state 218
    KW_WHILE     shift, and go to state 219
    KW_BREAK     shift, and go to state 220
    KW_RETURN    shift, and go to state 425

    general_function_call  go to state 224
    function_call          go to state 70
    general_variable       go to state 225
    function_command       go to state 283


State 403

    2 primary_expression: • POSINT
    3                   | • SCALAR
    4                   | • IDENTIFIER
    5                   | • STRING
    6                   | • KW_TRUE
    7                   | • KW_FALSE
    8                   | • '(' logic_expression ')'
    9 math_expression: • primary_expression
   10                | • '+' math_expression
   11                | • '-' math_expression
   12                | • math_expression '+' math_expression
   13                | • math_expression '-' math_expression
   14                | • math_expression '*' math_expression
   15                | • math_expression '/' math_expression
   16                | • math_expression '%' math_expression
   17                | • math_expression OP_PAW math_expression
   18                | • IDENTIFIER '[' expression ']'
   19                | • IDENTIFIER '[' expression ']' '.' IDENTIFIER
   20                | • IDENTIFIER '[' expression ']' '.' IDENTIFIER '[' expression ']'
   21                | • general_function_call
   22                | • IDENTIFIER '.' IDENTIFIER '[' expression ']'
   23                | • IDENTIFIER '.' IDENTIFIER
   24 relational_expression: • math_expression
   25                      | • relational_expression OP_EQUALS relational_expression
   26                      | • relational_expression OP_NE relational_expression
   27                      | • relational_expression '>' relational_expression
   28                      | • relational_expression '<' relational_expression
   29                      | • relational_expression OP_LE relational_expression
   30                      | • relational_expression OP_GE relational_expression
   31 logic_expression: • relational_expression
   32                 | • OP_NOT logic_expression
   33                 | • logic_expression OP_AND logic_expression
   34                 | • logic_expression OP_OR logic_expression
   35 expression: • logic_expression
   66 general_function_call: • function_call
   67                      | • IDENTIFIER '.' function_call
   68                      | • IDENTIFIER '[' expression ']' '.' function_call
   69 function_call: • IDENTIFIER '(' ')'
   70              | • IDENTIFIER '(' expr_comma_list ')'
   95 function_command: KW_RETURN • ';'
   96                 | KW_RETURN • expression ';'
  105 function_definition: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' function_command_list KW_RETURN • expression ';' KW_ENDDEF ';'

    IDENTIFIER  shift, and go to state 53
    POSINT      shift, and go to state 54
    SCALAR      shift, and go to state 55
    STRING      shift, and go to state 56
    OP_NOT      shift, and go to state 57
    KW_TRUE     shift, and go to state 58
    KW_FALSE    shift, and go to state 59
    '-'         shift, and go to state 60
    '+'         shift, and go to state 61
    '('         shift, and go to state 62
    ';'         shift, and go to state 268

    primary_expression     go to state 64
    math_expression        go to state 65
    relational_expression  go to state 66
    logic_expression       go to state 67
    expression             go to state 426
    general_function_call  go to state 69
    function_call          go to state 70


State 404

   83 general_variable: IDENTIFIER '.' '#' IDENTIFIER '[' expression • ']'

    ']'  shift, and go to state 427


State 405

   66 general_function_call: • function_call
   67                      | • IDENTIFIER '.' function_call
   68                      | • IDENTIFIER '[' expression ']' '.' function_call
   69 function_call: • IDENTIFIER '(' ')'
   70              | • IDENTIFIER '(' expr_comma_list ')'
   80 general_variable: • IDENTIFIER
   81                 | • IDENTIFIER '.' '#' IDENTIFIER
   82                 | • IDENTIFIER '[' expression ']'
   83                 | • IDENTIFIER '.' '#' IDENTIFIER '[' expression ']'
   85 function_command_list: function_command_list • function_command
   86 function_command: • general_variable assignment_operator expression ';'
   87                 | • KW_IF '(' expression ')' ':' function_command_list KW_ENDIF ';'
   87                 | KW_IF '(' expression ')' ':' function_command_list • KW_ENDIF ';'
   88                 | • KW_IF '(' expression ')' ':' function_command_list KW_ELSE ':' function_command_list KW_ENDIF ';'
   88                 | KW_IF '(' expression ')' ':' function_command_list • KW_ELSE ':' function_command_list KW_ENDIF ';'
   89                 | • KW_FOR general_variable KW_IN '[' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';'
   90                 | • KW_FOR general_variable KW_IN '[' expression ':' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';'
   91                 | • general_variable OP_ASSIGN '[' expression KW_FOR general_variable ':' POSINT ']' ':' basic_data_type ';'
   92                 | • KW_WHILE '(' expression ')' ':' function_command_list KW_ENDWHILE ';'
   93                 | • KW_BREAK ';'
   94                 | • KW_CONTINUE ';'
   95                 | • KW_RETURN ';'
   96                 | • KW_RETURN expression ';'
   97                 | • general_function_call ';'

    IDENTIFIER   shift, and go to state 270
    KW_IF        shift, and go to state 216
    KW_ELSE      shift, and go to state 428
    KW_ENDIF     shift, and go to state 429
    KW_CONTINUE  shift, and go to state 217
    KW_FOR       shift, and go to state 218
    KW_WHILE     shift, and go to state 219
    KW_BREAK     shift, and go to state 220
    KW_RETURN    shift, and go to state 221

    general_function_call  go to state 224
    function_call          go to state 70
    general_variable       go to state 225
    function_command       go to state 283


State 406

    2 primary_expression: • POSINT
    3                   | • SCALAR
    4                   | • IDENTIFIER
    5                   | • STRING
    6                   | • KW_TRUE
    7                   | • KW_FALSE
    8                   | • '(' logic_expression ')'
    9 math_expression: • primary_expression
   10                | • '+' math_expression
   11                | • '-' math_expression
   12                | • math_expression '+' math_expression
   13                | • math_expression '-' math_expression
   14                | • math_expression '*' math_expression
   15                | • math_expression '/' math_expression
   16                | • math_expression '%' math_expression
   17                | • math_expression OP_PAW math_expression
   18                | • IDENTIFIER '[' expression ']'
   19                | • IDENTIFIER '[' expression ']' '.' IDENTIFIER
   20                | • IDENTIFIER '[' expression ']' '.' IDENTIFIER '[' expression ']'
   21                | • general_function_call
   22                | • IDENTIFIER '.' IDENTIFIER '[' expression ']'
   23                | • IDENTIFIER '.' IDENTIFIER
   24 relational_expression: • math_expression
   25                      | • relational_expression OP_EQUALS relational_expression
   26                      | • relational_expression OP_NE relational_expression
   27                      | • relational_expression '>' relational_expression
   28                      | • relational_expression '<' relational_expression
   29                      | • relational_expression OP_LE relational_expression
   30                      | • relational_expression OP_GE relational_expression
   31 logic_expression: • relational_expression
   32                 | • OP_NOT logic_expression
   33                 | • logic_expression OP_AND logic_expression
   34                 | • logic_expression OP_OR logic_expression
   35 expression: • logic_expression
   66 general_function_call: • function_call
   67                      | • IDENTIFIER '.' function_call
   68                      | • IDENTIFIER '[' expression ']' '.' function_call
   69 function_call: • IDENTIFIER '(' ')'
   70              | • IDENTIFIER '(' expr_comma_list ')'
   89 function_command: KW_FOR general_variable KW_IN '[' expression ':' • expression ']' ':' function_command_list KW_ENDFOR ';'
   90                 | KW_FOR general_variable KW_IN '[' expression ':' • expression ':' expression ']' ':' function_command_list KW_ENDFOR ';'

    IDENTIFIER  shift, and go to state 53
    POSINT      shift, and go to state 54
    SCALAR      shift, and go to state 55
    STRING      shift, and go to state 56
    OP_NOT      shift, and go to state 57
    KW_TRUE     shift, and go to state 58
    KW_FALSE    shift, and go to state 59
    '-'         shift, and go to state 60
    '+'         shift, and go to state 61
    '('         shift, and go to state 62

    primary_expression     go to state 64
    math_expression        go to state 65
    relational_expression  go to state 66
    logic_expression       go to state 67
    expression             go to state 430
    general_function_call  go to state 69
    function_call          go to state 70


State 407

   66 general_function_call: • function_call
   67                      | • IDENTIFIER '.' function_call
   68                      | • IDENTIFIER '[' expression ']' '.' function_call
   69 function_call: • IDENTIFIER '(' ')'
   70              | • IDENTIFIER '(' expr_comma_list ')'
   80 general_variable: • IDENTIFIER
   81                 | • IDENTIFIER '.' '#' IDENTIFIER
   82                 | • IDENTIFIER '[' expression ']'
   83                 | • IDENTIFIER '.' '#' IDENTIFIER '[' expression ']'
   85 function_command_list: function_command_list • function_command
   86 function_command: • general_variable assignment_operator expression ';'
   87                 | • KW_IF '(' expression ')' ':' function_command_list KW_ENDIF ';'
   88                 | • KW_IF '(' expression ')' ':' function_command_list KW_ELSE ':' function_command_list KW_ENDIF ';'
   89                 | • KW_FOR general_variable KW_IN '[' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';'
   90                 | • KW_FOR general_variable KW_IN '[' expression ':' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';'
   91                 | • general_variable OP_ASSIGN '[' expression KW_FOR general_variable ':' POSINT ']' ':' basic_data_type ';'
   92                 | • KW_WHILE '(' expression ')' ':' function_command_list KW_ENDWHILE ';'
   92                 | KW_WHILE '(' expression ')' ':' function_command_list • KW_ENDWHILE ';'
   93                 | • KW_BREAK ';'
   94                 | • KW_CONTINUE ';'
   95                 | • KW_RETURN ';'
   96                 | • KW_RETURN expression ';'
   97                 | • general_function_call ';'

    IDENTIFIER   shift, and go to state 270
    KW_IF        shift, and go to state 216
    KW_CONTINUE  shift, and go to state 217
    KW_FOR       shift, and go to state 218
    KW_WHILE     shift, and go to state 219
    KW_ENDWHILE  shift, and go to state 431
    KW_BREAK     shift, and go to state 220
    KW_RETURN    shift, and go to state 221

    general_function_call  go to state 224
    function_call          go to state 70
    general_variable       go to state 225
    function_command       go to state 283


State 408

   91 function_command: general_variable OP_ASSIGN '[' expression KW_FOR general_variable • ':' POSINT ']' ':' basic_data_type ';'

    ':'  shift, and go to state 432


State 409

  136 comp_math_expression: '#' IDENTIFIER '[' comp_expression ']' '.' '#' IDENTIFIER •  [KW_FOR, OP_AND, OP_OR, OP_PAW, OP_EQUALS, OP_NE, OP_LE, OP_GE, '>', '<', '-', '+', '*', '/', '%', ')', ']', ',', ':', ';']
  137                     | '#' IDENTIFIER '[' comp_expression ']' '.' '#' IDENTIFIER • '[' comp_expression ']'

    '['  shift, and go to state 433

    $default  reduce using rule 136 (comp_math_expression)


State 410

  139 comp_math_expression: '#' IDENTIFIER '.' '#' IDENTIFIER '[' comp_expression ']' •

    $default  reduce using rule 139 (comp_math_expression)


State 411

   80 general_variable: • IDENTIFIER
   81                 | • IDENTIFIER '.' '#' IDENTIFIER
   82                 | • IDENTIFIER '[' expression ']'
   83                 | • IDENTIFIER '.' '#' IDENTIFIER '[' expression ']'
  106 comp_variable: • '#' IDENTIFIER
  107              | • '#' IDENTIFIER '[' comp_expression ']'
  108              | • comp_variable '.' '#' IDENTIFIER
  109              | • comp_variable '.' '#' IDENTIFIER '[' POSINT ']'
  110              | • general_variable
  111 comp_function_call: • IDENTIFIER '(' ')'
  112                   | • IDENTIFIER '(' comp_expr_comma_list ')'
  113 general_comp_function_call: • comp_function_call
  114                           | • '#' IDENTIFIER '.' comp_function_call
  115                           | • '#' IDENTIFIER '[' comp_expression ']' '.' comp_function_call
  153 comp_command_list: • comp_command
  154                  | • comp_command_list comp_command
  155 comp_command: • comp_variable assignment_operator comp_expression ';'
  156             | • KW_IF '(' comp_expression ')' ':' comp_command_list KW_ENDIF ';'
  157             | • KW_IF '(' comp_expression ')' ':' comp_command_list KW_ELSE ':' comp_command_list KW_ENDIF ';'
  158             | • KW_FOR comp_variable KW_IN '[' comp_expression ':' comp_expression ']' ':' comp_command_list KW_ENDFOR ';'
  159             | • KW_FOR comp_variable KW_IN '[' comp_expression ':' comp_expression ':' comp_expression ']' ':' comp_command_list KW_ENDFOR ';'
  160             | • comp_variable OP_ASSIGN '[' comp_expression KW_FOR comp_variable ':' POSINT ']' ':' basic_data_type ';'
  161             | • KW_WHILE '(' comp_expression ')' ':' comp_command_list KW_ENDWHILE ';'
  162             | • KW_BREAK ';'
  163             | • KW_CONTINUE ';'
  164             | • KW_RETURN ';'
  165             | • KW_RETURN comp_expression ';'
  166             | • general_comp_function_call ';'
  172 comp_function_definition: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl_list • comp_command_list KW_RETURN comp_expression ';' KW_ENDDEF ';'

    IDENTIFIER   shift, and go to state 362
    KW_IF        shift, and go to state 320
    KW_CONTINUE  shift, and go to state 321
    KW_FOR       shift, and go to state 322
    KW_WHILE     shift, and go to state 323
    KW_BREAK     shift, and go to state 324
    KW_RETURN    shift, and go to state 325
    '#'          shift, and go to state 326

    general_variable            go to state 329
    comp_variable               go to state 330
    comp_function_call          go to state 160
    general_comp_function_call  go to state 331
    comp_command_list           go to state 434
    comp_command                go to state 333


State 412

   53 local_var_const_decl_list: local_var_const_decl •  [IDENTIFIER, KW_IF, KW_CONTINUE, KW_FOR, KW_WHILE, KW_BREAK, KW_RETURN, '#']
   80 general_variable: • IDENTIFIER
   81                 | • IDENTIFIER '.' '#' IDENTIFIER
   82                 | • IDENTIFIER '[' expression ']'
   83                 | • IDENTIFIER '.' '#' IDENTIFIER '[' expression ']'
  106 comp_variable: • '#' IDENTIFIER
  107              | • '#' IDENTIFIER '[' comp_expression ']'
  108              | • comp_variable '.' '#' IDENTIFIER
  109              | • comp_variable '.' '#' IDENTIFIER '[' POSINT ']'
  110              | • general_variable
  111 comp_function_call: • IDENTIFIER '(' ')'
  112                   | • IDENTIFIER '(' comp_expr_comma_list ')'
  113 general_comp_function_call: • comp_function_call
  114                           | • '#' IDENTIFIER '.' comp_function_call
  115                           | • '#' IDENTIFIER '[' comp_expression ']' '.' comp_function_call
  153 comp_command_list: • comp_command
  154                  | • comp_command_list comp_command
  155 comp_command: • comp_variable assignment_operator comp_expression ';'
  156             | • KW_IF '(' comp_expression ')' ':' comp_command_list KW_ENDIF ';'
  157             | • KW_IF '(' comp_expression ')' ':' comp_command_list KW_ELSE ':' comp_command_list KW_ENDIF ';'
  158             | • KW_FOR comp_variable KW_IN '[' comp_expression ':' comp_expression ']' ':' comp_command_list KW_ENDFOR ';'
  159             | • KW_FOR comp_variable KW_IN '[' comp_expression ':' comp_expression ':' comp_expression ']' ':' comp_command_list KW_ENDFOR ';'
  160             | • comp_variable OP_ASSIGN '[' comp_expression KW_FOR comp_variable ':' POSINT ']' ':' basic_data_type ';'
  161             | • KW_WHILE '(' comp_expression ')' ':' comp_command_list KW_ENDWHILE ';'
  162             | • KW_BREAK ';'
  163             | • KW_CONTINUE ';'
  164             | • KW_RETURN ';'
  165             | • KW_RETURN comp_expression ';'
  166             | • general_comp_function_call ';'
  174 comp_function_definition: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl • comp_command_list KW_RETURN comp_expression ';' KW_ENDDEF ';'

    IDENTIFIER   shift, and go to state 362
    KW_IF        shift, and go to state 320
    KW_CONTINUE  shift, and go to state 321
    KW_FOR       shift, and go to state 322
    KW_WHILE     shift, and go to state 323
    KW_BREAK     shift, and go to state 324
    KW_RETURN    shift, and go to state 325
    '#'          shift, and go to state 326

    IDENTIFIER   [reduce using rule 53 (local_var_const_decl_list)]
    KW_IF        [reduce using rule 53 (local_var_const_decl_list)]
    KW_CONTINUE  [reduce using rule 53 (local_var_const_decl_list)]
    KW_FOR       [reduce using rule 53 (local_var_const_decl_list)]
    KW_WHILE     [reduce using rule 53 (local_var_const_decl_list)]
    KW_BREAK     [reduce using rule 53 (local_var_const_decl_list)]
    KW_RETURN    [reduce using rule 53 (local_var_const_decl_list)]
    '#'          [reduce using rule 53 (local_var_const_decl_list)]

    general_variable            go to state 329
    comp_variable               go to state 330
    comp_function_call          go to state 160
    general_comp_function_call  go to state 331
    comp_command_list           go to state 435
    comp_command                go to state 333

    shift/reduce conflict on token IDENTIFIER:
       53 local_var_const_decl_list: local_var_const_decl •
       80 general_variable: • IDENTIFIER
      First example: comp_definition_list KW_COMP IDENTIFIER comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl • IDENTIFIER assignment_operator comp_expression ';' KW_RETURN comp_expression ';' KW_ENDDEF ';' comp_function_definition_list KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                                                                                              $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                                                                                             local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER comp_function_definition_list                                                                                                                                                                                                                                                 comp_function_definition_list KW_ENDCOMP ';'
                                                                        ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                             ↳ 174: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl comp_command_list                                                               KW_RETURN comp_expression ';' KW_ENDDEF ';'
                                                                                                                                                                                                                          ↳ 153: comp_command
                                                                                                                                                                                                                                 ↳ 155: comp_variable             assignment_operator comp_expression ';'
                                                                                                                                                                                                                                        ↳ 110: general_variable
                                                                                                                                                                                                                                               ↳ 80: • IDENTIFIER
      Second example: comp_definition_list KW_COMP IDENTIFIER ':' comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl • IDENTIFIER assignment_operator comp_expression ';' KW_RETURN comp_expression ';' KW_ENDDEF ';' KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                                                                          $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                                                                         local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER ':' comp_function_definition_list                                                                                                                                                                                                                                                       KW_ENDCOMP ';'
                                                                            ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                                 ↳ 172: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl_list    comp_command_list                                                             KW_RETURN comp_expression ';' KW_ENDDEF ';'
                                                                                                                                                                                                         ↳ 53: local_var_const_decl • ↳ 153: comp_command
                                                                                                                                                                                                                                             ↳ 155: comp_variable           assignment_operator comp_expression ';'
                                                                                                                                                                                                                                                    ↳ 110: general_variable
                                                                                                                                                                                                                                                           ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       53 local_var_const_decl_list: local_var_const_decl •
       81 general_variable: • IDENTIFIER '.' '#' IDENTIFIER
      First example: comp_definition_list KW_COMP IDENTIFIER comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl • IDENTIFIER '.' '#' IDENTIFIER assignment_operator comp_expression ';' KW_RETURN comp_expression ';' KW_ENDDEF ';' comp_function_definition_list KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                                                                                                                 $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                                                                                                                local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER comp_function_definition_list                                                                                                                                                                                                                                                                    comp_function_definition_list KW_ENDCOMP ';'
                                                                        ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                             ↳ 174: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl comp_command_list                                                                                  KW_RETURN comp_expression ';' KW_ENDDEF ';'
                                                                                                                                                                                                                          ↳ 153: comp_command
                                                                                                                                                                                                                                 ↳ 155: comp_variable                                assignment_operator comp_expression ';'
                                                                                                                                                                                                                                        ↳ 110: general_variable
                                                                                                                                                                                                                                               ↳ 81: • IDENTIFIER '.' '#' IDENTIFIER
      Second example: comp_definition_list KW_COMP IDENTIFIER ':' comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl • IDENTIFIER assignment_operator comp_expression ';' KW_RETURN comp_expression ';' KW_ENDDEF ';' KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                                                                          $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                                                                         local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER ':' comp_function_definition_list                                                                                                                                                                                                                                                       KW_ENDCOMP ';'
                                                                            ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                                 ↳ 172: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl_list    comp_command_list                                                             KW_RETURN comp_expression ';' KW_ENDDEF ';'
                                                                                                                                                                                                         ↳ 53: local_var_const_decl • ↳ 153: comp_command
                                                                                                                                                                                                                                             ↳ 155: comp_variable           assignment_operator comp_expression ';'
                                                                                                                                                                                                                                                    ↳ 110: general_variable
                                                                                                                                                                                                                                                           ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       53 local_var_const_decl_list: local_var_const_decl •
       82 general_variable: • IDENTIFIER '[' expression ']'
      First example: comp_definition_list KW_COMP IDENTIFIER comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl • IDENTIFIER '[' expression ']' assignment_operator comp_expression ';' KW_RETURN comp_expression ';' KW_ENDDEF ';' comp_function_definition_list KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                                                                                                                 $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                                                                                                                local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER comp_function_definition_list                                                                                                                                                                                                                                                                    comp_function_definition_list KW_ENDCOMP ';'
                                                                        ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                             ↳ 174: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl comp_command_list                                                                                  KW_RETURN comp_expression ';' KW_ENDDEF ';'
                                                                                                                                                                                                                          ↳ 153: comp_command
                                                                                                                                                                                                                                 ↳ 155: comp_variable                                assignment_operator comp_expression ';'
                                                                                                                                                                                                                                        ↳ 110: general_variable
                                                                                                                                                                                                                                               ↳ 82: • IDENTIFIER '[' expression ']'
      Second example: comp_definition_list KW_COMP IDENTIFIER ':' comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl • IDENTIFIER assignment_operator comp_expression ';' KW_RETURN comp_expression ';' KW_ENDDEF ';' KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                                                                          $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                                                                         local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER ':' comp_function_definition_list                                                                                                                                                                                                                                                       KW_ENDCOMP ';'
                                                                            ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                                 ↳ 172: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl_list    comp_command_list                                                             KW_RETURN comp_expression ';' KW_ENDDEF ';'
                                                                                                                                                                                                         ↳ 53: local_var_const_decl • ↳ 153: comp_command
                                                                                                                                                                                                                                             ↳ 155: comp_variable           assignment_operator comp_expression ';'
                                                                                                                                                                                                                                                    ↳ 110: general_variable
                                                                                                                                                                                                                                                           ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       53 local_var_const_decl_list: local_var_const_decl •
       83 general_variable: • IDENTIFIER '.' '#' IDENTIFIER '[' expression ']'
      First example: comp_definition_list KW_COMP IDENTIFIER comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl • IDENTIFIER '.' '#' IDENTIFIER '[' expression ']' assignment_operator comp_expression ';' KW_RETURN comp_expression ';' KW_ENDDEF ';' comp_function_definition_list KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                                                                                                                                   local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER comp_function_definition_list                                                                                                                                                                                                                                                                                       comp_function_definition_list KW_ENDCOMP ';'
                                                                        ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                             ↳ 174: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl comp_command_list                                                                                                     KW_RETURN comp_expression ';' KW_ENDDEF ';'
                                                                                                                                                                                                                          ↳ 153: comp_command
                                                                                                                                                                                                                                 ↳ 155: comp_variable                                                   assignment_operator comp_expression ';'
                                                                                                                                                                                                                                        ↳ 110: general_variable
                                                                                                                                                                                                                                               ↳ 83: • IDENTIFIER '.' '#' IDENTIFIER '[' expression ']'
      Second example: comp_definition_list KW_COMP IDENTIFIER ':' comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl • IDENTIFIER assignment_operator comp_expression ';' KW_RETURN comp_expression ';' KW_ENDDEF ';' KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                                                                          $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                                                                         local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER ':' comp_function_definition_list                                                                                                                                                                                                                                                       KW_ENDCOMP ';'
                                                                            ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                                 ↳ 172: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl_list    comp_command_list                                                             KW_RETURN comp_expression ';' KW_ENDDEF ';'
                                                                                                                                                                                                         ↳ 53: local_var_const_decl • ↳ 153: comp_command
                                                                                                                                                                                                                                             ↳ 155: comp_variable           assignment_operator comp_expression ';'
                                                                                                                                                                                                                                                    ↳ 110: general_variable
                                                                                                                                                                                                                                                           ↳ 80: IDENTIFIER

    shift/reduce conflict on token '#':
       53 local_var_const_decl_list: local_var_const_decl •
      106 comp_variable: • '#' IDENTIFIER
      First example: comp_definition_list KW_COMP IDENTIFIER comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl • '#' IDENTIFIER assignment_operator comp_expression ';' KW_RETURN comp_expression ';' KW_ENDDEF ';' comp_function_definition_list KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                                                                                            $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                                                                                           local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER comp_function_definition_list                                                                                                                                                                                                                                               comp_function_definition_list KW_ENDCOMP ';'
                                                                        ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                             ↳ 174: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl comp_command_list                                                             KW_RETURN comp_expression ';' KW_ENDDEF ';'
                                                                                                                                                                                                                          ↳ 153: comp_command
                                                                                                                                                                                                                                 ↳ 155: comp_variable           assignment_operator comp_expression ';'
                                                                                                                                                                                                                                        ↳ 106: • '#' IDENTIFIER
      Second example: comp_definition_list KW_COMP IDENTIFIER ':' comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl • '#' IDENTIFIER assignment_operator comp_expression ';' KW_RETURN comp_expression ';' KW_ENDDEF ';' KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                                                                        $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                                                                       local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER ':' comp_function_definition_list                                                                                                                                                                                                                                                     KW_ENDCOMP ';'
                                                                            ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                                 ↳ 172: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl_list    comp_command_list                                                           KW_RETURN comp_expression ';' KW_ENDDEF ';'
                                                                                                                                                                                                         ↳ 53: local_var_const_decl • ↳ 153: comp_command
                                                                                                                                                                                                                                             ↳ 155: comp_variable         assignment_operator comp_expression ';'
                                                                                                                                                                                                                                                    ↳ 106: '#' IDENTIFIER

    shift/reduce conflict on token '#':
       53 local_var_const_decl_list: local_var_const_decl •
      107 comp_variable: • '#' IDENTIFIER '[' comp_expression ']'
      First example: comp_definition_list KW_COMP IDENTIFIER comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl • '#' IDENTIFIER '[' comp_expression ']' assignment_operator comp_expression ';' KW_RETURN comp_expression ';' KW_ENDDEF ';' comp_function_definition_list KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                                                                                                                    $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                                                                                                                   local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER comp_function_definition_list                                                                                                                                                                                                                                                                       comp_function_definition_list KW_ENDCOMP ';'
                                                                        ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                             ↳ 174: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl comp_command_list                                                                                     KW_RETURN comp_expression ';' KW_ENDDEF ';'
                                                                                                                                                                                                                          ↳ 153: comp_command
                                                                                                                                                                                                                                 ↳ 155: comp_variable                                   assignment_operator comp_expression ';'
                                                                                                                                                                                                                                        ↳ 107: • '#' IDENTIFIER '[' comp_expression ']'
      Second example: comp_definition_list KW_COMP IDENTIFIER ':' comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl • '#' IDENTIFIER assignment_operator comp_expression ';' KW_RETURN comp_expression ';' KW_ENDDEF ';' KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                                                                        $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                                                                       local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER ':' comp_function_definition_list                                                                                                                                                                                                                                                     KW_ENDCOMP ';'
                                                                            ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                                 ↳ 172: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl_list    comp_command_list                                                           KW_RETURN comp_expression ';' KW_ENDDEF ';'
                                                                                                                                                                                                         ↳ 53: local_var_const_decl • ↳ 153: comp_command
                                                                                                                                                                                                                                             ↳ 155: comp_variable         assignment_operator comp_expression ';'
                                                                                                                                                                                                                                                    ↳ 106: '#' IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       53 local_var_const_decl_list: local_var_const_decl •
      111 comp_function_call: • IDENTIFIER '(' ')'
      First example: comp_definition_list KW_COMP IDENTIFIER comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl • IDENTIFIER '(' ')' ';' KW_RETURN comp_expression ';' KW_ENDDEF ';' comp_function_definition_list KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                                                                   $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                                                                  local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER comp_function_definition_list                                                                                                                                                                                                                      comp_function_definition_list KW_ENDCOMP ';'
                                                                        ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                             ↳ 174: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl comp_command_list                                    KW_RETURN comp_expression ';' KW_ENDDEF ';'
                                                                                                                                                                                                                          ↳ 153: comp_command
                                                                                                                                                                                                                                 ↳ 166: general_comp_function_call         ';'
                                                                                                                                                                                                                                        ↳ 113: comp_function_call
                                                                                                                                                                                                                                               ↳ 111: • IDENTIFIER '(' ')'
      Second example: comp_definition_list KW_COMP IDENTIFIER ':' comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl • IDENTIFIER assignment_operator comp_expression ';' KW_RETURN comp_expression ';' KW_ENDDEF ';' KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                                                                          $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                                                                         local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER ':' comp_function_definition_list                                                                                                                                                                                                                                                       KW_ENDCOMP ';'
                                                                            ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                                 ↳ 172: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl_list    comp_command_list                                                             KW_RETURN comp_expression ';' KW_ENDDEF ';'
                                                                                                                                                                                                         ↳ 53: local_var_const_decl • ↳ 153: comp_command
                                                                                                                                                                                                                                             ↳ 155: comp_variable           assignment_operator comp_expression ';'
                                                                                                                                                                                                                                                    ↳ 110: general_variable
                                                                                                                                                                                                                                                           ↳ 80: IDENTIFIER

    shift/reduce conflict on token IDENTIFIER:
       53 local_var_const_decl_list: local_var_const_decl •
      112 comp_function_call: • IDENTIFIER '(' comp_expr_comma_list ')'
      First example: comp_definition_list KW_COMP IDENTIFIER comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl • IDENTIFIER '(' comp_expr_comma_list ')' ';' KW_RETURN comp_expression ';' KW_ENDDEF ';' comp_function_definition_list KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                                                                                        $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                                                                                       local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER comp_function_definition_list                                                                                                                                                                                                                                           comp_function_definition_list KW_ENDCOMP ';'
                                                                        ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                             ↳ 174: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl comp_command_list                                                         KW_RETURN comp_expression ';' KW_ENDDEF ';'
                                                                                                                                                                                                                          ↳ 153: comp_command
                                                                                                                                                                                                                                 ↳ 166: general_comp_function_call                              ';'
                                                                                                                                                                                                                                        ↳ 113: comp_function_call
                                                                                                                                                                                                                                               ↳ 112: • IDENTIFIER '(' comp_expr_comma_list ')'
      Second example: comp_definition_list KW_COMP IDENTIFIER ':' comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl • IDENTIFIER assignment_operator comp_expression ';' KW_RETURN comp_expression ';' KW_ENDDEF ';' KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                                                                          $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                                                                         local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER ':' comp_function_definition_list                                                                                                                                                                                                                                                       KW_ENDCOMP ';'
                                                                            ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                                 ↳ 172: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl_list    comp_command_list                                                             KW_RETURN comp_expression ';' KW_ENDDEF ';'
                                                                                                                                                                                                         ↳ 53: local_var_const_decl • ↳ 153: comp_command
                                                                                                                                                                                                                                             ↳ 155: comp_variable           assignment_operator comp_expression ';'
                                                                                                                                                                                                                                                    ↳ 110: general_variable
                                                                                                                                                                                                                                                           ↳ 80: IDENTIFIER

    shift/reduce conflict on token '#':
       53 local_var_const_decl_list: local_var_const_decl •
      114 general_comp_function_call: • '#' IDENTIFIER '.' comp_function_call
      First example: comp_definition_list KW_COMP IDENTIFIER comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl • '#' IDENTIFIER '.' comp_function_call ';' KW_RETURN comp_expression ';' KW_ENDDEF ';' comp_function_definition_list KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                                                                               $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                                                                              local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER comp_function_definition_list                                                                                                                                                                                                                                  comp_function_definition_list KW_ENDCOMP ';'
                                                                        ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                             ↳ 174: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl comp_command_list                                                KW_RETURN comp_expression ';' KW_ENDDEF ';'
                                                                                                                                                                                                                          ↳ 153: comp_command
                                                                                                                                                                                                                                 ↳ 166: general_comp_function_call                     ';'
                                                                                                                                                                                                                                        ↳ 114: • '#' IDENTIFIER '.' comp_function_call
      Second example: comp_definition_list KW_COMP IDENTIFIER ':' comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl • '#' IDENTIFIER assignment_operator comp_expression ';' KW_RETURN comp_expression ';' KW_ENDDEF ';' KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                                                                        $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                                                                       local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER ':' comp_function_definition_list                                                                                                                                                                                                                                                     KW_ENDCOMP ';'
                                                                            ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                                 ↳ 172: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl_list    comp_command_list                                                           KW_RETURN comp_expression ';' KW_ENDDEF ';'
                                                                                                                                                                                                         ↳ 53: local_var_const_decl • ↳ 153: comp_command
                                                                                                                                                                                                                                             ↳ 155: comp_variable         assignment_operator comp_expression ';'
                                                                                                                                                                                                                                                    ↳ 106: '#' IDENTIFIER

    shift/reduce conflict on token '#':
       53 local_var_const_decl_list: local_var_const_decl •
      115 general_comp_function_call: • '#' IDENTIFIER '[' comp_expression ']' '.' comp_function_call
      First example: comp_definition_list KW_COMP IDENTIFIER comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl • '#' IDENTIFIER '[' comp_expression ']' '.' comp_function_call ';' KW_RETURN comp_expression ';' KW_ENDDEF ';' comp_function_definition_list KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                                                                                                       $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                                                                                                      local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER comp_function_definition_list                                                                                                                                                                                                                                                          comp_function_definition_list KW_ENDCOMP ';'
                                                                        ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                             ↳ 174: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl comp_command_list                                                                        KW_RETURN comp_expression ';' KW_ENDDEF ';'
                                                                                                                                                                                                                          ↳ 153: comp_command
                                                                                                                                                                                                                                 ↳ 166: general_comp_function_call                                             ';'
                                                                                                                                                                                                                                        ↳ 115: • '#' IDENTIFIER '[' comp_expression ']' '.' comp_function_call
      Second example: comp_definition_list KW_COMP IDENTIFIER ':' comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl • '#' IDENTIFIER assignment_operator comp_expression ';' KW_RETURN comp_expression ';' KW_ENDDEF ';' KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                                                                        $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                                                                       local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER ':' comp_function_definition_list                                                                                                                                                                                                                                                     KW_ENDCOMP ';'
                                                                            ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                                 ↳ 172: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl_list    comp_command_list                                                           KW_RETURN comp_expression ';' KW_ENDDEF ';'
                                                                                                                                                                                                         ↳ 53: local_var_const_decl • ↳ 153: comp_command
                                                                                                                                                                                                                                             ↳ 155: comp_variable         assignment_operator comp_expression ';'
                                                                                                                                                                                                                                                    ↳ 106: '#' IDENTIFIER

    shift/reduce conflict on token KW_IF:
       53 local_var_const_decl_list: local_var_const_decl •
      156 comp_command: • KW_IF '(' comp_expression ')' ':' comp_command_list KW_ENDIF ';'
      First example: comp_definition_list KW_COMP IDENTIFIER comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl • KW_IF '(' comp_expression ')' ':' comp_command_list KW_ENDIF ';' KW_RETURN comp_expression ';' KW_ENDDEF ';' comp_function_definition_list KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                                                                                               $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                                                                                              local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER comp_function_definition_list                                                                                                                                                                                                                                                  comp_function_definition_list KW_ENDCOMP ';'
                                                                        ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                             ↳ 174: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl comp_command_list                                                                KW_RETURN comp_expression ';' KW_ENDDEF ';'
                                                                                                                                                                                                                          ↳ 153: comp_command
                                                                                                                                                                                                                                 ↳ 156: • KW_IF '(' comp_expression ')' ':' comp_command_list KW_ENDIF ';'
      Second example: comp_definition_list KW_COMP IDENTIFIER ':' comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl • KW_IF '(' comp_expression ')' ':' comp_command_list KW_ENDIF ';' KW_RETURN comp_expression ';' KW_ENDDEF ';' KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                                                                           $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                                                                          local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER ':' comp_function_definition_list                                                                                                                                                                                                                                                        KW_ENDCOMP ';'
                                                                            ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                                 ↳ 172: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl_list    comp_command_list                                                              KW_RETURN comp_expression ';' KW_ENDDEF ';'
                                                                                                                                                                                                         ↳ 53: local_var_const_decl • ↳ 153: comp_command
                                                                                                                                                                                                                                             ↳ 156: KW_IF '(' comp_expression ')' ':' comp_command_list KW_ENDIF ';'

    shift/reduce conflict on token KW_IF:
       53 local_var_const_decl_list: local_var_const_decl •
      157 comp_command: • KW_IF '(' comp_expression ')' ':' comp_command_list KW_ELSE ':' comp_command_list KW_ENDIF ';'
      First example: comp_definition_list KW_COMP IDENTIFIER comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl • KW_IF '(' comp_expression ')' ':' comp_command_list KW_ELSE ':' comp_command_list KW_ENDIF ';' KW_RETURN comp_expression ';' KW_ENDDEF ';' comp_function_definition_list KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                                                                                                                             $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                                                                                                                            local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER comp_function_definition_list                                                                                                                                                                                                                                                                                comp_function_definition_list KW_ENDCOMP ';'
                                                                        ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                             ↳ 174: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl comp_command_list                                                                                              KW_RETURN comp_expression ';' KW_ENDDEF ';'
                                                                                                                                                                                                                          ↳ 153: comp_command
                                                                                                                                                                                                                                 ↳ 157: • KW_IF '(' comp_expression ')' ':' comp_command_list KW_ELSE ':' comp_command_list KW_ENDIF ';'
      Second example: comp_definition_list KW_COMP IDENTIFIER ':' comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl • KW_IF '(' comp_expression ')' ':' comp_command_list KW_ENDIF ';' KW_RETURN comp_expression ';' KW_ENDDEF ';' KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                                                                           $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                                                                          local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER ':' comp_function_definition_list                                                                                                                                                                                                                                                        KW_ENDCOMP ';'
                                                                            ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                                 ↳ 172: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl_list    comp_command_list                                                              KW_RETURN comp_expression ';' KW_ENDDEF ';'
                                                                                                                                                                                                         ↳ 53: local_var_const_decl • ↳ 153: comp_command
                                                                                                                                                                                                                                             ↳ 156: KW_IF '(' comp_expression ')' ':' comp_command_list KW_ENDIF ';'

    shift/reduce conflict on token KW_FOR:
       53 local_var_const_decl_list: local_var_const_decl •
      158 comp_command: • KW_FOR comp_variable KW_IN '[' comp_expression ':' comp_expression ']' ':' comp_command_list KW_ENDFOR ';'
      First example: comp_definition_list KW_COMP IDENTIFIER comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl • KW_FOR comp_variable KW_IN '[' comp_expression ':' comp_expression ']' ':' comp_command_list KW_ENDFOR ';' KW_RETURN comp_expression ';' KW_ENDDEF ';' comp_function_definition_list KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                                                                                                                                        local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER comp_function_definition_list                                                                                                                                                                                                                                                                                            comp_function_definition_list KW_ENDCOMP ';'
                                                                        ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                             ↳ 174: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl comp_command_list                                                                                                          KW_RETURN comp_expression ';' KW_ENDDEF ';'
                                                                                                                                                                                                                          ↳ 153: comp_command
                                                                                                                                                                                                                                 ↳ 158: • KW_FOR comp_variable KW_IN '[' comp_expression ':' comp_expression ']' ':' comp_command_list KW_ENDFOR ';'
      Second example: comp_definition_list KW_COMP IDENTIFIER ':' comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl • KW_FOR comp_variable KW_IN '[' comp_expression ':' comp_expression ']' ':' comp_command_list KW_ENDFOR ';' KW_RETURN comp_expression ';' KW_ENDDEF ';' KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                                                                                                                     $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                                                                                                                    local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER ':' comp_function_definition_list                                                                                                                                                                                                                                                                                                  KW_ENDCOMP ';'
                                                                            ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                                 ↳ 172: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl_list    comp_command_list                                                                                                        KW_RETURN comp_expression ';' KW_ENDDEF ';'
                                                                                                                                                                                                         ↳ 53: local_var_const_decl • ↳ 153: comp_command
                                                                                                                                                                                                                                             ↳ 158: KW_FOR comp_variable KW_IN '[' comp_expression ':' comp_expression ']' ':' comp_command_list KW_ENDFOR ';'

    shift/reduce conflict on token KW_FOR:
       53 local_var_const_decl_list: local_var_const_decl •
      159 comp_command: • KW_FOR comp_variable KW_IN '[' comp_expression ':' comp_expression ':' comp_expression ']' ':' comp_command_list KW_ENDFOR ';'
      First example: comp_definition_list KW_COMP IDENTIFIER comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl • KW_FOR comp_variable KW_IN '[' comp_expression ':' comp_expression ':' comp_expression ']' ':' comp_command_list KW_ENDFOR ';' KW_RETURN comp_expression ';' KW_ENDDEF ';' comp_function_definition_list KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                                                                                                                                                            local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER comp_function_definition_list                                                                                                                                                                                                                                                                                                                comp_function_definition_list KW_ENDCOMP ';'
                                                                        ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                             ↳ 174: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl comp_command_list                                                                                                                              KW_RETURN comp_expression ';' KW_ENDDEF ';'
                                                                                                                                                                                                                          ↳ 153: comp_command
                                                                                                                                                                                                                                 ↳ 159: • KW_FOR comp_variable KW_IN '[' comp_expression ':' comp_expression ':' comp_expression ']' ':' comp_command_list KW_ENDFOR ';'
      Second example: comp_definition_list KW_COMP IDENTIFIER ':' comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl • KW_FOR comp_variable KW_IN '[' comp_expression ':' comp_expression ']' ':' comp_command_list KW_ENDFOR ';' KW_RETURN comp_expression ';' KW_ENDDEF ';' KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                                                                                                                     $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                                                                                                                    local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER ':' comp_function_definition_list                                                                                                                                                                                                                                                                                                  KW_ENDCOMP ';'
                                                                            ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                                 ↳ 172: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl_list    comp_command_list                                                                                                        KW_RETURN comp_expression ';' KW_ENDDEF ';'
                                                                                                                                                                                                         ↳ 53: local_var_const_decl • ↳ 153: comp_command
                                                                                                                                                                                                                                             ↳ 158: KW_FOR comp_variable KW_IN '[' comp_expression ':' comp_expression ']' ':' comp_command_list KW_ENDFOR ';'

    shift/reduce conflict on token KW_WHILE:
       53 local_var_const_decl_list: local_var_const_decl •
      161 comp_command: • KW_WHILE '(' comp_expression ')' ':' comp_command_list KW_ENDWHILE ';'
      First example: comp_definition_list KW_COMP IDENTIFIER comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl • KW_WHILE '(' comp_expression ')' ':' comp_command_list KW_ENDWHILE ';' KW_RETURN comp_expression ';' KW_ENDDEF ';' comp_function_definition_list KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                                                                                                     $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                                                                                                    local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER comp_function_definition_list                                                                                                                                                                                                                                                        comp_function_definition_list KW_ENDCOMP ';'
                                                                        ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                             ↳ 174: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl comp_command_list                                                                      KW_RETURN comp_expression ';' KW_ENDDEF ';'
                                                                                                                                                                                                                          ↳ 153: comp_command
                                                                                                                                                                                                                                 ↳ 161: • KW_WHILE '(' comp_expression ')' ':' comp_command_list KW_ENDWHILE ';'
      Second example: comp_definition_list KW_COMP IDENTIFIER ':' comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl • KW_WHILE '(' comp_expression ')' ':' comp_command_list KW_ENDWHILE ';' KW_RETURN comp_expression ';' KW_ENDDEF ';' KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                                                                                 $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                                                                                local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER ':' comp_function_definition_list                                                                                                                                                                                                                                                              KW_ENDCOMP ';'
                                                                            ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                                 ↳ 172: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl_list    comp_command_list                                                                    KW_RETURN comp_expression ';' KW_ENDDEF ';'
                                                                                                                                                                                                         ↳ 53: local_var_const_decl • ↳ 153: comp_command
                                                                                                                                                                                                                                             ↳ 161: KW_WHILE '(' comp_expression ')' ':' comp_command_list KW_ENDWHILE ';'

    shift/reduce conflict on token KW_BREAK:
       53 local_var_const_decl_list: local_var_const_decl •
      162 comp_command: • KW_BREAK ';'
      First example: comp_definition_list KW_COMP IDENTIFIER comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl • KW_BREAK ';' KW_RETURN comp_expression ';' KW_ENDDEF ';' comp_function_definition_list KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                                           $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                                          local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER comp_function_definition_list                                                                                                                                                                                              comp_function_definition_list KW_ENDCOMP ';'
                                                                        ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                             ↳ 174: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl comp_command_list            KW_RETURN comp_expression ';' KW_ENDDEF ';'
                                                                                                                                                                                                                          ↳ 153: comp_command
                                                                                                                                                                                                                                 ↳ 162: • KW_BREAK ';'
      Second example: comp_definition_list KW_COMP IDENTIFIER ':' comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl • KW_BREAK ';' KW_RETURN comp_expression ';' KW_ENDDEF ';' KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                       $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                      local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER ':' comp_function_definition_list                                                                                                                                                                                                    KW_ENDCOMP ';'
                                                                            ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                                 ↳ 172: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl_list    comp_command_list          KW_RETURN comp_expression ';' KW_ENDDEF ';'
                                                                                                                                                                                                         ↳ 53: local_var_const_decl • ↳ 153: comp_command
                                                                                                                                                                                                                                             ↳ 162: KW_BREAK ';'

    shift/reduce conflict on token KW_CONTINUE:
       53 local_var_const_decl_list: local_var_const_decl •
      163 comp_command: • KW_CONTINUE ';'
      First example: comp_definition_list KW_COMP IDENTIFIER comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl • KW_CONTINUE ';' KW_RETURN comp_expression ';' KW_ENDDEF ';' comp_function_definition_list KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                                              $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                                             local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER comp_function_definition_list                                                                                                                                                                                                 comp_function_definition_list KW_ENDCOMP ';'
                                                                        ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                             ↳ 174: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl comp_command_list               KW_RETURN comp_expression ';' KW_ENDDEF ';'
                                                                                                                                                                                                                          ↳ 153: comp_command
                                                                                                                                                                                                                                 ↳ 163: • KW_CONTINUE ';'
      Second example: comp_definition_list KW_COMP IDENTIFIER ':' comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl • KW_CONTINUE ';' KW_RETURN comp_expression ';' KW_ENDDEF ';' KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                          $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                         local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER ':' comp_function_definition_list                                                                                                                                                                                                       KW_ENDCOMP ';'
                                                                            ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                                 ↳ 172: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl_list    comp_command_list             KW_RETURN comp_expression ';' KW_ENDDEF ';'
                                                                                                                                                                                                         ↳ 53: local_var_const_decl • ↳ 153: comp_command
                                                                                                                                                                                                                                             ↳ 163: KW_CONTINUE ';'

    shift/reduce conflict on token KW_RETURN:
       53 local_var_const_decl_list: local_var_const_decl •
      164 comp_command: • KW_RETURN ';'
      First example: comp_definition_list KW_COMP IDENTIFIER comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl • KW_RETURN ';' KW_RETURN comp_expression ';' KW_ENDDEF ';' comp_function_definition_list KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                                            $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                                           local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER comp_function_definition_list                                                                                                                                                                                               comp_function_definition_list KW_ENDCOMP ';'
                                                                        ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                             ↳ 174: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl comp_command_list             KW_RETURN comp_expression ';' KW_ENDDEF ';'
                                                                                                                                                                                                                          ↳ 153: comp_command
                                                                                                                                                                                                                                 ↳ 164: • KW_RETURN ';'
      Second example: comp_definition_list KW_COMP IDENTIFIER ':' comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl • KW_RETURN ';' KW_RETURN comp_expression ';' KW_ENDDEF ';' KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                        $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                       local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER ':' comp_function_definition_list                                                                                                                                                                                                     KW_ENDCOMP ';'
                                                                            ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                                 ↳ 172: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl_list    comp_command_list           KW_RETURN comp_expression ';' KW_ENDDEF ';'
                                                                                                                                                                                                         ↳ 53: local_var_const_decl • ↳ 153: comp_command
                                                                                                                                                                                                                                             ↳ 164: KW_RETURN ';'

    shift/reduce conflict on token KW_RETURN:
       53 local_var_const_decl_list: local_var_const_decl •
      165 comp_command: • KW_RETURN comp_expression ';'
      First example: comp_definition_list KW_COMP IDENTIFIER comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl • KW_RETURN comp_expression ';' KW_RETURN comp_expression ';' KW_ENDDEF ';' comp_function_definition_list KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                                                            $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                                                           local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER comp_function_definition_list                                                                                                                                                                                                               comp_function_definition_list KW_ENDCOMP ';'
                                                                        ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                             ↳ 174: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl comp_command_list                             KW_RETURN comp_expression ';' KW_ENDDEF ';'
                                                                                                                                                                                                                          ↳ 153: comp_command
                                                                                                                                                                                                                                 ↳ 165: • KW_RETURN comp_expression ';'
      Second example: comp_definition_list KW_COMP IDENTIFIER ':' comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl • KW_RETURN ';' KW_RETURN comp_expression ';' KW_ENDDEF ';' KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                        $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                       local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER ':' comp_function_definition_list                                                                                                                                                                                                     KW_ENDCOMP ';'
                                                                            ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                                 ↳ 172: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl_list    comp_command_list           KW_RETURN comp_expression ';' KW_ENDDEF ';'
                                                                                                                                                                                                         ↳ 53: local_var_const_decl • ↳ 153: comp_command
                                                                                                                                                                                                                                             ↳ 164: KW_RETURN ';'



State 413

   80 general_variable: • IDENTIFIER
   81                 | • IDENTIFIER '.' '#' IDENTIFIER
   82                 | • IDENTIFIER '[' expression ']'
   83                 | • IDENTIFIER '.' '#' IDENTIFIER '[' expression ']'
  106 comp_variable: • '#' IDENTIFIER
  107              | • '#' IDENTIFIER '[' comp_expression ']'
  108              | • comp_variable '.' '#' IDENTIFIER
  109              | • comp_variable '.' '#' IDENTIFIER '[' POSINT ']'
  110              | • general_variable
  111 comp_function_call: • IDENTIFIER '(' ')'
  112                   | • IDENTIFIER '(' comp_expr_comma_list ')'
  113 general_comp_function_call: • comp_function_call
  114                           | • '#' IDENTIFIER '.' comp_function_call
  115                           | • '#' IDENTIFIER '[' comp_expression ']' '.' comp_function_call
  154 comp_command_list: comp_command_list • comp_command
  155 comp_command: • comp_variable assignment_operator comp_expression ';'
  156             | • KW_IF '(' comp_expression ')' ':' comp_command_list KW_ENDIF ';'
  157             | • KW_IF '(' comp_expression ')' ':' comp_command_list KW_ELSE ':' comp_command_list KW_ENDIF ';'
  158             | • KW_FOR comp_variable KW_IN '[' comp_expression ':' comp_expression ']' ':' comp_command_list KW_ENDFOR ';'
  159             | • KW_FOR comp_variable KW_IN '[' comp_expression ':' comp_expression ':' comp_expression ']' ':' comp_command_list KW_ENDFOR ';'
  160             | • comp_variable OP_ASSIGN '[' comp_expression KW_FOR comp_variable ':' POSINT ']' ':' basic_data_type ';'
  161             | • KW_WHILE '(' comp_expression ')' ':' comp_command_list KW_ENDWHILE ';'
  162             | • KW_BREAK ';'
  163             | • KW_CONTINUE ';'
  164             | • KW_RETURN ';'
  165             | • KW_RETURN comp_expression ';'
  166             | • general_comp_function_call ';'
  173 comp_function_definition: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' comp_command_list • KW_RETURN comp_expression ';' KW_ENDDEF ';'

    IDENTIFIER   shift, and go to state 362
    KW_IF        shift, and go to state 320
    KW_CONTINUE  shift, and go to state 321
    KW_FOR       shift, and go to state 322
    KW_WHILE     shift, and go to state 323
    KW_BREAK     shift, and go to state 324
    KW_RETURN    shift, and go to state 436
    '#'          shift, and go to state 326

    general_variable            go to state 329
    comp_variable               go to state 330
    comp_function_call          go to state 160
    general_comp_function_call  go to state 331
    comp_command                go to state 370


State 414

  156 comp_command: KW_IF '(' comp_expression ')' • ':' comp_command_list KW_ENDIF ';'
  157             | KW_IF '(' comp_expression ')' • ':' comp_command_list KW_ELSE ':' comp_command_list KW_ENDIF ';'

    ':'  shift, and go to state 437


State 415

  107 comp_variable: '#' IDENTIFIER '[' • comp_expression ']'
  111 comp_function_call: • IDENTIFIER '(' ')'
  112                   | • IDENTIFIER '(' comp_expr_comma_list ')'
  113 general_comp_function_call: • comp_function_call
  114                           | • '#' IDENTIFIER '.' comp_function_call
  115                           | • '#' IDENTIFIER '[' comp_expression ']' '.' comp_function_call
  118 comp_primary_expression: • POSINT
  119                        | • SCALAR
  120                        | • '#' IDENTIFIER
  121                        | • IDENTIFIER
  122                        | • STRING
  123                        | • KW_TRUE
  124                        | • KW_FALSE
  125                        | • '(' logic_expression ')'
  126 comp_math_expression: • comp_primary_expression
  127                     | • '+' comp_math_expression
  128                     | • '-' comp_math_expression
  129                     | • comp_math_expression '+' comp_math_expression
  130                     | • comp_math_expression '-' comp_math_expression
  131                     | • comp_math_expression '*' comp_math_expression
  132                     | • comp_math_expression '/' comp_math_expression
  133                     | • comp_math_expression '%' comp_math_expression
  134                     | • comp_math_expression OP_PAW comp_math_expression
  135                     | • '#' IDENTIFIER '[' comp_expression ']'
  136                     | • '#' IDENTIFIER '[' comp_expression ']' '.' '#' IDENTIFIER
  137                     | • '#' IDENTIFIER '[' comp_expression ']' '.' '#' IDENTIFIER '[' comp_expression ']'
  138                     | • general_comp_function_call
  139                     | • '#' IDENTIFIER '.' '#' IDENTIFIER '[' comp_expression ']'
  140                     | • '#' IDENTIFIER '.' '#' IDENTIFIER
  141 comp_relational_expression: • comp_math_expression
  142                           | • comp_relational_expression OP_EQUALS comp_relational_expression
  143                           | • comp_relational_expression OP_NE comp_relational_expression
  144                           | • comp_relational_expression '>' comp_relational_expression
  145                           | • comp_relational_expression '<' comp_relational_expression
  146                           | • comp_relational_expression OP_LE comp_relational_expression
  147                           | • comp_relational_expression OP_GE comp_relational_expression
  148 comp_logic_expression: • comp_relational_expression
  149                      | • OP_NOT comp_logic_expression
  150                      | • comp_logic_expression OP_AND comp_logic_expression
  151                      | • comp_logic_expression OP_OR comp_logic_expression
  152 comp_expression: • comp_logic_expression

    IDENTIFIER  shift, and go to state 148
    POSINT      shift, and go to state 149
    SCALAR      shift, and go to state 150
    STRING      shift, and go to state 151
    OP_NOT      shift, and go to state 152
    KW_TRUE     shift, and go to state 153
    KW_FALSE    shift, and go to state 154
    '-'         shift, and go to state 155
    '+'         shift, and go to state 156
    '#'         shift, and go to state 157
    '('         shift, and go to state 158

    comp_function_call          go to state 160
    general_comp_function_call  go to state 161
    comp_primary_expression     go to state 162
    comp_math_expression        go to state 163
    comp_relational_expression  go to state 164
    comp_logic_expression       go to state 165
    comp_expression             go to state 438


State 416

  111 comp_function_call: • IDENTIFIER '(' ')'
  112                   | • IDENTIFIER '(' comp_expr_comma_list ')'
  113 general_comp_function_call: • comp_function_call
  114                           | • '#' IDENTIFIER '.' comp_function_call
  115                           | • '#' IDENTIFIER '[' comp_expression ']' '.' comp_function_call
  118 comp_primary_expression: • POSINT
  119                        | • SCALAR
  120                        | • '#' IDENTIFIER
  121                        | • IDENTIFIER
  122                        | • STRING
  123                        | • KW_TRUE
  124                        | • KW_FALSE
  125                        | • '(' logic_expression ')'
  126 comp_math_expression: • comp_primary_expression
  127                     | • '+' comp_math_expression
  128                     | • '-' comp_math_expression
  129                     | • comp_math_expression '+' comp_math_expression
  130                     | • comp_math_expression '-' comp_math_expression
  131                     | • comp_math_expression '*' comp_math_expression
  132                     | • comp_math_expression '/' comp_math_expression
  133                     | • comp_math_expression '%' comp_math_expression
  134                     | • comp_math_expression OP_PAW comp_math_expression
  135                     | • '#' IDENTIFIER '[' comp_expression ']'
  136                     | • '#' IDENTIFIER '[' comp_expression ']' '.' '#' IDENTIFIER
  137                     | • '#' IDENTIFIER '[' comp_expression ']' '.' '#' IDENTIFIER '[' comp_expression ']'
  138                     | • general_comp_function_call
  139                     | • '#' IDENTIFIER '.' '#' IDENTIFIER '[' comp_expression ']'
  140                     | • '#' IDENTIFIER '.' '#' IDENTIFIER
  141 comp_relational_expression: • comp_math_expression
  142                           | • comp_relational_expression OP_EQUALS comp_relational_expression
  143                           | • comp_relational_expression OP_NE comp_relational_expression
  144                           | • comp_relational_expression '>' comp_relational_expression
  145                           | • comp_relational_expression '<' comp_relational_expression
  146                           | • comp_relational_expression OP_LE comp_relational_expression
  147                           | • comp_relational_expression OP_GE comp_relational_expression
  148 comp_logic_expression: • comp_relational_expression
  149                      | • OP_NOT comp_logic_expression
  150                      | • comp_logic_expression OP_AND comp_logic_expression
  151                      | • comp_logic_expression OP_OR comp_logic_expression
  152 comp_expression: • comp_logic_expression
  158 comp_command: KW_FOR comp_variable KW_IN '[' • comp_expression ':' comp_expression ']' ':' comp_command_list KW_ENDFOR ';'
  159             | KW_FOR comp_variable KW_IN '[' • comp_expression ':' comp_expression ':' comp_expression ']' ':' comp_command_list KW_ENDFOR ';'

    IDENTIFIER  shift, and go to state 148
    POSINT      shift, and go to state 149
    SCALAR      shift, and go to state 150
    STRING      shift, and go to state 151
    OP_NOT      shift, and go to state 152
    KW_TRUE     shift, and go to state 153
    KW_FALSE    shift, and go to state 154
    '-'         shift, and go to state 155
    '+'         shift, and go to state 156
    '#'         shift, and go to state 157
    '('         shift, and go to state 158

    comp_function_call          go to state 160
    general_comp_function_call  go to state 161
    comp_primary_expression     go to state 162
    comp_math_expression        go to state 163
    comp_relational_expression  go to state 164
    comp_logic_expression       go to state 165
    comp_expression             go to state 439


State 417

  161 comp_command: KW_WHILE '(' comp_expression ')' • ':' comp_command_list KW_ENDWHILE ';'

    ':'  shift, and go to state 440


State 418

  107 comp_variable: '#' IDENTIFIER '[' comp_expression • ']'
  115 general_comp_function_call: '#' IDENTIFIER '[' comp_expression • ']' '.' comp_function_call

    ']'  shift, and go to state 441


State 419

  169 comp_function_definition: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl_list comp_command_list KW_ENDDEF ';' •

    $default  reduce using rule 169 (comp_function_definition)


State 420

  170 comp_function_definition: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' local_var_const_decl comp_command_list KW_ENDDEF ';' •

    $default  reduce using rule 170 (comp_function_definition)


State 421

  160 comp_command: comp_variable OP_ASSIGN '[' comp_expression • KW_FOR comp_variable ':' POSINT ']' ':' basic_data_type ';'

    KW_FOR  shift, and go to state 442


State 422

  108 comp_variable: comp_variable '.' '#' IDENTIFIER •  [KW_IN, OP_ASSIGN, OP_ASSIGN_PLUSEQ, OP_ASSIGN_MULEQ, OP_ASSIGN_DIVEQ, OP_ASSIGN_MODEQ, OP_ASSIGN_MINUSEQ, '.', '=', ':']
  109              | comp_variable '.' '#' IDENTIFIER • '[' POSINT ']'

    '['  shift, and go to state 443

    $default  reduce using rule 108 (comp_variable)


State 423

  155 comp_command: comp_variable assignment_operator comp_expression ';' •

    $default  reduce using rule 155 (comp_command)


State 424

    2 primary_expression: • POSINT
    3                   | • SCALAR
    4                   | • IDENTIFIER
    5                   | • STRING
    6                   | • KW_TRUE
    7                   | • KW_FALSE
    8                   | • '(' logic_expression ')'
    9 math_expression: • primary_expression
   10                | • '+' math_expression
   11                | • '-' math_expression
   12                | • math_expression '+' math_expression
   13                | • math_expression '-' math_expression
   14                | • math_expression '*' math_expression
   15                | • math_expression '/' math_expression
   16                | • math_expression '%' math_expression
   17                | • math_expression OP_PAW math_expression
   18                | • IDENTIFIER '[' expression ']'
   19                | • IDENTIFIER '[' expression ']' '.' IDENTIFIER
   20                | • IDENTIFIER '[' expression ']' '.' IDENTIFIER '[' expression ']'
   21                | • general_function_call
   22                | • IDENTIFIER '.' IDENTIFIER '[' expression ']'
   23                | • IDENTIFIER '.' IDENTIFIER
   24 relational_expression: • math_expression
   25                      | • relational_expression OP_EQUALS relational_expression
   26                      | • relational_expression OP_NE relational_expression
   27                      | • relational_expression '>' relational_expression
   28                      | • relational_expression '<' relational_expression
   29                      | • relational_expression OP_LE relational_expression
   30                      | • relational_expression OP_GE relational_expression
   31 logic_expression: • relational_expression
   32                 | • OP_NOT logic_expression
   33                 | • logic_expression OP_AND logic_expression
   34                 | • logic_expression OP_OR logic_expression
   35 expression: • logic_expression
   66 general_function_call: • function_call
   67                      | • IDENTIFIER '.' function_call
   68                      | • IDENTIFIER '[' expression ']' '.' function_call
   69 function_call: • IDENTIFIER '(' ')'
   70              | • IDENTIFIER '(' expr_comma_list ')'
   95 function_command: KW_RETURN • ';'
   96                 | KW_RETURN • expression ';'
  103 function_definition: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl_list function_command_list KW_RETURN • expression ';' KW_ENDDEF ';'

    IDENTIFIER  shift, and go to state 53
    POSINT      shift, and go to state 54
    SCALAR      shift, and go to state 55
    STRING      shift, and go to state 56
    OP_NOT      shift, and go to state 57
    KW_TRUE     shift, and go to state 58
    KW_FALSE    shift, and go to state 59
    '-'         shift, and go to state 60
    '+'         shift, and go to state 61
    '('         shift, and go to state 62
    ';'         shift, and go to state 268

    primary_expression     go to state 64
    math_expression        go to state 65
    relational_expression  go to state 66
    logic_expression       go to state 67
    expression             go to state 444
    general_function_call  go to state 69
    function_call          go to state 70


State 425

    2 primary_expression: • POSINT
    3                   | • SCALAR
    4                   | • IDENTIFIER
    5                   | • STRING
    6                   | • KW_TRUE
    7                   | • KW_FALSE
    8                   | • '(' logic_expression ')'
    9 math_expression: • primary_expression
   10                | • '+' math_expression
   11                | • '-' math_expression
   12                | • math_expression '+' math_expression
   13                | • math_expression '-' math_expression
   14                | • math_expression '*' math_expression
   15                | • math_expression '/' math_expression
   16                | • math_expression '%' math_expression
   17                | • math_expression OP_PAW math_expression
   18                | • IDENTIFIER '[' expression ']'
   19                | • IDENTIFIER '[' expression ']' '.' IDENTIFIER
   20                | • IDENTIFIER '[' expression ']' '.' IDENTIFIER '[' expression ']'
   21                | • general_function_call
   22                | • IDENTIFIER '.' IDENTIFIER '[' expression ']'
   23                | • IDENTIFIER '.' IDENTIFIER
   24 relational_expression: • math_expression
   25                      | • relational_expression OP_EQUALS relational_expression
   26                      | • relational_expression OP_NE relational_expression
   27                      | • relational_expression '>' relational_expression
   28                      | • relational_expression '<' relational_expression
   29                      | • relational_expression OP_LE relational_expression
   30                      | • relational_expression OP_GE relational_expression
   31 logic_expression: • relational_expression
   32                 | • OP_NOT logic_expression
   33                 | • logic_expression OP_AND logic_expression
   34                 | • logic_expression OP_OR logic_expression
   35 expression: • logic_expression
   66 general_function_call: • function_call
   67                      | • IDENTIFIER '.' function_call
   68                      | • IDENTIFIER '[' expression ']' '.' function_call
   69 function_call: • IDENTIFIER '(' ')'
   70              | • IDENTIFIER '(' expr_comma_list ')'
   95 function_command: KW_RETURN • ';'
   96                 | KW_RETURN • expression ';'
  104 function_definition: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl function_command_list KW_RETURN • expression ';' KW_ENDDEF ';'

    IDENTIFIER  shift, and go to state 53
    POSINT      shift, and go to state 54
    SCALAR      shift, and go to state 55
    STRING      shift, and go to state 56
    OP_NOT      shift, and go to state 57
    KW_TRUE     shift, and go to state 58
    KW_FALSE    shift, and go to state 59
    '-'         shift, and go to state 60
    '+'         shift, and go to state 61
    '('         shift, and go to state 62
    ';'         shift, and go to state 268

    primary_expression     go to state 64
    math_expression        go to state 65
    relational_expression  go to state 66
    logic_expression       go to state 67
    expression             go to state 445
    general_function_call  go to state 69
    function_call          go to state 70


State 426

   96 function_command: KW_RETURN expression • ';'
  105 function_definition: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' function_command_list KW_RETURN expression • ';' KW_ENDDEF ';'

    ';'  shift, and go to state 446


State 427

   83 general_variable: IDENTIFIER '.' '#' IDENTIFIER '[' expression ']' •

    $default  reduce using rule 83 (general_variable)


State 428

   88 function_command: KW_IF '(' expression ')' ':' function_command_list KW_ELSE • ':' function_command_list KW_ENDIF ';'

    ':'  shift, and go to state 447


State 429

   87 function_command: KW_IF '(' expression ')' ':' function_command_list KW_ENDIF • ';'

    ';'  shift, and go to state 448


State 430

   89 function_command: KW_FOR general_variable KW_IN '[' expression ':' expression • ']' ':' function_command_list KW_ENDFOR ';'
   90                 | KW_FOR general_variable KW_IN '[' expression ':' expression • ':' expression ']' ':' function_command_list KW_ENDFOR ';'

    ']'  shift, and go to state 449
    ':'  shift, and go to state 450


State 431

   92 function_command: KW_WHILE '(' expression ')' ':' function_command_list KW_ENDWHILE • ';'

    ';'  shift, and go to state 451


State 432

   91 function_command: general_variable OP_ASSIGN '[' expression KW_FOR general_variable ':' • POSINT ']' ':' basic_data_type ';'

    POSINT  shift, and go to state 452


State 433

  111 comp_function_call: • IDENTIFIER '(' ')'
  112                   | • IDENTIFIER '(' comp_expr_comma_list ')'
  113 general_comp_function_call: • comp_function_call
  114                           | • '#' IDENTIFIER '.' comp_function_call
  115                           | • '#' IDENTIFIER '[' comp_expression ']' '.' comp_function_call
  118 comp_primary_expression: • POSINT
  119                        | • SCALAR
  120                        | • '#' IDENTIFIER
  121                        | • IDENTIFIER
  122                        | • STRING
  123                        | • KW_TRUE
  124                        | • KW_FALSE
  125                        | • '(' logic_expression ')'
  126 comp_math_expression: • comp_primary_expression
  127                     | • '+' comp_math_expression
  128                     | • '-' comp_math_expression
  129                     | • comp_math_expression '+' comp_math_expression
  130                     | • comp_math_expression '-' comp_math_expression
  131                     | • comp_math_expression '*' comp_math_expression
  132                     | • comp_math_expression '/' comp_math_expression
  133                     | • comp_math_expression '%' comp_math_expression
  134                     | • comp_math_expression OP_PAW comp_math_expression
  135                     | • '#' IDENTIFIER '[' comp_expression ']'
  136                     | • '#' IDENTIFIER '[' comp_expression ']' '.' '#' IDENTIFIER
  137                     | • '#' IDENTIFIER '[' comp_expression ']' '.' '#' IDENTIFIER '[' comp_expression ']'
  137                     | '#' IDENTIFIER '[' comp_expression ']' '.' '#' IDENTIFIER '[' • comp_expression ']'
  138                     | • general_comp_function_call
  139                     | • '#' IDENTIFIER '.' '#' IDENTIFIER '[' comp_expression ']'
  140                     | • '#' IDENTIFIER '.' '#' IDENTIFIER
  141 comp_relational_expression: • comp_math_expression
  142                           | • comp_relational_expression OP_EQUALS comp_relational_expression
  143                           | • comp_relational_expression OP_NE comp_relational_expression
  144                           | • comp_relational_expression '>' comp_relational_expression
  145                           | • comp_relational_expression '<' comp_relational_expression
  146                           | • comp_relational_expression OP_LE comp_relational_expression
  147                           | • comp_relational_expression OP_GE comp_relational_expression
  148 comp_logic_expression: • comp_relational_expression
  149                      | • OP_NOT comp_logic_expression
  150                      | • comp_logic_expression OP_AND comp_logic_expression
  151                      | • comp_logic_expression OP_OR comp_logic_expression
  152 comp_expression: • comp_logic_expression

    IDENTIFIER  shift, and go to state 148
    POSINT      shift, and go to state 149
    SCALAR      shift, and go to state 150
    STRING      shift, and go to state 151
    OP_NOT      shift, and go to state 152
    KW_TRUE     shift, and go to state 153
    KW_FALSE    shift, and go to state 154
    '-'         shift, and go to state 155
    '+'         shift, and go to state 156
    '#'         shift, and go to state 157
    '('         shift, and go to state 158

    comp_function_call          go to state 160
    general_comp_function_call  go to state 161
    comp_primary_expression     go to state 162
    comp_math_expression        go to state 163
    comp_relational_expression  go to state 164
    comp_logic_expression       go to state 165
    comp_expression             go to state 453


State 434

   80 general_variable: • IDENTIFIER
   81                 | • IDENTIFIER '.' '#' IDENTIFIER
   82                 | • IDENTIFIER '[' expression ']'
   83                 | • IDENTIFIER '.' '#' IDENTIFIER '[' expression ']'
  106 comp_variable: • '#' IDENTIFIER
  107              | • '#' IDENTIFIER '[' comp_expression ']'
  108              | • comp_variable '.' '#' IDENTIFIER
  109              | • comp_variable '.' '#' IDENTIFIER '[' POSINT ']'
  110              | • general_variable
  111 comp_function_call: • IDENTIFIER '(' ')'
  112                   | • IDENTIFIER '(' comp_expr_comma_list ')'
  113 general_comp_function_call: • comp_function_call
  114                           | • '#' IDENTIFIER '.' comp_function_call
  115                           | • '#' IDENTIFIER '[' comp_expression ']' '.' comp_function_call
  154 comp_command_list: comp_command_list • comp_command
  155 comp_command: • comp_variable assignment_operator comp_expression ';'
  156             | • KW_IF '(' comp_expression ')' ':' comp_command_list KW_ENDIF ';'
  157             | • KW_IF '(' comp_expression ')' ':' comp_command_list KW_ELSE ':' comp_command_list KW_ENDIF ';'
  158             | • KW_FOR comp_variable KW_IN '[' comp_expression ':' comp_expression ']' ':' comp_command_list KW_ENDFOR ';'
  159             | • KW_FOR comp_variable KW_IN '[' comp_expression ':' comp_expression ':' comp_expression ']' ':' comp_command_list KW_ENDFOR ';'
  160             | • comp_variable OP_ASSIGN '[' comp_expression KW_FOR comp_variable ':' POSINT ']' ':' basic_data_type ';'
  161             | • KW_WHILE '(' comp_expression ')' ':' comp_command_list KW_ENDWHILE ';'
  162             | • KW_BREAK ';'
  163             | • KW_CONTINUE ';'
  164             | • KW_RETURN ';'
  165             | • KW_RETURN comp_expression ';'
  166             | • general_comp_function_call ';'
  172 comp_function_definition: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl_list comp_command_list • KW_RETURN comp_expression ';' KW_ENDDEF ';'

    IDENTIFIER   shift, and go to state 362
    KW_IF        shift, and go to state 320
    KW_CONTINUE  shift, and go to state 321
    KW_FOR       shift, and go to state 322
    KW_WHILE     shift, and go to state 323
    KW_BREAK     shift, and go to state 324
    KW_RETURN    shift, and go to state 454
    '#'          shift, and go to state 326

    general_variable            go to state 329
    comp_variable               go to state 330
    comp_function_call          go to state 160
    general_comp_function_call  go to state 331
    comp_command                go to state 370


State 435

   80 general_variable: • IDENTIFIER
   81                 | • IDENTIFIER '.' '#' IDENTIFIER
   82                 | • IDENTIFIER '[' expression ']'
   83                 | • IDENTIFIER '.' '#' IDENTIFIER '[' expression ']'
  106 comp_variable: • '#' IDENTIFIER
  107              | • '#' IDENTIFIER '[' comp_expression ']'
  108              | • comp_variable '.' '#' IDENTIFIER
  109              | • comp_variable '.' '#' IDENTIFIER '[' POSINT ']'
  110              | • general_variable
  111 comp_function_call: • IDENTIFIER '(' ')'
  112                   | • IDENTIFIER '(' comp_expr_comma_list ')'
  113 general_comp_function_call: • comp_function_call
  114                           | • '#' IDENTIFIER '.' comp_function_call
  115                           | • '#' IDENTIFIER '[' comp_expression ']' '.' comp_function_call
  154 comp_command_list: comp_command_list • comp_command
  155 comp_command: • comp_variable assignment_operator comp_expression ';'
  156             | • KW_IF '(' comp_expression ')' ':' comp_command_list KW_ENDIF ';'
  157             | • KW_IF '(' comp_expression ')' ':' comp_command_list KW_ELSE ':' comp_command_list KW_ENDIF ';'
  158             | • KW_FOR comp_variable KW_IN '[' comp_expression ':' comp_expression ']' ':' comp_command_list KW_ENDFOR ';'
  159             | • KW_FOR comp_variable KW_IN '[' comp_expression ':' comp_expression ':' comp_expression ']' ':' comp_command_list KW_ENDFOR ';'
  160             | • comp_variable OP_ASSIGN '[' comp_expression KW_FOR comp_variable ':' POSINT ']' ':' basic_data_type ';'
  161             | • KW_WHILE '(' comp_expression ')' ':' comp_command_list KW_ENDWHILE ';'
  162             | • KW_BREAK ';'
  163             | • KW_CONTINUE ';'
  164             | • KW_RETURN ';'
  165             | • KW_RETURN comp_expression ';'
  166             | • general_comp_function_call ';'
  174 comp_function_definition: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl comp_command_list • KW_RETURN comp_expression ';' KW_ENDDEF ';'

    IDENTIFIER   shift, and go to state 362
    KW_IF        shift, and go to state 320
    KW_CONTINUE  shift, and go to state 321
    KW_FOR       shift, and go to state 322
    KW_WHILE     shift, and go to state 323
    KW_BREAK     shift, and go to state 324
    KW_RETURN    shift, and go to state 455
    '#'          shift, and go to state 326

    general_variable            go to state 329
    comp_variable               go to state 330
    comp_function_call          go to state 160
    general_comp_function_call  go to state 331
    comp_command                go to state 370


State 436

  111 comp_function_call: • IDENTIFIER '(' ')'
  112                   | • IDENTIFIER '(' comp_expr_comma_list ')'
  113 general_comp_function_call: • comp_function_call
  114                           | • '#' IDENTIFIER '.' comp_function_call
  115                           | • '#' IDENTIFIER '[' comp_expression ']' '.' comp_function_call
  118 comp_primary_expression: • POSINT
  119                        | • SCALAR
  120                        | • '#' IDENTIFIER
  121                        | • IDENTIFIER
  122                        | • STRING
  123                        | • KW_TRUE
  124                        | • KW_FALSE
  125                        | • '(' logic_expression ')'
  126 comp_math_expression: • comp_primary_expression
  127                     | • '+' comp_math_expression
  128                     | • '-' comp_math_expression
  129                     | • comp_math_expression '+' comp_math_expression
  130                     | • comp_math_expression '-' comp_math_expression
  131                     | • comp_math_expression '*' comp_math_expression
  132                     | • comp_math_expression '/' comp_math_expression
  133                     | • comp_math_expression '%' comp_math_expression
  134                     | • comp_math_expression OP_PAW comp_math_expression
  135                     | • '#' IDENTIFIER '[' comp_expression ']'
  136                     | • '#' IDENTIFIER '[' comp_expression ']' '.' '#' IDENTIFIER
  137                     | • '#' IDENTIFIER '[' comp_expression ']' '.' '#' IDENTIFIER '[' comp_expression ']'
  138                     | • general_comp_function_call
  139                     | • '#' IDENTIFIER '.' '#' IDENTIFIER '[' comp_expression ']'
  140                     | • '#' IDENTIFIER '.' '#' IDENTIFIER
  141 comp_relational_expression: • comp_math_expression
  142                           | • comp_relational_expression OP_EQUALS comp_relational_expression
  143                           | • comp_relational_expression OP_NE comp_relational_expression
  144                           | • comp_relational_expression '>' comp_relational_expression
  145                           | • comp_relational_expression '<' comp_relational_expression
  146                           | • comp_relational_expression OP_LE comp_relational_expression
  147                           | • comp_relational_expression OP_GE comp_relational_expression
  148 comp_logic_expression: • comp_relational_expression
  149                      | • OP_NOT comp_logic_expression
  150                      | • comp_logic_expression OP_AND comp_logic_expression
  151                      | • comp_logic_expression OP_OR comp_logic_expression
  152 comp_expression: • comp_logic_expression
  164 comp_command: KW_RETURN • ';'
  165             | KW_RETURN • comp_expression ';'
  173 comp_function_definition: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' comp_command_list KW_RETURN • comp_expression ';' KW_ENDDEF ';'

    IDENTIFIER  shift, and go to state 148
    POSINT      shift, and go to state 149
    SCALAR      shift, and go to state 150
    STRING      shift, and go to state 151
    OP_NOT      shift, and go to state 152
    KW_TRUE     shift, and go to state 153
    KW_FALSE    shift, and go to state 154
    '-'         shift, and go to state 155
    '+'         shift, and go to state 156
    '#'         shift, and go to state 157
    '('         shift, and go to state 158
    ';'         shift, and go to state 359

    comp_function_call          go to state 160
    general_comp_function_call  go to state 161
    comp_primary_expression     go to state 162
    comp_math_expression        go to state 163
    comp_relational_expression  go to state 164
    comp_logic_expression       go to state 165
    comp_expression             go to state 456


State 437

   80 general_variable: • IDENTIFIER
   81                 | • IDENTIFIER '.' '#' IDENTIFIER
   82                 | • IDENTIFIER '[' expression ']'
   83                 | • IDENTIFIER '.' '#' IDENTIFIER '[' expression ']'
  106 comp_variable: • '#' IDENTIFIER
  107              | • '#' IDENTIFIER '[' comp_expression ']'
  108              | • comp_variable '.' '#' IDENTIFIER
  109              | • comp_variable '.' '#' IDENTIFIER '[' POSINT ']'
  110              | • general_variable
  111 comp_function_call: • IDENTIFIER '(' ')'
  112                   | • IDENTIFIER '(' comp_expr_comma_list ')'
  113 general_comp_function_call: • comp_function_call
  114                           | • '#' IDENTIFIER '.' comp_function_call
  115                           | • '#' IDENTIFIER '[' comp_expression ']' '.' comp_function_call
  153 comp_command_list: • comp_command
  154                  | • comp_command_list comp_command
  155 comp_command: • comp_variable assignment_operator comp_expression ';'
  156             | • KW_IF '(' comp_expression ')' ':' comp_command_list KW_ENDIF ';'
  156             | KW_IF '(' comp_expression ')' ':' • comp_command_list KW_ENDIF ';'
  157             | • KW_IF '(' comp_expression ')' ':' comp_command_list KW_ELSE ':' comp_command_list KW_ENDIF ';'
  157             | KW_IF '(' comp_expression ')' ':' • comp_command_list KW_ELSE ':' comp_command_list KW_ENDIF ';'
  158             | • KW_FOR comp_variable KW_IN '[' comp_expression ':' comp_expression ']' ':' comp_command_list KW_ENDFOR ';'
  159             | • KW_FOR comp_variable KW_IN '[' comp_expression ':' comp_expression ':' comp_expression ']' ':' comp_command_list KW_ENDFOR ';'
  160             | • comp_variable OP_ASSIGN '[' comp_expression KW_FOR comp_variable ':' POSINT ']' ':' basic_data_type ';'
  161             | • KW_WHILE '(' comp_expression ')' ':' comp_command_list KW_ENDWHILE ';'
  162             | • KW_BREAK ';'
  163             | • KW_CONTINUE ';'
  164             | • KW_RETURN ';'
  165             | • KW_RETURN comp_expression ';'
  166             | • general_comp_function_call ';'

    IDENTIFIER   shift, and go to state 362
    KW_IF        shift, and go to state 320
    KW_CONTINUE  shift, and go to state 321
    KW_FOR       shift, and go to state 322
    KW_WHILE     shift, and go to state 323
    KW_BREAK     shift, and go to state 324
    KW_RETURN    shift, and go to state 325
    '#'          shift, and go to state 326

    general_variable            go to state 329
    comp_variable               go to state 330
    comp_function_call          go to state 160
    general_comp_function_call  go to state 331
    comp_command_list           go to state 457
    comp_command                go to state 333


State 438

  107 comp_variable: '#' IDENTIFIER '[' comp_expression • ']'

    ']'  shift, and go to state 458


State 439

  158 comp_command: KW_FOR comp_variable KW_IN '[' comp_expression • ':' comp_expression ']' ':' comp_command_list KW_ENDFOR ';'
  159             | KW_FOR comp_variable KW_IN '[' comp_expression • ':' comp_expression ':' comp_expression ']' ':' comp_command_list KW_ENDFOR ';'

    ':'  shift, and go to state 459


State 440

   80 general_variable: • IDENTIFIER
   81                 | • IDENTIFIER '.' '#' IDENTIFIER
   82                 | • IDENTIFIER '[' expression ']'
   83                 | • IDENTIFIER '.' '#' IDENTIFIER '[' expression ']'
  106 comp_variable: • '#' IDENTIFIER
  107              | • '#' IDENTIFIER '[' comp_expression ']'
  108              | • comp_variable '.' '#' IDENTIFIER
  109              | • comp_variable '.' '#' IDENTIFIER '[' POSINT ']'
  110              | • general_variable
  111 comp_function_call: • IDENTIFIER '(' ')'
  112                   | • IDENTIFIER '(' comp_expr_comma_list ')'
  113 general_comp_function_call: • comp_function_call
  114                           | • '#' IDENTIFIER '.' comp_function_call
  115                           | • '#' IDENTIFIER '[' comp_expression ']' '.' comp_function_call
  153 comp_command_list: • comp_command
  154                  | • comp_command_list comp_command
  155 comp_command: • comp_variable assignment_operator comp_expression ';'
  156             | • KW_IF '(' comp_expression ')' ':' comp_command_list KW_ENDIF ';'
  157             | • KW_IF '(' comp_expression ')' ':' comp_command_list KW_ELSE ':' comp_command_list KW_ENDIF ';'
  158             | • KW_FOR comp_variable KW_IN '[' comp_expression ':' comp_expression ']' ':' comp_command_list KW_ENDFOR ';'
  159             | • KW_FOR comp_variable KW_IN '[' comp_expression ':' comp_expression ':' comp_expression ']' ':' comp_command_list KW_ENDFOR ';'
  160             | • comp_variable OP_ASSIGN '[' comp_expression KW_FOR comp_variable ':' POSINT ']' ':' basic_data_type ';'
  161             | • KW_WHILE '(' comp_expression ')' ':' comp_command_list KW_ENDWHILE ';'
  161             | KW_WHILE '(' comp_expression ')' ':' • comp_command_list KW_ENDWHILE ';'
  162             | • KW_BREAK ';'
  163             | • KW_CONTINUE ';'
  164             | • KW_RETURN ';'
  165             | • KW_RETURN comp_expression ';'
  166             | • general_comp_function_call ';'

    IDENTIFIER   shift, and go to state 362
    KW_IF        shift, and go to state 320
    KW_CONTINUE  shift, and go to state 321
    KW_FOR       shift, and go to state 322
    KW_WHILE     shift, and go to state 323
    KW_BREAK     shift, and go to state 324
    KW_RETURN    shift, and go to state 325
    '#'          shift, and go to state 326

    general_variable            go to state 329
    comp_variable               go to state 330
    comp_function_call          go to state 160
    general_comp_function_call  go to state 331
    comp_command_list           go to state 460
    comp_command                go to state 333


State 441

  107 comp_variable: '#' IDENTIFIER '[' comp_expression ']' •  [OP_ASSIGN, OP_ASSIGN_PLUSEQ, OP_ASSIGN_MULEQ, OP_ASSIGN_DIVEQ, OP_ASSIGN_MODEQ, OP_ASSIGN_MINUSEQ, '.', '=']
  115 general_comp_function_call: '#' IDENTIFIER '[' comp_expression ']' • '.' comp_function_call

    '.'  shift, and go to state 461

    '.'       [reduce using rule 107 (comp_variable)]
    $default  reduce using rule 107 (comp_variable)

    shift/reduce conflict on token '.':
      107 comp_variable: '#' IDENTIFIER '[' comp_expression ']' •
      115 general_comp_function_call: '#' IDENTIFIER '[' comp_expression ']' • '.' comp_function_call
      First example: comp_definition_list KW_COMP IDENTIFIER ':' KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' '#' IDENTIFIER '[' comp_expression ']' • '.' comp_function_call ';' KW_ENDDEF ';' comp_function_definition KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Shift derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                             $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                            local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER ':' comp_function_definition_list                                                                                                                                                                          KW_ENDCOMP ';'
                                                                            ↳ 168: comp_function_definition                                                                                                                                               comp_function_definition
                                                                                   ↳ 171: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' comp_command_list                                                                        KW_ENDDEF ';'
                                                                                                                                                   ↳ 153: comp_command
                                                                                                                                                          ↳ 166: general_comp_function_call                                             ';'
                                                                                                                                                                 ↳ 115: '#' IDENTIFIER '[' comp_expression ']' • '.' comp_function_call
      Second example: comp_definition_list KW_COMP IDENTIFIER ':' comp_function_definition_list KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' '#' IDENTIFIER '[' comp_expression ']' • '.' '#' IDENTIFIER assignment_operator comp_expression ';' KW_ENDDEF ';' KW_ENDCOMP ';' local_var_const_decl_list function_definition_list main_unit $end
      Reduce derivation
        $accept
        ↳ 0: input                                                                                                                                                                                                                                                                                                                                                                                         $end
             ↳ 1: comp_definition_list                                                                                                                                                                                                                                                                                                        local_var_const_decl_list function_definition_list main_unit
                  ↳ 188: comp_definition_list comp_definition
                                              ↳ 186: KW_COMP IDENTIFIER ':' comp_function_definition_list                                                                                                                                                                                                                      KW_ENDCOMP ';'
                                                                            ↳ 168: comp_function_definition_list comp_function_definition
                                                                                                                 ↳ 171: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' ':' comp_command_list                                                                                                               KW_ENDDEF ';'
                                                                                                                                                                                 ↳ 153: comp_command
                                                                                                                                                                                        ↳ 155: comp_variable                                                             assignment_operator comp_expression ';'
                                                                                                                                                                                               ↳ 108: comp_variable                                   '.' '#' IDENTIFIER
                                                                                                                                                                                                      ↳ 107: '#' IDENTIFIER '[' comp_expression ']' •



State 442

   80 general_variable: • IDENTIFIER
   81                 | • IDENTIFIER '.' '#' IDENTIFIER
   82                 | • IDENTIFIER '[' expression ']'
   83                 | • IDENTIFIER '.' '#' IDENTIFIER '[' expression ']'
  106 comp_variable: • '#' IDENTIFIER
  107              | • '#' IDENTIFIER '[' comp_expression ']'
  108              | • comp_variable '.' '#' IDENTIFIER
  109              | • comp_variable '.' '#' IDENTIFIER '[' POSINT ']'
  110              | • general_variable
  160 comp_command: comp_variable OP_ASSIGN '[' comp_expression KW_FOR • comp_variable ':' POSINT ']' ':' basic_data_type ';'

    IDENTIFIER  shift, and go to state 264
    '#'         shift, and go to state 355

    general_variable  go to state 329
    comp_variable     go to state 462


State 443

  109 comp_variable: comp_variable '.' '#' IDENTIFIER '[' • POSINT ']'

    POSINT  shift, and go to state 463


State 444

   96 function_command: KW_RETURN expression • ';'
  103 function_definition: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl_list function_command_list KW_RETURN expression • ';' KW_ENDDEF ';'

    ';'  shift, and go to state 464


State 445

   96 function_command: KW_RETURN expression • ';'
  104 function_definition: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl function_command_list KW_RETURN expression • ';' KW_ENDDEF ';'

    ';'  shift, and go to state 465


State 446

   96 function_command: KW_RETURN expression ';' •  [IDENTIFIER, KW_IF, KW_CONTINUE, KW_FOR, KW_WHILE, KW_BREAK, KW_RETURN]
  105 function_definition: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' function_command_list KW_RETURN expression ';' • KW_ENDDEF ';'

    KW_ENDDEF  shift, and go to state 466

    $default  reduce using rule 96 (function_command)


State 447

   66 general_function_call: • function_call
   67                      | • IDENTIFIER '.' function_call
   68                      | • IDENTIFIER '[' expression ']' '.' function_call
   69 function_call: • IDENTIFIER '(' ')'
   70              | • IDENTIFIER '(' expr_comma_list ')'
   80 general_variable: • IDENTIFIER
   81                 | • IDENTIFIER '.' '#' IDENTIFIER
   82                 | • IDENTIFIER '[' expression ']'
   83                 | • IDENTIFIER '.' '#' IDENTIFIER '[' expression ']'
   84 function_command_list: • function_command
   85                      | • function_command_list function_command
   86 function_command: • general_variable assignment_operator expression ';'
   87                 | • KW_IF '(' expression ')' ':' function_command_list KW_ENDIF ';'
   88                 | • KW_IF '(' expression ')' ':' function_command_list KW_ELSE ':' function_command_list KW_ENDIF ';'
   88                 | KW_IF '(' expression ')' ':' function_command_list KW_ELSE ':' • function_command_list KW_ENDIF ';'
   89                 | • KW_FOR general_variable KW_IN '[' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';'
   90                 | • KW_FOR general_variable KW_IN '[' expression ':' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';'
   91                 | • general_variable OP_ASSIGN '[' expression KW_FOR general_variable ':' POSINT ']' ':' basic_data_type ';'
   92                 | • KW_WHILE '(' expression ')' ':' function_command_list KW_ENDWHILE ';'
   93                 | • KW_BREAK ';'
   94                 | • KW_CONTINUE ';'
   95                 | • KW_RETURN ';'
   96                 | • KW_RETURN expression ';'
   97                 | • general_function_call ';'

    IDENTIFIER   shift, and go to state 270
    KW_IF        shift, and go to state 216
    KW_CONTINUE  shift, and go to state 217
    KW_FOR       shift, and go to state 218
    KW_WHILE     shift, and go to state 219
    KW_BREAK     shift, and go to state 220
    KW_RETURN    shift, and go to state 221

    general_function_call  go to state 224
    function_call          go to state 70
    general_variable       go to state 225
    function_command_list  go to state 467
    function_command       go to state 227


State 448

   87 function_command: KW_IF '(' expression ')' ':' function_command_list KW_ENDIF ';' •

    $default  reduce using rule 87 (function_command)


State 449

   89 function_command: KW_FOR general_variable KW_IN '[' expression ':' expression ']' • ':' function_command_list KW_ENDFOR ';'

    ':'  shift, and go to state 468


State 450

    2 primary_expression: • POSINT
    3                   | • SCALAR
    4                   | • IDENTIFIER
    5                   | • STRING
    6                   | • KW_TRUE
    7                   | • KW_FALSE
    8                   | • '(' logic_expression ')'
    9 math_expression: • primary_expression
   10                | • '+' math_expression
   11                | • '-' math_expression
   12                | • math_expression '+' math_expression
   13                | • math_expression '-' math_expression
   14                | • math_expression '*' math_expression
   15                | • math_expression '/' math_expression
   16                | • math_expression '%' math_expression
   17                | • math_expression OP_PAW math_expression
   18                | • IDENTIFIER '[' expression ']'
   19                | • IDENTIFIER '[' expression ']' '.' IDENTIFIER
   20                | • IDENTIFIER '[' expression ']' '.' IDENTIFIER '[' expression ']'
   21                | • general_function_call
   22                | • IDENTIFIER '.' IDENTIFIER '[' expression ']'
   23                | • IDENTIFIER '.' IDENTIFIER
   24 relational_expression: • math_expression
   25                      | • relational_expression OP_EQUALS relational_expression
   26                      | • relational_expression OP_NE relational_expression
   27                      | • relational_expression '>' relational_expression
   28                      | • relational_expression '<' relational_expression
   29                      | • relational_expression OP_LE relational_expression
   30                      | • relational_expression OP_GE relational_expression
   31 logic_expression: • relational_expression
   32                 | • OP_NOT logic_expression
   33                 | • logic_expression OP_AND logic_expression
   34                 | • logic_expression OP_OR logic_expression
   35 expression: • logic_expression
   66 general_function_call: • function_call
   67                      | • IDENTIFIER '.' function_call
   68                      | • IDENTIFIER '[' expression ']' '.' function_call
   69 function_call: • IDENTIFIER '(' ')'
   70              | • IDENTIFIER '(' expr_comma_list ')'
   90 function_command: KW_FOR general_variable KW_IN '[' expression ':' expression ':' • expression ']' ':' function_command_list KW_ENDFOR ';'

    IDENTIFIER  shift, and go to state 53
    POSINT      shift, and go to state 54
    SCALAR      shift, and go to state 55
    STRING      shift, and go to state 56
    OP_NOT      shift, and go to state 57
    KW_TRUE     shift, and go to state 58
    KW_FALSE    shift, and go to state 59
    '-'         shift, and go to state 60
    '+'         shift, and go to state 61
    '('         shift, and go to state 62

    primary_expression     go to state 64
    math_expression        go to state 65
    relational_expression  go to state 66
    logic_expression       go to state 67
    expression             go to state 469
    general_function_call  go to state 69
    function_call          go to state 70


State 451

   92 function_command: KW_WHILE '(' expression ')' ':' function_command_list KW_ENDWHILE ';' •

    $default  reduce using rule 92 (function_command)


State 452

   91 function_command: general_variable OP_ASSIGN '[' expression KW_FOR general_variable ':' POSINT • ']' ':' basic_data_type ';'

    ']'  shift, and go to state 470


State 453

  137 comp_math_expression: '#' IDENTIFIER '[' comp_expression ']' '.' '#' IDENTIFIER '[' comp_expression • ']'

    ']'  shift, and go to state 471


State 454

  111 comp_function_call: • IDENTIFIER '(' ')'
  112                   | • IDENTIFIER '(' comp_expr_comma_list ')'
  113 general_comp_function_call: • comp_function_call
  114                           | • '#' IDENTIFIER '.' comp_function_call
  115                           | • '#' IDENTIFIER '[' comp_expression ']' '.' comp_function_call
  118 comp_primary_expression: • POSINT
  119                        | • SCALAR
  120                        | • '#' IDENTIFIER
  121                        | • IDENTIFIER
  122                        | • STRING
  123                        | • KW_TRUE
  124                        | • KW_FALSE
  125                        | • '(' logic_expression ')'
  126 comp_math_expression: • comp_primary_expression
  127                     | • '+' comp_math_expression
  128                     | • '-' comp_math_expression
  129                     | • comp_math_expression '+' comp_math_expression
  130                     | • comp_math_expression '-' comp_math_expression
  131                     | • comp_math_expression '*' comp_math_expression
  132                     | • comp_math_expression '/' comp_math_expression
  133                     | • comp_math_expression '%' comp_math_expression
  134                     | • comp_math_expression OP_PAW comp_math_expression
  135                     | • '#' IDENTIFIER '[' comp_expression ']'
  136                     | • '#' IDENTIFIER '[' comp_expression ']' '.' '#' IDENTIFIER
  137                     | • '#' IDENTIFIER '[' comp_expression ']' '.' '#' IDENTIFIER '[' comp_expression ']'
  138                     | • general_comp_function_call
  139                     | • '#' IDENTIFIER '.' '#' IDENTIFIER '[' comp_expression ']'
  140                     | • '#' IDENTIFIER '.' '#' IDENTIFIER
  141 comp_relational_expression: • comp_math_expression
  142                           | • comp_relational_expression OP_EQUALS comp_relational_expression
  143                           | • comp_relational_expression OP_NE comp_relational_expression
  144                           | • comp_relational_expression '>' comp_relational_expression
  145                           | • comp_relational_expression '<' comp_relational_expression
  146                           | • comp_relational_expression OP_LE comp_relational_expression
  147                           | • comp_relational_expression OP_GE comp_relational_expression
  148 comp_logic_expression: • comp_relational_expression
  149                      | • OP_NOT comp_logic_expression
  150                      | • comp_logic_expression OP_AND comp_logic_expression
  151                      | • comp_logic_expression OP_OR comp_logic_expression
  152 comp_expression: • comp_logic_expression
  164 comp_command: KW_RETURN • ';'
  165             | KW_RETURN • comp_expression ';'
  172 comp_function_definition: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl_list comp_command_list KW_RETURN • comp_expression ';' KW_ENDDEF ';'

    IDENTIFIER  shift, and go to state 148
    POSINT      shift, and go to state 149
    SCALAR      shift, and go to state 150
    STRING      shift, and go to state 151
    OP_NOT      shift, and go to state 152
    KW_TRUE     shift, and go to state 153
    KW_FALSE    shift, and go to state 154
    '-'         shift, and go to state 155
    '+'         shift, and go to state 156
    '#'         shift, and go to state 157
    '('         shift, and go to state 158
    ';'         shift, and go to state 359

    comp_function_call          go to state 160
    general_comp_function_call  go to state 161
    comp_primary_expression     go to state 162
    comp_math_expression        go to state 163
    comp_relational_expression  go to state 164
    comp_logic_expression       go to state 165
    comp_expression             go to state 472


State 455

  111 comp_function_call: • IDENTIFIER '(' ')'
  112                   | • IDENTIFIER '(' comp_expr_comma_list ')'
  113 general_comp_function_call: • comp_function_call
  114                           | • '#' IDENTIFIER '.' comp_function_call
  115                           | • '#' IDENTIFIER '[' comp_expression ']' '.' comp_function_call
  118 comp_primary_expression: • POSINT
  119                        | • SCALAR
  120                        | • '#' IDENTIFIER
  121                        | • IDENTIFIER
  122                        | • STRING
  123                        | • KW_TRUE
  124                        | • KW_FALSE
  125                        | • '(' logic_expression ')'
  126 comp_math_expression: • comp_primary_expression
  127                     | • '+' comp_math_expression
  128                     | • '-' comp_math_expression
  129                     | • comp_math_expression '+' comp_math_expression
  130                     | • comp_math_expression '-' comp_math_expression
  131                     | • comp_math_expression '*' comp_math_expression
  132                     | • comp_math_expression '/' comp_math_expression
  133                     | • comp_math_expression '%' comp_math_expression
  134                     | • comp_math_expression OP_PAW comp_math_expression
  135                     | • '#' IDENTIFIER '[' comp_expression ']'
  136                     | • '#' IDENTIFIER '[' comp_expression ']' '.' '#' IDENTIFIER
  137                     | • '#' IDENTIFIER '[' comp_expression ']' '.' '#' IDENTIFIER '[' comp_expression ']'
  138                     | • general_comp_function_call
  139                     | • '#' IDENTIFIER '.' '#' IDENTIFIER '[' comp_expression ']'
  140                     | • '#' IDENTIFIER '.' '#' IDENTIFIER
  141 comp_relational_expression: • comp_math_expression
  142                           | • comp_relational_expression OP_EQUALS comp_relational_expression
  143                           | • comp_relational_expression OP_NE comp_relational_expression
  144                           | • comp_relational_expression '>' comp_relational_expression
  145                           | • comp_relational_expression '<' comp_relational_expression
  146                           | • comp_relational_expression OP_LE comp_relational_expression
  147                           | • comp_relational_expression OP_GE comp_relational_expression
  148 comp_logic_expression: • comp_relational_expression
  149                      | • OP_NOT comp_logic_expression
  150                      | • comp_logic_expression OP_AND comp_logic_expression
  151                      | • comp_logic_expression OP_OR comp_logic_expression
  152 comp_expression: • comp_logic_expression
  164 comp_command: KW_RETURN • ';'
  165             | KW_RETURN • comp_expression ';'
  174 comp_function_definition: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl comp_command_list KW_RETURN • comp_expression ';' KW_ENDDEF ';'

    IDENTIFIER  shift, and go to state 148
    POSINT      shift, and go to state 149
    SCALAR      shift, and go to state 150
    STRING      shift, and go to state 151
    OP_NOT      shift, and go to state 152
    KW_TRUE     shift, and go to state 153
    KW_FALSE    shift, and go to state 154
    '-'         shift, and go to state 155
    '+'         shift, and go to state 156
    '#'         shift, and go to state 157
    '('         shift, and go to state 158
    ';'         shift, and go to state 359

    comp_function_call          go to state 160
    general_comp_function_call  go to state 161
    comp_primary_expression     go to state 162
    comp_math_expression        go to state 163
    comp_relational_expression  go to state 164
    comp_logic_expression       go to state 165
    comp_expression             go to state 473


State 456

  165 comp_command: KW_RETURN comp_expression • ';'
  173 comp_function_definition: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' comp_command_list KW_RETURN comp_expression • ';' KW_ENDDEF ';'

    ';'  shift, and go to state 474


State 457

   80 general_variable: • IDENTIFIER
   81                 | • IDENTIFIER '.' '#' IDENTIFIER
   82                 | • IDENTIFIER '[' expression ']'
   83                 | • IDENTIFIER '.' '#' IDENTIFIER '[' expression ']'
  106 comp_variable: • '#' IDENTIFIER
  107              | • '#' IDENTIFIER '[' comp_expression ']'
  108              | • comp_variable '.' '#' IDENTIFIER
  109              | • comp_variable '.' '#' IDENTIFIER '[' POSINT ']'
  110              | • general_variable
  111 comp_function_call: • IDENTIFIER '(' ')'
  112                   | • IDENTIFIER '(' comp_expr_comma_list ')'
  113 general_comp_function_call: • comp_function_call
  114                           | • '#' IDENTIFIER '.' comp_function_call
  115                           | • '#' IDENTIFIER '[' comp_expression ']' '.' comp_function_call
  154 comp_command_list: comp_command_list • comp_command
  155 comp_command: • comp_variable assignment_operator comp_expression ';'
  156             | • KW_IF '(' comp_expression ')' ':' comp_command_list KW_ENDIF ';'
  156             | KW_IF '(' comp_expression ')' ':' comp_command_list • KW_ENDIF ';'
  157             | • KW_IF '(' comp_expression ')' ':' comp_command_list KW_ELSE ':' comp_command_list KW_ENDIF ';'
  157             | KW_IF '(' comp_expression ')' ':' comp_command_list • KW_ELSE ':' comp_command_list KW_ENDIF ';'
  158             | • KW_FOR comp_variable KW_IN '[' comp_expression ':' comp_expression ']' ':' comp_command_list KW_ENDFOR ';'
  159             | • KW_FOR comp_variable KW_IN '[' comp_expression ':' comp_expression ':' comp_expression ']' ':' comp_command_list KW_ENDFOR ';'
  160             | • comp_variable OP_ASSIGN '[' comp_expression KW_FOR comp_variable ':' POSINT ']' ':' basic_data_type ';'
  161             | • KW_WHILE '(' comp_expression ')' ':' comp_command_list KW_ENDWHILE ';'
  162             | • KW_BREAK ';'
  163             | • KW_CONTINUE ';'
  164             | • KW_RETURN ';'
  165             | • KW_RETURN comp_expression ';'
  166             | • general_comp_function_call ';'

    IDENTIFIER   shift, and go to state 362
    KW_IF        shift, and go to state 320
    KW_ELSE      shift, and go to state 475
    KW_ENDIF     shift, and go to state 476
    KW_CONTINUE  shift, and go to state 321
    KW_FOR       shift, and go to state 322
    KW_WHILE     shift, and go to state 323
    KW_BREAK     shift, and go to state 324
    KW_RETURN    shift, and go to state 325
    '#'          shift, and go to state 326

    general_variable            go to state 329
    comp_variable               go to state 330
    comp_function_call          go to state 160
    general_comp_function_call  go to state 331
    comp_command                go to state 370


State 458

  107 comp_variable: '#' IDENTIFIER '[' comp_expression ']' •

    $default  reduce using rule 107 (comp_variable)


State 459

  111 comp_function_call: • IDENTIFIER '(' ')'
  112                   | • IDENTIFIER '(' comp_expr_comma_list ')'
  113 general_comp_function_call: • comp_function_call
  114                           | • '#' IDENTIFIER '.' comp_function_call
  115                           | • '#' IDENTIFIER '[' comp_expression ']' '.' comp_function_call
  118 comp_primary_expression: • POSINT
  119                        | • SCALAR
  120                        | • '#' IDENTIFIER
  121                        | • IDENTIFIER
  122                        | • STRING
  123                        | • KW_TRUE
  124                        | • KW_FALSE
  125                        | • '(' logic_expression ')'
  126 comp_math_expression: • comp_primary_expression
  127                     | • '+' comp_math_expression
  128                     | • '-' comp_math_expression
  129                     | • comp_math_expression '+' comp_math_expression
  130                     | • comp_math_expression '-' comp_math_expression
  131                     | • comp_math_expression '*' comp_math_expression
  132                     | • comp_math_expression '/' comp_math_expression
  133                     | • comp_math_expression '%' comp_math_expression
  134                     | • comp_math_expression OP_PAW comp_math_expression
  135                     | • '#' IDENTIFIER '[' comp_expression ']'
  136                     | • '#' IDENTIFIER '[' comp_expression ']' '.' '#' IDENTIFIER
  137                     | • '#' IDENTIFIER '[' comp_expression ']' '.' '#' IDENTIFIER '[' comp_expression ']'
  138                     | • general_comp_function_call
  139                     | • '#' IDENTIFIER '.' '#' IDENTIFIER '[' comp_expression ']'
  140                     | • '#' IDENTIFIER '.' '#' IDENTIFIER
  141 comp_relational_expression: • comp_math_expression
  142                           | • comp_relational_expression OP_EQUALS comp_relational_expression
  143                           | • comp_relational_expression OP_NE comp_relational_expression
  144                           | • comp_relational_expression '>' comp_relational_expression
  145                           | • comp_relational_expression '<' comp_relational_expression
  146                           | • comp_relational_expression OP_LE comp_relational_expression
  147                           | • comp_relational_expression OP_GE comp_relational_expression
  148 comp_logic_expression: • comp_relational_expression
  149                      | • OP_NOT comp_logic_expression
  150                      | • comp_logic_expression OP_AND comp_logic_expression
  151                      | • comp_logic_expression OP_OR comp_logic_expression
  152 comp_expression: • comp_logic_expression
  158 comp_command: KW_FOR comp_variable KW_IN '[' comp_expression ':' • comp_expression ']' ':' comp_command_list KW_ENDFOR ';'
  159             | KW_FOR comp_variable KW_IN '[' comp_expression ':' • comp_expression ':' comp_expression ']' ':' comp_command_list KW_ENDFOR ';'

    IDENTIFIER  shift, and go to state 148
    POSINT      shift, and go to state 149
    SCALAR      shift, and go to state 150
    STRING      shift, and go to state 151
    OP_NOT      shift, and go to state 152
    KW_TRUE     shift, and go to state 153
    KW_FALSE    shift, and go to state 154
    '-'         shift, and go to state 155
    '+'         shift, and go to state 156
    '#'         shift, and go to state 157
    '('         shift, and go to state 158

    comp_function_call          go to state 160
    general_comp_function_call  go to state 161
    comp_primary_expression     go to state 162
    comp_math_expression        go to state 163
    comp_relational_expression  go to state 164
    comp_logic_expression       go to state 165
    comp_expression             go to state 477


State 460

   80 general_variable: • IDENTIFIER
   81                 | • IDENTIFIER '.' '#' IDENTIFIER
   82                 | • IDENTIFIER '[' expression ']'
   83                 | • IDENTIFIER '.' '#' IDENTIFIER '[' expression ']'
  106 comp_variable: • '#' IDENTIFIER
  107              | • '#' IDENTIFIER '[' comp_expression ']'
  108              | • comp_variable '.' '#' IDENTIFIER
  109              | • comp_variable '.' '#' IDENTIFIER '[' POSINT ']'
  110              | • general_variable
  111 comp_function_call: • IDENTIFIER '(' ')'
  112                   | • IDENTIFIER '(' comp_expr_comma_list ')'
  113 general_comp_function_call: • comp_function_call
  114                           | • '#' IDENTIFIER '.' comp_function_call
  115                           | • '#' IDENTIFIER '[' comp_expression ']' '.' comp_function_call
  154 comp_command_list: comp_command_list • comp_command
  155 comp_command: • comp_variable assignment_operator comp_expression ';'
  156             | • KW_IF '(' comp_expression ')' ':' comp_command_list KW_ENDIF ';'
  157             | • KW_IF '(' comp_expression ')' ':' comp_command_list KW_ELSE ':' comp_command_list KW_ENDIF ';'
  158             | • KW_FOR comp_variable KW_IN '[' comp_expression ':' comp_expression ']' ':' comp_command_list KW_ENDFOR ';'
  159             | • KW_FOR comp_variable KW_IN '[' comp_expression ':' comp_expression ':' comp_expression ']' ':' comp_command_list KW_ENDFOR ';'
  160             | • comp_variable OP_ASSIGN '[' comp_expression KW_FOR comp_variable ':' POSINT ']' ':' basic_data_type ';'
  161             | • KW_WHILE '(' comp_expression ')' ':' comp_command_list KW_ENDWHILE ';'
  161             | KW_WHILE '(' comp_expression ')' ':' comp_command_list • KW_ENDWHILE ';'
  162             | • KW_BREAK ';'
  163             | • KW_CONTINUE ';'
  164             | • KW_RETURN ';'
  165             | • KW_RETURN comp_expression ';'
  166             | • general_comp_function_call ';'

    IDENTIFIER   shift, and go to state 362
    KW_IF        shift, and go to state 320
    KW_CONTINUE  shift, and go to state 321
    KW_FOR       shift, and go to state 322
    KW_WHILE     shift, and go to state 323
    KW_ENDWHILE  shift, and go to state 478
    KW_BREAK     shift, and go to state 324
    KW_RETURN    shift, and go to state 325
    '#'          shift, and go to state 326

    general_variable            go to state 329
    comp_variable               go to state 330
    comp_function_call          go to state 160
    general_comp_function_call  go to state 331
    comp_command                go to state 370


State 461

  111 comp_function_call: • IDENTIFIER '(' ')'
  112                   | • IDENTIFIER '(' comp_expr_comma_list ')'
  115 general_comp_function_call: '#' IDENTIFIER '[' comp_expression ']' '.' • comp_function_call

    IDENTIFIER  shift, and go to state 287

    comp_function_call  go to state 385


State 462

  108 comp_variable: comp_variable • '.' '#' IDENTIFIER
  109              | comp_variable • '.' '#' IDENTIFIER '[' POSINT ']'
  160 comp_command: comp_variable OP_ASSIGN '[' comp_expression KW_FOR comp_variable • ':' POSINT ']' ':' basic_data_type ';'

    '.'  shift, and go to state 366
    ':'  shift, and go to state 479


State 463

  109 comp_variable: comp_variable '.' '#' IDENTIFIER '[' POSINT • ']'

    ']'  shift, and go to state 480


State 464

   96 function_command: KW_RETURN expression ';' •  [IDENTIFIER, KW_IF, KW_CONTINUE, KW_FOR, KW_WHILE, KW_BREAK, KW_RETURN]
  103 function_definition: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl_list function_command_list KW_RETURN expression ';' • KW_ENDDEF ';'

    KW_ENDDEF  shift, and go to state 481

    $default  reduce using rule 96 (function_command)


State 465

   96 function_command: KW_RETURN expression ';' •  [IDENTIFIER, KW_IF, KW_CONTINUE, KW_FOR, KW_WHILE, KW_BREAK, KW_RETURN]
  104 function_definition: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl function_command_list KW_RETURN expression ';' • KW_ENDDEF ';'

    KW_ENDDEF  shift, and go to state 482

    $default  reduce using rule 96 (function_command)


State 466

  105 function_definition: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' function_command_list KW_RETURN expression ';' KW_ENDDEF • ';'

    ';'  shift, and go to state 483


State 467

   66 general_function_call: • function_call
   67                      | • IDENTIFIER '.' function_call
   68                      | • IDENTIFIER '[' expression ']' '.' function_call
   69 function_call: • IDENTIFIER '(' ')'
   70              | • IDENTIFIER '(' expr_comma_list ')'
   80 general_variable: • IDENTIFIER
   81                 | • IDENTIFIER '.' '#' IDENTIFIER
   82                 | • IDENTIFIER '[' expression ']'
   83                 | • IDENTIFIER '.' '#' IDENTIFIER '[' expression ']'
   85 function_command_list: function_command_list • function_command
   86 function_command: • general_variable assignment_operator expression ';'
   87                 | • KW_IF '(' expression ')' ':' function_command_list KW_ENDIF ';'
   88                 | • KW_IF '(' expression ')' ':' function_command_list KW_ELSE ':' function_command_list KW_ENDIF ';'
   88                 | KW_IF '(' expression ')' ':' function_command_list KW_ELSE ':' function_command_list • KW_ENDIF ';'
   89                 | • KW_FOR general_variable KW_IN '[' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';'
   90                 | • KW_FOR general_variable KW_IN '[' expression ':' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';'
   91                 | • general_variable OP_ASSIGN '[' expression KW_FOR general_variable ':' POSINT ']' ':' basic_data_type ';'
   92                 | • KW_WHILE '(' expression ')' ':' function_command_list KW_ENDWHILE ';'
   93                 | • KW_BREAK ';'
   94                 | • KW_CONTINUE ';'
   95                 | • KW_RETURN ';'
   96                 | • KW_RETURN expression ';'
   97                 | • general_function_call ';'

    IDENTIFIER   shift, and go to state 270
    KW_IF        shift, and go to state 216
    KW_ENDIF     shift, and go to state 484
    KW_CONTINUE  shift, and go to state 217
    KW_FOR       shift, and go to state 218
    KW_WHILE     shift, and go to state 219
    KW_BREAK     shift, and go to state 220
    KW_RETURN    shift, and go to state 221

    general_function_call  go to state 224
    function_call          go to state 70
    general_variable       go to state 225
    function_command       go to state 283


State 468

   66 general_function_call: • function_call
   67                      | • IDENTIFIER '.' function_call
   68                      | • IDENTIFIER '[' expression ']' '.' function_call
   69 function_call: • IDENTIFIER '(' ')'
   70              | • IDENTIFIER '(' expr_comma_list ')'
   80 general_variable: • IDENTIFIER
   81                 | • IDENTIFIER '.' '#' IDENTIFIER
   82                 | • IDENTIFIER '[' expression ']'
   83                 | • IDENTIFIER '.' '#' IDENTIFIER '[' expression ']'
   84 function_command_list: • function_command
   85                      | • function_command_list function_command
   86 function_command: • general_variable assignment_operator expression ';'
   87                 | • KW_IF '(' expression ')' ':' function_command_list KW_ENDIF ';'
   88                 | • KW_IF '(' expression ')' ':' function_command_list KW_ELSE ':' function_command_list KW_ENDIF ';'
   89                 | • KW_FOR general_variable KW_IN '[' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';'
   89                 | KW_FOR general_variable KW_IN '[' expression ':' expression ']' ':' • function_command_list KW_ENDFOR ';'
   90                 | • KW_FOR general_variable KW_IN '[' expression ':' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';'
   91                 | • general_variable OP_ASSIGN '[' expression KW_FOR general_variable ':' POSINT ']' ':' basic_data_type ';'
   92                 | • KW_WHILE '(' expression ')' ':' function_command_list KW_ENDWHILE ';'
   93                 | • KW_BREAK ';'
   94                 | • KW_CONTINUE ';'
   95                 | • KW_RETURN ';'
   96                 | • KW_RETURN expression ';'
   97                 | • general_function_call ';'

    IDENTIFIER   shift, and go to state 270
    KW_IF        shift, and go to state 216
    KW_CONTINUE  shift, and go to state 217
    KW_FOR       shift, and go to state 218
    KW_WHILE     shift, and go to state 219
    KW_BREAK     shift, and go to state 220
    KW_RETURN    shift, and go to state 221

    general_function_call  go to state 224
    function_call          go to state 70
    general_variable       go to state 225
    function_command_list  go to state 485
    function_command       go to state 227


State 469

   90 function_command: KW_FOR general_variable KW_IN '[' expression ':' expression ':' expression • ']' ':' function_command_list KW_ENDFOR ';'

    ']'  shift, and go to state 486


State 470

   91 function_command: general_variable OP_ASSIGN '[' expression KW_FOR general_variable ':' POSINT ']' • ':' basic_data_type ';'

    ':'  shift, and go to state 487


State 471

  137 comp_math_expression: '#' IDENTIFIER '[' comp_expression ']' '.' '#' IDENTIFIER '[' comp_expression ']' •

    $default  reduce using rule 137 (comp_math_expression)


State 472

  165 comp_command: KW_RETURN comp_expression • ';'
  172 comp_function_definition: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl_list comp_command_list KW_RETURN comp_expression • ';' KW_ENDDEF ';'

    ';'  shift, and go to state 488


State 473

  165 comp_command: KW_RETURN comp_expression • ';'
  174 comp_function_definition: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl comp_command_list KW_RETURN comp_expression • ';' KW_ENDDEF ';'

    ';'  shift, and go to state 489


State 474

  165 comp_command: KW_RETURN comp_expression ';' •  [IDENTIFIER, KW_IF, KW_CONTINUE, KW_FOR, KW_WHILE, KW_BREAK, KW_RETURN, '#']
  173 comp_function_definition: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' comp_command_list KW_RETURN comp_expression ';' • KW_ENDDEF ';'

    KW_ENDDEF  shift, and go to state 490

    $default  reduce using rule 165 (comp_command)


State 475

  157 comp_command: KW_IF '(' comp_expression ')' ':' comp_command_list KW_ELSE • ':' comp_command_list KW_ENDIF ';'

    ':'  shift, and go to state 491


State 476

  156 comp_command: KW_IF '(' comp_expression ')' ':' comp_command_list KW_ENDIF • ';'

    ';'  shift, and go to state 492


State 477

  158 comp_command: KW_FOR comp_variable KW_IN '[' comp_expression ':' comp_expression • ']' ':' comp_command_list KW_ENDFOR ';'
  159             | KW_FOR comp_variable KW_IN '[' comp_expression ':' comp_expression • ':' comp_expression ']' ':' comp_command_list KW_ENDFOR ';'

    ']'  shift, and go to state 493
    ':'  shift, and go to state 494


State 478

  161 comp_command: KW_WHILE '(' comp_expression ')' ':' comp_command_list KW_ENDWHILE • ';'

    ';'  shift, and go to state 495


State 479

  160 comp_command: comp_variable OP_ASSIGN '[' comp_expression KW_FOR comp_variable ':' • POSINT ']' ':' basic_data_type ';'

    POSINT  shift, and go to state 496


State 480

  109 comp_variable: comp_variable '.' '#' IDENTIFIER '[' POSINT ']' •

    $default  reduce using rule 109 (comp_variable)


State 481

  103 function_definition: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl_list function_command_list KW_RETURN expression ';' KW_ENDDEF • ';'

    ';'  shift, and go to state 497


State 482

  104 function_definition: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl function_command_list KW_RETURN expression ';' KW_ENDDEF • ';'

    ';'  shift, and go to state 498


State 483

  105 function_definition: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' function_command_list KW_RETURN expression ';' KW_ENDDEF ';' •

    $default  reduce using rule 105 (function_definition)


State 484

   88 function_command: KW_IF '(' expression ')' ':' function_command_list KW_ELSE ':' function_command_list KW_ENDIF • ';'

    ';'  shift, and go to state 499


State 485

   66 general_function_call: • function_call
   67                      | • IDENTIFIER '.' function_call
   68                      | • IDENTIFIER '[' expression ']' '.' function_call
   69 function_call: • IDENTIFIER '(' ')'
   70              | • IDENTIFIER '(' expr_comma_list ')'
   80 general_variable: • IDENTIFIER
   81                 | • IDENTIFIER '.' '#' IDENTIFIER
   82                 | • IDENTIFIER '[' expression ']'
   83                 | • IDENTIFIER '.' '#' IDENTIFIER '[' expression ']'
   85 function_command_list: function_command_list • function_command
   86 function_command: • general_variable assignment_operator expression ';'
   87                 | • KW_IF '(' expression ')' ':' function_command_list KW_ENDIF ';'
   88                 | • KW_IF '(' expression ')' ':' function_command_list KW_ELSE ':' function_command_list KW_ENDIF ';'
   89                 | • KW_FOR general_variable KW_IN '[' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';'
   89                 | KW_FOR general_variable KW_IN '[' expression ':' expression ']' ':' function_command_list • KW_ENDFOR ';'
   90                 | • KW_FOR general_variable KW_IN '[' expression ':' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';'
   91                 | • general_variable OP_ASSIGN '[' expression KW_FOR general_variable ':' POSINT ']' ':' basic_data_type ';'
   92                 | • KW_WHILE '(' expression ')' ':' function_command_list KW_ENDWHILE ';'
   93                 | • KW_BREAK ';'
   94                 | • KW_CONTINUE ';'
   95                 | • KW_RETURN ';'
   96                 | • KW_RETURN expression ';'
   97                 | • general_function_call ';'

    IDENTIFIER   shift, and go to state 270
    KW_IF        shift, and go to state 216
    KW_CONTINUE  shift, and go to state 217
    KW_FOR       shift, and go to state 218
    KW_ENDFOR    shift, and go to state 500
    KW_WHILE     shift, and go to state 219
    KW_BREAK     shift, and go to state 220
    KW_RETURN    shift, and go to state 221

    general_function_call  go to state 224
    function_call          go to state 70
    general_variable       go to state 225
    function_command       go to state 283


State 486

   90 function_command: KW_FOR general_variable KW_IN '[' expression ':' expression ':' expression ']' • ':' function_command_list KW_ENDFOR ';'

    ':'  shift, and go to state 501


State 487

   36 basic_data_type: • KW_INTEGER
   37                | • KW_BOOLEAN
   38                | • KW_CHAR
   39                | • KW_SCALAR
   40                | • KW_STR
   41                | • IDENTIFIER
   91 function_command: general_variable OP_ASSIGN '[' expression KW_FOR general_variable ':' POSINT ']' ':' • basic_data_type ';'

    IDENTIFIER  shift, and go to state 29
    KW_BOOLEAN  shift, and go to state 30
    KW_STR      shift, and go to state 31
    KW_INTEGER  shift, and go to state 32
    KW_SCALAR   shift, and go to state 33
    KW_CHAR     shift, and go to state 34

    basic_data_type  go to state 502


State 488

  165 comp_command: KW_RETURN comp_expression ';' •  [IDENTIFIER, KW_IF, KW_CONTINUE, KW_FOR, KW_WHILE, KW_BREAK, KW_RETURN, '#']
  172 comp_function_definition: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl_list comp_command_list KW_RETURN comp_expression ';' • KW_ENDDEF ';'

    KW_ENDDEF  shift, and go to state 503

    $default  reduce using rule 165 (comp_command)


State 489

  165 comp_command: KW_RETURN comp_expression ';' •  [IDENTIFIER, KW_IF, KW_CONTINUE, KW_FOR, KW_WHILE, KW_BREAK, KW_RETURN, '#']
  174 comp_function_definition: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl comp_command_list KW_RETURN comp_expression ';' • KW_ENDDEF ';'

    KW_ENDDEF  shift, and go to state 504

    $default  reduce using rule 165 (comp_command)


State 490

  173 comp_function_definition: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' comp_command_list KW_RETURN comp_expression ';' KW_ENDDEF • ';'

    ';'  shift, and go to state 505


State 491

   80 general_variable: • IDENTIFIER
   81                 | • IDENTIFIER '.' '#' IDENTIFIER
   82                 | • IDENTIFIER '[' expression ']'
   83                 | • IDENTIFIER '.' '#' IDENTIFIER '[' expression ']'
  106 comp_variable: • '#' IDENTIFIER
  107              | • '#' IDENTIFIER '[' comp_expression ']'
  108              | • comp_variable '.' '#' IDENTIFIER
  109              | • comp_variable '.' '#' IDENTIFIER '[' POSINT ']'
  110              | • general_variable
  111 comp_function_call: • IDENTIFIER '(' ')'
  112                   | • IDENTIFIER '(' comp_expr_comma_list ')'
  113 general_comp_function_call: • comp_function_call
  114                           | • '#' IDENTIFIER '.' comp_function_call
  115                           | • '#' IDENTIFIER '[' comp_expression ']' '.' comp_function_call
  153 comp_command_list: • comp_command
  154                  | • comp_command_list comp_command
  155 comp_command: • comp_variable assignment_operator comp_expression ';'
  156             | • KW_IF '(' comp_expression ')' ':' comp_command_list KW_ENDIF ';'
  157             | • KW_IF '(' comp_expression ')' ':' comp_command_list KW_ELSE ':' comp_command_list KW_ENDIF ';'
  157             | KW_IF '(' comp_expression ')' ':' comp_command_list KW_ELSE ':' • comp_command_list KW_ENDIF ';'
  158             | • KW_FOR comp_variable KW_IN '[' comp_expression ':' comp_expression ']' ':' comp_command_list KW_ENDFOR ';'
  159             | • KW_FOR comp_variable KW_IN '[' comp_expression ':' comp_expression ':' comp_expression ']' ':' comp_command_list KW_ENDFOR ';'
  160             | • comp_variable OP_ASSIGN '[' comp_expression KW_FOR comp_variable ':' POSINT ']' ':' basic_data_type ';'
  161             | • KW_WHILE '(' comp_expression ')' ':' comp_command_list KW_ENDWHILE ';'
  162             | • KW_BREAK ';'
  163             | • KW_CONTINUE ';'
  164             | • KW_RETURN ';'
  165             | • KW_RETURN comp_expression ';'
  166             | • general_comp_function_call ';'

    IDENTIFIER   shift, and go to state 362
    KW_IF        shift, and go to state 320
    KW_CONTINUE  shift, and go to state 321
    KW_FOR       shift, and go to state 322
    KW_WHILE     shift, and go to state 323
    KW_BREAK     shift, and go to state 324
    KW_RETURN    shift, and go to state 325
    '#'          shift, and go to state 326

    general_variable            go to state 329
    comp_variable               go to state 330
    comp_function_call          go to state 160
    general_comp_function_call  go to state 331
    comp_command_list           go to state 506
    comp_command                go to state 333


State 492

  156 comp_command: KW_IF '(' comp_expression ')' ':' comp_command_list KW_ENDIF ';' •

    $default  reduce using rule 156 (comp_command)


State 493

  158 comp_command: KW_FOR comp_variable KW_IN '[' comp_expression ':' comp_expression ']' • ':' comp_command_list KW_ENDFOR ';'

    ':'  shift, and go to state 507


State 494

  111 comp_function_call: • IDENTIFIER '(' ')'
  112                   | • IDENTIFIER '(' comp_expr_comma_list ')'
  113 general_comp_function_call: • comp_function_call
  114                           | • '#' IDENTIFIER '.' comp_function_call
  115                           | • '#' IDENTIFIER '[' comp_expression ']' '.' comp_function_call
  118 comp_primary_expression: • POSINT
  119                        | • SCALAR
  120                        | • '#' IDENTIFIER
  121                        | • IDENTIFIER
  122                        | • STRING
  123                        | • KW_TRUE
  124                        | • KW_FALSE
  125                        | • '(' logic_expression ')'
  126 comp_math_expression: • comp_primary_expression
  127                     | • '+' comp_math_expression
  128                     | • '-' comp_math_expression
  129                     | • comp_math_expression '+' comp_math_expression
  130                     | • comp_math_expression '-' comp_math_expression
  131                     | • comp_math_expression '*' comp_math_expression
  132                     | • comp_math_expression '/' comp_math_expression
  133                     | • comp_math_expression '%' comp_math_expression
  134                     | • comp_math_expression OP_PAW comp_math_expression
  135                     | • '#' IDENTIFIER '[' comp_expression ']'
  136                     | • '#' IDENTIFIER '[' comp_expression ']' '.' '#' IDENTIFIER
  137                     | • '#' IDENTIFIER '[' comp_expression ']' '.' '#' IDENTIFIER '[' comp_expression ']'
  138                     | • general_comp_function_call
  139                     | • '#' IDENTIFIER '.' '#' IDENTIFIER '[' comp_expression ']'
  140                     | • '#' IDENTIFIER '.' '#' IDENTIFIER
  141 comp_relational_expression: • comp_math_expression
  142                           | • comp_relational_expression OP_EQUALS comp_relational_expression
  143                           | • comp_relational_expression OP_NE comp_relational_expression
  144                           | • comp_relational_expression '>' comp_relational_expression
  145                           | • comp_relational_expression '<' comp_relational_expression
  146                           | • comp_relational_expression OP_LE comp_relational_expression
  147                           | • comp_relational_expression OP_GE comp_relational_expression
  148 comp_logic_expression: • comp_relational_expression
  149                      | • OP_NOT comp_logic_expression
  150                      | • comp_logic_expression OP_AND comp_logic_expression
  151                      | • comp_logic_expression OP_OR comp_logic_expression
  152 comp_expression: • comp_logic_expression
  159 comp_command: KW_FOR comp_variable KW_IN '[' comp_expression ':' comp_expression ':' • comp_expression ']' ':' comp_command_list KW_ENDFOR ';'

    IDENTIFIER  shift, and go to state 148
    POSINT      shift, and go to state 149
    SCALAR      shift, and go to state 150
    STRING      shift, and go to state 151
    OP_NOT      shift, and go to state 152
    KW_TRUE     shift, and go to state 153
    KW_FALSE    shift, and go to state 154
    '-'         shift, and go to state 155
    '+'         shift, and go to state 156
    '#'         shift, and go to state 157
    '('         shift, and go to state 158

    comp_function_call          go to state 160
    general_comp_function_call  go to state 161
    comp_primary_expression     go to state 162
    comp_math_expression        go to state 163
    comp_relational_expression  go to state 164
    comp_logic_expression       go to state 165
    comp_expression             go to state 508


State 495

  161 comp_command: KW_WHILE '(' comp_expression ')' ':' comp_command_list KW_ENDWHILE ';' •

    $default  reduce using rule 161 (comp_command)


State 496

  160 comp_command: comp_variable OP_ASSIGN '[' comp_expression KW_FOR comp_variable ':' POSINT • ']' ':' basic_data_type ';'

    ']'  shift, and go to state 509


State 497

  103 function_definition: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl_list function_command_list KW_RETURN expression ';' KW_ENDDEF ';' •

    $default  reduce using rule 103 (function_definition)


State 498

  104 function_definition: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl function_command_list KW_RETURN expression ';' KW_ENDDEF ';' •

    $default  reduce using rule 104 (function_definition)


State 499

   88 function_command: KW_IF '(' expression ')' ':' function_command_list KW_ELSE ':' function_command_list KW_ENDIF ';' •

    $default  reduce using rule 88 (function_command)


State 500

   89 function_command: KW_FOR general_variable KW_IN '[' expression ':' expression ']' ':' function_command_list KW_ENDFOR • ';'

    ';'  shift, and go to state 510


State 501

   66 general_function_call: • function_call
   67                      | • IDENTIFIER '.' function_call
   68                      | • IDENTIFIER '[' expression ']' '.' function_call
   69 function_call: • IDENTIFIER '(' ')'
   70              | • IDENTIFIER '(' expr_comma_list ')'
   80 general_variable: • IDENTIFIER
   81                 | • IDENTIFIER '.' '#' IDENTIFIER
   82                 | • IDENTIFIER '[' expression ']'
   83                 | • IDENTIFIER '.' '#' IDENTIFIER '[' expression ']'
   84 function_command_list: • function_command
   85                      | • function_command_list function_command
   86 function_command: • general_variable assignment_operator expression ';'
   87                 | • KW_IF '(' expression ')' ':' function_command_list KW_ENDIF ';'
   88                 | • KW_IF '(' expression ')' ':' function_command_list KW_ELSE ':' function_command_list KW_ENDIF ';'
   89                 | • KW_FOR general_variable KW_IN '[' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';'
   90                 | • KW_FOR general_variable KW_IN '[' expression ':' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';'
   90                 | KW_FOR general_variable KW_IN '[' expression ':' expression ':' expression ']' ':' • function_command_list KW_ENDFOR ';'
   91                 | • general_variable OP_ASSIGN '[' expression KW_FOR general_variable ':' POSINT ']' ':' basic_data_type ';'
   92                 | • KW_WHILE '(' expression ')' ':' function_command_list KW_ENDWHILE ';'
   93                 | • KW_BREAK ';'
   94                 | • KW_CONTINUE ';'
   95                 | • KW_RETURN ';'
   96                 | • KW_RETURN expression ';'
   97                 | • general_function_call ';'

    IDENTIFIER   shift, and go to state 270
    KW_IF        shift, and go to state 216
    KW_CONTINUE  shift, and go to state 217
    KW_FOR       shift, and go to state 218
    KW_WHILE     shift, and go to state 219
    KW_BREAK     shift, and go to state 220
    KW_RETURN    shift, and go to state 221

    general_function_call  go to state 224
    function_call          go to state 70
    general_variable       go to state 225
    function_command_list  go to state 511
    function_command       go to state 227


State 502

   91 function_command: general_variable OP_ASSIGN '[' expression KW_FOR general_variable ':' POSINT ']' ':' basic_data_type • ';'

    ';'  shift, and go to state 512


State 503

  172 comp_function_definition: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl_list comp_command_list KW_RETURN comp_expression ';' KW_ENDDEF • ';'

    ';'  shift, and go to state 513


State 504

  174 comp_function_definition: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl comp_command_list KW_RETURN comp_expression ';' KW_ENDDEF • ';'

    ';'  shift, and go to state 514


State 505

  173 comp_function_definition: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' comp_command_list KW_RETURN comp_expression ';' KW_ENDDEF ';' •

    $default  reduce using rule 173 (comp_function_definition)


State 506

   80 general_variable: • IDENTIFIER
   81                 | • IDENTIFIER '.' '#' IDENTIFIER
   82                 | • IDENTIFIER '[' expression ']'
   83                 | • IDENTIFIER '.' '#' IDENTIFIER '[' expression ']'
  106 comp_variable: • '#' IDENTIFIER
  107              | • '#' IDENTIFIER '[' comp_expression ']'
  108              | • comp_variable '.' '#' IDENTIFIER
  109              | • comp_variable '.' '#' IDENTIFIER '[' POSINT ']'
  110              | • general_variable
  111 comp_function_call: • IDENTIFIER '(' ')'
  112                   | • IDENTIFIER '(' comp_expr_comma_list ')'
  113 general_comp_function_call: • comp_function_call
  114                           | • '#' IDENTIFIER '.' comp_function_call
  115                           | • '#' IDENTIFIER '[' comp_expression ']' '.' comp_function_call
  154 comp_command_list: comp_command_list • comp_command
  155 comp_command: • comp_variable assignment_operator comp_expression ';'
  156             | • KW_IF '(' comp_expression ')' ':' comp_command_list KW_ENDIF ';'
  157             | • KW_IF '(' comp_expression ')' ':' comp_command_list KW_ELSE ':' comp_command_list KW_ENDIF ';'
  157             | KW_IF '(' comp_expression ')' ':' comp_command_list KW_ELSE ':' comp_command_list • KW_ENDIF ';'
  158             | • KW_FOR comp_variable KW_IN '[' comp_expression ':' comp_expression ']' ':' comp_command_list KW_ENDFOR ';'
  159             | • KW_FOR comp_variable KW_IN '[' comp_expression ':' comp_expression ':' comp_expression ']' ':' comp_command_list KW_ENDFOR ';'
  160             | • comp_variable OP_ASSIGN '[' comp_expression KW_FOR comp_variable ':' POSINT ']' ':' basic_data_type ';'
  161             | • KW_WHILE '(' comp_expression ')' ':' comp_command_list KW_ENDWHILE ';'
  162             | • KW_BREAK ';'
  163             | • KW_CONTINUE ';'
  164             | • KW_RETURN ';'
  165             | • KW_RETURN comp_expression ';'
  166             | • general_comp_function_call ';'

    IDENTIFIER   shift, and go to state 362
    KW_IF        shift, and go to state 320
    KW_ENDIF     shift, and go to state 515
    KW_CONTINUE  shift, and go to state 321
    KW_FOR       shift, and go to state 322
    KW_WHILE     shift, and go to state 323
    KW_BREAK     shift, and go to state 324
    KW_RETURN    shift, and go to state 325
    '#'          shift, and go to state 326

    general_variable            go to state 329
    comp_variable               go to state 330
    comp_function_call          go to state 160
    general_comp_function_call  go to state 331
    comp_command                go to state 370


State 507

   80 general_variable: • IDENTIFIER
   81                 | • IDENTIFIER '.' '#' IDENTIFIER
   82                 | • IDENTIFIER '[' expression ']'
   83                 | • IDENTIFIER '.' '#' IDENTIFIER '[' expression ']'
  106 comp_variable: • '#' IDENTIFIER
  107              | • '#' IDENTIFIER '[' comp_expression ']'
  108              | • comp_variable '.' '#' IDENTIFIER
  109              | • comp_variable '.' '#' IDENTIFIER '[' POSINT ']'
  110              | • general_variable
  111 comp_function_call: • IDENTIFIER '(' ')'
  112                   | • IDENTIFIER '(' comp_expr_comma_list ')'
  113 general_comp_function_call: • comp_function_call
  114                           | • '#' IDENTIFIER '.' comp_function_call
  115                           | • '#' IDENTIFIER '[' comp_expression ']' '.' comp_function_call
  153 comp_command_list: • comp_command
  154                  | • comp_command_list comp_command
  155 comp_command: • comp_variable assignment_operator comp_expression ';'
  156             | • KW_IF '(' comp_expression ')' ':' comp_command_list KW_ENDIF ';'
  157             | • KW_IF '(' comp_expression ')' ':' comp_command_list KW_ELSE ':' comp_command_list KW_ENDIF ';'
  158             | • KW_FOR comp_variable KW_IN '[' comp_expression ':' comp_expression ']' ':' comp_command_list KW_ENDFOR ';'
  158             | KW_FOR comp_variable KW_IN '[' comp_expression ':' comp_expression ']' ':' • comp_command_list KW_ENDFOR ';'
  159             | • KW_FOR comp_variable KW_IN '[' comp_expression ':' comp_expression ':' comp_expression ']' ':' comp_command_list KW_ENDFOR ';'
  160             | • comp_variable OP_ASSIGN '[' comp_expression KW_FOR comp_variable ':' POSINT ']' ':' basic_data_type ';'
  161             | • KW_WHILE '(' comp_expression ')' ':' comp_command_list KW_ENDWHILE ';'
  162             | • KW_BREAK ';'
  163             | • KW_CONTINUE ';'
  164             | • KW_RETURN ';'
  165             | • KW_RETURN comp_expression ';'
  166             | • general_comp_function_call ';'

    IDENTIFIER   shift, and go to state 362
    KW_IF        shift, and go to state 320
    KW_CONTINUE  shift, and go to state 321
    KW_FOR       shift, and go to state 322
    KW_WHILE     shift, and go to state 323
    KW_BREAK     shift, and go to state 324
    KW_RETURN    shift, and go to state 325
    '#'          shift, and go to state 326

    general_variable            go to state 329
    comp_variable               go to state 330
    comp_function_call          go to state 160
    general_comp_function_call  go to state 331
    comp_command_list           go to state 516
    comp_command                go to state 333


State 508

  159 comp_command: KW_FOR comp_variable KW_IN '[' comp_expression ':' comp_expression ':' comp_expression • ']' ':' comp_command_list KW_ENDFOR ';'

    ']'  shift, and go to state 517


State 509

  160 comp_command: comp_variable OP_ASSIGN '[' comp_expression KW_FOR comp_variable ':' POSINT ']' • ':' basic_data_type ';'

    ':'  shift, and go to state 518


State 510

   89 function_command: KW_FOR general_variable KW_IN '[' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';' •

    $default  reduce using rule 89 (function_command)


State 511

   66 general_function_call: • function_call
   67                      | • IDENTIFIER '.' function_call
   68                      | • IDENTIFIER '[' expression ']' '.' function_call
   69 function_call: • IDENTIFIER '(' ')'
   70              | • IDENTIFIER '(' expr_comma_list ')'
   80 general_variable: • IDENTIFIER
   81                 | • IDENTIFIER '.' '#' IDENTIFIER
   82                 | • IDENTIFIER '[' expression ']'
   83                 | • IDENTIFIER '.' '#' IDENTIFIER '[' expression ']'
   85 function_command_list: function_command_list • function_command
   86 function_command: • general_variable assignment_operator expression ';'
   87                 | • KW_IF '(' expression ')' ':' function_command_list KW_ENDIF ';'
   88                 | • KW_IF '(' expression ')' ':' function_command_list KW_ELSE ':' function_command_list KW_ENDIF ';'
   89                 | • KW_FOR general_variable KW_IN '[' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';'
   90                 | • KW_FOR general_variable KW_IN '[' expression ':' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';'
   90                 | KW_FOR general_variable KW_IN '[' expression ':' expression ':' expression ']' ':' function_command_list • KW_ENDFOR ';'
   91                 | • general_variable OP_ASSIGN '[' expression KW_FOR general_variable ':' POSINT ']' ':' basic_data_type ';'
   92                 | • KW_WHILE '(' expression ')' ':' function_command_list KW_ENDWHILE ';'
   93                 | • KW_BREAK ';'
   94                 | • KW_CONTINUE ';'
   95                 | • KW_RETURN ';'
   96                 | • KW_RETURN expression ';'
   97                 | • general_function_call ';'

    IDENTIFIER   shift, and go to state 270
    KW_IF        shift, and go to state 216
    KW_CONTINUE  shift, and go to state 217
    KW_FOR       shift, and go to state 218
    KW_ENDFOR    shift, and go to state 519
    KW_WHILE     shift, and go to state 219
    KW_BREAK     shift, and go to state 220
    KW_RETURN    shift, and go to state 221

    general_function_call  go to state 224
    function_call          go to state 70
    general_variable       go to state 225
    function_command       go to state 283


State 512

   91 function_command: general_variable OP_ASSIGN '[' expression KW_FOR general_variable ':' POSINT ']' ':' basic_data_type ';' •

    $default  reduce using rule 91 (function_command)


State 513

  172 comp_function_definition: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl_list comp_command_list KW_RETURN comp_expression ';' KW_ENDDEF ';' •

    $default  reduce using rule 172 (comp_function_definition)


State 514

  174 comp_function_definition: KW_DEF IDENTIFIER '(' parameter_declaration_list ')' '-' '>' basic_data_type ':' local_var_const_decl comp_command_list KW_RETURN comp_expression ';' KW_ENDDEF ';' •

    $default  reduce using rule 174 (comp_function_definition)


State 515

  157 comp_command: KW_IF '(' comp_expression ')' ':' comp_command_list KW_ELSE ':' comp_command_list KW_ENDIF • ';'

    ';'  shift, and go to state 520


State 516

   80 general_variable: • IDENTIFIER
   81                 | • IDENTIFIER '.' '#' IDENTIFIER
   82                 | • IDENTIFIER '[' expression ']'
   83                 | • IDENTIFIER '.' '#' IDENTIFIER '[' expression ']'
  106 comp_variable: • '#' IDENTIFIER
  107              | • '#' IDENTIFIER '[' comp_expression ']'
  108              | • comp_variable '.' '#' IDENTIFIER
  109              | • comp_variable '.' '#' IDENTIFIER '[' POSINT ']'
  110              | • general_variable
  111 comp_function_call: • IDENTIFIER '(' ')'
  112                   | • IDENTIFIER '(' comp_expr_comma_list ')'
  113 general_comp_function_call: • comp_function_call
  114                           | • '#' IDENTIFIER '.' comp_function_call
  115                           | • '#' IDENTIFIER '[' comp_expression ']' '.' comp_function_call
  154 comp_command_list: comp_command_list • comp_command
  155 comp_command: • comp_variable assignment_operator comp_expression ';'
  156             | • KW_IF '(' comp_expression ')' ':' comp_command_list KW_ENDIF ';'
  157             | • KW_IF '(' comp_expression ')' ':' comp_command_list KW_ELSE ':' comp_command_list KW_ENDIF ';'
  158             | • KW_FOR comp_variable KW_IN '[' comp_expression ':' comp_expression ']' ':' comp_command_list KW_ENDFOR ';'
  158             | KW_FOR comp_variable KW_IN '[' comp_expression ':' comp_expression ']' ':' comp_command_list • KW_ENDFOR ';'
  159             | • KW_FOR comp_variable KW_IN '[' comp_expression ':' comp_expression ':' comp_expression ']' ':' comp_command_list KW_ENDFOR ';'
  160             | • comp_variable OP_ASSIGN '[' comp_expression KW_FOR comp_variable ':' POSINT ']' ':' basic_data_type ';'
  161             | • KW_WHILE '(' comp_expression ')' ':' comp_command_list KW_ENDWHILE ';'
  162             | • KW_BREAK ';'
  163             | • KW_CONTINUE ';'
  164             | • KW_RETURN ';'
  165             | • KW_RETURN comp_expression ';'
  166             | • general_comp_function_call ';'

    IDENTIFIER   shift, and go to state 362
    KW_IF        shift, and go to state 320
    KW_CONTINUE  shift, and go to state 321
    KW_FOR       shift, and go to state 322
    KW_ENDFOR    shift, and go to state 521
    KW_WHILE     shift, and go to state 323
    KW_BREAK     shift, and go to state 324
    KW_RETURN    shift, and go to state 325
    '#'          shift, and go to state 326

    general_variable            go to state 329
    comp_variable               go to state 330
    comp_function_call          go to state 160
    general_comp_function_call  go to state 331
    comp_command                go to state 370


State 517

  159 comp_command: KW_FOR comp_variable KW_IN '[' comp_expression ':' comp_expression ':' comp_expression ']' • ':' comp_command_list KW_ENDFOR ';'

    ':'  shift, and go to state 522


State 518

   36 basic_data_type: • KW_INTEGER
   37                | • KW_BOOLEAN
   38                | • KW_CHAR
   39                | • KW_SCALAR
   40                | • KW_STR
   41                | • IDENTIFIER
  160 comp_command: comp_variable OP_ASSIGN '[' comp_expression KW_FOR comp_variable ':' POSINT ']' ':' • basic_data_type ';'

    IDENTIFIER  shift, and go to state 29
    KW_BOOLEAN  shift, and go to state 30
    KW_STR      shift, and go to state 31
    KW_INTEGER  shift, and go to state 32
    KW_SCALAR   shift, and go to state 33
    KW_CHAR     shift, and go to state 34

    basic_data_type  go to state 523


State 519

   90 function_command: KW_FOR general_variable KW_IN '[' expression ':' expression ':' expression ']' ':' function_command_list KW_ENDFOR • ';'

    ';'  shift, and go to state 524


State 520

  157 comp_command: KW_IF '(' comp_expression ')' ':' comp_command_list KW_ELSE ':' comp_command_list KW_ENDIF ';' •

    $default  reduce using rule 157 (comp_command)


State 521

  158 comp_command: KW_FOR comp_variable KW_IN '[' comp_expression ':' comp_expression ']' ':' comp_command_list KW_ENDFOR • ';'

    ';'  shift, and go to state 525


State 522

   80 general_variable: • IDENTIFIER
   81                 | • IDENTIFIER '.' '#' IDENTIFIER
   82                 | • IDENTIFIER '[' expression ']'
   83                 | • IDENTIFIER '.' '#' IDENTIFIER '[' expression ']'
  106 comp_variable: • '#' IDENTIFIER
  107              | • '#' IDENTIFIER '[' comp_expression ']'
  108              | • comp_variable '.' '#' IDENTIFIER
  109              | • comp_variable '.' '#' IDENTIFIER '[' POSINT ']'
  110              | • general_variable
  111 comp_function_call: • IDENTIFIER '(' ')'
  112                   | • IDENTIFIER '(' comp_expr_comma_list ')'
  113 general_comp_function_call: • comp_function_call
  114                           | • '#' IDENTIFIER '.' comp_function_call
  115                           | • '#' IDENTIFIER '[' comp_expression ']' '.' comp_function_call
  153 comp_command_list: • comp_command
  154                  | • comp_command_list comp_command
  155 comp_command: • comp_variable assignment_operator comp_expression ';'
  156             | • KW_IF '(' comp_expression ')' ':' comp_command_list KW_ENDIF ';'
  157             | • KW_IF '(' comp_expression ')' ':' comp_command_list KW_ELSE ':' comp_command_list KW_ENDIF ';'
  158             | • KW_FOR comp_variable KW_IN '[' comp_expression ':' comp_expression ']' ':' comp_command_list KW_ENDFOR ';'
  159             | • KW_FOR comp_variable KW_IN '[' comp_expression ':' comp_expression ':' comp_expression ']' ':' comp_command_list KW_ENDFOR ';'
  159             | KW_FOR comp_variable KW_IN '[' comp_expression ':' comp_expression ':' comp_expression ']' ':' • comp_command_list KW_ENDFOR ';'
  160             | • comp_variable OP_ASSIGN '[' comp_expression KW_FOR comp_variable ':' POSINT ']' ':' basic_data_type ';'
  161             | • KW_WHILE '(' comp_expression ')' ':' comp_command_list KW_ENDWHILE ';'
  162             | • KW_BREAK ';'
  163             | • KW_CONTINUE ';'
  164             | • KW_RETURN ';'
  165             | • KW_RETURN comp_expression ';'
  166             | • general_comp_function_call ';'

    IDENTIFIER   shift, and go to state 362
    KW_IF        shift, and go to state 320
    KW_CONTINUE  shift, and go to state 321
    KW_FOR       shift, and go to state 322
    KW_WHILE     shift, and go to state 323
    KW_BREAK     shift, and go to state 324
    KW_RETURN    shift, and go to state 325
    '#'          shift, and go to state 326

    general_variable            go to state 329
    comp_variable               go to state 330
    comp_function_call          go to state 160
    general_comp_function_call  go to state 331
    comp_command_list           go to state 526
    comp_command                go to state 333


State 523

  160 comp_command: comp_variable OP_ASSIGN '[' comp_expression KW_FOR comp_variable ':' POSINT ']' ':' basic_data_type • ';'

    ';'  shift, and go to state 527


State 524

   90 function_command: KW_FOR general_variable KW_IN '[' expression ':' expression ':' expression ']' ':' function_command_list KW_ENDFOR ';' •

    $default  reduce using rule 90 (function_command)


State 525

  158 comp_command: KW_FOR comp_variable KW_IN '[' comp_expression ':' comp_expression ']' ':' comp_command_list KW_ENDFOR ';' •

    $default  reduce using rule 158 (comp_command)


State 526

   80 general_variable: • IDENTIFIER
   81                 | • IDENTIFIER '.' '#' IDENTIFIER
   82                 | • IDENTIFIER '[' expression ']'
   83                 | • IDENTIFIER '.' '#' IDENTIFIER '[' expression ']'
  106 comp_variable: • '#' IDENTIFIER
  107              | • '#' IDENTIFIER '[' comp_expression ']'
  108              | • comp_variable '.' '#' IDENTIFIER
  109              | • comp_variable '.' '#' IDENTIFIER '[' POSINT ']'
  110              | • general_variable
  111 comp_function_call: • IDENTIFIER '(' ')'
  112                   | • IDENTIFIER '(' comp_expr_comma_list ')'
  113 general_comp_function_call: • comp_function_call
  114                           | • '#' IDENTIFIER '.' comp_function_call
  115                           | • '#' IDENTIFIER '[' comp_expression ']' '.' comp_function_call
  154 comp_command_list: comp_command_list • comp_command
  155 comp_command: • comp_variable assignment_operator comp_expression ';'
  156             | • KW_IF '(' comp_expression ')' ':' comp_command_list KW_ENDIF ';'
  157             | • KW_IF '(' comp_expression ')' ':' comp_command_list KW_ELSE ':' comp_command_list KW_ENDIF ';'
  158             | • KW_FOR comp_variable KW_IN '[' comp_expression ':' comp_expression ']' ':' comp_command_list KW_ENDFOR ';'
  159             | • KW_FOR comp_variable KW_IN '[' comp_expression ':' comp_expression ':' comp_expression ']' ':' comp_command_list KW_ENDFOR ';'
  159             | KW_FOR comp_variable KW_IN '[' comp_expression ':' comp_expression ':' comp_expression ']' ':' comp_command_list • KW_ENDFOR ';'
  160             | • comp_variable OP_ASSIGN '[' comp_expression KW_FOR comp_variable ':' POSINT ']' ':' basic_data_type ';'
  161             | • KW_WHILE '(' comp_expression ')' ':' comp_command_list KW_ENDWHILE ';'
  162             | • KW_BREAK ';'
  163             | • KW_CONTINUE ';'
  164             | • KW_RETURN ';'
  165             | • KW_RETURN comp_expression ';'
  166             | • general_comp_function_call ';'

    IDENTIFIER   shift, and go to state 362
    KW_IF        shift, and go to state 320
    KW_CONTINUE  shift, and go to state 321
    KW_FOR       shift, and go to state 322
    KW_ENDFOR    shift, and go to state 528
    KW_WHILE     shift, and go to state 323
    KW_BREAK     shift, and go to state 324
    KW_RETURN    shift, and go to state 325
    '#'          shift, and go to state 326

    general_variable            go to state 329
    comp_variable               go to state 330
    comp_function_call          go to state 160
    general_comp_function_call  go to state 331
    comp_command                go to state 370


State 527

  160 comp_command: comp_variable OP_ASSIGN '[' comp_expression KW_FOR comp_variable ':' POSINT ']' ':' basic_data_type ';' •

    $default  reduce using rule 160 (comp_command)


State 528

  159 comp_command: KW_FOR comp_variable KW_IN '[' comp_expression ':' comp_expression ':' comp_expression ']' ':' comp_command_list KW_ENDFOR • ';'

    ';'  shift, and go to state 529


State 529

  159 comp_command: KW_FOR comp_variable KW_IN '[' comp_expression ':' comp_expression ':' comp_expression ']' ':' comp_command_list KW_ENDFOR ';' •

    $default  reduce using rule 159 (comp_command)
