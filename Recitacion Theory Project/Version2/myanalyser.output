Terminals unused in grammar

    COMP_VAR
    KW_COMP
    KW_ENDCOMP
    KW_OF
    ASSIGN_EQ


Grammar

    0 $accept: program $end

    1 program: KW_DEF KW_MAIN '(' ')' ':' body KW_ENDDEF ';'
    2        | start_var_decl_list KW_DEF KW_MAIN '(' ')' ':' body KW_ENDDEF ';'
    3        | start_const_decl_list KW_DEF KW_MAIN '(' ')' ':' body KW_ENDDEF ';'
    4        | func_decl_list KW_DEF KW_MAIN '(' ')' ':' body KW_ENDDEF ';'
    5        | start_var_decl_list start_const_decl_list KW_DEF KW_MAIN '(' ')' ':' body KW_ENDDEF ';'
    6        | start_var_decl_list func_decl_list KW_DEF KW_MAIN '(' ')' ':' body KW_ENDDEF ';'
    7        | start_const_decl_list func_decl_list KW_DEF KW_MAIN '(' ')' ':' body KW_ENDDEF ';'
    8        | start_const_decl_list start_var_decl_list KW_DEF KW_MAIN '(' ')' ':' body KW_ENDDEF ';'
    9        | start_var_decl_list start_const_decl_list func_decl_list KW_DEF KW_MAIN '(' ')' ':' body KW_ENDDEF ';'
   10        | start_var_decl_list func_decl_list start_const_decl_list KW_DEF KW_MAIN '(' ')' ':' body KW_ENDDEF ';'
   11        | start_const_decl_list start_var_decl_list func_decl_list KW_DEF KW_MAIN '(' ')' ':' body KW_ENDDEF ';'
   12        | start_const_decl_list func_decl_list start_var_decl_list KW_DEF KW_MAIN '(' ')' ':' body KW_ENDDEF ';'
   13        | func_decl_list start_const_decl_list start_var_decl_list KW_DEF KW_MAIN '(' ')' ':' body KW_ENDDEF ';'
   14        | func_decl_list start_var_decl_list start_const_decl_list KW_DEF KW_MAIN '(' ')' ':' body KW_ENDDEF ';'

   15 start_var_decl_list: start_var_decl_list var_decl
   16                    | var_decl

   17 var_decl: var_decl_list ':' type_spec ';'
   18         | array_compact_integer

   19 var_decl_list: var_decl_list ',' decl_list_item_id
   20              | decl_list_item_id

   21 array_compact_integer: IDENTIFIER SIMPLE_ARRAY '[' expr KW_FOR expr ':' INTEGER ']' ':' type_spec ';'

   22 start_const_decl_list: start_const_decl_list const_decl
   23                      | const_decl

   24 const_decl: KW_CONST const_decl_list_item ':' type_spec ';'

   25 const_decl_list_item: decl_list_item_id '=' expr
   26                     | decl_list_item_id '=' STRING

   27 func_decl_list: func_decl_list func_decl
   28               | func_decl

   29 func_decl: KW_DEF IDENTIFIER '(' func_var_decl_list ')' RETURN_ID type_spec ':' body KW_ENDDEF ';'
   30          | KW_DEF IDENTIFIER '(' ')' RETURN_ID type_spec ':' body KW_ENDDEF ';'

   31 func_var_decl_list: func_var_decl_list ',' func_var_decl
   32                   | func_var_decl

   33 func_var_decl: decl_list_item_id ':' type_spec

   34 body: decl_list command_list
   35     | command_list

   36 decl_list: decl_list decl
   37          | decl

   38 decl: KW_CONST var_decl ':' type_spec ';'
   39     | var_decl ':' type_spec ';'

   40 decl_list_item_id: IDENTIFIER
   41                  | IDENTIFIER '[' INTEGER ']'
   42                  | IDENTIFIER '[' ']'

   43 command_list: command_list command
   44             | command

   45 command: IDENTIFIER '=' expr ';'
   46        | IDENTIFIER '(' func_call ')' ';'
   47        | IDENTIFIER '(' ')' ';'
   48        | IDENTIFIER '(' STRING ')' ';'
   49        | KW_BREAK ';'
   50        | KW_CONTINUE ';'
   51        | KW_RETURN ';'
   52        | KW_RETURN expr ';'
   53        | KW_IF '(' expr ')' ':' command_list KW_ENDIF ';'
   54        | KW_IF '(' expr ')' ':' command_list KW_ELSE ':' command_list KW_ENDIF ';'
   55        | KW_WHILE '(' expr ')' ':' command_list KW_ENDWHILE ';'
   56        | KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ':' expr ']' ':' command_list KW_ENDFOR ';'
   57        | KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ']' ':' command_list KW_ENDFOR ';'
   58        | var_decl
   59        | const_decl

   60 expr: INTEGER
   61     | SCALAR
   62     | KW_TRUE
   63     | KW_FALSE
   64     | IDENTIFIER
   65     | IDENTIFIER '[' expr ']'
   66     | IDENTIFIER '(' func_call ')'
   67     | IDENTIFIER '(' ')'
   68     | '-' expr
   69     | '(' expr ')'
   70     | expr '+' expr
   71     | expr '-' expr
   72     | expr '*' expr
   73     | expr '/' expr
   74     | expr '%' expr
   75     | expr ASSIGN_PLUSEQ expr
   76     | expr ASSIGN_MINUSEQ expr
   77     | expr ASSIGN_MULEQ expr
   78     | expr ASSIGN_DIVEQ expr
   79     | expr ASSIGN_MODEQ expr
   80     | expr POW expr
   81     | OP_NOT expr
   82     | expr OP_AND expr
   83     | expr OP_OR expr
   84     | expr NE expr
   85     | expr EQUALS expr
   86     | expr '<' expr
   87     | expr LE expr
   88     | expr '>' expr
   89     | expr GE expr

   90 type_spec: KW_INTEGER
   91          | KW_SCALAR
   92          | KW_STR
   93          | KW_BOOLEAN

   94 func_call: func_call ',' expr
   95          | expr


Terminals, with rules where they appear

    $end (0) 0
    '%' (37) 74
    '(' (40) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 29 30 46 47 48 53 54 55 66 67 69
    ')' (41) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 29 30 46 47 48 53 54 55 66 67 69
    '*' (42) 72
    '+' (43) 70
    ',' (44) 19 31 94
    '-' (45) 68 71
    '/' (47) 73
    ':' (58) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 17 21 24 29 30 33 38 39 53 54 55 56 57
    ';' (59) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 17 21 24 29 30 38 39 45 46 47 48 49 50 51 52 53 54 55 56 57
    '<' (60) 86
    '=' (61) 25 26 45
    '>' (62) 88
    '[' (91) 21 41 42 56 57 65
    ']' (93) 21 41 42 56 57 65
    error (256)
    IDENTIFIER <str> (258) 21 29 30 40 41 42 45 46 47 48 56 57 64 65 66 67
    INTEGER <str> (259) 21 41 60
    SCALAR <str> (260) 61
    STRING <str> (261) 26 48
    COMP_VAR <str> (262)
    KW_IF (263) 53 54
    KW_DEF (264) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 29 30
    KW_INTEGER (265) 90
    KW_ELSE (266) 54
    KW_ENDIF (267) 53 54
    KW_SCALAR (268) 91
    KW_STR (269) 92
    KW_BOOLEAN (270) 93
    KW_TRUE (271) 62
    KW_FALSE (272) 63
    KW_CONST (273) 24 38
    KW_FOR (274) 21 56 57
    KW_IN (275) 56 57
    KW_ENDFOR (276) 56 57
    KW_WHILE (277) 55
    KW_ENDWHILE (278) 55
    KW_BREAK (279) 49
    KW_CONTINUE (280) 50
    KW_ENDDEF (281) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 29 30
    KW_RETURN (282) 51 52
    KW_COMP (283)
    KW_ENDCOMP (284)
    KW_OF (285)
    POW (286) 80
    EQUALS (287) 85
    NE (288) 84
    LE (289) 87
    GE (290) 89
    OP_AND (291) 82
    OP_OR (292) 83
    OP_NOT (293) 81
    ASSIGN_EQ (294)
    ASSIGN_PLUSEQ (295) 75
    ASSIGN_MINUSEQ (296) 76
    ASSIGN_MULEQ (297) 77
    ASSIGN_DIVEQ (298) 78
    ASSIGN_MODEQ (299) 79
    KW_MAIN (300) 1 2 3 4 5 6 7 8 9 10 11 12 13 14
    SIMPLE_ARRAY (301) 21
    RETURN_ID (302) 29 30


Nonterminals, with rules where they appear

    $accept (63)
        on left: 0
    program (64)
        on left: 1 2 3 4 5 6 7 8 9 10 11 12 13 14
        on right: 0
    start_var_decl_list <str> (65)
        on left: 15 16
        on right: 2 5 6 8 9 10 11 12 13 14 15
    var_decl <str> (66)
        on left: 17 18
        on right: 15 16 38 39 58
    var_decl_list <str> (67)
        on left: 19 20
        on right: 17 19
    array_compact_integer <str> (68)
        on left: 21
        on right: 18
    start_const_decl_list <str> (69)
        on left: 22 23
        on right: 3 5 7 8 9 10 11 12 13 14 22
    const_decl <str> (70)
        on left: 24
        on right: 22 23 59
    const_decl_list_item <str> (71)
        on left: 25 26
        on right: 24
    func_decl_list <str> (72)
        on left: 27 28
        on right: 4 6 7 9 10 11 12 13 14 27
    func_decl <str> (73)
        on left: 29 30
        on right: 27 28
    func_var_decl_list <str> (74)
        on left: 31 32
        on right: 29 31
    func_var_decl <str> (75)
        on left: 33
        on right: 31 32
    body <str> (76)
        on left: 34 35
        on right: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 29 30
    decl_list <str> (77)
        on left: 36 37
        on right: 34 36
    decl <str> (78)
        on left: 38 39
        on right: 36 37
    decl_list_item_id <str> (79)
        on left: 40 41 42
        on right: 19 20 25 26 33
    command_list <str> (80)
        on left: 43 44
        on right: 34 35 43 53 54 55 56 57
    command <str> (81)
        on left: 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59
        on right: 43 44
    expr <str> (82)
        on left: 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89
        on right: 21 25 45 52 53 54 55 56 57 65 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 94 95
    type_spec <str> (83)
        on left: 90 91 92 93
        on right: 17 21 24 29 30 33 38 39
    func_call <str> (84)
        on left: 94 95
        on right: 46 66 94


State 0

    0 $accept: • program $end
    1 program: • KW_DEF KW_MAIN '(' ')' ':' body KW_ENDDEF ';'
    2        | • start_var_decl_list KW_DEF KW_MAIN '(' ')' ':' body KW_ENDDEF ';'
    3        | • start_const_decl_list KW_DEF KW_MAIN '(' ')' ':' body KW_ENDDEF ';'
    4        | • func_decl_list KW_DEF KW_MAIN '(' ')' ':' body KW_ENDDEF ';'
    5        | • start_var_decl_list start_const_decl_list KW_DEF KW_MAIN '(' ')' ':' body KW_ENDDEF ';'
    6        | • start_var_decl_list func_decl_list KW_DEF KW_MAIN '(' ')' ':' body KW_ENDDEF ';'
    7        | • start_const_decl_list func_decl_list KW_DEF KW_MAIN '(' ')' ':' body KW_ENDDEF ';'
    8        | • start_const_decl_list start_var_decl_list KW_DEF KW_MAIN '(' ')' ':' body KW_ENDDEF ';'
    9        | • start_var_decl_list start_const_decl_list func_decl_list KW_DEF KW_MAIN '(' ')' ':' body KW_ENDDEF ';'
   10        | • start_var_decl_list func_decl_list start_const_decl_list KW_DEF KW_MAIN '(' ')' ':' body KW_ENDDEF ';'
   11        | • start_const_decl_list start_var_decl_list func_decl_list KW_DEF KW_MAIN '(' ')' ':' body KW_ENDDEF ';'
   12        | • start_const_decl_list func_decl_list start_var_decl_list KW_DEF KW_MAIN '(' ')' ':' body KW_ENDDEF ';'
   13        | • func_decl_list start_const_decl_list start_var_decl_list KW_DEF KW_MAIN '(' ')' ':' body KW_ENDDEF ';'
   14        | • func_decl_list start_var_decl_list start_const_decl_list KW_DEF KW_MAIN '(' ')' ':' body KW_ENDDEF ';'
   15 start_var_decl_list: • start_var_decl_list var_decl
   16                    | • var_decl
   17 var_decl: • var_decl_list ':' type_spec ';'
   18         | • array_compact_integer
   19 var_decl_list: • var_decl_list ',' decl_list_item_id
   20              | • decl_list_item_id
   21 array_compact_integer: • IDENTIFIER SIMPLE_ARRAY '[' expr KW_FOR expr ':' INTEGER ']' ':' type_spec ';'
   22 start_const_decl_list: • start_const_decl_list const_decl
   23                      | • const_decl
   24 const_decl: • KW_CONST const_decl_list_item ':' type_spec ';'
   27 func_decl_list: • func_decl_list func_decl
   28               | • func_decl
   29 func_decl: • KW_DEF IDENTIFIER '(' func_var_decl_list ')' RETURN_ID type_spec ':' body KW_ENDDEF ';'
   30          | • KW_DEF IDENTIFIER '(' ')' RETURN_ID type_spec ':' body KW_ENDDEF ';'
   40 decl_list_item_id: • IDENTIFIER
   41                  | • IDENTIFIER '[' INTEGER ']'
   42                  | • IDENTIFIER '[' ']'

    IDENTIFIER  shift, and go to state 1
    KW_DEF      shift, and go to state 2
    KW_CONST    shift, and go to state 3

    program                go to state 4
    start_var_decl_list    go to state 5
    var_decl               go to state 6
    var_decl_list          go to state 7
    array_compact_integer  go to state 8
    start_const_decl_list  go to state 9
    const_decl             go to state 10
    func_decl_list         go to state 11
    func_decl              go to state 12
    decl_list_item_id      go to state 13


State 1

   21 array_compact_integer: IDENTIFIER • SIMPLE_ARRAY '[' expr KW_FOR expr ':' INTEGER ']' ':' type_spec ';'
   40 decl_list_item_id: IDENTIFIER •  [':', ',', '=']
   41                  | IDENTIFIER • '[' INTEGER ']'
   42                  | IDENTIFIER • '[' ']'

    SIMPLE_ARRAY  shift, and go to state 14
    '['           shift, and go to state 15

    $default  reduce using rule 40 (decl_list_item_id)


State 2

    1 program: KW_DEF • KW_MAIN '(' ')' ':' body KW_ENDDEF ';'
   29 func_decl: KW_DEF • IDENTIFIER '(' func_var_decl_list ')' RETURN_ID type_spec ':' body KW_ENDDEF ';'
   30          | KW_DEF • IDENTIFIER '(' ')' RETURN_ID type_spec ':' body KW_ENDDEF ';'

    IDENTIFIER  shift, and go to state 16
    KW_MAIN     shift, and go to state 17


State 3

   24 const_decl: KW_CONST • const_decl_list_item ':' type_spec ';'
   25 const_decl_list_item: • decl_list_item_id '=' expr
   26                     | • decl_list_item_id '=' STRING
   40 decl_list_item_id: • IDENTIFIER
   41                  | • IDENTIFIER '[' INTEGER ']'
   42                  | • IDENTIFIER '[' ']'

    IDENTIFIER  shift, and go to state 18

    const_decl_list_item  go to state 19
    decl_list_item_id     go to state 20


State 4

    0 $accept: program • $end

    $end  shift, and go to state 21


State 5

    2 program: start_var_decl_list • KW_DEF KW_MAIN '(' ')' ':' body KW_ENDDEF ';'
    5        | start_var_decl_list • start_const_decl_list KW_DEF KW_MAIN '(' ')' ':' body KW_ENDDEF ';'
    6        | start_var_decl_list • func_decl_list KW_DEF KW_MAIN '(' ')' ':' body KW_ENDDEF ';'
    9        | start_var_decl_list • start_const_decl_list func_decl_list KW_DEF KW_MAIN '(' ')' ':' body KW_ENDDEF ';'
   10        | start_var_decl_list • func_decl_list start_const_decl_list KW_DEF KW_MAIN '(' ')' ':' body KW_ENDDEF ';'
   15 start_var_decl_list: start_var_decl_list • var_decl
   17 var_decl: • var_decl_list ':' type_spec ';'
   18         | • array_compact_integer
   19 var_decl_list: • var_decl_list ',' decl_list_item_id
   20              | • decl_list_item_id
   21 array_compact_integer: • IDENTIFIER SIMPLE_ARRAY '[' expr KW_FOR expr ':' INTEGER ']' ':' type_spec ';'
   22 start_const_decl_list: • start_const_decl_list const_decl
   23                      | • const_decl
   24 const_decl: • KW_CONST const_decl_list_item ':' type_spec ';'
   27 func_decl_list: • func_decl_list func_decl
   28               | • func_decl
   29 func_decl: • KW_DEF IDENTIFIER '(' func_var_decl_list ')' RETURN_ID type_spec ':' body KW_ENDDEF ';'
   30          | • KW_DEF IDENTIFIER '(' ')' RETURN_ID type_spec ':' body KW_ENDDEF ';'
   40 decl_list_item_id: • IDENTIFIER
   41                  | • IDENTIFIER '[' INTEGER ']'
   42                  | • IDENTIFIER '[' ']'

    IDENTIFIER  shift, and go to state 1
    KW_DEF      shift, and go to state 22
    KW_CONST    shift, and go to state 3

    var_decl               go to state 23
    var_decl_list          go to state 7
    array_compact_integer  go to state 8
    start_const_decl_list  go to state 24
    const_decl             go to state 10
    func_decl_list         go to state 25
    func_decl              go to state 12
    decl_list_item_id      go to state 13


State 6

   16 start_var_decl_list: var_decl •

    $default  reduce using rule 16 (start_var_decl_list)


State 7

   17 var_decl: var_decl_list • ':' type_spec ';'
   19 var_decl_list: var_decl_list • ',' decl_list_item_id

    ':'  shift, and go to state 26
    ','  shift, and go to state 27


State 8

   18 var_decl: array_compact_integer •

    $default  reduce using rule 18 (var_decl)


State 9

    3 program: start_const_decl_list • KW_DEF KW_MAIN '(' ')' ':' body KW_ENDDEF ';'
    7        | start_const_decl_list • func_decl_list KW_DEF KW_MAIN '(' ')' ':' body KW_ENDDEF ';'
    8        | start_const_decl_list • start_var_decl_list KW_DEF KW_MAIN '(' ')' ':' body KW_ENDDEF ';'
   11        | start_const_decl_list • start_var_decl_list func_decl_list KW_DEF KW_MAIN '(' ')' ':' body KW_ENDDEF ';'
   12        | start_const_decl_list • func_decl_list start_var_decl_list KW_DEF KW_MAIN '(' ')' ':' body KW_ENDDEF ';'
   15 start_var_decl_list: • start_var_decl_list var_decl
   16                    | • var_decl
   17 var_decl: • var_decl_list ':' type_spec ';'
   18         | • array_compact_integer
   19 var_decl_list: • var_decl_list ',' decl_list_item_id
   20              | • decl_list_item_id
   21 array_compact_integer: • IDENTIFIER SIMPLE_ARRAY '[' expr KW_FOR expr ':' INTEGER ']' ':' type_spec ';'
   22 start_const_decl_list: start_const_decl_list • const_decl
   24 const_decl: • KW_CONST const_decl_list_item ':' type_spec ';'
   27 func_decl_list: • func_decl_list func_decl
   28               | • func_decl
   29 func_decl: • KW_DEF IDENTIFIER '(' func_var_decl_list ')' RETURN_ID type_spec ':' body KW_ENDDEF ';'
   30          | • KW_DEF IDENTIFIER '(' ')' RETURN_ID type_spec ':' body KW_ENDDEF ';'
   40 decl_list_item_id: • IDENTIFIER
   41                  | • IDENTIFIER '[' INTEGER ']'
   42                  | • IDENTIFIER '[' ']'

    IDENTIFIER  shift, and go to state 1
    KW_DEF      shift, and go to state 28
    KW_CONST    shift, and go to state 3

    start_var_decl_list    go to state 29
    var_decl               go to state 6
    var_decl_list          go to state 7
    array_compact_integer  go to state 8
    const_decl             go to state 30
    func_decl_list         go to state 31
    func_decl              go to state 12
    decl_list_item_id      go to state 13


State 10

   23 start_const_decl_list: const_decl •

    $default  reduce using rule 23 (start_const_decl_list)


State 11

    4 program: func_decl_list • KW_DEF KW_MAIN '(' ')' ':' body KW_ENDDEF ';'
   13        | func_decl_list • start_const_decl_list start_var_decl_list KW_DEF KW_MAIN '(' ')' ':' body KW_ENDDEF ';'
   14        | func_decl_list • start_var_decl_list start_const_decl_list KW_DEF KW_MAIN '(' ')' ':' body KW_ENDDEF ';'
   15 start_var_decl_list: • start_var_decl_list var_decl
   16                    | • var_decl
   17 var_decl: • var_decl_list ':' type_spec ';'
   18         | • array_compact_integer
   19 var_decl_list: • var_decl_list ',' decl_list_item_id
   20              | • decl_list_item_id
   21 array_compact_integer: • IDENTIFIER SIMPLE_ARRAY '[' expr KW_FOR expr ':' INTEGER ']' ':' type_spec ';'
   22 start_const_decl_list: • start_const_decl_list const_decl
   23                      | • const_decl
   24 const_decl: • KW_CONST const_decl_list_item ':' type_spec ';'
   27 func_decl_list: func_decl_list • func_decl
   29 func_decl: • KW_DEF IDENTIFIER '(' func_var_decl_list ')' RETURN_ID type_spec ':' body KW_ENDDEF ';'
   30          | • KW_DEF IDENTIFIER '(' ')' RETURN_ID type_spec ':' body KW_ENDDEF ';'
   40 decl_list_item_id: • IDENTIFIER
   41                  | • IDENTIFIER '[' INTEGER ']'
   42                  | • IDENTIFIER '[' ']'

    IDENTIFIER  shift, and go to state 1
    KW_DEF      shift, and go to state 32
    KW_CONST    shift, and go to state 3

    start_var_decl_list    go to state 33
    var_decl               go to state 6
    var_decl_list          go to state 7
    array_compact_integer  go to state 8
    start_const_decl_list  go to state 34
    const_decl             go to state 10
    func_decl              go to state 35
    decl_list_item_id      go to state 13


State 12

   28 func_decl_list: func_decl •

    $default  reduce using rule 28 (func_decl_list)


State 13

   20 var_decl_list: decl_list_item_id •

    $default  reduce using rule 20 (var_decl_list)


State 14

   21 array_compact_integer: IDENTIFIER SIMPLE_ARRAY • '[' expr KW_FOR expr ':' INTEGER ']' ':' type_spec ';'

    '['  shift, and go to state 36


State 15

   41 decl_list_item_id: IDENTIFIER '[' • INTEGER ']'
   42                  | IDENTIFIER '[' • ']'

    INTEGER  shift, and go to state 37
    ']'      shift, and go to state 38


State 16

   29 func_decl: KW_DEF IDENTIFIER • '(' func_var_decl_list ')' RETURN_ID type_spec ':' body KW_ENDDEF ';'
   30          | KW_DEF IDENTIFIER • '(' ')' RETURN_ID type_spec ':' body KW_ENDDEF ';'

    '('  shift, and go to state 39


State 17

    1 program: KW_DEF KW_MAIN • '(' ')' ':' body KW_ENDDEF ';'

    '('  shift, and go to state 40


State 18

   40 decl_list_item_id: IDENTIFIER •  [':', ',', '=']
   41                  | IDENTIFIER • '[' INTEGER ']'
   42                  | IDENTIFIER • '[' ']'

    '['  shift, and go to state 15

    $default  reduce using rule 40 (decl_list_item_id)


State 19

   24 const_decl: KW_CONST const_decl_list_item • ':' type_spec ';'

    ':'  shift, and go to state 41


State 20

   25 const_decl_list_item: decl_list_item_id • '=' expr
   26                     | decl_list_item_id • '=' STRING

    '='  shift, and go to state 42


State 21

    0 $accept: program $end •

    $default  accept


State 22

    2 program: start_var_decl_list KW_DEF • KW_MAIN '(' ')' ':' body KW_ENDDEF ';'
   29 func_decl: KW_DEF • IDENTIFIER '(' func_var_decl_list ')' RETURN_ID type_spec ':' body KW_ENDDEF ';'
   30          | KW_DEF • IDENTIFIER '(' ')' RETURN_ID type_spec ':' body KW_ENDDEF ';'

    IDENTIFIER  shift, and go to state 16
    KW_MAIN     shift, and go to state 43


State 23

   15 start_var_decl_list: start_var_decl_list var_decl •

    $default  reduce using rule 15 (start_var_decl_list)


State 24

    5 program: start_var_decl_list start_const_decl_list • KW_DEF KW_MAIN '(' ')' ':' body KW_ENDDEF ';'
    9        | start_var_decl_list start_const_decl_list • func_decl_list KW_DEF KW_MAIN '(' ')' ':' body KW_ENDDEF ';'
   22 start_const_decl_list: start_const_decl_list • const_decl
   24 const_decl: • KW_CONST const_decl_list_item ':' type_spec ';'
   27 func_decl_list: • func_decl_list func_decl
   28               | • func_decl
   29 func_decl: • KW_DEF IDENTIFIER '(' func_var_decl_list ')' RETURN_ID type_spec ':' body KW_ENDDEF ';'
   30          | • KW_DEF IDENTIFIER '(' ')' RETURN_ID type_spec ':' body KW_ENDDEF ';'

    KW_DEF    shift, and go to state 44
    KW_CONST  shift, and go to state 3

    const_decl      go to state 30
    func_decl_list  go to state 45
    func_decl       go to state 12


State 25

    6 program: start_var_decl_list func_decl_list • KW_DEF KW_MAIN '(' ')' ':' body KW_ENDDEF ';'
   10        | start_var_decl_list func_decl_list • start_const_decl_list KW_DEF KW_MAIN '(' ')' ':' body KW_ENDDEF ';'
   22 start_const_decl_list: • start_const_decl_list const_decl
   23                      | • const_decl
   24 const_decl: • KW_CONST const_decl_list_item ':' type_spec ';'
   27 func_decl_list: func_decl_list • func_decl
   29 func_decl: • KW_DEF IDENTIFIER '(' func_var_decl_list ')' RETURN_ID type_spec ':' body KW_ENDDEF ';'
   30          | • KW_DEF IDENTIFIER '(' ')' RETURN_ID type_spec ':' body KW_ENDDEF ';'

    KW_DEF    shift, and go to state 46
    KW_CONST  shift, and go to state 3

    start_const_decl_list  go to state 47
    const_decl             go to state 10
    func_decl              go to state 35


State 26

   17 var_decl: var_decl_list ':' • type_spec ';'
   90 type_spec: • KW_INTEGER
   91          | • KW_SCALAR
   92          | • KW_STR
   93          | • KW_BOOLEAN

    KW_INTEGER  shift, and go to state 48
    KW_SCALAR   shift, and go to state 49
    KW_STR      shift, and go to state 50
    KW_BOOLEAN  shift, and go to state 51

    type_spec  go to state 52


State 27

   19 var_decl_list: var_decl_list ',' • decl_list_item_id
   40 decl_list_item_id: • IDENTIFIER
   41                  | • IDENTIFIER '[' INTEGER ']'
   42                  | • IDENTIFIER '[' ']'

    IDENTIFIER  shift, and go to state 18

    decl_list_item_id  go to state 53


State 28

    3 program: start_const_decl_list KW_DEF • KW_MAIN '(' ')' ':' body KW_ENDDEF ';'
   29 func_decl: KW_DEF • IDENTIFIER '(' func_var_decl_list ')' RETURN_ID type_spec ':' body KW_ENDDEF ';'
   30          | KW_DEF • IDENTIFIER '(' ')' RETURN_ID type_spec ':' body KW_ENDDEF ';'

    IDENTIFIER  shift, and go to state 16
    KW_MAIN     shift, and go to state 54


State 29

    8 program: start_const_decl_list start_var_decl_list • KW_DEF KW_MAIN '(' ')' ':' body KW_ENDDEF ';'
   11        | start_const_decl_list start_var_decl_list • func_decl_list KW_DEF KW_MAIN '(' ')' ':' body KW_ENDDEF ';'
   15 start_var_decl_list: start_var_decl_list • var_decl
   17 var_decl: • var_decl_list ':' type_spec ';'
   18         | • array_compact_integer
   19 var_decl_list: • var_decl_list ',' decl_list_item_id
   20              | • decl_list_item_id
   21 array_compact_integer: • IDENTIFIER SIMPLE_ARRAY '[' expr KW_FOR expr ':' INTEGER ']' ':' type_spec ';'
   27 func_decl_list: • func_decl_list func_decl
   28               | • func_decl
   29 func_decl: • KW_DEF IDENTIFIER '(' func_var_decl_list ')' RETURN_ID type_spec ':' body KW_ENDDEF ';'
   30          | • KW_DEF IDENTIFIER '(' ')' RETURN_ID type_spec ':' body KW_ENDDEF ';'
   40 decl_list_item_id: • IDENTIFIER
   41                  | • IDENTIFIER '[' INTEGER ']'
   42                  | • IDENTIFIER '[' ']'

    IDENTIFIER  shift, and go to state 1
    KW_DEF      shift, and go to state 55

    var_decl               go to state 23
    var_decl_list          go to state 7
    array_compact_integer  go to state 8
    func_decl_list         go to state 56
    func_decl              go to state 12
    decl_list_item_id      go to state 13


State 30

   22 start_const_decl_list: start_const_decl_list const_decl •

    $default  reduce using rule 22 (start_const_decl_list)


State 31

    7 program: start_const_decl_list func_decl_list • KW_DEF KW_MAIN '(' ')' ':' body KW_ENDDEF ';'
   12        | start_const_decl_list func_decl_list • start_var_decl_list KW_DEF KW_MAIN '(' ')' ':' body KW_ENDDEF ';'
   15 start_var_decl_list: • start_var_decl_list var_decl
   16                    | • var_decl
   17 var_decl: • var_decl_list ':' type_spec ';'
   18         | • array_compact_integer
   19 var_decl_list: • var_decl_list ',' decl_list_item_id
   20              | • decl_list_item_id
   21 array_compact_integer: • IDENTIFIER SIMPLE_ARRAY '[' expr KW_FOR expr ':' INTEGER ']' ':' type_spec ';'
   27 func_decl_list: func_decl_list • func_decl
   29 func_decl: • KW_DEF IDENTIFIER '(' func_var_decl_list ')' RETURN_ID type_spec ':' body KW_ENDDEF ';'
   30          | • KW_DEF IDENTIFIER '(' ')' RETURN_ID type_spec ':' body KW_ENDDEF ';'
   40 decl_list_item_id: • IDENTIFIER
   41                  | • IDENTIFIER '[' INTEGER ']'
   42                  | • IDENTIFIER '[' ']'

    IDENTIFIER  shift, and go to state 1
    KW_DEF      shift, and go to state 57

    start_var_decl_list    go to state 58
    var_decl               go to state 6
    var_decl_list          go to state 7
    array_compact_integer  go to state 8
    func_decl              go to state 35
    decl_list_item_id      go to state 13


State 32

    4 program: func_decl_list KW_DEF • KW_MAIN '(' ')' ':' body KW_ENDDEF ';'
   29 func_decl: KW_DEF • IDENTIFIER '(' func_var_decl_list ')' RETURN_ID type_spec ':' body KW_ENDDEF ';'
   30          | KW_DEF • IDENTIFIER '(' ')' RETURN_ID type_spec ':' body KW_ENDDEF ';'

    IDENTIFIER  shift, and go to state 16
    KW_MAIN     shift, and go to state 59


State 33

   14 program: func_decl_list start_var_decl_list • start_const_decl_list KW_DEF KW_MAIN '(' ')' ':' body KW_ENDDEF ';'
   15 start_var_decl_list: start_var_decl_list • var_decl
   17 var_decl: • var_decl_list ':' type_spec ';'
   18         | • array_compact_integer
   19 var_decl_list: • var_decl_list ',' decl_list_item_id
   20              | • decl_list_item_id
   21 array_compact_integer: • IDENTIFIER SIMPLE_ARRAY '[' expr KW_FOR expr ':' INTEGER ']' ':' type_spec ';'
   22 start_const_decl_list: • start_const_decl_list const_decl
   23                      | • const_decl
   24 const_decl: • KW_CONST const_decl_list_item ':' type_spec ';'
   40 decl_list_item_id: • IDENTIFIER
   41                  | • IDENTIFIER '[' INTEGER ']'
   42                  | • IDENTIFIER '[' ']'

    IDENTIFIER  shift, and go to state 1
    KW_CONST    shift, and go to state 3

    var_decl               go to state 23
    var_decl_list          go to state 7
    array_compact_integer  go to state 8
    start_const_decl_list  go to state 60
    const_decl             go to state 10
    decl_list_item_id      go to state 13


State 34

   13 program: func_decl_list start_const_decl_list • start_var_decl_list KW_DEF KW_MAIN '(' ')' ':' body KW_ENDDEF ';'
   15 start_var_decl_list: • start_var_decl_list var_decl
   16                    | • var_decl
   17 var_decl: • var_decl_list ':' type_spec ';'
   18         | • array_compact_integer
   19 var_decl_list: • var_decl_list ',' decl_list_item_id
   20              | • decl_list_item_id
   21 array_compact_integer: • IDENTIFIER SIMPLE_ARRAY '[' expr KW_FOR expr ':' INTEGER ']' ':' type_spec ';'
   22 start_const_decl_list: start_const_decl_list • const_decl
   24 const_decl: • KW_CONST const_decl_list_item ':' type_spec ';'
   40 decl_list_item_id: • IDENTIFIER
   41                  | • IDENTIFIER '[' INTEGER ']'
   42                  | • IDENTIFIER '[' ']'

    IDENTIFIER  shift, and go to state 1
    KW_CONST    shift, and go to state 3

    start_var_decl_list    go to state 61
    var_decl               go to state 6
    var_decl_list          go to state 7
    array_compact_integer  go to state 8
    const_decl             go to state 30
    decl_list_item_id      go to state 13


State 35

   27 func_decl_list: func_decl_list func_decl •

    $default  reduce using rule 27 (func_decl_list)


State 36

   21 array_compact_integer: IDENTIFIER SIMPLE_ARRAY '[' • expr KW_FOR expr ':' INTEGER ']' ':' type_spec ';'
   60 expr: • INTEGER
   61     | • SCALAR
   62     | • KW_TRUE
   63     | • KW_FALSE
   64     | • IDENTIFIER
   65     | • IDENTIFIER '[' expr ']'
   66     | • IDENTIFIER '(' func_call ')'
   67     | • IDENTIFIER '(' ')'
   68     | • '-' expr
   69     | • '(' expr ')'
   70     | • expr '+' expr
   71     | • expr '-' expr
   72     | • expr '*' expr
   73     | • expr '/' expr
   74     | • expr '%' expr
   75     | • expr ASSIGN_PLUSEQ expr
   76     | • expr ASSIGN_MINUSEQ expr
   77     | • expr ASSIGN_MULEQ expr
   78     | • expr ASSIGN_DIVEQ expr
   79     | • expr ASSIGN_MODEQ expr
   80     | • expr POW expr
   81     | • OP_NOT expr
   82     | • expr OP_AND expr
   83     | • expr OP_OR expr
   84     | • expr NE expr
   85     | • expr EQUALS expr
   86     | • expr '<' expr
   87     | • expr LE expr
   88     | • expr '>' expr
   89     | • expr GE expr

    IDENTIFIER  shift, and go to state 62
    INTEGER     shift, and go to state 63
    SCALAR      shift, and go to state 64
    KW_TRUE     shift, and go to state 65
    KW_FALSE    shift, and go to state 66
    OP_NOT      shift, and go to state 67
    '-'         shift, and go to state 68
    '('         shift, and go to state 69

    expr  go to state 70


State 37

   41 decl_list_item_id: IDENTIFIER '[' INTEGER • ']'

    ']'  shift, and go to state 71


State 38

   42 decl_list_item_id: IDENTIFIER '[' ']' •

    $default  reduce using rule 42 (decl_list_item_id)


State 39

   29 func_decl: KW_DEF IDENTIFIER '(' • func_var_decl_list ')' RETURN_ID type_spec ':' body KW_ENDDEF ';'
   30          | KW_DEF IDENTIFIER '(' • ')' RETURN_ID type_spec ':' body KW_ENDDEF ';'
   31 func_var_decl_list: • func_var_decl_list ',' func_var_decl
   32                   | • func_var_decl
   33 func_var_decl: • decl_list_item_id ':' type_spec
   40 decl_list_item_id: • IDENTIFIER
   41                  | • IDENTIFIER '[' INTEGER ']'
   42                  | • IDENTIFIER '[' ']'

    IDENTIFIER  shift, and go to state 18
    ')'         shift, and go to state 72

    func_var_decl_list  go to state 73
    func_var_decl       go to state 74
    decl_list_item_id   go to state 75


State 40

    1 program: KW_DEF KW_MAIN '(' • ')' ':' body KW_ENDDEF ';'

    ')'  shift, and go to state 76


State 41

   24 const_decl: KW_CONST const_decl_list_item ':' • type_spec ';'
   90 type_spec: • KW_INTEGER
   91          | • KW_SCALAR
   92          | • KW_STR
   93          | • KW_BOOLEAN

    KW_INTEGER  shift, and go to state 48
    KW_SCALAR   shift, and go to state 49
    KW_STR      shift, and go to state 50
    KW_BOOLEAN  shift, and go to state 51

    type_spec  go to state 77


State 42

   25 const_decl_list_item: decl_list_item_id '=' • expr
   26                     | decl_list_item_id '=' • STRING
   60 expr: • INTEGER
   61     | • SCALAR
   62     | • KW_TRUE
   63     | • KW_FALSE
   64     | • IDENTIFIER
   65     | • IDENTIFIER '[' expr ']'
   66     | • IDENTIFIER '(' func_call ')'
   67     | • IDENTIFIER '(' ')'
   68     | • '-' expr
   69     | • '(' expr ')'
   70     | • expr '+' expr
   71     | • expr '-' expr
   72     | • expr '*' expr
   73     | • expr '/' expr
   74     | • expr '%' expr
   75     | • expr ASSIGN_PLUSEQ expr
   76     | • expr ASSIGN_MINUSEQ expr
   77     | • expr ASSIGN_MULEQ expr
   78     | • expr ASSIGN_DIVEQ expr
   79     | • expr ASSIGN_MODEQ expr
   80     | • expr POW expr
   81     | • OP_NOT expr
   82     | • expr OP_AND expr
   83     | • expr OP_OR expr
   84     | • expr NE expr
   85     | • expr EQUALS expr
   86     | • expr '<' expr
   87     | • expr LE expr
   88     | • expr '>' expr
   89     | • expr GE expr

    IDENTIFIER  shift, and go to state 62
    INTEGER     shift, and go to state 63
    SCALAR      shift, and go to state 64
    STRING      shift, and go to state 78
    KW_TRUE     shift, and go to state 65
    KW_FALSE    shift, and go to state 66
    OP_NOT      shift, and go to state 67
    '-'         shift, and go to state 68
    '('         shift, and go to state 69

    expr  go to state 79


State 43

    2 program: start_var_decl_list KW_DEF KW_MAIN • '(' ')' ':' body KW_ENDDEF ';'

    '('  shift, and go to state 80


State 44

    5 program: start_var_decl_list start_const_decl_list KW_DEF • KW_MAIN '(' ')' ':' body KW_ENDDEF ';'
   29 func_decl: KW_DEF • IDENTIFIER '(' func_var_decl_list ')' RETURN_ID type_spec ':' body KW_ENDDEF ';'
   30          | KW_DEF • IDENTIFIER '(' ')' RETURN_ID type_spec ':' body KW_ENDDEF ';'

    IDENTIFIER  shift, and go to state 16
    KW_MAIN     shift, and go to state 81


State 45

    9 program: start_var_decl_list start_const_decl_list func_decl_list • KW_DEF KW_MAIN '(' ')' ':' body KW_ENDDEF ';'
   27 func_decl_list: func_decl_list • func_decl
   29 func_decl: • KW_DEF IDENTIFIER '(' func_var_decl_list ')' RETURN_ID type_spec ':' body KW_ENDDEF ';'
   30          | • KW_DEF IDENTIFIER '(' ')' RETURN_ID type_spec ':' body KW_ENDDEF ';'

    KW_DEF  shift, and go to state 82

    func_decl  go to state 35


State 46

    6 program: start_var_decl_list func_decl_list KW_DEF • KW_MAIN '(' ')' ':' body KW_ENDDEF ';'
   29 func_decl: KW_DEF • IDENTIFIER '(' func_var_decl_list ')' RETURN_ID type_spec ':' body KW_ENDDEF ';'
   30          | KW_DEF • IDENTIFIER '(' ')' RETURN_ID type_spec ':' body KW_ENDDEF ';'

    IDENTIFIER  shift, and go to state 16
    KW_MAIN     shift, and go to state 83


State 47

   10 program: start_var_decl_list func_decl_list start_const_decl_list • KW_DEF KW_MAIN '(' ')' ':' body KW_ENDDEF ';'
   22 start_const_decl_list: start_const_decl_list • const_decl
   24 const_decl: • KW_CONST const_decl_list_item ':' type_spec ';'

    KW_DEF    shift, and go to state 84
    KW_CONST  shift, and go to state 3

    const_decl  go to state 30


State 48

   90 type_spec: KW_INTEGER •

    $default  reduce using rule 90 (type_spec)


State 49

   91 type_spec: KW_SCALAR •

    $default  reduce using rule 91 (type_spec)


State 50

   92 type_spec: KW_STR •

    $default  reduce using rule 92 (type_spec)


State 51

   93 type_spec: KW_BOOLEAN •

    $default  reduce using rule 93 (type_spec)


State 52

   17 var_decl: var_decl_list ':' type_spec • ';'

    ';'  shift, and go to state 85


State 53

   19 var_decl_list: var_decl_list ',' decl_list_item_id •

    $default  reduce using rule 19 (var_decl_list)


State 54

    3 program: start_const_decl_list KW_DEF KW_MAIN • '(' ')' ':' body KW_ENDDEF ';'

    '('  shift, and go to state 86


State 55

    8 program: start_const_decl_list start_var_decl_list KW_DEF • KW_MAIN '(' ')' ':' body KW_ENDDEF ';'
   29 func_decl: KW_DEF • IDENTIFIER '(' func_var_decl_list ')' RETURN_ID type_spec ':' body KW_ENDDEF ';'
   30          | KW_DEF • IDENTIFIER '(' ')' RETURN_ID type_spec ':' body KW_ENDDEF ';'

    IDENTIFIER  shift, and go to state 16
    KW_MAIN     shift, and go to state 87


State 56

   11 program: start_const_decl_list start_var_decl_list func_decl_list • KW_DEF KW_MAIN '(' ')' ':' body KW_ENDDEF ';'
   27 func_decl_list: func_decl_list • func_decl
   29 func_decl: • KW_DEF IDENTIFIER '(' func_var_decl_list ')' RETURN_ID type_spec ':' body KW_ENDDEF ';'
   30          | • KW_DEF IDENTIFIER '(' ')' RETURN_ID type_spec ':' body KW_ENDDEF ';'

    KW_DEF  shift, and go to state 88

    func_decl  go to state 35


State 57

    7 program: start_const_decl_list func_decl_list KW_DEF • KW_MAIN '(' ')' ':' body KW_ENDDEF ';'
   29 func_decl: KW_DEF • IDENTIFIER '(' func_var_decl_list ')' RETURN_ID type_spec ':' body KW_ENDDEF ';'
   30          | KW_DEF • IDENTIFIER '(' ')' RETURN_ID type_spec ':' body KW_ENDDEF ';'

    IDENTIFIER  shift, and go to state 16
    KW_MAIN     shift, and go to state 89


State 58

   12 program: start_const_decl_list func_decl_list start_var_decl_list • KW_DEF KW_MAIN '(' ')' ':' body KW_ENDDEF ';'
   15 start_var_decl_list: start_var_decl_list • var_decl
   17 var_decl: • var_decl_list ':' type_spec ';'
   18         | • array_compact_integer
   19 var_decl_list: • var_decl_list ',' decl_list_item_id
   20              | • decl_list_item_id
   21 array_compact_integer: • IDENTIFIER SIMPLE_ARRAY '[' expr KW_FOR expr ':' INTEGER ']' ':' type_spec ';'
   40 decl_list_item_id: • IDENTIFIER
   41                  | • IDENTIFIER '[' INTEGER ']'
   42                  | • IDENTIFIER '[' ']'

    IDENTIFIER  shift, and go to state 1
    KW_DEF      shift, and go to state 90

    var_decl               go to state 23
    var_decl_list          go to state 7
    array_compact_integer  go to state 8
    decl_list_item_id      go to state 13


State 59

    4 program: func_decl_list KW_DEF KW_MAIN • '(' ')' ':' body KW_ENDDEF ';'

    '('  shift, and go to state 91


State 60

   14 program: func_decl_list start_var_decl_list start_const_decl_list • KW_DEF KW_MAIN '(' ')' ':' body KW_ENDDEF ';'
   22 start_const_decl_list: start_const_decl_list • const_decl
   24 const_decl: • KW_CONST const_decl_list_item ':' type_spec ';'

    KW_DEF    shift, and go to state 92
    KW_CONST  shift, and go to state 3

    const_decl  go to state 30


State 61

   13 program: func_decl_list start_const_decl_list start_var_decl_list • KW_DEF KW_MAIN '(' ')' ':' body KW_ENDDEF ';'
   15 start_var_decl_list: start_var_decl_list • var_decl
   17 var_decl: • var_decl_list ':' type_spec ';'
   18         | • array_compact_integer
   19 var_decl_list: • var_decl_list ',' decl_list_item_id
   20              | • decl_list_item_id
   21 array_compact_integer: • IDENTIFIER SIMPLE_ARRAY '[' expr KW_FOR expr ':' INTEGER ']' ':' type_spec ';'
   40 decl_list_item_id: • IDENTIFIER
   41                  | • IDENTIFIER '[' INTEGER ']'
   42                  | • IDENTIFIER '[' ']'

    IDENTIFIER  shift, and go to state 1
    KW_DEF      shift, and go to state 93

    var_decl               go to state 23
    var_decl_list          go to state 7
    array_compact_integer  go to state 8
    decl_list_item_id      go to state 13


State 62

   64 expr: IDENTIFIER •  [KW_FOR, POW, EQUALS, NE, LE, GE, OP_AND, OP_OR, ASSIGN_PLUSEQ, ASSIGN_MINUSEQ, ASSIGN_MULEQ, ASSIGN_DIVEQ, ASSIGN_MODEQ, '+', '-', '*', '/', '%', '<', '>', ')', ':', ';', ',', ']']
   65     | IDENTIFIER • '[' expr ']'
   66     | IDENTIFIER • '(' func_call ')'
   67     | IDENTIFIER • '(' ')'

    '('  shift, and go to state 94
    '['  shift, and go to state 95

    $default  reduce using rule 64 (expr)


State 63

   60 expr: INTEGER •

    $default  reduce using rule 60 (expr)


State 64

   61 expr: SCALAR •

    $default  reduce using rule 61 (expr)


State 65

   62 expr: KW_TRUE •

    $default  reduce using rule 62 (expr)


State 66

   63 expr: KW_FALSE •

    $default  reduce using rule 63 (expr)


State 67

   60 expr: • INTEGER
   61     | • SCALAR
   62     | • KW_TRUE
   63     | • KW_FALSE
   64     | • IDENTIFIER
   65     | • IDENTIFIER '[' expr ']'
   66     | • IDENTIFIER '(' func_call ')'
   67     | • IDENTIFIER '(' ')'
   68     | • '-' expr
   69     | • '(' expr ')'
   70     | • expr '+' expr
   71     | • expr '-' expr
   72     | • expr '*' expr
   73     | • expr '/' expr
   74     | • expr '%' expr
   75     | • expr ASSIGN_PLUSEQ expr
   76     | • expr ASSIGN_MINUSEQ expr
   77     | • expr ASSIGN_MULEQ expr
   78     | • expr ASSIGN_DIVEQ expr
   79     | • expr ASSIGN_MODEQ expr
   80     | • expr POW expr
   81     | • OP_NOT expr
   81     | OP_NOT • expr
   82     | • expr OP_AND expr
   83     | • expr OP_OR expr
   84     | • expr NE expr
   85     | • expr EQUALS expr
   86     | • expr '<' expr
   87     | • expr LE expr
   88     | • expr '>' expr
   89     | • expr GE expr

    IDENTIFIER  shift, and go to state 62
    INTEGER     shift, and go to state 63
    SCALAR      shift, and go to state 64
    KW_TRUE     shift, and go to state 65
    KW_FALSE    shift, and go to state 66
    OP_NOT      shift, and go to state 67
    '-'         shift, and go to state 68
    '('         shift, and go to state 69

    expr  go to state 96


State 68

   60 expr: • INTEGER
   61     | • SCALAR
   62     | • KW_TRUE
   63     | • KW_FALSE
   64     | • IDENTIFIER
   65     | • IDENTIFIER '[' expr ']'
   66     | • IDENTIFIER '(' func_call ')'
   67     | • IDENTIFIER '(' ')'
   68     | • '-' expr
   68     | '-' • expr
   69     | • '(' expr ')'
   70     | • expr '+' expr
   71     | • expr '-' expr
   72     | • expr '*' expr
   73     | • expr '/' expr
   74     | • expr '%' expr
   75     | • expr ASSIGN_PLUSEQ expr
   76     | • expr ASSIGN_MINUSEQ expr
   77     | • expr ASSIGN_MULEQ expr
   78     | • expr ASSIGN_DIVEQ expr
   79     | • expr ASSIGN_MODEQ expr
   80     | • expr POW expr
   81     | • OP_NOT expr
   82     | • expr OP_AND expr
   83     | • expr OP_OR expr
   84     | • expr NE expr
   85     | • expr EQUALS expr
   86     | • expr '<' expr
   87     | • expr LE expr
   88     | • expr '>' expr
   89     | • expr GE expr

    IDENTIFIER  shift, and go to state 62
    INTEGER     shift, and go to state 63
    SCALAR      shift, and go to state 64
    KW_TRUE     shift, and go to state 65
    KW_FALSE    shift, and go to state 66
    OP_NOT      shift, and go to state 67
    '-'         shift, and go to state 68
    '('         shift, and go to state 69

    expr  go to state 97


State 69

   60 expr: • INTEGER
   61     | • SCALAR
   62     | • KW_TRUE
   63     | • KW_FALSE
   64     | • IDENTIFIER
   65     | • IDENTIFIER '[' expr ']'
   66     | • IDENTIFIER '(' func_call ')'
   67     | • IDENTIFIER '(' ')'
   68     | • '-' expr
   69     | • '(' expr ')'
   69     | '(' • expr ')'
   70     | • expr '+' expr
   71     | • expr '-' expr
   72     | • expr '*' expr
   73     | • expr '/' expr
   74     | • expr '%' expr
   75     | • expr ASSIGN_PLUSEQ expr
   76     | • expr ASSIGN_MINUSEQ expr
   77     | • expr ASSIGN_MULEQ expr
   78     | • expr ASSIGN_DIVEQ expr
   79     | • expr ASSIGN_MODEQ expr
   80     | • expr POW expr
   81     | • OP_NOT expr
   82     | • expr OP_AND expr
   83     | • expr OP_OR expr
   84     | • expr NE expr
   85     | • expr EQUALS expr
   86     | • expr '<' expr
   87     | • expr LE expr
   88     | • expr '>' expr
   89     | • expr GE expr

    IDENTIFIER  shift, and go to state 62
    INTEGER     shift, and go to state 63
    SCALAR      shift, and go to state 64
    KW_TRUE     shift, and go to state 65
    KW_FALSE    shift, and go to state 66
    OP_NOT      shift, and go to state 67
    '-'         shift, and go to state 68
    '('         shift, and go to state 69

    expr  go to state 98


State 70

   21 array_compact_integer: IDENTIFIER SIMPLE_ARRAY '[' expr • KW_FOR expr ':' INTEGER ']' ':' type_spec ';'
   70 expr: expr • '+' expr
   71     | expr • '-' expr
   72     | expr • '*' expr
   73     | expr • '/' expr
   74     | expr • '%' expr
   75     | expr • ASSIGN_PLUSEQ expr
   76     | expr • ASSIGN_MINUSEQ expr
   77     | expr • ASSIGN_MULEQ expr
   78     | expr • ASSIGN_DIVEQ expr
   79     | expr • ASSIGN_MODEQ expr
   80     | expr • POW expr
   82     | expr • OP_AND expr
   83     | expr • OP_OR expr
   84     | expr • NE expr
   85     | expr • EQUALS expr
   86     | expr • '<' expr
   87     | expr • LE expr
   88     | expr • '>' expr
   89     | expr • GE expr

    KW_FOR          shift, and go to state 99
    POW             shift, and go to state 100
    EQUALS          shift, and go to state 101
    NE              shift, and go to state 102
    LE              shift, and go to state 103
    GE              shift, and go to state 104
    OP_AND          shift, and go to state 105
    OP_OR           shift, and go to state 106
    ASSIGN_PLUSEQ   shift, and go to state 107
    ASSIGN_MINUSEQ  shift, and go to state 108
    ASSIGN_MULEQ    shift, and go to state 109
    ASSIGN_DIVEQ    shift, and go to state 110
    ASSIGN_MODEQ    shift, and go to state 111
    '+'             shift, and go to state 112
    '-'             shift, and go to state 113
    '*'             shift, and go to state 114
    '/'             shift, and go to state 115
    '%'             shift, and go to state 116
    '<'             shift, and go to state 117
    '>'             shift, and go to state 118


State 71

   41 decl_list_item_id: IDENTIFIER '[' INTEGER ']' •

    $default  reduce using rule 41 (decl_list_item_id)


State 72

   30 func_decl: KW_DEF IDENTIFIER '(' ')' • RETURN_ID type_spec ':' body KW_ENDDEF ';'

    RETURN_ID  shift, and go to state 119


State 73

   29 func_decl: KW_DEF IDENTIFIER '(' func_var_decl_list • ')' RETURN_ID type_spec ':' body KW_ENDDEF ';'
   31 func_var_decl_list: func_var_decl_list • ',' func_var_decl

    ')'  shift, and go to state 120
    ','  shift, and go to state 121


State 74

   32 func_var_decl_list: func_var_decl •

    $default  reduce using rule 32 (func_var_decl_list)


State 75

   33 func_var_decl: decl_list_item_id • ':' type_spec

    ':'  shift, and go to state 122


State 76

    1 program: KW_DEF KW_MAIN '(' ')' • ':' body KW_ENDDEF ';'

    ':'  shift, and go to state 123


State 77

   24 const_decl: KW_CONST const_decl_list_item ':' type_spec • ';'

    ';'  shift, and go to state 124


State 78

   26 const_decl_list_item: decl_list_item_id '=' STRING •

    $default  reduce using rule 26 (const_decl_list_item)


State 79

   25 const_decl_list_item: decl_list_item_id '=' expr •  [':']
   70 expr: expr • '+' expr
   71     | expr • '-' expr
   72     | expr • '*' expr
   73     | expr • '/' expr
   74     | expr • '%' expr
   75     | expr • ASSIGN_PLUSEQ expr
   76     | expr • ASSIGN_MINUSEQ expr
   77     | expr • ASSIGN_MULEQ expr
   78     | expr • ASSIGN_DIVEQ expr
   79     | expr • ASSIGN_MODEQ expr
   80     | expr • POW expr
   82     | expr • OP_AND expr
   83     | expr • OP_OR expr
   84     | expr • NE expr
   85     | expr • EQUALS expr
   86     | expr • '<' expr
   87     | expr • LE expr
   88     | expr • '>' expr
   89     | expr • GE expr

    POW             shift, and go to state 100
    EQUALS          shift, and go to state 101
    NE              shift, and go to state 102
    LE              shift, and go to state 103
    GE              shift, and go to state 104
    OP_AND          shift, and go to state 105
    OP_OR           shift, and go to state 106
    ASSIGN_PLUSEQ   shift, and go to state 107
    ASSIGN_MINUSEQ  shift, and go to state 108
    ASSIGN_MULEQ    shift, and go to state 109
    ASSIGN_DIVEQ    shift, and go to state 110
    ASSIGN_MODEQ    shift, and go to state 111
    '+'             shift, and go to state 112
    '-'             shift, and go to state 113
    '*'             shift, and go to state 114
    '/'             shift, and go to state 115
    '%'             shift, and go to state 116
    '<'             shift, and go to state 117
    '>'             shift, and go to state 118

    $default  reduce using rule 25 (const_decl_list_item)


State 80

    2 program: start_var_decl_list KW_DEF KW_MAIN '(' • ')' ':' body KW_ENDDEF ';'

    ')'  shift, and go to state 125


State 81

    5 program: start_var_decl_list start_const_decl_list KW_DEF KW_MAIN • '(' ')' ':' body KW_ENDDEF ';'

    '('  shift, and go to state 126


State 82

    9 program: start_var_decl_list start_const_decl_list func_decl_list KW_DEF • KW_MAIN '(' ')' ':' body KW_ENDDEF ';'
   29 func_decl: KW_DEF • IDENTIFIER '(' func_var_decl_list ')' RETURN_ID type_spec ':' body KW_ENDDEF ';'
   30          | KW_DEF • IDENTIFIER '(' ')' RETURN_ID type_spec ':' body KW_ENDDEF ';'

    IDENTIFIER  shift, and go to state 16
    KW_MAIN     shift, and go to state 127


State 83

    6 program: start_var_decl_list func_decl_list KW_DEF KW_MAIN • '(' ')' ':' body KW_ENDDEF ';'

    '('  shift, and go to state 128


State 84

   10 program: start_var_decl_list func_decl_list start_const_decl_list KW_DEF • KW_MAIN '(' ')' ':' body KW_ENDDEF ';'

    KW_MAIN  shift, and go to state 129


State 85

   17 var_decl: var_decl_list ':' type_spec ';' •

    $default  reduce using rule 17 (var_decl)


State 86

    3 program: start_const_decl_list KW_DEF KW_MAIN '(' • ')' ':' body KW_ENDDEF ';'

    ')'  shift, and go to state 130


State 87

    8 program: start_const_decl_list start_var_decl_list KW_DEF KW_MAIN • '(' ')' ':' body KW_ENDDEF ';'

    '('  shift, and go to state 131


State 88

   11 program: start_const_decl_list start_var_decl_list func_decl_list KW_DEF • KW_MAIN '(' ')' ':' body KW_ENDDEF ';'
   29 func_decl: KW_DEF • IDENTIFIER '(' func_var_decl_list ')' RETURN_ID type_spec ':' body KW_ENDDEF ';'
   30          | KW_DEF • IDENTIFIER '(' ')' RETURN_ID type_spec ':' body KW_ENDDEF ';'

    IDENTIFIER  shift, and go to state 16
    KW_MAIN     shift, and go to state 132


State 89

    7 program: start_const_decl_list func_decl_list KW_DEF KW_MAIN • '(' ')' ':' body KW_ENDDEF ';'

    '('  shift, and go to state 133


State 90

   12 program: start_const_decl_list func_decl_list start_var_decl_list KW_DEF • KW_MAIN '(' ')' ':' body KW_ENDDEF ';'

    KW_MAIN  shift, and go to state 134


State 91

    4 program: func_decl_list KW_DEF KW_MAIN '(' • ')' ':' body KW_ENDDEF ';'

    ')'  shift, and go to state 135


State 92

   14 program: func_decl_list start_var_decl_list start_const_decl_list KW_DEF • KW_MAIN '(' ')' ':' body KW_ENDDEF ';'

    KW_MAIN  shift, and go to state 136


State 93

   13 program: func_decl_list start_const_decl_list start_var_decl_list KW_DEF • KW_MAIN '(' ')' ':' body KW_ENDDEF ';'

    KW_MAIN  shift, and go to state 137


State 94

   60 expr: • INTEGER
   61     | • SCALAR
   62     | • KW_TRUE
   63     | • KW_FALSE
   64     | • IDENTIFIER
   65     | • IDENTIFIER '[' expr ']'
   66     | • IDENTIFIER '(' func_call ')'
   66     | IDENTIFIER '(' • func_call ')'
   67     | • IDENTIFIER '(' ')'
   67     | IDENTIFIER '(' • ')'
   68     | • '-' expr
   69     | • '(' expr ')'
   70     | • expr '+' expr
   71     | • expr '-' expr
   72     | • expr '*' expr
   73     | • expr '/' expr
   74     | • expr '%' expr
   75     | • expr ASSIGN_PLUSEQ expr
   76     | • expr ASSIGN_MINUSEQ expr
   77     | • expr ASSIGN_MULEQ expr
   78     | • expr ASSIGN_DIVEQ expr
   79     | • expr ASSIGN_MODEQ expr
   80     | • expr POW expr
   81     | • OP_NOT expr
   82     | • expr OP_AND expr
   83     | • expr OP_OR expr
   84     | • expr NE expr
   85     | • expr EQUALS expr
   86     | • expr '<' expr
   87     | • expr LE expr
   88     | • expr '>' expr
   89     | • expr GE expr
   94 func_call: • func_call ',' expr
   95          | • expr

    IDENTIFIER  shift, and go to state 62
    INTEGER     shift, and go to state 63
    SCALAR      shift, and go to state 64
    KW_TRUE     shift, and go to state 65
    KW_FALSE    shift, and go to state 66
    OP_NOT      shift, and go to state 67
    '-'         shift, and go to state 68
    '('         shift, and go to state 69
    ')'         shift, and go to state 138

    expr       go to state 139
    func_call  go to state 140


State 95

   60 expr: • INTEGER
   61     | • SCALAR
   62     | • KW_TRUE
   63     | • KW_FALSE
   64     | • IDENTIFIER
   65     | • IDENTIFIER '[' expr ']'
   65     | IDENTIFIER '[' • expr ']'
   66     | • IDENTIFIER '(' func_call ')'
   67     | • IDENTIFIER '(' ')'
   68     | • '-' expr
   69     | • '(' expr ')'
   70     | • expr '+' expr
   71     | • expr '-' expr
   72     | • expr '*' expr
   73     | • expr '/' expr
   74     | • expr '%' expr
   75     | • expr ASSIGN_PLUSEQ expr
   76     | • expr ASSIGN_MINUSEQ expr
   77     | • expr ASSIGN_MULEQ expr
   78     | • expr ASSIGN_DIVEQ expr
   79     | • expr ASSIGN_MODEQ expr
   80     | • expr POW expr
   81     | • OP_NOT expr
   82     | • expr OP_AND expr
   83     | • expr OP_OR expr
   84     | • expr NE expr
   85     | • expr EQUALS expr
   86     | • expr '<' expr
   87     | • expr LE expr
   88     | • expr '>' expr
   89     | • expr GE expr

    IDENTIFIER  shift, and go to state 62
    INTEGER     shift, and go to state 63
    SCALAR      shift, and go to state 64
    KW_TRUE     shift, and go to state 65
    KW_FALSE    shift, and go to state 66
    OP_NOT      shift, and go to state 67
    '-'         shift, and go to state 68
    '('         shift, and go to state 69

    expr  go to state 141


State 96

   70 expr: expr • '+' expr
   71     | expr • '-' expr
   72     | expr • '*' expr
   73     | expr • '/' expr
   74     | expr • '%' expr
   75     | expr • ASSIGN_PLUSEQ expr
   76     | expr • ASSIGN_MINUSEQ expr
   77     | expr • ASSIGN_MULEQ expr
   78     | expr • ASSIGN_DIVEQ expr
   79     | expr • ASSIGN_MODEQ expr
   80     | expr • POW expr
   81     | OP_NOT expr •  [KW_FOR, POW, EQUALS, NE, LE, GE, OP_AND, OP_OR, '+', '-', '*', '/', '%', '<', '>', ')', ':', ';', ',', ']']
   82     | expr • OP_AND expr
   83     | expr • OP_OR expr
   84     | expr • NE expr
   85     | expr • EQUALS expr
   86     | expr • '<' expr
   87     | expr • LE expr
   88     | expr • '>' expr
   89     | expr • GE expr

    ASSIGN_PLUSEQ   shift, and go to state 107
    ASSIGN_MINUSEQ  shift, and go to state 108
    ASSIGN_MULEQ    shift, and go to state 109
    ASSIGN_DIVEQ    shift, and go to state 110
    ASSIGN_MODEQ    shift, and go to state 111

    $default  reduce using rule 81 (expr)

    Conflict between rule 81 and token POW resolved as reduce (POW < OP_NOT).
    Conflict between rule 81 and token EQUALS resolved as reduce (EQUALS < OP_NOT).
    Conflict between rule 81 and token NE resolved as reduce (NE < OP_NOT).
    Conflict between rule 81 and token LE resolved as reduce (LE < OP_NOT).
    Conflict between rule 81 and token GE resolved as reduce (GE < OP_NOT).
    Conflict between rule 81 and token OP_AND resolved as reduce (OP_AND < OP_NOT).
    Conflict between rule 81 and token OP_OR resolved as reduce (OP_OR < OP_NOT).
    Conflict between rule 81 and token ASSIGN_PLUSEQ resolved as shift (OP_NOT < ASSIGN_PLUSEQ).
    Conflict between rule 81 and token ASSIGN_MINUSEQ resolved as shift (OP_NOT < ASSIGN_MINUSEQ).
    Conflict between rule 81 and token ASSIGN_MULEQ resolved as shift (OP_NOT < ASSIGN_MULEQ).
    Conflict between rule 81 and token ASSIGN_DIVEQ resolved as shift (OP_NOT < ASSIGN_DIVEQ).
    Conflict between rule 81 and token ASSIGN_MODEQ resolved as shift (OP_NOT < ASSIGN_MODEQ).
    Conflict between rule 81 and token '+' resolved as reduce ('+' < OP_NOT).
    Conflict between rule 81 and token '-' resolved as reduce ('-' < OP_NOT).
    Conflict between rule 81 and token '*' resolved as reduce ('*' < OP_NOT).
    Conflict between rule 81 and token '/' resolved as reduce ('/' < OP_NOT).
    Conflict between rule 81 and token '%' resolved as reduce ('%' < OP_NOT).
    Conflict between rule 81 and token '<' resolved as reduce ('<' < OP_NOT).
    Conflict between rule 81 and token '>' resolved as reduce ('>' < OP_NOT).


State 97

   68 expr: '-' expr •  [KW_FOR, '+', '-', ')', ':', ';', ',', ']']
   70     | expr • '+' expr
   71     | expr • '-' expr
   72     | expr • '*' expr
   73     | expr • '/' expr
   74     | expr • '%' expr
   75     | expr • ASSIGN_PLUSEQ expr
   76     | expr • ASSIGN_MINUSEQ expr
   77     | expr • ASSIGN_MULEQ expr
   78     | expr • ASSIGN_DIVEQ expr
   79     | expr • ASSIGN_MODEQ expr
   80     | expr • POW expr
   82     | expr • OP_AND expr
   83     | expr • OP_OR expr
   84     | expr • NE expr
   85     | expr • EQUALS expr
   86     | expr • '<' expr
   87     | expr • LE expr
   88     | expr • '>' expr
   89     | expr • GE expr

    POW             shift, and go to state 100
    EQUALS          shift, and go to state 101
    NE              shift, and go to state 102
    LE              shift, and go to state 103
    GE              shift, and go to state 104
    OP_AND          shift, and go to state 105
    OP_OR           shift, and go to state 106
    ASSIGN_PLUSEQ   shift, and go to state 107
    ASSIGN_MINUSEQ  shift, and go to state 108
    ASSIGN_MULEQ    shift, and go to state 109
    ASSIGN_DIVEQ    shift, and go to state 110
    ASSIGN_MODEQ    shift, and go to state 111
    '*'             shift, and go to state 114
    '/'             shift, and go to state 115
    '%'             shift, and go to state 116
    '<'             shift, and go to state 117
    '>'             shift, and go to state 118

    $default  reduce using rule 68 (expr)

    Conflict between rule 68 and token POW resolved as shift ('-' < POW).
    Conflict between rule 68 and token EQUALS resolved as shift ('-' < EQUALS).
    Conflict between rule 68 and token NE resolved as shift ('-' < NE).
    Conflict between rule 68 and token LE resolved as shift ('-' < LE).
    Conflict between rule 68 and token GE resolved as shift ('-' < GE).
    Conflict between rule 68 and token OP_AND resolved as shift ('-' < OP_AND).
    Conflict between rule 68 and token OP_OR resolved as shift ('-' < OP_OR).
    Conflict between rule 68 and token ASSIGN_PLUSEQ resolved as shift ('-' < ASSIGN_PLUSEQ).
    Conflict between rule 68 and token ASSIGN_MINUSEQ resolved as shift ('-' < ASSIGN_MINUSEQ).
    Conflict between rule 68 and token ASSIGN_MULEQ resolved as shift ('-' < ASSIGN_MULEQ).
    Conflict between rule 68 and token ASSIGN_DIVEQ resolved as shift ('-' < ASSIGN_DIVEQ).
    Conflict between rule 68 and token ASSIGN_MODEQ resolved as shift ('-' < ASSIGN_MODEQ).
    Conflict between rule 68 and token '+' resolved as reduce (%left '+').
    Conflict between rule 68 and token '-' resolved as reduce (%left '-').
    Conflict between rule 68 and token '*' resolved as shift ('-' < '*').
    Conflict between rule 68 and token '/' resolved as shift ('-' < '/').
    Conflict between rule 68 and token '%' resolved as shift ('-' < '%').
    Conflict between rule 68 and token '<' resolved as shift ('-' < '<').
    Conflict between rule 68 and token '>' resolved as shift ('-' < '>').


State 98

   69 expr: '(' expr • ')'
   70     | expr • '+' expr
   71     | expr • '-' expr
   72     | expr • '*' expr
   73     | expr • '/' expr
   74     | expr • '%' expr
   75     | expr • ASSIGN_PLUSEQ expr
   76     | expr • ASSIGN_MINUSEQ expr
   77     | expr • ASSIGN_MULEQ expr
   78     | expr • ASSIGN_DIVEQ expr
   79     | expr • ASSIGN_MODEQ expr
   80     | expr • POW expr
   82     | expr • OP_AND expr
   83     | expr • OP_OR expr
   84     | expr • NE expr
   85     | expr • EQUALS expr
   86     | expr • '<' expr
   87     | expr • LE expr
   88     | expr • '>' expr
   89     | expr • GE expr

    POW             shift, and go to state 100
    EQUALS          shift, and go to state 101
    NE              shift, and go to state 102
    LE              shift, and go to state 103
    GE              shift, and go to state 104
    OP_AND          shift, and go to state 105
    OP_OR           shift, and go to state 106
    ASSIGN_PLUSEQ   shift, and go to state 107
    ASSIGN_MINUSEQ  shift, and go to state 108
    ASSIGN_MULEQ    shift, and go to state 109
    ASSIGN_DIVEQ    shift, and go to state 110
    ASSIGN_MODEQ    shift, and go to state 111
    '+'             shift, and go to state 112
    '-'             shift, and go to state 113
    '*'             shift, and go to state 114
    '/'             shift, and go to state 115
    '%'             shift, and go to state 116
    '<'             shift, and go to state 117
    '>'             shift, and go to state 118
    ')'             shift, and go to state 142


State 99

   21 array_compact_integer: IDENTIFIER SIMPLE_ARRAY '[' expr KW_FOR • expr ':' INTEGER ']' ':' type_spec ';'
   60 expr: • INTEGER
   61     | • SCALAR
   62     | • KW_TRUE
   63     | • KW_FALSE
   64     | • IDENTIFIER
   65     | • IDENTIFIER '[' expr ']'
   66     | • IDENTIFIER '(' func_call ')'
   67     | • IDENTIFIER '(' ')'
   68     | • '-' expr
   69     | • '(' expr ')'
   70     | • expr '+' expr
   71     | • expr '-' expr
   72     | • expr '*' expr
   73     | • expr '/' expr
   74     | • expr '%' expr
   75     | • expr ASSIGN_PLUSEQ expr
   76     | • expr ASSIGN_MINUSEQ expr
   77     | • expr ASSIGN_MULEQ expr
   78     | • expr ASSIGN_DIVEQ expr
   79     | • expr ASSIGN_MODEQ expr
   80     | • expr POW expr
   81     | • OP_NOT expr
   82     | • expr OP_AND expr
   83     | • expr OP_OR expr
   84     | • expr NE expr
   85     | • expr EQUALS expr
   86     | • expr '<' expr
   87     | • expr LE expr
   88     | • expr '>' expr
   89     | • expr GE expr

    IDENTIFIER  shift, and go to state 62
    INTEGER     shift, and go to state 63
    SCALAR      shift, and go to state 64
    KW_TRUE     shift, and go to state 65
    KW_FALSE    shift, and go to state 66
    OP_NOT      shift, and go to state 67
    '-'         shift, and go to state 68
    '('         shift, and go to state 69

    expr  go to state 143


State 100

   60 expr: • INTEGER
   61     | • SCALAR
   62     | • KW_TRUE
   63     | • KW_FALSE
   64     | • IDENTIFIER
   65     | • IDENTIFIER '[' expr ']'
   66     | • IDENTIFIER '(' func_call ')'
   67     | • IDENTIFIER '(' ')'
   68     | • '-' expr
   69     | • '(' expr ')'
   70     | • expr '+' expr
   71     | • expr '-' expr
   72     | • expr '*' expr
   73     | • expr '/' expr
   74     | • expr '%' expr
   75     | • expr ASSIGN_PLUSEQ expr
   76     | • expr ASSIGN_MINUSEQ expr
   77     | • expr ASSIGN_MULEQ expr
   78     | • expr ASSIGN_DIVEQ expr
   79     | • expr ASSIGN_MODEQ expr
   80     | • expr POW expr
   80     | expr POW • expr
   81     | • OP_NOT expr
   82     | • expr OP_AND expr
   83     | • expr OP_OR expr
   84     | • expr NE expr
   85     | • expr EQUALS expr
   86     | • expr '<' expr
   87     | • expr LE expr
   88     | • expr '>' expr
   89     | • expr GE expr

    IDENTIFIER  shift, and go to state 62
    INTEGER     shift, and go to state 63
    SCALAR      shift, and go to state 64
    KW_TRUE     shift, and go to state 65
    KW_FALSE    shift, and go to state 66
    OP_NOT      shift, and go to state 67
    '-'         shift, and go to state 68
    '('         shift, and go to state 69

    expr  go to state 144


State 101

   60 expr: • INTEGER
   61     | • SCALAR
   62     | • KW_TRUE
   63     | • KW_FALSE
   64     | • IDENTIFIER
   65     | • IDENTIFIER '[' expr ']'
   66     | • IDENTIFIER '(' func_call ')'
   67     | • IDENTIFIER '(' ')'
   68     | • '-' expr
   69     | • '(' expr ')'
   70     | • expr '+' expr
   71     | • expr '-' expr
   72     | • expr '*' expr
   73     | • expr '/' expr
   74     | • expr '%' expr
   75     | • expr ASSIGN_PLUSEQ expr
   76     | • expr ASSIGN_MINUSEQ expr
   77     | • expr ASSIGN_MULEQ expr
   78     | • expr ASSIGN_DIVEQ expr
   79     | • expr ASSIGN_MODEQ expr
   80     | • expr POW expr
   81     | • OP_NOT expr
   82     | • expr OP_AND expr
   83     | • expr OP_OR expr
   84     | • expr NE expr
   85     | • expr EQUALS expr
   85     | expr EQUALS • expr
   86     | • expr '<' expr
   87     | • expr LE expr
   88     | • expr '>' expr
   89     | • expr GE expr

    IDENTIFIER  shift, and go to state 62
    INTEGER     shift, and go to state 63
    SCALAR      shift, and go to state 64
    KW_TRUE     shift, and go to state 65
    KW_FALSE    shift, and go to state 66
    OP_NOT      shift, and go to state 67
    '-'         shift, and go to state 68
    '('         shift, and go to state 69

    expr  go to state 145


State 102

   60 expr: • INTEGER
   61     | • SCALAR
   62     | • KW_TRUE
   63     | • KW_FALSE
   64     | • IDENTIFIER
   65     | • IDENTIFIER '[' expr ']'
   66     | • IDENTIFIER '(' func_call ')'
   67     | • IDENTIFIER '(' ')'
   68     | • '-' expr
   69     | • '(' expr ')'
   70     | • expr '+' expr
   71     | • expr '-' expr
   72     | • expr '*' expr
   73     | • expr '/' expr
   74     | • expr '%' expr
   75     | • expr ASSIGN_PLUSEQ expr
   76     | • expr ASSIGN_MINUSEQ expr
   77     | • expr ASSIGN_MULEQ expr
   78     | • expr ASSIGN_DIVEQ expr
   79     | • expr ASSIGN_MODEQ expr
   80     | • expr POW expr
   81     | • OP_NOT expr
   82     | • expr OP_AND expr
   83     | • expr OP_OR expr
   84     | • expr NE expr
   84     | expr NE • expr
   85     | • expr EQUALS expr
   86     | • expr '<' expr
   87     | • expr LE expr
   88     | • expr '>' expr
   89     | • expr GE expr

    IDENTIFIER  shift, and go to state 62
    INTEGER     shift, and go to state 63
    SCALAR      shift, and go to state 64
    KW_TRUE     shift, and go to state 65
    KW_FALSE    shift, and go to state 66
    OP_NOT      shift, and go to state 67
    '-'         shift, and go to state 68
    '('         shift, and go to state 69

    expr  go to state 146


State 103

   60 expr: • INTEGER
   61     | • SCALAR
   62     | • KW_TRUE
   63     | • KW_FALSE
   64     | • IDENTIFIER
   65     | • IDENTIFIER '[' expr ']'
   66     | • IDENTIFIER '(' func_call ')'
   67     | • IDENTIFIER '(' ')'
   68     | • '-' expr
   69     | • '(' expr ')'
   70     | • expr '+' expr
   71     | • expr '-' expr
   72     | • expr '*' expr
   73     | • expr '/' expr
   74     | • expr '%' expr
   75     | • expr ASSIGN_PLUSEQ expr
   76     | • expr ASSIGN_MINUSEQ expr
   77     | • expr ASSIGN_MULEQ expr
   78     | • expr ASSIGN_DIVEQ expr
   79     | • expr ASSIGN_MODEQ expr
   80     | • expr POW expr
   81     | • OP_NOT expr
   82     | • expr OP_AND expr
   83     | • expr OP_OR expr
   84     | • expr NE expr
   85     | • expr EQUALS expr
   86     | • expr '<' expr
   87     | • expr LE expr
   87     | expr LE • expr
   88     | • expr '>' expr
   89     | • expr GE expr

    IDENTIFIER  shift, and go to state 62
    INTEGER     shift, and go to state 63
    SCALAR      shift, and go to state 64
    KW_TRUE     shift, and go to state 65
    KW_FALSE    shift, and go to state 66
    OP_NOT      shift, and go to state 67
    '-'         shift, and go to state 68
    '('         shift, and go to state 69

    expr  go to state 147


State 104

   60 expr: • INTEGER
   61     | • SCALAR
   62     | • KW_TRUE
   63     | • KW_FALSE
   64     | • IDENTIFIER
   65     | • IDENTIFIER '[' expr ']'
   66     | • IDENTIFIER '(' func_call ')'
   67     | • IDENTIFIER '(' ')'
   68     | • '-' expr
   69     | • '(' expr ')'
   70     | • expr '+' expr
   71     | • expr '-' expr
   72     | • expr '*' expr
   73     | • expr '/' expr
   74     | • expr '%' expr
   75     | • expr ASSIGN_PLUSEQ expr
   76     | • expr ASSIGN_MINUSEQ expr
   77     | • expr ASSIGN_MULEQ expr
   78     | • expr ASSIGN_DIVEQ expr
   79     | • expr ASSIGN_MODEQ expr
   80     | • expr POW expr
   81     | • OP_NOT expr
   82     | • expr OP_AND expr
   83     | • expr OP_OR expr
   84     | • expr NE expr
   85     | • expr EQUALS expr
   86     | • expr '<' expr
   87     | • expr LE expr
   88     | • expr '>' expr
   89     | • expr GE expr
   89     | expr GE • expr

    IDENTIFIER  shift, and go to state 62
    INTEGER     shift, and go to state 63
    SCALAR      shift, and go to state 64
    KW_TRUE     shift, and go to state 65
    KW_FALSE    shift, and go to state 66
    OP_NOT      shift, and go to state 67
    '-'         shift, and go to state 68
    '('         shift, and go to state 69

    expr  go to state 148


State 105

   60 expr: • INTEGER
   61     | • SCALAR
   62     | • KW_TRUE
   63     | • KW_FALSE
   64     | • IDENTIFIER
   65     | • IDENTIFIER '[' expr ']'
   66     | • IDENTIFIER '(' func_call ')'
   67     | • IDENTIFIER '(' ')'
   68     | • '-' expr
   69     | • '(' expr ')'
   70     | • expr '+' expr
   71     | • expr '-' expr
   72     | • expr '*' expr
   73     | • expr '/' expr
   74     | • expr '%' expr
   75     | • expr ASSIGN_PLUSEQ expr
   76     | • expr ASSIGN_MINUSEQ expr
   77     | • expr ASSIGN_MULEQ expr
   78     | • expr ASSIGN_DIVEQ expr
   79     | • expr ASSIGN_MODEQ expr
   80     | • expr POW expr
   81     | • OP_NOT expr
   82     | • expr OP_AND expr
   82     | expr OP_AND • expr
   83     | • expr OP_OR expr
   84     | • expr NE expr
   85     | • expr EQUALS expr
   86     | • expr '<' expr
   87     | • expr LE expr
   88     | • expr '>' expr
   89     | • expr GE expr

    IDENTIFIER  shift, and go to state 62
    INTEGER     shift, and go to state 63
    SCALAR      shift, and go to state 64
    KW_TRUE     shift, and go to state 65
    KW_FALSE    shift, and go to state 66
    OP_NOT      shift, and go to state 67
    '-'         shift, and go to state 68
    '('         shift, and go to state 69

    expr  go to state 149


State 106

   60 expr: • INTEGER
   61     | • SCALAR
   62     | • KW_TRUE
   63     | • KW_FALSE
   64     | • IDENTIFIER
   65     | • IDENTIFIER '[' expr ']'
   66     | • IDENTIFIER '(' func_call ')'
   67     | • IDENTIFIER '(' ')'
   68     | • '-' expr
   69     | • '(' expr ')'
   70     | • expr '+' expr
   71     | • expr '-' expr
   72     | • expr '*' expr
   73     | • expr '/' expr
   74     | • expr '%' expr
   75     | • expr ASSIGN_PLUSEQ expr
   76     | • expr ASSIGN_MINUSEQ expr
   77     | • expr ASSIGN_MULEQ expr
   78     | • expr ASSIGN_DIVEQ expr
   79     | • expr ASSIGN_MODEQ expr
   80     | • expr POW expr
   81     | • OP_NOT expr
   82     | • expr OP_AND expr
   83     | • expr OP_OR expr
   83     | expr OP_OR • expr
   84     | • expr NE expr
   85     | • expr EQUALS expr
   86     | • expr '<' expr
   87     | • expr LE expr
   88     | • expr '>' expr
   89     | • expr GE expr

    IDENTIFIER  shift, and go to state 62
    INTEGER     shift, and go to state 63
    SCALAR      shift, and go to state 64
    KW_TRUE     shift, and go to state 65
    KW_FALSE    shift, and go to state 66
    OP_NOT      shift, and go to state 67
    '-'         shift, and go to state 68
    '('         shift, and go to state 69

    expr  go to state 150


State 107

   60 expr: • INTEGER
   61     | • SCALAR
   62     | • KW_TRUE
   63     | • KW_FALSE
   64     | • IDENTIFIER
   65     | • IDENTIFIER '[' expr ']'
   66     | • IDENTIFIER '(' func_call ')'
   67     | • IDENTIFIER '(' ')'
   68     | • '-' expr
   69     | • '(' expr ')'
   70     | • expr '+' expr
   71     | • expr '-' expr
   72     | • expr '*' expr
   73     | • expr '/' expr
   74     | • expr '%' expr
   75     | • expr ASSIGN_PLUSEQ expr
   75     | expr ASSIGN_PLUSEQ • expr
   76     | • expr ASSIGN_MINUSEQ expr
   77     | • expr ASSIGN_MULEQ expr
   78     | • expr ASSIGN_DIVEQ expr
   79     | • expr ASSIGN_MODEQ expr
   80     | • expr POW expr
   81     | • OP_NOT expr
   82     | • expr OP_AND expr
   83     | • expr OP_OR expr
   84     | • expr NE expr
   85     | • expr EQUALS expr
   86     | • expr '<' expr
   87     | • expr LE expr
   88     | • expr '>' expr
   89     | • expr GE expr

    IDENTIFIER  shift, and go to state 62
    INTEGER     shift, and go to state 63
    SCALAR      shift, and go to state 64
    KW_TRUE     shift, and go to state 65
    KW_FALSE    shift, and go to state 66
    OP_NOT      shift, and go to state 67
    '-'         shift, and go to state 68
    '('         shift, and go to state 69

    expr  go to state 151


State 108

   60 expr: • INTEGER
   61     | • SCALAR
   62     | • KW_TRUE
   63     | • KW_FALSE
   64     | • IDENTIFIER
   65     | • IDENTIFIER '[' expr ']'
   66     | • IDENTIFIER '(' func_call ')'
   67     | • IDENTIFIER '(' ')'
   68     | • '-' expr
   69     | • '(' expr ')'
   70     | • expr '+' expr
   71     | • expr '-' expr
   72     | • expr '*' expr
   73     | • expr '/' expr
   74     | • expr '%' expr
   75     | • expr ASSIGN_PLUSEQ expr
   76     | • expr ASSIGN_MINUSEQ expr
   76     | expr ASSIGN_MINUSEQ • expr
   77     | • expr ASSIGN_MULEQ expr
   78     | • expr ASSIGN_DIVEQ expr
   79     | • expr ASSIGN_MODEQ expr
   80     | • expr POW expr
   81     | • OP_NOT expr
   82     | • expr OP_AND expr
   83     | • expr OP_OR expr
   84     | • expr NE expr
   85     | • expr EQUALS expr
   86     | • expr '<' expr
   87     | • expr LE expr
   88     | • expr '>' expr
   89     | • expr GE expr

    IDENTIFIER  shift, and go to state 62
    INTEGER     shift, and go to state 63
    SCALAR      shift, and go to state 64
    KW_TRUE     shift, and go to state 65
    KW_FALSE    shift, and go to state 66
    OP_NOT      shift, and go to state 67
    '-'         shift, and go to state 68
    '('         shift, and go to state 69

    expr  go to state 152


State 109

   60 expr: • INTEGER
   61     | • SCALAR
   62     | • KW_TRUE
   63     | • KW_FALSE
   64     | • IDENTIFIER
   65     | • IDENTIFIER '[' expr ']'
   66     | • IDENTIFIER '(' func_call ')'
   67     | • IDENTIFIER '(' ')'
   68     | • '-' expr
   69     | • '(' expr ')'
   70     | • expr '+' expr
   71     | • expr '-' expr
   72     | • expr '*' expr
   73     | • expr '/' expr
   74     | • expr '%' expr
   75     | • expr ASSIGN_PLUSEQ expr
   76     | • expr ASSIGN_MINUSEQ expr
   77     | • expr ASSIGN_MULEQ expr
   77     | expr ASSIGN_MULEQ • expr
   78     | • expr ASSIGN_DIVEQ expr
   79     | • expr ASSIGN_MODEQ expr
   80     | • expr POW expr
   81     | • OP_NOT expr
   82     | • expr OP_AND expr
   83     | • expr OP_OR expr
   84     | • expr NE expr
   85     | • expr EQUALS expr
   86     | • expr '<' expr
   87     | • expr LE expr
   88     | • expr '>' expr
   89     | • expr GE expr

    IDENTIFIER  shift, and go to state 62
    INTEGER     shift, and go to state 63
    SCALAR      shift, and go to state 64
    KW_TRUE     shift, and go to state 65
    KW_FALSE    shift, and go to state 66
    OP_NOT      shift, and go to state 67
    '-'         shift, and go to state 68
    '('         shift, and go to state 69

    expr  go to state 153


State 110

   60 expr: • INTEGER
   61     | • SCALAR
   62     | • KW_TRUE
   63     | • KW_FALSE
   64     | • IDENTIFIER
   65     | • IDENTIFIER '[' expr ']'
   66     | • IDENTIFIER '(' func_call ')'
   67     | • IDENTIFIER '(' ')'
   68     | • '-' expr
   69     | • '(' expr ')'
   70     | • expr '+' expr
   71     | • expr '-' expr
   72     | • expr '*' expr
   73     | • expr '/' expr
   74     | • expr '%' expr
   75     | • expr ASSIGN_PLUSEQ expr
   76     | • expr ASSIGN_MINUSEQ expr
   77     | • expr ASSIGN_MULEQ expr
   78     | • expr ASSIGN_DIVEQ expr
   78     | expr ASSIGN_DIVEQ • expr
   79     | • expr ASSIGN_MODEQ expr
   80     | • expr POW expr
   81     | • OP_NOT expr
   82     | • expr OP_AND expr
   83     | • expr OP_OR expr
   84     | • expr NE expr
   85     | • expr EQUALS expr
   86     | • expr '<' expr
   87     | • expr LE expr
   88     | • expr '>' expr
   89     | • expr GE expr

    IDENTIFIER  shift, and go to state 62
    INTEGER     shift, and go to state 63
    SCALAR      shift, and go to state 64
    KW_TRUE     shift, and go to state 65
    KW_FALSE    shift, and go to state 66
    OP_NOT      shift, and go to state 67
    '-'         shift, and go to state 68
    '('         shift, and go to state 69

    expr  go to state 154


State 111

   60 expr: • INTEGER
   61     | • SCALAR
   62     | • KW_TRUE
   63     | • KW_FALSE
   64     | • IDENTIFIER
   65     | • IDENTIFIER '[' expr ']'
   66     | • IDENTIFIER '(' func_call ')'
   67     | • IDENTIFIER '(' ')'
   68     | • '-' expr
   69     | • '(' expr ')'
   70     | • expr '+' expr
   71     | • expr '-' expr
   72     | • expr '*' expr
   73     | • expr '/' expr
   74     | • expr '%' expr
   75     | • expr ASSIGN_PLUSEQ expr
   76     | • expr ASSIGN_MINUSEQ expr
   77     | • expr ASSIGN_MULEQ expr
   78     | • expr ASSIGN_DIVEQ expr
   79     | • expr ASSIGN_MODEQ expr
   79     | expr ASSIGN_MODEQ • expr
   80     | • expr POW expr
   81     | • OP_NOT expr
   82     | • expr OP_AND expr
   83     | • expr OP_OR expr
   84     | • expr NE expr
   85     | • expr EQUALS expr
   86     | • expr '<' expr
   87     | • expr LE expr
   88     | • expr '>' expr
   89     | • expr GE expr

    IDENTIFIER  shift, and go to state 62
    INTEGER     shift, and go to state 63
    SCALAR      shift, and go to state 64
    KW_TRUE     shift, and go to state 65
    KW_FALSE    shift, and go to state 66
    OP_NOT      shift, and go to state 67
    '-'         shift, and go to state 68
    '('         shift, and go to state 69

    expr  go to state 155


State 112

   60 expr: • INTEGER
   61     | • SCALAR
   62     | • KW_TRUE
   63     | • KW_FALSE
   64     | • IDENTIFIER
   65     | • IDENTIFIER '[' expr ']'
   66     | • IDENTIFIER '(' func_call ')'
   67     | • IDENTIFIER '(' ')'
   68     | • '-' expr
   69     | • '(' expr ')'
   70     | • expr '+' expr
   70     | expr '+' • expr
   71     | • expr '-' expr
   72     | • expr '*' expr
   73     | • expr '/' expr
   74     | • expr '%' expr
   75     | • expr ASSIGN_PLUSEQ expr
   76     | • expr ASSIGN_MINUSEQ expr
   77     | • expr ASSIGN_MULEQ expr
   78     | • expr ASSIGN_DIVEQ expr
   79     | • expr ASSIGN_MODEQ expr
   80     | • expr POW expr
   81     | • OP_NOT expr
   82     | • expr OP_AND expr
   83     | • expr OP_OR expr
   84     | • expr NE expr
   85     | • expr EQUALS expr
   86     | • expr '<' expr
   87     | • expr LE expr
   88     | • expr '>' expr
   89     | • expr GE expr

    IDENTIFIER  shift, and go to state 62
    INTEGER     shift, and go to state 63
    SCALAR      shift, and go to state 64
    KW_TRUE     shift, and go to state 65
    KW_FALSE    shift, and go to state 66
    OP_NOT      shift, and go to state 67
    '-'         shift, and go to state 68
    '('         shift, and go to state 69

    expr  go to state 156


State 113

   60 expr: • INTEGER
   61     | • SCALAR
   62     | • KW_TRUE
   63     | • KW_FALSE
   64     | • IDENTIFIER
   65     | • IDENTIFIER '[' expr ']'
   66     | • IDENTIFIER '(' func_call ')'
   67     | • IDENTIFIER '(' ')'
   68     | • '-' expr
   69     | • '(' expr ')'
   70     | • expr '+' expr
   71     | • expr '-' expr
   71     | expr '-' • expr
   72     | • expr '*' expr
   73     | • expr '/' expr
   74     | • expr '%' expr
   75     | • expr ASSIGN_PLUSEQ expr
   76     | • expr ASSIGN_MINUSEQ expr
   77     | • expr ASSIGN_MULEQ expr
   78     | • expr ASSIGN_DIVEQ expr
   79     | • expr ASSIGN_MODEQ expr
   80     | • expr POW expr
   81     | • OP_NOT expr
   82     | • expr OP_AND expr
   83     | • expr OP_OR expr
   84     | • expr NE expr
   85     | • expr EQUALS expr
   86     | • expr '<' expr
   87     | • expr LE expr
   88     | • expr '>' expr
   89     | • expr GE expr

    IDENTIFIER  shift, and go to state 62
    INTEGER     shift, and go to state 63
    SCALAR      shift, and go to state 64
    KW_TRUE     shift, and go to state 65
    KW_FALSE    shift, and go to state 66
    OP_NOT      shift, and go to state 67
    '-'         shift, and go to state 68
    '('         shift, and go to state 69

    expr  go to state 157


State 114

   60 expr: • INTEGER
   61     | • SCALAR
   62     | • KW_TRUE
   63     | • KW_FALSE
   64     | • IDENTIFIER
   65     | • IDENTIFIER '[' expr ']'
   66     | • IDENTIFIER '(' func_call ')'
   67     | • IDENTIFIER '(' ')'
   68     | • '-' expr
   69     | • '(' expr ')'
   70     | • expr '+' expr
   71     | • expr '-' expr
   72     | • expr '*' expr
   72     | expr '*' • expr
   73     | • expr '/' expr
   74     | • expr '%' expr
   75     | • expr ASSIGN_PLUSEQ expr
   76     | • expr ASSIGN_MINUSEQ expr
   77     | • expr ASSIGN_MULEQ expr
   78     | • expr ASSIGN_DIVEQ expr
   79     | • expr ASSIGN_MODEQ expr
   80     | • expr POW expr
   81     | • OP_NOT expr
   82     | • expr OP_AND expr
   83     | • expr OP_OR expr
   84     | • expr NE expr
   85     | • expr EQUALS expr
   86     | • expr '<' expr
   87     | • expr LE expr
   88     | • expr '>' expr
   89     | • expr GE expr

    IDENTIFIER  shift, and go to state 62
    INTEGER     shift, and go to state 63
    SCALAR      shift, and go to state 64
    KW_TRUE     shift, and go to state 65
    KW_FALSE    shift, and go to state 66
    OP_NOT      shift, and go to state 67
    '-'         shift, and go to state 68
    '('         shift, and go to state 69

    expr  go to state 158


State 115

   60 expr: • INTEGER
   61     | • SCALAR
   62     | • KW_TRUE
   63     | • KW_FALSE
   64     | • IDENTIFIER
   65     | • IDENTIFIER '[' expr ']'
   66     | • IDENTIFIER '(' func_call ')'
   67     | • IDENTIFIER '(' ')'
   68     | • '-' expr
   69     | • '(' expr ')'
   70     | • expr '+' expr
   71     | • expr '-' expr
   72     | • expr '*' expr
   73     | • expr '/' expr
   73     | expr '/' • expr
   74     | • expr '%' expr
   75     | • expr ASSIGN_PLUSEQ expr
   76     | • expr ASSIGN_MINUSEQ expr
   77     | • expr ASSIGN_MULEQ expr
   78     | • expr ASSIGN_DIVEQ expr
   79     | • expr ASSIGN_MODEQ expr
   80     | • expr POW expr
   81     | • OP_NOT expr
   82     | • expr OP_AND expr
   83     | • expr OP_OR expr
   84     | • expr NE expr
   85     | • expr EQUALS expr
   86     | • expr '<' expr
   87     | • expr LE expr
   88     | • expr '>' expr
   89     | • expr GE expr

    IDENTIFIER  shift, and go to state 62
    INTEGER     shift, and go to state 63
    SCALAR      shift, and go to state 64
    KW_TRUE     shift, and go to state 65
    KW_FALSE    shift, and go to state 66
    OP_NOT      shift, and go to state 67
    '-'         shift, and go to state 68
    '('         shift, and go to state 69

    expr  go to state 159


State 116

   60 expr: • INTEGER
   61     | • SCALAR
   62     | • KW_TRUE
   63     | • KW_FALSE
   64     | • IDENTIFIER
   65     | • IDENTIFIER '[' expr ']'
   66     | • IDENTIFIER '(' func_call ')'
   67     | • IDENTIFIER '(' ')'
   68     | • '-' expr
   69     | • '(' expr ')'
   70     | • expr '+' expr
   71     | • expr '-' expr
   72     | • expr '*' expr
   73     | • expr '/' expr
   74     | • expr '%' expr
   74     | expr '%' • expr
   75     | • expr ASSIGN_PLUSEQ expr
   76     | • expr ASSIGN_MINUSEQ expr
   77     | • expr ASSIGN_MULEQ expr
   78     | • expr ASSIGN_DIVEQ expr
   79     | • expr ASSIGN_MODEQ expr
   80     | • expr POW expr
   81     | • OP_NOT expr
   82     | • expr OP_AND expr
   83     | • expr OP_OR expr
   84     | • expr NE expr
   85     | • expr EQUALS expr
   86     | • expr '<' expr
   87     | • expr LE expr
   88     | • expr '>' expr
   89     | • expr GE expr

    IDENTIFIER  shift, and go to state 62
    INTEGER     shift, and go to state 63
    SCALAR      shift, and go to state 64
    KW_TRUE     shift, and go to state 65
    KW_FALSE    shift, and go to state 66
    OP_NOT      shift, and go to state 67
    '-'         shift, and go to state 68
    '('         shift, and go to state 69

    expr  go to state 160


State 117

   60 expr: • INTEGER
   61     | • SCALAR
   62     | • KW_TRUE
   63     | • KW_FALSE
   64     | • IDENTIFIER
   65     | • IDENTIFIER '[' expr ']'
   66     | • IDENTIFIER '(' func_call ')'
   67     | • IDENTIFIER '(' ')'
   68     | • '-' expr
   69     | • '(' expr ')'
   70     | • expr '+' expr
   71     | • expr '-' expr
   72     | • expr '*' expr
   73     | • expr '/' expr
   74     | • expr '%' expr
   75     | • expr ASSIGN_PLUSEQ expr
   76     | • expr ASSIGN_MINUSEQ expr
   77     | • expr ASSIGN_MULEQ expr
   78     | • expr ASSIGN_DIVEQ expr
   79     | • expr ASSIGN_MODEQ expr
   80     | • expr POW expr
   81     | • OP_NOT expr
   82     | • expr OP_AND expr
   83     | • expr OP_OR expr
   84     | • expr NE expr
   85     | • expr EQUALS expr
   86     | • expr '<' expr
   86     | expr '<' • expr
   87     | • expr LE expr
   88     | • expr '>' expr
   89     | • expr GE expr

    IDENTIFIER  shift, and go to state 62
    INTEGER     shift, and go to state 63
    SCALAR      shift, and go to state 64
    KW_TRUE     shift, and go to state 65
    KW_FALSE    shift, and go to state 66
    OP_NOT      shift, and go to state 67
    '-'         shift, and go to state 68
    '('         shift, and go to state 69

    expr  go to state 161


State 118

   60 expr: • INTEGER
   61     | • SCALAR
   62     | • KW_TRUE
   63     | • KW_FALSE
   64     | • IDENTIFIER
   65     | • IDENTIFIER '[' expr ']'
   66     | • IDENTIFIER '(' func_call ')'
   67     | • IDENTIFIER '(' ')'
   68     | • '-' expr
   69     | • '(' expr ')'
   70     | • expr '+' expr
   71     | • expr '-' expr
   72     | • expr '*' expr
   73     | • expr '/' expr
   74     | • expr '%' expr
   75     | • expr ASSIGN_PLUSEQ expr
   76     | • expr ASSIGN_MINUSEQ expr
   77     | • expr ASSIGN_MULEQ expr
   78     | • expr ASSIGN_DIVEQ expr
   79     | • expr ASSIGN_MODEQ expr
   80     | • expr POW expr
   81     | • OP_NOT expr
   82     | • expr OP_AND expr
   83     | • expr OP_OR expr
   84     | • expr NE expr
   85     | • expr EQUALS expr
   86     | • expr '<' expr
   87     | • expr LE expr
   88     | • expr '>' expr
   88     | expr '>' • expr
   89     | • expr GE expr

    IDENTIFIER  shift, and go to state 62
    INTEGER     shift, and go to state 63
    SCALAR      shift, and go to state 64
    KW_TRUE     shift, and go to state 65
    KW_FALSE    shift, and go to state 66
    OP_NOT      shift, and go to state 67
    '-'         shift, and go to state 68
    '('         shift, and go to state 69

    expr  go to state 162


State 119

   30 func_decl: KW_DEF IDENTIFIER '(' ')' RETURN_ID • type_spec ':' body KW_ENDDEF ';'
   90 type_spec: • KW_INTEGER
   91          | • KW_SCALAR
   92          | • KW_STR
   93          | • KW_BOOLEAN

    KW_INTEGER  shift, and go to state 48
    KW_SCALAR   shift, and go to state 49
    KW_STR      shift, and go to state 50
    KW_BOOLEAN  shift, and go to state 51

    type_spec  go to state 163


State 120

   29 func_decl: KW_DEF IDENTIFIER '(' func_var_decl_list ')' • RETURN_ID type_spec ':' body KW_ENDDEF ';'

    RETURN_ID  shift, and go to state 164


State 121

   31 func_var_decl_list: func_var_decl_list ',' • func_var_decl
   33 func_var_decl: • decl_list_item_id ':' type_spec
   40 decl_list_item_id: • IDENTIFIER
   41                  | • IDENTIFIER '[' INTEGER ']'
   42                  | • IDENTIFIER '[' ']'

    IDENTIFIER  shift, and go to state 18

    func_var_decl      go to state 165
    decl_list_item_id  go to state 75


State 122

   33 func_var_decl: decl_list_item_id ':' • type_spec
   90 type_spec: • KW_INTEGER
   91          | • KW_SCALAR
   92          | • KW_STR
   93          | • KW_BOOLEAN

    KW_INTEGER  shift, and go to state 48
    KW_SCALAR   shift, and go to state 49
    KW_STR      shift, and go to state 50
    KW_BOOLEAN  shift, and go to state 51

    type_spec  go to state 166


State 123

    1 program: KW_DEF KW_MAIN '(' ')' ':' • body KW_ENDDEF ';'
   17 var_decl: • var_decl_list ':' type_spec ';'
   18         | • array_compact_integer
   19 var_decl_list: • var_decl_list ',' decl_list_item_id
   20              | • decl_list_item_id
   21 array_compact_integer: • IDENTIFIER SIMPLE_ARRAY '[' expr KW_FOR expr ':' INTEGER ']' ':' type_spec ';'
   24 const_decl: • KW_CONST const_decl_list_item ':' type_spec ';'
   34 body: • decl_list command_list
   35     | • command_list
   36 decl_list: • decl_list decl
   37          | • decl
   38 decl: • KW_CONST var_decl ':' type_spec ';'
   39     | • var_decl ':' type_spec ';'
   40 decl_list_item_id: • IDENTIFIER
   41                  | • IDENTIFIER '[' INTEGER ']'
   42                  | • IDENTIFIER '[' ']'
   43 command_list: • command_list command
   44             | • command
   45 command: • IDENTIFIER '=' expr ';'
   46        | • IDENTIFIER '(' func_call ')' ';'
   47        | • IDENTIFIER '(' ')' ';'
   48        | • IDENTIFIER '(' STRING ')' ';'
   49        | • KW_BREAK ';'
   50        | • KW_CONTINUE ';'
   51        | • KW_RETURN ';'
   52        | • KW_RETURN expr ';'
   53        | • KW_IF '(' expr ')' ':' command_list KW_ENDIF ';'
   54        | • KW_IF '(' expr ')' ':' command_list KW_ELSE ':' command_list KW_ENDIF ';'
   55        | • KW_WHILE '(' expr ')' ':' command_list KW_ENDWHILE ';'
   56        | • KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ':' expr ']' ':' command_list KW_ENDFOR ';'
   57        | • KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ']' ':' command_list KW_ENDFOR ';'
   58        | • var_decl
   59        | • const_decl

    IDENTIFIER   shift, and go to state 167
    KW_IF        shift, and go to state 168
    KW_CONST     shift, and go to state 169
    KW_FOR       shift, and go to state 170
    KW_WHILE     shift, and go to state 171
    KW_BREAK     shift, and go to state 172
    KW_CONTINUE  shift, and go to state 173
    KW_RETURN    shift, and go to state 174

    var_decl               go to state 175
    var_decl_list          go to state 7
    array_compact_integer  go to state 8
    const_decl             go to state 176
    body                   go to state 177
    decl_list              go to state 178
    decl                   go to state 179
    decl_list_item_id      go to state 13
    command_list           go to state 180
    command                go to state 181


State 124

   24 const_decl: KW_CONST const_decl_list_item ':' type_spec ';' •

    $default  reduce using rule 24 (const_decl)


State 125

    2 program: start_var_decl_list KW_DEF KW_MAIN '(' ')' • ':' body KW_ENDDEF ';'

    ':'  shift, and go to state 182


State 126

    5 program: start_var_decl_list start_const_decl_list KW_DEF KW_MAIN '(' • ')' ':' body KW_ENDDEF ';'

    ')'  shift, and go to state 183


State 127

    9 program: start_var_decl_list start_const_decl_list func_decl_list KW_DEF KW_MAIN • '(' ')' ':' body KW_ENDDEF ';'

    '('  shift, and go to state 184


State 128

    6 program: start_var_decl_list func_decl_list KW_DEF KW_MAIN '(' • ')' ':' body KW_ENDDEF ';'

    ')'  shift, and go to state 185


State 129

   10 program: start_var_decl_list func_decl_list start_const_decl_list KW_DEF KW_MAIN • '(' ')' ':' body KW_ENDDEF ';'

    '('  shift, and go to state 186


State 130

    3 program: start_const_decl_list KW_DEF KW_MAIN '(' ')' • ':' body KW_ENDDEF ';'

    ':'  shift, and go to state 187


State 131

    8 program: start_const_decl_list start_var_decl_list KW_DEF KW_MAIN '(' • ')' ':' body KW_ENDDEF ';'

    ')'  shift, and go to state 188


State 132

   11 program: start_const_decl_list start_var_decl_list func_decl_list KW_DEF KW_MAIN • '(' ')' ':' body KW_ENDDEF ';'

    '('  shift, and go to state 189


State 133

    7 program: start_const_decl_list func_decl_list KW_DEF KW_MAIN '(' • ')' ':' body KW_ENDDEF ';'

    ')'  shift, and go to state 190


State 134

   12 program: start_const_decl_list func_decl_list start_var_decl_list KW_DEF KW_MAIN • '(' ')' ':' body KW_ENDDEF ';'

    '('  shift, and go to state 191


State 135

    4 program: func_decl_list KW_DEF KW_MAIN '(' ')' • ':' body KW_ENDDEF ';'

    ':'  shift, and go to state 192


State 136

   14 program: func_decl_list start_var_decl_list start_const_decl_list KW_DEF KW_MAIN • '(' ')' ':' body KW_ENDDEF ';'

    '('  shift, and go to state 193


State 137

   13 program: func_decl_list start_const_decl_list start_var_decl_list KW_DEF KW_MAIN • '(' ')' ':' body KW_ENDDEF ';'

    '('  shift, and go to state 194


State 138

   67 expr: IDENTIFIER '(' ')' •

    $default  reduce using rule 67 (expr)


State 139

   70 expr: expr • '+' expr
   71     | expr • '-' expr
   72     | expr • '*' expr
   73     | expr • '/' expr
   74     | expr • '%' expr
   75     | expr • ASSIGN_PLUSEQ expr
   76     | expr • ASSIGN_MINUSEQ expr
   77     | expr • ASSIGN_MULEQ expr
   78     | expr • ASSIGN_DIVEQ expr
   79     | expr • ASSIGN_MODEQ expr
   80     | expr • POW expr
   82     | expr • OP_AND expr
   83     | expr • OP_OR expr
   84     | expr • NE expr
   85     | expr • EQUALS expr
   86     | expr • '<' expr
   87     | expr • LE expr
   88     | expr • '>' expr
   89     | expr • GE expr
   95 func_call: expr •  [')', ',']

    POW             shift, and go to state 100
    EQUALS          shift, and go to state 101
    NE              shift, and go to state 102
    LE              shift, and go to state 103
    GE              shift, and go to state 104
    OP_AND          shift, and go to state 105
    OP_OR           shift, and go to state 106
    ASSIGN_PLUSEQ   shift, and go to state 107
    ASSIGN_MINUSEQ  shift, and go to state 108
    ASSIGN_MULEQ    shift, and go to state 109
    ASSIGN_DIVEQ    shift, and go to state 110
    ASSIGN_MODEQ    shift, and go to state 111
    '+'             shift, and go to state 112
    '-'             shift, and go to state 113
    '*'             shift, and go to state 114
    '/'             shift, and go to state 115
    '%'             shift, and go to state 116
    '<'             shift, and go to state 117
    '>'             shift, and go to state 118

    $default  reduce using rule 95 (func_call)


State 140

   66 expr: IDENTIFIER '(' func_call • ')'
   94 func_call: func_call • ',' expr

    ')'  shift, and go to state 195
    ','  shift, and go to state 196


State 141

   65 expr: IDENTIFIER '[' expr • ']'
   70     | expr • '+' expr
   71     | expr • '-' expr
   72     | expr • '*' expr
   73     | expr • '/' expr
   74     | expr • '%' expr
   75     | expr • ASSIGN_PLUSEQ expr
   76     | expr • ASSIGN_MINUSEQ expr
   77     | expr • ASSIGN_MULEQ expr
   78     | expr • ASSIGN_DIVEQ expr
   79     | expr • ASSIGN_MODEQ expr
   80     | expr • POW expr
   82     | expr • OP_AND expr
   83     | expr • OP_OR expr
   84     | expr • NE expr
   85     | expr • EQUALS expr
   86     | expr • '<' expr
   87     | expr • LE expr
   88     | expr • '>' expr
   89     | expr • GE expr

    POW             shift, and go to state 100
    EQUALS          shift, and go to state 101
    NE              shift, and go to state 102
    LE              shift, and go to state 103
    GE              shift, and go to state 104
    OP_AND          shift, and go to state 105
    OP_OR           shift, and go to state 106
    ASSIGN_PLUSEQ   shift, and go to state 107
    ASSIGN_MINUSEQ  shift, and go to state 108
    ASSIGN_MULEQ    shift, and go to state 109
    ASSIGN_DIVEQ    shift, and go to state 110
    ASSIGN_MODEQ    shift, and go to state 111
    '+'             shift, and go to state 112
    '-'             shift, and go to state 113
    '*'             shift, and go to state 114
    '/'             shift, and go to state 115
    '%'             shift, and go to state 116
    '<'             shift, and go to state 117
    '>'             shift, and go to state 118
    ']'             shift, and go to state 197


State 142

   69 expr: '(' expr ')' •

    $default  reduce using rule 69 (expr)


State 143

   21 array_compact_integer: IDENTIFIER SIMPLE_ARRAY '[' expr KW_FOR expr • ':' INTEGER ']' ':' type_spec ';'
   70 expr: expr • '+' expr
   71     | expr • '-' expr
   72     | expr • '*' expr
   73     | expr • '/' expr
   74     | expr • '%' expr
   75     | expr • ASSIGN_PLUSEQ expr
   76     | expr • ASSIGN_MINUSEQ expr
   77     | expr • ASSIGN_MULEQ expr
   78     | expr • ASSIGN_DIVEQ expr
   79     | expr • ASSIGN_MODEQ expr
   80     | expr • POW expr
   82     | expr • OP_AND expr
   83     | expr • OP_OR expr
   84     | expr • NE expr
   85     | expr • EQUALS expr
   86     | expr • '<' expr
   87     | expr • LE expr
   88     | expr • '>' expr
   89     | expr • GE expr

    POW             shift, and go to state 100
    EQUALS          shift, and go to state 101
    NE              shift, and go to state 102
    LE              shift, and go to state 103
    GE              shift, and go to state 104
    OP_AND          shift, and go to state 105
    OP_OR           shift, and go to state 106
    ASSIGN_PLUSEQ   shift, and go to state 107
    ASSIGN_MINUSEQ  shift, and go to state 108
    ASSIGN_MULEQ    shift, and go to state 109
    ASSIGN_DIVEQ    shift, and go to state 110
    ASSIGN_MODEQ    shift, and go to state 111
    '+'             shift, and go to state 112
    '-'             shift, and go to state 113
    '*'             shift, and go to state 114
    '/'             shift, and go to state 115
    '%'             shift, and go to state 116
    '<'             shift, and go to state 117
    '>'             shift, and go to state 118
    ':'             shift, and go to state 198


State 144

   70 expr: expr • '+' expr
   71     | expr • '-' expr
   72     | expr • '*' expr
   73     | expr • '/' expr
   74     | expr • '%' expr
   75     | expr • ASSIGN_PLUSEQ expr
   76     | expr • ASSIGN_MINUSEQ expr
   77     | expr • ASSIGN_MULEQ expr
   78     | expr • ASSIGN_DIVEQ expr
   79     | expr • ASSIGN_MODEQ expr
   80     | expr • POW expr
   80     | expr POW expr •  [KW_FOR, EQUALS, NE, LE, GE, OP_AND, OP_OR, '+', '-', '*', '/', '%', '<', '>', ')', ':', ';', ',', ']']
   82     | expr • OP_AND expr
   83     | expr • OP_OR expr
   84     | expr • NE expr
   85     | expr • EQUALS expr
   86     | expr • '<' expr
   87     | expr • LE expr
   88     | expr • '>' expr
   89     | expr • GE expr

    POW             shift, and go to state 100
    ASSIGN_PLUSEQ   shift, and go to state 107
    ASSIGN_MINUSEQ  shift, and go to state 108
    ASSIGN_MULEQ    shift, and go to state 109
    ASSIGN_DIVEQ    shift, and go to state 110
    ASSIGN_MODEQ    shift, and go to state 111

    $default  reduce using rule 80 (expr)

    Conflict between rule 80 and token POW resolved as shift (%right POW).
    Conflict between rule 80 and token EQUALS resolved as reduce (EQUALS < POW).
    Conflict between rule 80 and token NE resolved as reduce (NE < POW).
    Conflict between rule 80 and token LE resolved as reduce (LE < POW).
    Conflict between rule 80 and token GE resolved as reduce (GE < POW).
    Conflict between rule 80 and token OP_AND resolved as reduce (OP_AND < POW).
    Conflict between rule 80 and token OP_OR resolved as reduce (OP_OR < POW).
    Conflict between rule 80 and token ASSIGN_PLUSEQ resolved as shift (POW < ASSIGN_PLUSEQ).
    Conflict between rule 80 and token ASSIGN_MINUSEQ resolved as shift (POW < ASSIGN_MINUSEQ).
    Conflict between rule 80 and token ASSIGN_MULEQ resolved as shift (POW < ASSIGN_MULEQ).
    Conflict between rule 80 and token ASSIGN_DIVEQ resolved as shift (POW < ASSIGN_DIVEQ).
    Conflict between rule 80 and token ASSIGN_MODEQ resolved as shift (POW < ASSIGN_MODEQ).
    Conflict between rule 80 and token '+' resolved as reduce ('+' < POW).
    Conflict between rule 80 and token '-' resolved as reduce ('-' < POW).
    Conflict between rule 80 and token '*' resolved as reduce ('*' < POW).
    Conflict between rule 80 and token '/' resolved as reduce ('/' < POW).
    Conflict between rule 80 and token '%' resolved as reduce ('%' < POW).
    Conflict between rule 80 and token '<' resolved as reduce ('<' < POW).
    Conflict between rule 80 and token '>' resolved as reduce ('>' < POW).


State 145

   70 expr: expr • '+' expr
   71     | expr • '-' expr
   72     | expr • '*' expr
   73     | expr • '/' expr
   74     | expr • '%' expr
   75     | expr • ASSIGN_PLUSEQ expr
   76     | expr • ASSIGN_MINUSEQ expr
   77     | expr • ASSIGN_MULEQ expr
   78     | expr • ASSIGN_DIVEQ expr
   79     | expr • ASSIGN_MODEQ expr
   80     | expr • POW expr
   82     | expr • OP_AND expr
   83     | expr • OP_OR expr
   84     | expr • NE expr
   85     | expr • EQUALS expr
   85     | expr EQUALS expr •  [KW_FOR, EQUALS, NE, LE, GE, '+', '-', '*', '/', '%', '<', '>', ')', ':', ';', ',', ']']
   86     | expr • '<' expr
   87     | expr • LE expr
   88     | expr • '>' expr
   89     | expr • GE expr

    POW             shift, and go to state 100
    OP_AND          shift, and go to state 105
    OP_OR           shift, and go to state 106
    ASSIGN_PLUSEQ   shift, and go to state 107
    ASSIGN_MINUSEQ  shift, and go to state 108
    ASSIGN_MULEQ    shift, and go to state 109
    ASSIGN_DIVEQ    shift, and go to state 110
    ASSIGN_MODEQ    shift, and go to state 111

    $default  reduce using rule 85 (expr)

    Conflict between rule 85 and token POW resolved as shift (EQUALS < POW).
    Conflict between rule 85 and token EQUALS resolved as reduce (%left EQUALS).
    Conflict between rule 85 and token NE resolved as reduce (%left NE).
    Conflict between rule 85 and token LE resolved as reduce (LE < EQUALS).
    Conflict between rule 85 and token GE resolved as reduce (GE < EQUALS).
    Conflict between rule 85 and token OP_AND resolved as shift (EQUALS < OP_AND).
    Conflict between rule 85 and token OP_OR resolved as shift (EQUALS < OP_OR).
    Conflict between rule 85 and token ASSIGN_PLUSEQ resolved as shift (EQUALS < ASSIGN_PLUSEQ).
    Conflict between rule 85 and token ASSIGN_MINUSEQ resolved as shift (EQUALS < ASSIGN_MINUSEQ).
    Conflict between rule 85 and token ASSIGN_MULEQ resolved as shift (EQUALS < ASSIGN_MULEQ).
    Conflict between rule 85 and token ASSIGN_DIVEQ resolved as shift (EQUALS < ASSIGN_DIVEQ).
    Conflict between rule 85 and token ASSIGN_MODEQ resolved as shift (EQUALS < ASSIGN_MODEQ).
    Conflict between rule 85 and token '+' resolved as reduce ('+' < EQUALS).
    Conflict between rule 85 and token '-' resolved as reduce ('-' < EQUALS).
    Conflict between rule 85 and token '*' resolved as reduce ('*' < EQUALS).
    Conflict between rule 85 and token '/' resolved as reduce ('/' < EQUALS).
    Conflict between rule 85 and token '%' resolved as reduce ('%' < EQUALS).
    Conflict between rule 85 and token '<' resolved as reduce ('<' < EQUALS).
    Conflict between rule 85 and token '>' resolved as reduce ('>' < EQUALS).


State 146

   70 expr: expr • '+' expr
   71     | expr • '-' expr
   72     | expr • '*' expr
   73     | expr • '/' expr
   74     | expr • '%' expr
   75     | expr • ASSIGN_PLUSEQ expr
   76     | expr • ASSIGN_MINUSEQ expr
   77     | expr • ASSIGN_MULEQ expr
   78     | expr • ASSIGN_DIVEQ expr
   79     | expr • ASSIGN_MODEQ expr
   80     | expr • POW expr
   82     | expr • OP_AND expr
   83     | expr • OP_OR expr
   84     | expr • NE expr
   84     | expr NE expr •  [KW_FOR, EQUALS, NE, LE, GE, '+', '-', '*', '/', '%', '<', '>', ')', ':', ';', ',', ']']
   85     | expr • EQUALS expr
   86     | expr • '<' expr
   87     | expr • LE expr
   88     | expr • '>' expr
   89     | expr • GE expr

    POW             shift, and go to state 100
    OP_AND          shift, and go to state 105
    OP_OR           shift, and go to state 106
    ASSIGN_PLUSEQ   shift, and go to state 107
    ASSIGN_MINUSEQ  shift, and go to state 108
    ASSIGN_MULEQ    shift, and go to state 109
    ASSIGN_DIVEQ    shift, and go to state 110
    ASSIGN_MODEQ    shift, and go to state 111

    $default  reduce using rule 84 (expr)

    Conflict between rule 84 and token POW resolved as shift (NE < POW).
    Conflict between rule 84 and token EQUALS resolved as reduce (%left EQUALS).
    Conflict between rule 84 and token NE resolved as reduce (%left NE).
    Conflict between rule 84 and token LE resolved as reduce (LE < NE).
    Conflict between rule 84 and token GE resolved as reduce (GE < NE).
    Conflict between rule 84 and token OP_AND resolved as shift (NE < OP_AND).
    Conflict between rule 84 and token OP_OR resolved as shift (NE < OP_OR).
    Conflict between rule 84 and token ASSIGN_PLUSEQ resolved as shift (NE < ASSIGN_PLUSEQ).
    Conflict between rule 84 and token ASSIGN_MINUSEQ resolved as shift (NE < ASSIGN_MINUSEQ).
    Conflict between rule 84 and token ASSIGN_MULEQ resolved as shift (NE < ASSIGN_MULEQ).
    Conflict between rule 84 and token ASSIGN_DIVEQ resolved as shift (NE < ASSIGN_DIVEQ).
    Conflict between rule 84 and token ASSIGN_MODEQ resolved as shift (NE < ASSIGN_MODEQ).
    Conflict between rule 84 and token '+' resolved as reduce ('+' < NE).
    Conflict between rule 84 and token '-' resolved as reduce ('-' < NE).
    Conflict between rule 84 and token '*' resolved as reduce ('*' < NE).
    Conflict between rule 84 and token '/' resolved as reduce ('/' < NE).
    Conflict between rule 84 and token '%' resolved as reduce ('%' < NE).
    Conflict between rule 84 and token '<' resolved as reduce ('<' < NE).
    Conflict between rule 84 and token '>' resolved as reduce ('>' < NE).


State 147

   70 expr: expr • '+' expr
   71     | expr • '-' expr
   72     | expr • '*' expr
   73     | expr • '/' expr
   74     | expr • '%' expr
   75     | expr • ASSIGN_PLUSEQ expr
   76     | expr • ASSIGN_MINUSEQ expr
   77     | expr • ASSIGN_MULEQ expr
   78     | expr • ASSIGN_DIVEQ expr
   79     | expr • ASSIGN_MODEQ expr
   80     | expr • POW expr
   82     | expr • OP_AND expr
   83     | expr • OP_OR expr
   84     | expr • NE expr
   85     | expr • EQUALS expr
   86     | expr • '<' expr
   87     | expr • LE expr
   87     | expr LE expr •  [KW_FOR, LE, '+', '-', '*', '/', '%', '<', ')', ':', ';', ',', ']']
   88     | expr • '>' expr
   89     | expr • GE expr

    POW             shift, and go to state 100
    EQUALS          shift, and go to state 101
    NE              shift, and go to state 102
    GE              shift, and go to state 104
    OP_AND          shift, and go to state 105
    OP_OR           shift, and go to state 106
    ASSIGN_PLUSEQ   shift, and go to state 107
    ASSIGN_MINUSEQ  shift, and go to state 108
    ASSIGN_MULEQ    shift, and go to state 109
    ASSIGN_DIVEQ    shift, and go to state 110
    ASSIGN_MODEQ    shift, and go to state 111
    '>'             shift, and go to state 118

    $default  reduce using rule 87 (expr)

    Conflict between rule 87 and token POW resolved as shift (LE < POW).
    Conflict between rule 87 and token EQUALS resolved as shift (LE < EQUALS).
    Conflict between rule 87 and token NE resolved as shift (LE < NE).
    Conflict between rule 87 and token LE resolved as reduce (%left LE).
    Conflict between rule 87 and token GE resolved as shift (LE < GE).
    Conflict between rule 87 and token OP_AND resolved as shift (LE < OP_AND).
    Conflict between rule 87 and token OP_OR resolved as shift (LE < OP_OR).
    Conflict between rule 87 and token ASSIGN_PLUSEQ resolved as shift (LE < ASSIGN_PLUSEQ).
    Conflict between rule 87 and token ASSIGN_MINUSEQ resolved as shift (LE < ASSIGN_MINUSEQ).
    Conflict between rule 87 and token ASSIGN_MULEQ resolved as shift (LE < ASSIGN_MULEQ).
    Conflict between rule 87 and token ASSIGN_DIVEQ resolved as shift (LE < ASSIGN_DIVEQ).
    Conflict between rule 87 and token ASSIGN_MODEQ resolved as shift (LE < ASSIGN_MODEQ).
    Conflict between rule 87 and token '+' resolved as reduce ('+' < LE).
    Conflict between rule 87 and token '-' resolved as reduce ('-' < LE).
    Conflict between rule 87 and token '*' resolved as reduce ('*' < LE).
    Conflict between rule 87 and token '/' resolved as reduce ('/' < LE).
    Conflict between rule 87 and token '%' resolved as reduce ('%' < LE).
    Conflict between rule 87 and token '<' resolved as reduce (%left '<').
    Conflict between rule 87 and token '>' resolved as shift (LE < '>').


State 148

   70 expr: expr • '+' expr
   71     | expr • '-' expr
   72     | expr • '*' expr
   73     | expr • '/' expr
   74     | expr • '%' expr
   75     | expr • ASSIGN_PLUSEQ expr
   76     | expr • ASSIGN_MINUSEQ expr
   77     | expr • ASSIGN_MULEQ expr
   78     | expr • ASSIGN_DIVEQ expr
   79     | expr • ASSIGN_MODEQ expr
   80     | expr • POW expr
   82     | expr • OP_AND expr
   83     | expr • OP_OR expr
   84     | expr • NE expr
   85     | expr • EQUALS expr
   86     | expr • '<' expr
   87     | expr • LE expr
   88     | expr • '>' expr
   89     | expr • GE expr
   89     | expr GE expr •  [KW_FOR, LE, GE, '+', '-', '*', '/', '%', '<', '>', ')', ':', ';', ',', ']']

    POW             shift, and go to state 100
    EQUALS          shift, and go to state 101
    NE              shift, and go to state 102
    OP_AND          shift, and go to state 105
    OP_OR           shift, and go to state 106
    ASSIGN_PLUSEQ   shift, and go to state 107
    ASSIGN_MINUSEQ  shift, and go to state 108
    ASSIGN_MULEQ    shift, and go to state 109
    ASSIGN_DIVEQ    shift, and go to state 110
    ASSIGN_MODEQ    shift, and go to state 111

    $default  reduce using rule 89 (expr)

    Conflict between rule 89 and token POW resolved as shift (GE < POW).
    Conflict between rule 89 and token EQUALS resolved as shift (GE < EQUALS).
    Conflict between rule 89 and token NE resolved as shift (GE < NE).
    Conflict between rule 89 and token LE resolved as reduce (LE < GE).
    Conflict between rule 89 and token GE resolved as reduce (%left GE).
    Conflict between rule 89 and token OP_AND resolved as shift (GE < OP_AND).
    Conflict between rule 89 and token OP_OR resolved as shift (GE < OP_OR).
    Conflict between rule 89 and token ASSIGN_PLUSEQ resolved as shift (GE < ASSIGN_PLUSEQ).
    Conflict between rule 89 and token ASSIGN_MINUSEQ resolved as shift (GE < ASSIGN_MINUSEQ).
    Conflict between rule 89 and token ASSIGN_MULEQ resolved as shift (GE < ASSIGN_MULEQ).
    Conflict between rule 89 and token ASSIGN_DIVEQ resolved as shift (GE < ASSIGN_DIVEQ).
    Conflict between rule 89 and token ASSIGN_MODEQ resolved as shift (GE < ASSIGN_MODEQ).
    Conflict between rule 89 and token '+' resolved as reduce ('+' < GE).
    Conflict between rule 89 and token '-' resolved as reduce ('-' < GE).
    Conflict between rule 89 and token '*' resolved as reduce ('*' < GE).
    Conflict between rule 89 and token '/' resolved as reduce ('/' < GE).
    Conflict between rule 89 and token '%' resolved as reduce ('%' < GE).
    Conflict between rule 89 and token '<' resolved as reduce ('<' < GE).
    Conflict between rule 89 and token '>' resolved as reduce (%left '>').


State 149

   70 expr: expr • '+' expr
   71     | expr • '-' expr
   72     | expr • '*' expr
   73     | expr • '/' expr
   74     | expr • '%' expr
   75     | expr • ASSIGN_PLUSEQ expr
   76     | expr • ASSIGN_MINUSEQ expr
   77     | expr • ASSIGN_MULEQ expr
   78     | expr • ASSIGN_DIVEQ expr
   79     | expr • ASSIGN_MODEQ expr
   80     | expr • POW expr
   82     | expr • OP_AND expr
   82     | expr OP_AND expr •  [KW_FOR, EQUALS, NE, LE, GE, OP_AND, '+', '-', '*', '/', '%', '<', '>', ')', ':', ';', ',', ']']
   83     | expr • OP_OR expr
   84     | expr • NE expr
   85     | expr • EQUALS expr
   86     | expr • '<' expr
   87     | expr • LE expr
   88     | expr • '>' expr
   89     | expr • GE expr

    POW             shift, and go to state 100
    OP_OR           shift, and go to state 106
    ASSIGN_PLUSEQ   shift, and go to state 107
    ASSIGN_MINUSEQ  shift, and go to state 108
    ASSIGN_MULEQ    shift, and go to state 109
    ASSIGN_DIVEQ    shift, and go to state 110
    ASSIGN_MODEQ    shift, and go to state 111

    $default  reduce using rule 82 (expr)

    Conflict between rule 82 and token POW resolved as shift (OP_AND < POW).
    Conflict between rule 82 and token EQUALS resolved as reduce (EQUALS < OP_AND).
    Conflict between rule 82 and token NE resolved as reduce (NE < OP_AND).
    Conflict between rule 82 and token LE resolved as reduce (LE < OP_AND).
    Conflict between rule 82 and token GE resolved as reduce (GE < OP_AND).
    Conflict between rule 82 and token OP_AND resolved as reduce (%left OP_AND).
    Conflict between rule 82 and token OP_OR resolved as shift (OP_AND < OP_OR).
    Conflict between rule 82 and token ASSIGN_PLUSEQ resolved as shift (OP_AND < ASSIGN_PLUSEQ).
    Conflict between rule 82 and token ASSIGN_MINUSEQ resolved as shift (OP_AND < ASSIGN_MINUSEQ).
    Conflict between rule 82 and token ASSIGN_MULEQ resolved as shift (OP_AND < ASSIGN_MULEQ).
    Conflict between rule 82 and token ASSIGN_DIVEQ resolved as shift (OP_AND < ASSIGN_DIVEQ).
    Conflict between rule 82 and token ASSIGN_MODEQ resolved as shift (OP_AND < ASSIGN_MODEQ).
    Conflict between rule 82 and token '+' resolved as reduce ('+' < OP_AND).
    Conflict between rule 82 and token '-' resolved as reduce ('-' < OP_AND).
    Conflict between rule 82 and token '*' resolved as reduce ('*' < OP_AND).
    Conflict between rule 82 and token '/' resolved as reduce ('/' < OP_AND).
    Conflict between rule 82 and token '%' resolved as reduce ('%' < OP_AND).
    Conflict between rule 82 and token '<' resolved as reduce ('<' < OP_AND).
    Conflict between rule 82 and token '>' resolved as reduce ('>' < OP_AND).


State 150

   70 expr: expr • '+' expr
   71     | expr • '-' expr
   72     | expr • '*' expr
   73     | expr • '/' expr
   74     | expr • '%' expr
   75     | expr • ASSIGN_PLUSEQ expr
   76     | expr • ASSIGN_MINUSEQ expr
   77     | expr • ASSIGN_MULEQ expr
   78     | expr • ASSIGN_DIVEQ expr
   79     | expr • ASSIGN_MODEQ expr
   80     | expr • POW expr
   82     | expr • OP_AND expr
   83     | expr • OP_OR expr
   83     | expr OP_OR expr •  [KW_FOR, EQUALS, NE, LE, GE, OP_AND, OP_OR, '+', '-', '*', '/', '%', '<', '>', ')', ':', ';', ',', ']']
   84     | expr • NE expr
   85     | expr • EQUALS expr
   86     | expr • '<' expr
   87     | expr • LE expr
   88     | expr • '>' expr
   89     | expr • GE expr

    POW             shift, and go to state 100
    ASSIGN_PLUSEQ   shift, and go to state 107
    ASSIGN_MINUSEQ  shift, and go to state 108
    ASSIGN_MULEQ    shift, and go to state 109
    ASSIGN_DIVEQ    shift, and go to state 110
    ASSIGN_MODEQ    shift, and go to state 111

    $default  reduce using rule 83 (expr)

    Conflict between rule 83 and token POW resolved as shift (OP_OR < POW).
    Conflict between rule 83 and token EQUALS resolved as reduce (EQUALS < OP_OR).
    Conflict between rule 83 and token NE resolved as reduce (NE < OP_OR).
    Conflict between rule 83 and token LE resolved as reduce (LE < OP_OR).
    Conflict between rule 83 and token GE resolved as reduce (GE < OP_OR).
    Conflict between rule 83 and token OP_AND resolved as reduce (OP_AND < OP_OR).
    Conflict between rule 83 and token OP_OR resolved as reduce (%left OP_OR).
    Conflict between rule 83 and token ASSIGN_PLUSEQ resolved as shift (OP_OR < ASSIGN_PLUSEQ).
    Conflict between rule 83 and token ASSIGN_MINUSEQ resolved as shift (OP_OR < ASSIGN_MINUSEQ).
    Conflict between rule 83 and token ASSIGN_MULEQ resolved as shift (OP_OR < ASSIGN_MULEQ).
    Conflict between rule 83 and token ASSIGN_DIVEQ resolved as shift (OP_OR < ASSIGN_DIVEQ).
    Conflict between rule 83 and token ASSIGN_MODEQ resolved as shift (OP_OR < ASSIGN_MODEQ).
    Conflict between rule 83 and token '+' resolved as reduce ('+' < OP_OR).
    Conflict between rule 83 and token '-' resolved as reduce ('-' < OP_OR).
    Conflict between rule 83 and token '*' resolved as reduce ('*' < OP_OR).
    Conflict between rule 83 and token '/' resolved as reduce ('/' < OP_OR).
    Conflict between rule 83 and token '%' resolved as reduce ('%' < OP_OR).
    Conflict between rule 83 and token '<' resolved as reduce ('<' < OP_OR).
    Conflict between rule 83 and token '>' resolved as reduce ('>' < OP_OR).


State 151

   70 expr: expr • '+' expr
   71     | expr • '-' expr
   72     | expr • '*' expr
   73     | expr • '/' expr
   74     | expr • '%' expr
   75     | expr • ASSIGN_PLUSEQ expr
   75     | expr ASSIGN_PLUSEQ expr •  [KW_FOR, POW, EQUALS, NE, LE, GE, OP_AND, OP_OR, '+', '-', '*', '/', '%', '<', '>', ')', ':', ';', ',', ']']
   76     | expr • ASSIGN_MINUSEQ expr
   77     | expr • ASSIGN_MULEQ expr
   78     | expr • ASSIGN_DIVEQ expr
   79     | expr • ASSIGN_MODEQ expr
   80     | expr • POW expr
   82     | expr • OP_AND expr
   83     | expr • OP_OR expr
   84     | expr • NE expr
   85     | expr • EQUALS expr
   86     | expr • '<' expr
   87     | expr • LE expr
   88     | expr • '>' expr
   89     | expr • GE expr

    ASSIGN_PLUSEQ   shift, and go to state 107
    ASSIGN_MINUSEQ  shift, and go to state 108
    ASSIGN_MULEQ    shift, and go to state 109
    ASSIGN_DIVEQ    shift, and go to state 110
    ASSIGN_MODEQ    shift, and go to state 111

    $default  reduce using rule 75 (expr)

    Conflict between rule 75 and token POW resolved as reduce (POW < ASSIGN_PLUSEQ).
    Conflict between rule 75 and token EQUALS resolved as reduce (EQUALS < ASSIGN_PLUSEQ).
    Conflict between rule 75 and token NE resolved as reduce (NE < ASSIGN_PLUSEQ).
    Conflict between rule 75 and token LE resolved as reduce (LE < ASSIGN_PLUSEQ).
    Conflict between rule 75 and token GE resolved as reduce (GE < ASSIGN_PLUSEQ).
    Conflict between rule 75 and token OP_AND resolved as reduce (OP_AND < ASSIGN_PLUSEQ).
    Conflict between rule 75 and token OP_OR resolved as reduce (OP_OR < ASSIGN_PLUSEQ).
    Conflict between rule 75 and token ASSIGN_PLUSEQ resolved as shift (%right ASSIGN_PLUSEQ).
    Conflict between rule 75 and token ASSIGN_MINUSEQ resolved as shift (%right ASSIGN_MINUSEQ).
    Conflict between rule 75 and token ASSIGN_MULEQ resolved as shift (%right ASSIGN_MULEQ).
    Conflict between rule 75 and token ASSIGN_DIVEQ resolved as shift (ASSIGN_PLUSEQ < ASSIGN_DIVEQ).
    Conflict between rule 75 and token ASSIGN_MODEQ resolved as shift (ASSIGN_PLUSEQ < ASSIGN_MODEQ).
    Conflict between rule 75 and token '+' resolved as reduce ('+' < ASSIGN_PLUSEQ).
    Conflict between rule 75 and token '-' resolved as reduce ('-' < ASSIGN_PLUSEQ).
    Conflict between rule 75 and token '*' resolved as reduce ('*' < ASSIGN_PLUSEQ).
    Conflict between rule 75 and token '/' resolved as reduce ('/' < ASSIGN_PLUSEQ).
    Conflict between rule 75 and token '%' resolved as reduce ('%' < ASSIGN_PLUSEQ).
    Conflict between rule 75 and token '<' resolved as reduce ('<' < ASSIGN_PLUSEQ).
    Conflict between rule 75 and token '>' resolved as reduce ('>' < ASSIGN_PLUSEQ).


State 152

   70 expr: expr • '+' expr
   71     | expr • '-' expr
   72     | expr • '*' expr
   73     | expr • '/' expr
   74     | expr • '%' expr
   75     | expr • ASSIGN_PLUSEQ expr
   76     | expr • ASSIGN_MINUSEQ expr
   76     | expr ASSIGN_MINUSEQ expr •  [KW_FOR, POW, EQUALS, NE, LE, GE, OP_AND, OP_OR, '+', '-', '*', '/', '%', '<', '>', ')', ':', ';', ',', ']']
   77     | expr • ASSIGN_MULEQ expr
   78     | expr • ASSIGN_DIVEQ expr
   79     | expr • ASSIGN_MODEQ expr
   80     | expr • POW expr
   82     | expr • OP_AND expr
   83     | expr • OP_OR expr
   84     | expr • NE expr
   85     | expr • EQUALS expr
   86     | expr • '<' expr
   87     | expr • LE expr
   88     | expr • '>' expr
   89     | expr • GE expr

    ASSIGN_PLUSEQ   shift, and go to state 107
    ASSIGN_MINUSEQ  shift, and go to state 108
    ASSIGN_MULEQ    shift, and go to state 109
    ASSIGN_DIVEQ    shift, and go to state 110
    ASSIGN_MODEQ    shift, and go to state 111

    $default  reduce using rule 76 (expr)

    Conflict between rule 76 and token POW resolved as reduce (POW < ASSIGN_MINUSEQ).
    Conflict between rule 76 and token EQUALS resolved as reduce (EQUALS < ASSIGN_MINUSEQ).
    Conflict between rule 76 and token NE resolved as reduce (NE < ASSIGN_MINUSEQ).
    Conflict between rule 76 and token LE resolved as reduce (LE < ASSIGN_MINUSEQ).
    Conflict between rule 76 and token GE resolved as reduce (GE < ASSIGN_MINUSEQ).
    Conflict between rule 76 and token OP_AND resolved as reduce (OP_AND < ASSIGN_MINUSEQ).
    Conflict between rule 76 and token OP_OR resolved as reduce (OP_OR < ASSIGN_MINUSEQ).
    Conflict between rule 76 and token ASSIGN_PLUSEQ resolved as shift (%right ASSIGN_PLUSEQ).
    Conflict between rule 76 and token ASSIGN_MINUSEQ resolved as shift (%right ASSIGN_MINUSEQ).
    Conflict between rule 76 and token ASSIGN_MULEQ resolved as shift (%right ASSIGN_MULEQ).
    Conflict between rule 76 and token ASSIGN_DIVEQ resolved as shift (ASSIGN_MINUSEQ < ASSIGN_DIVEQ).
    Conflict between rule 76 and token ASSIGN_MODEQ resolved as shift (ASSIGN_MINUSEQ < ASSIGN_MODEQ).
    Conflict between rule 76 and token '+' resolved as reduce ('+' < ASSIGN_MINUSEQ).
    Conflict between rule 76 and token '-' resolved as reduce ('-' < ASSIGN_MINUSEQ).
    Conflict between rule 76 and token '*' resolved as reduce ('*' < ASSIGN_MINUSEQ).
    Conflict between rule 76 and token '/' resolved as reduce ('/' < ASSIGN_MINUSEQ).
    Conflict between rule 76 and token '%' resolved as reduce ('%' < ASSIGN_MINUSEQ).
    Conflict between rule 76 and token '<' resolved as reduce ('<' < ASSIGN_MINUSEQ).
    Conflict between rule 76 and token '>' resolved as reduce ('>' < ASSIGN_MINUSEQ).


State 153

   70 expr: expr • '+' expr
   71     | expr • '-' expr
   72     | expr • '*' expr
   73     | expr • '/' expr
   74     | expr • '%' expr
   75     | expr • ASSIGN_PLUSEQ expr
   76     | expr • ASSIGN_MINUSEQ expr
   77     | expr • ASSIGN_MULEQ expr
   77     | expr ASSIGN_MULEQ expr •  [KW_FOR, POW, EQUALS, NE, LE, GE, OP_AND, OP_OR, '+', '-', '*', '/', '%', '<', '>', ')', ':', ';', ',', ']']
   78     | expr • ASSIGN_DIVEQ expr
   79     | expr • ASSIGN_MODEQ expr
   80     | expr • POW expr
   82     | expr • OP_AND expr
   83     | expr • OP_OR expr
   84     | expr • NE expr
   85     | expr • EQUALS expr
   86     | expr • '<' expr
   87     | expr • LE expr
   88     | expr • '>' expr
   89     | expr • GE expr

    ASSIGN_PLUSEQ   shift, and go to state 107
    ASSIGN_MINUSEQ  shift, and go to state 108
    ASSIGN_MULEQ    shift, and go to state 109
    ASSIGN_DIVEQ    shift, and go to state 110
    ASSIGN_MODEQ    shift, and go to state 111

    $default  reduce using rule 77 (expr)

    Conflict between rule 77 and token POW resolved as reduce (POW < ASSIGN_MULEQ).
    Conflict between rule 77 and token EQUALS resolved as reduce (EQUALS < ASSIGN_MULEQ).
    Conflict between rule 77 and token NE resolved as reduce (NE < ASSIGN_MULEQ).
    Conflict between rule 77 and token LE resolved as reduce (LE < ASSIGN_MULEQ).
    Conflict between rule 77 and token GE resolved as reduce (GE < ASSIGN_MULEQ).
    Conflict between rule 77 and token OP_AND resolved as reduce (OP_AND < ASSIGN_MULEQ).
    Conflict between rule 77 and token OP_OR resolved as reduce (OP_OR < ASSIGN_MULEQ).
    Conflict between rule 77 and token ASSIGN_PLUSEQ resolved as shift (%right ASSIGN_PLUSEQ).
    Conflict between rule 77 and token ASSIGN_MINUSEQ resolved as shift (%right ASSIGN_MINUSEQ).
    Conflict between rule 77 and token ASSIGN_MULEQ resolved as shift (%right ASSIGN_MULEQ).
    Conflict between rule 77 and token ASSIGN_DIVEQ resolved as shift (ASSIGN_MULEQ < ASSIGN_DIVEQ).
    Conflict between rule 77 and token ASSIGN_MODEQ resolved as shift (ASSIGN_MULEQ < ASSIGN_MODEQ).
    Conflict between rule 77 and token '+' resolved as reduce ('+' < ASSIGN_MULEQ).
    Conflict between rule 77 and token '-' resolved as reduce ('-' < ASSIGN_MULEQ).
    Conflict between rule 77 and token '*' resolved as reduce ('*' < ASSIGN_MULEQ).
    Conflict between rule 77 and token '/' resolved as reduce ('/' < ASSIGN_MULEQ).
    Conflict between rule 77 and token '%' resolved as reduce ('%' < ASSIGN_MULEQ).
    Conflict between rule 77 and token '<' resolved as reduce ('<' < ASSIGN_MULEQ).
    Conflict between rule 77 and token '>' resolved as reduce ('>' < ASSIGN_MULEQ).


State 154

   70 expr: expr • '+' expr
   71     | expr • '-' expr
   72     | expr • '*' expr
   73     | expr • '/' expr
   74     | expr • '%' expr
   75     | expr • ASSIGN_PLUSEQ expr
   76     | expr • ASSIGN_MINUSEQ expr
   77     | expr • ASSIGN_MULEQ expr
   78     | expr • ASSIGN_DIVEQ expr
   78     | expr ASSIGN_DIVEQ expr •  [KW_FOR, POW, EQUALS, NE, LE, GE, OP_AND, OP_OR, ASSIGN_PLUSEQ, ASSIGN_MINUSEQ, ASSIGN_MULEQ, '+', '-', '*', '/', '%', '<', '>', ')', ':', ';', ',', ']']
   79     | expr • ASSIGN_MODEQ expr
   80     | expr • POW expr
   82     | expr • OP_AND expr
   83     | expr • OP_OR expr
   84     | expr • NE expr
   85     | expr • EQUALS expr
   86     | expr • '<' expr
   87     | expr • LE expr
   88     | expr • '>' expr
   89     | expr • GE expr

    ASSIGN_DIVEQ  shift, and go to state 110
    ASSIGN_MODEQ  shift, and go to state 111

    $default  reduce using rule 78 (expr)

    Conflict between rule 78 and token POW resolved as reduce (POW < ASSIGN_DIVEQ).
    Conflict between rule 78 and token EQUALS resolved as reduce (EQUALS < ASSIGN_DIVEQ).
    Conflict between rule 78 and token NE resolved as reduce (NE < ASSIGN_DIVEQ).
    Conflict between rule 78 and token LE resolved as reduce (LE < ASSIGN_DIVEQ).
    Conflict between rule 78 and token GE resolved as reduce (GE < ASSIGN_DIVEQ).
    Conflict between rule 78 and token OP_AND resolved as reduce (OP_AND < ASSIGN_DIVEQ).
    Conflict between rule 78 and token OP_OR resolved as reduce (OP_OR < ASSIGN_DIVEQ).
    Conflict between rule 78 and token ASSIGN_PLUSEQ resolved as reduce (ASSIGN_PLUSEQ < ASSIGN_DIVEQ).
    Conflict between rule 78 and token ASSIGN_MINUSEQ resolved as reduce (ASSIGN_MINUSEQ < ASSIGN_DIVEQ).
    Conflict between rule 78 and token ASSIGN_MULEQ resolved as reduce (ASSIGN_MULEQ < ASSIGN_DIVEQ).
    Conflict between rule 78 and token ASSIGN_DIVEQ resolved as shift (%right ASSIGN_DIVEQ).
    Conflict between rule 78 and token ASSIGN_MODEQ resolved as shift (%right ASSIGN_MODEQ).
    Conflict between rule 78 and token '+' resolved as reduce ('+' < ASSIGN_DIVEQ).
    Conflict between rule 78 and token '-' resolved as reduce ('-' < ASSIGN_DIVEQ).
    Conflict between rule 78 and token '*' resolved as reduce ('*' < ASSIGN_DIVEQ).
    Conflict between rule 78 and token '/' resolved as reduce ('/' < ASSIGN_DIVEQ).
    Conflict between rule 78 and token '%' resolved as reduce ('%' < ASSIGN_DIVEQ).
    Conflict between rule 78 and token '<' resolved as reduce ('<' < ASSIGN_DIVEQ).
    Conflict between rule 78 and token '>' resolved as reduce ('>' < ASSIGN_DIVEQ).


State 155

   70 expr: expr • '+' expr
   71     | expr • '-' expr
   72     | expr • '*' expr
   73     | expr • '/' expr
   74     | expr • '%' expr
   75     | expr • ASSIGN_PLUSEQ expr
   76     | expr • ASSIGN_MINUSEQ expr
   77     | expr • ASSIGN_MULEQ expr
   78     | expr • ASSIGN_DIVEQ expr
   79     | expr • ASSIGN_MODEQ expr
   79     | expr ASSIGN_MODEQ expr •  [KW_FOR, POW, EQUALS, NE, LE, GE, OP_AND, OP_OR, ASSIGN_PLUSEQ, ASSIGN_MINUSEQ, ASSIGN_MULEQ, '+', '-', '*', '/', '%', '<', '>', ')', ':', ';', ',', ']']
   80     | expr • POW expr
   82     | expr • OP_AND expr
   83     | expr • OP_OR expr
   84     | expr • NE expr
   85     | expr • EQUALS expr
   86     | expr • '<' expr
   87     | expr • LE expr
   88     | expr • '>' expr
   89     | expr • GE expr

    ASSIGN_DIVEQ  shift, and go to state 110
    ASSIGN_MODEQ  shift, and go to state 111

    $default  reduce using rule 79 (expr)

    Conflict between rule 79 and token POW resolved as reduce (POW < ASSIGN_MODEQ).
    Conflict between rule 79 and token EQUALS resolved as reduce (EQUALS < ASSIGN_MODEQ).
    Conflict between rule 79 and token NE resolved as reduce (NE < ASSIGN_MODEQ).
    Conflict between rule 79 and token LE resolved as reduce (LE < ASSIGN_MODEQ).
    Conflict between rule 79 and token GE resolved as reduce (GE < ASSIGN_MODEQ).
    Conflict between rule 79 and token OP_AND resolved as reduce (OP_AND < ASSIGN_MODEQ).
    Conflict between rule 79 and token OP_OR resolved as reduce (OP_OR < ASSIGN_MODEQ).
    Conflict between rule 79 and token ASSIGN_PLUSEQ resolved as reduce (ASSIGN_PLUSEQ < ASSIGN_MODEQ).
    Conflict between rule 79 and token ASSIGN_MINUSEQ resolved as reduce (ASSIGN_MINUSEQ < ASSIGN_MODEQ).
    Conflict between rule 79 and token ASSIGN_MULEQ resolved as reduce (ASSIGN_MULEQ < ASSIGN_MODEQ).
    Conflict between rule 79 and token ASSIGN_DIVEQ resolved as shift (%right ASSIGN_DIVEQ).
    Conflict between rule 79 and token ASSIGN_MODEQ resolved as shift (%right ASSIGN_MODEQ).
    Conflict between rule 79 and token '+' resolved as reduce ('+' < ASSIGN_MODEQ).
    Conflict between rule 79 and token '-' resolved as reduce ('-' < ASSIGN_MODEQ).
    Conflict between rule 79 and token '*' resolved as reduce ('*' < ASSIGN_MODEQ).
    Conflict between rule 79 and token '/' resolved as reduce ('/' < ASSIGN_MODEQ).
    Conflict between rule 79 and token '%' resolved as reduce ('%' < ASSIGN_MODEQ).
    Conflict between rule 79 and token '<' resolved as reduce ('<' < ASSIGN_MODEQ).
    Conflict between rule 79 and token '>' resolved as reduce ('>' < ASSIGN_MODEQ).


State 156

   70 expr: expr • '+' expr
   70     | expr '+' expr •  [KW_FOR, '+', '-', ')', ':', ';', ',', ']']
   71     | expr • '-' expr
   72     | expr • '*' expr
   73     | expr • '/' expr
   74     | expr • '%' expr
   75     | expr • ASSIGN_PLUSEQ expr
   76     | expr • ASSIGN_MINUSEQ expr
   77     | expr • ASSIGN_MULEQ expr
   78     | expr • ASSIGN_DIVEQ expr
   79     | expr • ASSIGN_MODEQ expr
   80     | expr • POW expr
   82     | expr • OP_AND expr
   83     | expr • OP_OR expr
   84     | expr • NE expr
   85     | expr • EQUALS expr
   86     | expr • '<' expr
   87     | expr • LE expr
   88     | expr • '>' expr
   89     | expr • GE expr

    POW             shift, and go to state 100
    EQUALS          shift, and go to state 101
    NE              shift, and go to state 102
    LE              shift, and go to state 103
    GE              shift, and go to state 104
    OP_AND          shift, and go to state 105
    OP_OR           shift, and go to state 106
    ASSIGN_PLUSEQ   shift, and go to state 107
    ASSIGN_MINUSEQ  shift, and go to state 108
    ASSIGN_MULEQ    shift, and go to state 109
    ASSIGN_DIVEQ    shift, and go to state 110
    ASSIGN_MODEQ    shift, and go to state 111
    '*'             shift, and go to state 114
    '/'             shift, and go to state 115
    '%'             shift, and go to state 116
    '<'             shift, and go to state 117
    '>'             shift, and go to state 118

    $default  reduce using rule 70 (expr)

    Conflict between rule 70 and token POW resolved as shift ('+' < POW).
    Conflict between rule 70 and token EQUALS resolved as shift ('+' < EQUALS).
    Conflict between rule 70 and token NE resolved as shift ('+' < NE).
    Conflict between rule 70 and token LE resolved as shift ('+' < LE).
    Conflict between rule 70 and token GE resolved as shift ('+' < GE).
    Conflict between rule 70 and token OP_AND resolved as shift ('+' < OP_AND).
    Conflict between rule 70 and token OP_OR resolved as shift ('+' < OP_OR).
    Conflict between rule 70 and token ASSIGN_PLUSEQ resolved as shift ('+' < ASSIGN_PLUSEQ).
    Conflict between rule 70 and token ASSIGN_MINUSEQ resolved as shift ('+' < ASSIGN_MINUSEQ).
    Conflict between rule 70 and token ASSIGN_MULEQ resolved as shift ('+' < ASSIGN_MULEQ).
    Conflict between rule 70 and token ASSIGN_DIVEQ resolved as shift ('+' < ASSIGN_DIVEQ).
    Conflict between rule 70 and token ASSIGN_MODEQ resolved as shift ('+' < ASSIGN_MODEQ).
    Conflict between rule 70 and token '+' resolved as reduce (%left '+').
    Conflict between rule 70 and token '-' resolved as reduce (%left '-').
    Conflict between rule 70 and token '*' resolved as shift ('+' < '*').
    Conflict between rule 70 and token '/' resolved as shift ('+' < '/').
    Conflict between rule 70 and token '%' resolved as shift ('+' < '%').
    Conflict between rule 70 and token '<' resolved as shift ('+' < '<').
    Conflict between rule 70 and token '>' resolved as shift ('+' < '>').


State 157

   70 expr: expr • '+' expr
   71     | expr • '-' expr
   71     | expr '-' expr •  [KW_FOR, '+', '-', ')', ':', ';', ',', ']']
   72     | expr • '*' expr
   73     | expr • '/' expr
   74     | expr • '%' expr
   75     | expr • ASSIGN_PLUSEQ expr
   76     | expr • ASSIGN_MINUSEQ expr
   77     | expr • ASSIGN_MULEQ expr
   78     | expr • ASSIGN_DIVEQ expr
   79     | expr • ASSIGN_MODEQ expr
   80     | expr • POW expr
   82     | expr • OP_AND expr
   83     | expr • OP_OR expr
   84     | expr • NE expr
   85     | expr • EQUALS expr
   86     | expr • '<' expr
   87     | expr • LE expr
   88     | expr • '>' expr
   89     | expr • GE expr

    POW             shift, and go to state 100
    EQUALS          shift, and go to state 101
    NE              shift, and go to state 102
    LE              shift, and go to state 103
    GE              shift, and go to state 104
    OP_AND          shift, and go to state 105
    OP_OR           shift, and go to state 106
    ASSIGN_PLUSEQ   shift, and go to state 107
    ASSIGN_MINUSEQ  shift, and go to state 108
    ASSIGN_MULEQ    shift, and go to state 109
    ASSIGN_DIVEQ    shift, and go to state 110
    ASSIGN_MODEQ    shift, and go to state 111
    '*'             shift, and go to state 114
    '/'             shift, and go to state 115
    '%'             shift, and go to state 116
    '<'             shift, and go to state 117
    '>'             shift, and go to state 118

    $default  reduce using rule 71 (expr)

    Conflict between rule 71 and token POW resolved as shift ('-' < POW).
    Conflict between rule 71 and token EQUALS resolved as shift ('-' < EQUALS).
    Conflict between rule 71 and token NE resolved as shift ('-' < NE).
    Conflict between rule 71 and token LE resolved as shift ('-' < LE).
    Conflict between rule 71 and token GE resolved as shift ('-' < GE).
    Conflict between rule 71 and token OP_AND resolved as shift ('-' < OP_AND).
    Conflict between rule 71 and token OP_OR resolved as shift ('-' < OP_OR).
    Conflict between rule 71 and token ASSIGN_PLUSEQ resolved as shift ('-' < ASSIGN_PLUSEQ).
    Conflict between rule 71 and token ASSIGN_MINUSEQ resolved as shift ('-' < ASSIGN_MINUSEQ).
    Conflict between rule 71 and token ASSIGN_MULEQ resolved as shift ('-' < ASSIGN_MULEQ).
    Conflict between rule 71 and token ASSIGN_DIVEQ resolved as shift ('-' < ASSIGN_DIVEQ).
    Conflict between rule 71 and token ASSIGN_MODEQ resolved as shift ('-' < ASSIGN_MODEQ).
    Conflict between rule 71 and token '+' resolved as reduce (%left '+').
    Conflict between rule 71 and token '-' resolved as reduce (%left '-').
    Conflict between rule 71 and token '*' resolved as shift ('-' < '*').
    Conflict between rule 71 and token '/' resolved as shift ('-' < '/').
    Conflict between rule 71 and token '%' resolved as shift ('-' < '%').
    Conflict between rule 71 and token '<' resolved as shift ('-' < '<').
    Conflict between rule 71 and token '>' resolved as shift ('-' < '>').


State 158

   70 expr: expr • '+' expr
   71     | expr • '-' expr
   72     | expr • '*' expr
   72     | expr '*' expr •  [KW_FOR, '+', '-', '*', '/', '%', ')', ':', ';', ',', ']']
   73     | expr • '/' expr
   74     | expr • '%' expr
   75     | expr • ASSIGN_PLUSEQ expr
   76     | expr • ASSIGN_MINUSEQ expr
   77     | expr • ASSIGN_MULEQ expr
   78     | expr • ASSIGN_DIVEQ expr
   79     | expr • ASSIGN_MODEQ expr
   80     | expr • POW expr
   82     | expr • OP_AND expr
   83     | expr • OP_OR expr
   84     | expr • NE expr
   85     | expr • EQUALS expr
   86     | expr • '<' expr
   87     | expr • LE expr
   88     | expr • '>' expr
   89     | expr • GE expr

    POW             shift, and go to state 100
    EQUALS          shift, and go to state 101
    NE              shift, and go to state 102
    LE              shift, and go to state 103
    GE              shift, and go to state 104
    OP_AND          shift, and go to state 105
    OP_OR           shift, and go to state 106
    ASSIGN_PLUSEQ   shift, and go to state 107
    ASSIGN_MINUSEQ  shift, and go to state 108
    ASSIGN_MULEQ    shift, and go to state 109
    ASSIGN_DIVEQ    shift, and go to state 110
    ASSIGN_MODEQ    shift, and go to state 111
    '<'             shift, and go to state 117
    '>'             shift, and go to state 118

    $default  reduce using rule 72 (expr)

    Conflict between rule 72 and token POW resolved as shift ('*' < POW).
    Conflict between rule 72 and token EQUALS resolved as shift ('*' < EQUALS).
    Conflict between rule 72 and token NE resolved as shift ('*' < NE).
    Conflict between rule 72 and token LE resolved as shift ('*' < LE).
    Conflict between rule 72 and token GE resolved as shift ('*' < GE).
    Conflict between rule 72 and token OP_AND resolved as shift ('*' < OP_AND).
    Conflict between rule 72 and token OP_OR resolved as shift ('*' < OP_OR).
    Conflict between rule 72 and token ASSIGN_PLUSEQ resolved as shift ('*' < ASSIGN_PLUSEQ).
    Conflict between rule 72 and token ASSIGN_MINUSEQ resolved as shift ('*' < ASSIGN_MINUSEQ).
    Conflict between rule 72 and token ASSIGN_MULEQ resolved as shift ('*' < ASSIGN_MULEQ).
    Conflict between rule 72 and token ASSIGN_DIVEQ resolved as shift ('*' < ASSIGN_DIVEQ).
    Conflict between rule 72 and token ASSIGN_MODEQ resolved as shift ('*' < ASSIGN_MODEQ).
    Conflict between rule 72 and token '+' resolved as reduce ('+' < '*').
    Conflict between rule 72 and token '-' resolved as reduce ('-' < '*').
    Conflict between rule 72 and token '*' resolved as reduce (%left '*').
    Conflict between rule 72 and token '/' resolved as reduce (%left '/').
    Conflict between rule 72 and token '%' resolved as reduce (%left '%').
    Conflict between rule 72 and token '<' resolved as shift ('*' < '<').
    Conflict between rule 72 and token '>' resolved as shift ('*' < '>').


State 159

   70 expr: expr • '+' expr
   71     | expr • '-' expr
   72     | expr • '*' expr
   73     | expr • '/' expr
   73     | expr '/' expr •  [KW_FOR, '+', '-', '*', '/', '%', ')', ':', ';', ',', ']']
   74     | expr • '%' expr
   75     | expr • ASSIGN_PLUSEQ expr
   76     | expr • ASSIGN_MINUSEQ expr
   77     | expr • ASSIGN_MULEQ expr
   78     | expr • ASSIGN_DIVEQ expr
   79     | expr • ASSIGN_MODEQ expr
   80     | expr • POW expr
   82     | expr • OP_AND expr
   83     | expr • OP_OR expr
   84     | expr • NE expr
   85     | expr • EQUALS expr
   86     | expr • '<' expr
   87     | expr • LE expr
   88     | expr • '>' expr
   89     | expr • GE expr

    POW             shift, and go to state 100
    EQUALS          shift, and go to state 101
    NE              shift, and go to state 102
    LE              shift, and go to state 103
    GE              shift, and go to state 104
    OP_AND          shift, and go to state 105
    OP_OR           shift, and go to state 106
    ASSIGN_PLUSEQ   shift, and go to state 107
    ASSIGN_MINUSEQ  shift, and go to state 108
    ASSIGN_MULEQ    shift, and go to state 109
    ASSIGN_DIVEQ    shift, and go to state 110
    ASSIGN_MODEQ    shift, and go to state 111
    '<'             shift, and go to state 117
    '>'             shift, and go to state 118

    $default  reduce using rule 73 (expr)

    Conflict between rule 73 and token POW resolved as shift ('/' < POW).
    Conflict between rule 73 and token EQUALS resolved as shift ('/' < EQUALS).
    Conflict between rule 73 and token NE resolved as shift ('/' < NE).
    Conflict between rule 73 and token LE resolved as shift ('/' < LE).
    Conflict between rule 73 and token GE resolved as shift ('/' < GE).
    Conflict between rule 73 and token OP_AND resolved as shift ('/' < OP_AND).
    Conflict between rule 73 and token OP_OR resolved as shift ('/' < OP_OR).
    Conflict between rule 73 and token ASSIGN_PLUSEQ resolved as shift ('/' < ASSIGN_PLUSEQ).
    Conflict between rule 73 and token ASSIGN_MINUSEQ resolved as shift ('/' < ASSIGN_MINUSEQ).
    Conflict between rule 73 and token ASSIGN_MULEQ resolved as shift ('/' < ASSIGN_MULEQ).
    Conflict between rule 73 and token ASSIGN_DIVEQ resolved as shift ('/' < ASSIGN_DIVEQ).
    Conflict between rule 73 and token ASSIGN_MODEQ resolved as shift ('/' < ASSIGN_MODEQ).
    Conflict between rule 73 and token '+' resolved as reduce ('+' < '/').
    Conflict between rule 73 and token '-' resolved as reduce ('-' < '/').
    Conflict between rule 73 and token '*' resolved as reduce (%left '*').
    Conflict between rule 73 and token '/' resolved as reduce (%left '/').
    Conflict between rule 73 and token '%' resolved as reduce (%left '%').
    Conflict between rule 73 and token '<' resolved as shift ('/' < '<').
    Conflict between rule 73 and token '>' resolved as shift ('/' < '>').


State 160

   70 expr: expr • '+' expr
   71     | expr • '-' expr
   72     | expr • '*' expr
   73     | expr • '/' expr
   74     | expr • '%' expr
   74     | expr '%' expr •  [KW_FOR, '+', '-', '*', '/', '%', ')', ':', ';', ',', ']']
   75     | expr • ASSIGN_PLUSEQ expr
   76     | expr • ASSIGN_MINUSEQ expr
   77     | expr • ASSIGN_MULEQ expr
   78     | expr • ASSIGN_DIVEQ expr
   79     | expr • ASSIGN_MODEQ expr
   80     | expr • POW expr
   82     | expr • OP_AND expr
   83     | expr • OP_OR expr
   84     | expr • NE expr
   85     | expr • EQUALS expr
   86     | expr • '<' expr
   87     | expr • LE expr
   88     | expr • '>' expr
   89     | expr • GE expr

    POW             shift, and go to state 100
    EQUALS          shift, and go to state 101
    NE              shift, and go to state 102
    LE              shift, and go to state 103
    GE              shift, and go to state 104
    OP_AND          shift, and go to state 105
    OP_OR           shift, and go to state 106
    ASSIGN_PLUSEQ   shift, and go to state 107
    ASSIGN_MINUSEQ  shift, and go to state 108
    ASSIGN_MULEQ    shift, and go to state 109
    ASSIGN_DIVEQ    shift, and go to state 110
    ASSIGN_MODEQ    shift, and go to state 111
    '<'             shift, and go to state 117
    '>'             shift, and go to state 118

    $default  reduce using rule 74 (expr)

    Conflict between rule 74 and token POW resolved as shift ('%' < POW).
    Conflict between rule 74 and token EQUALS resolved as shift ('%' < EQUALS).
    Conflict between rule 74 and token NE resolved as shift ('%' < NE).
    Conflict between rule 74 and token LE resolved as shift ('%' < LE).
    Conflict between rule 74 and token GE resolved as shift ('%' < GE).
    Conflict between rule 74 and token OP_AND resolved as shift ('%' < OP_AND).
    Conflict between rule 74 and token OP_OR resolved as shift ('%' < OP_OR).
    Conflict between rule 74 and token ASSIGN_PLUSEQ resolved as shift ('%' < ASSIGN_PLUSEQ).
    Conflict between rule 74 and token ASSIGN_MINUSEQ resolved as shift ('%' < ASSIGN_MINUSEQ).
    Conflict between rule 74 and token ASSIGN_MULEQ resolved as shift ('%' < ASSIGN_MULEQ).
    Conflict between rule 74 and token ASSIGN_DIVEQ resolved as shift ('%' < ASSIGN_DIVEQ).
    Conflict between rule 74 and token ASSIGN_MODEQ resolved as shift ('%' < ASSIGN_MODEQ).
    Conflict between rule 74 and token '+' resolved as reduce ('+' < '%').
    Conflict between rule 74 and token '-' resolved as reduce ('-' < '%').
    Conflict between rule 74 and token '*' resolved as reduce (%left '*').
    Conflict between rule 74 and token '/' resolved as reduce (%left '/').
    Conflict between rule 74 and token '%' resolved as reduce (%left '%').
    Conflict between rule 74 and token '<' resolved as shift ('%' < '<').
    Conflict between rule 74 and token '>' resolved as shift ('%' < '>').


State 161

   70 expr: expr • '+' expr
   71     | expr • '-' expr
   72     | expr • '*' expr
   73     | expr • '/' expr
   74     | expr • '%' expr
   75     | expr • ASSIGN_PLUSEQ expr
   76     | expr • ASSIGN_MINUSEQ expr
   77     | expr • ASSIGN_MULEQ expr
   78     | expr • ASSIGN_DIVEQ expr
   79     | expr • ASSIGN_MODEQ expr
   80     | expr • POW expr
   82     | expr • OP_AND expr
   83     | expr • OP_OR expr
   84     | expr • NE expr
   85     | expr • EQUALS expr
   86     | expr • '<' expr
   86     | expr '<' expr •  [KW_FOR, LE, '+', '-', '*', '/', '%', '<', ')', ':', ';', ',', ']']
   87     | expr • LE expr
   88     | expr • '>' expr
   89     | expr • GE expr

    POW             shift, and go to state 100
    EQUALS          shift, and go to state 101
    NE              shift, and go to state 102
    GE              shift, and go to state 104
    OP_AND          shift, and go to state 105
    OP_OR           shift, and go to state 106
    ASSIGN_PLUSEQ   shift, and go to state 107
    ASSIGN_MINUSEQ  shift, and go to state 108
    ASSIGN_MULEQ    shift, and go to state 109
    ASSIGN_DIVEQ    shift, and go to state 110
    ASSIGN_MODEQ    shift, and go to state 111
    '>'             shift, and go to state 118

    $default  reduce using rule 86 (expr)

    Conflict between rule 86 and token POW resolved as shift ('<' < POW).
    Conflict between rule 86 and token EQUALS resolved as shift ('<' < EQUALS).
    Conflict between rule 86 and token NE resolved as shift ('<' < NE).
    Conflict between rule 86 and token LE resolved as reduce (%left LE).
    Conflict between rule 86 and token GE resolved as shift ('<' < GE).
    Conflict between rule 86 and token OP_AND resolved as shift ('<' < OP_AND).
    Conflict between rule 86 and token OP_OR resolved as shift ('<' < OP_OR).
    Conflict between rule 86 and token ASSIGN_PLUSEQ resolved as shift ('<' < ASSIGN_PLUSEQ).
    Conflict between rule 86 and token ASSIGN_MINUSEQ resolved as shift ('<' < ASSIGN_MINUSEQ).
    Conflict between rule 86 and token ASSIGN_MULEQ resolved as shift ('<' < ASSIGN_MULEQ).
    Conflict between rule 86 and token ASSIGN_DIVEQ resolved as shift ('<' < ASSIGN_DIVEQ).
    Conflict between rule 86 and token ASSIGN_MODEQ resolved as shift ('<' < ASSIGN_MODEQ).
    Conflict between rule 86 and token '+' resolved as reduce ('+' < '<').
    Conflict between rule 86 and token '-' resolved as reduce ('-' < '<').
    Conflict between rule 86 and token '*' resolved as reduce ('*' < '<').
    Conflict between rule 86 and token '/' resolved as reduce ('/' < '<').
    Conflict between rule 86 and token '%' resolved as reduce ('%' < '<').
    Conflict between rule 86 and token '<' resolved as reduce (%left '<').
    Conflict between rule 86 and token '>' resolved as shift ('<' < '>').


State 162

   70 expr: expr • '+' expr
   71     | expr • '-' expr
   72     | expr • '*' expr
   73     | expr • '/' expr
   74     | expr • '%' expr
   75     | expr • ASSIGN_PLUSEQ expr
   76     | expr • ASSIGN_MINUSEQ expr
   77     | expr • ASSIGN_MULEQ expr
   78     | expr • ASSIGN_DIVEQ expr
   79     | expr • ASSIGN_MODEQ expr
   80     | expr • POW expr
   82     | expr • OP_AND expr
   83     | expr • OP_OR expr
   84     | expr • NE expr
   85     | expr • EQUALS expr
   86     | expr • '<' expr
   87     | expr • LE expr
   88     | expr • '>' expr
   88     | expr '>' expr •  [KW_FOR, LE, GE, '+', '-', '*', '/', '%', '<', '>', ')', ':', ';', ',', ']']
   89     | expr • GE expr

    POW             shift, and go to state 100
    EQUALS          shift, and go to state 101
    NE              shift, and go to state 102
    OP_AND          shift, and go to state 105
    OP_OR           shift, and go to state 106
    ASSIGN_PLUSEQ   shift, and go to state 107
    ASSIGN_MINUSEQ  shift, and go to state 108
    ASSIGN_MULEQ    shift, and go to state 109
    ASSIGN_DIVEQ    shift, and go to state 110
    ASSIGN_MODEQ    shift, and go to state 111

    $default  reduce using rule 88 (expr)

    Conflict between rule 88 and token POW resolved as shift ('>' < POW).
    Conflict between rule 88 and token EQUALS resolved as shift ('>' < EQUALS).
    Conflict between rule 88 and token NE resolved as shift ('>' < NE).
    Conflict between rule 88 and token LE resolved as reduce (LE < '>').
    Conflict between rule 88 and token GE resolved as reduce (%left GE).
    Conflict between rule 88 and token OP_AND resolved as shift ('>' < OP_AND).
    Conflict between rule 88 and token OP_OR resolved as shift ('>' < OP_OR).
    Conflict between rule 88 and token ASSIGN_PLUSEQ resolved as shift ('>' < ASSIGN_PLUSEQ).
    Conflict between rule 88 and token ASSIGN_MINUSEQ resolved as shift ('>' < ASSIGN_MINUSEQ).
    Conflict between rule 88 and token ASSIGN_MULEQ resolved as shift ('>' < ASSIGN_MULEQ).
    Conflict between rule 88 and token ASSIGN_DIVEQ resolved as shift ('>' < ASSIGN_DIVEQ).
    Conflict between rule 88 and token ASSIGN_MODEQ resolved as shift ('>' < ASSIGN_MODEQ).
    Conflict between rule 88 and token '+' resolved as reduce ('+' < '>').
    Conflict between rule 88 and token '-' resolved as reduce ('-' < '>').
    Conflict between rule 88 and token '*' resolved as reduce ('*' < '>').
    Conflict between rule 88 and token '/' resolved as reduce ('/' < '>').
    Conflict between rule 88 and token '%' resolved as reduce ('%' < '>').
    Conflict between rule 88 and token '<' resolved as reduce ('<' < '>').
    Conflict between rule 88 and token '>' resolved as reduce (%left '>').


State 163

   30 func_decl: KW_DEF IDENTIFIER '(' ')' RETURN_ID type_spec • ':' body KW_ENDDEF ';'

    ':'  shift, and go to state 199


State 164

   29 func_decl: KW_DEF IDENTIFIER '(' func_var_decl_list ')' RETURN_ID • type_spec ':' body KW_ENDDEF ';'
   90 type_spec: • KW_INTEGER
   91          | • KW_SCALAR
   92          | • KW_STR
   93          | • KW_BOOLEAN

    KW_INTEGER  shift, and go to state 48
    KW_SCALAR   shift, and go to state 49
    KW_STR      shift, and go to state 50
    KW_BOOLEAN  shift, and go to state 51

    type_spec  go to state 200


State 165

   31 func_var_decl_list: func_var_decl_list ',' func_var_decl •

    $default  reduce using rule 31 (func_var_decl_list)


State 166

   33 func_var_decl: decl_list_item_id ':' type_spec •

    $default  reduce using rule 33 (func_var_decl)


State 167

   21 array_compact_integer: IDENTIFIER • SIMPLE_ARRAY '[' expr KW_FOR expr ':' INTEGER ']' ':' type_spec ';'
   40 decl_list_item_id: IDENTIFIER •  [':', ',']
   41                  | IDENTIFIER • '[' INTEGER ']'
   42                  | IDENTIFIER • '[' ']'
   45 command: IDENTIFIER • '=' expr ';'
   46        | IDENTIFIER • '(' func_call ')' ';'
   47        | IDENTIFIER • '(' ')' ';'
   48        | IDENTIFIER • '(' STRING ')' ';'

    SIMPLE_ARRAY  shift, and go to state 14
    '('           shift, and go to state 201
    '['           shift, and go to state 15
    '='           shift, and go to state 202

    $default  reduce using rule 40 (decl_list_item_id)


State 168

   53 command: KW_IF • '(' expr ')' ':' command_list KW_ENDIF ';'
   54        | KW_IF • '(' expr ')' ':' command_list KW_ELSE ':' command_list KW_ENDIF ';'

    '('  shift, and go to state 203


State 169

   17 var_decl: • var_decl_list ':' type_spec ';'
   18         | • array_compact_integer
   19 var_decl_list: • var_decl_list ',' decl_list_item_id
   20              | • decl_list_item_id
   21 array_compact_integer: • IDENTIFIER SIMPLE_ARRAY '[' expr KW_FOR expr ':' INTEGER ']' ':' type_spec ';'
   24 const_decl: KW_CONST • const_decl_list_item ':' type_spec ';'
   25 const_decl_list_item: • decl_list_item_id '=' expr
   26                     | • decl_list_item_id '=' STRING
   38 decl: KW_CONST • var_decl ':' type_spec ';'
   40 decl_list_item_id: • IDENTIFIER
   41                  | • IDENTIFIER '[' INTEGER ']'
   42                  | • IDENTIFIER '[' ']'

    IDENTIFIER  shift, and go to state 1

    var_decl               go to state 204
    var_decl_list          go to state 7
    array_compact_integer  go to state 8
    const_decl_list_item   go to state 19
    decl_list_item_id      go to state 205


State 170

   56 command: KW_FOR • IDENTIFIER KW_IN '[' expr ':' expr ':' expr ']' ':' command_list KW_ENDFOR ';'
   57        | KW_FOR • IDENTIFIER KW_IN '[' expr ':' expr ']' ':' command_list KW_ENDFOR ';'

    IDENTIFIER  shift, and go to state 206


State 171

   55 command: KW_WHILE • '(' expr ')' ':' command_list KW_ENDWHILE ';'

    '('  shift, and go to state 207


State 172

   49 command: KW_BREAK • ';'

    ';'  shift, and go to state 208


State 173

   50 command: KW_CONTINUE • ';'

    ';'  shift, and go to state 209


State 174

   51 command: KW_RETURN • ';'
   52        | KW_RETURN • expr ';'
   60 expr: • INTEGER
   61     | • SCALAR
   62     | • KW_TRUE
   63     | • KW_FALSE
   64     | • IDENTIFIER
   65     | • IDENTIFIER '[' expr ']'
   66     | • IDENTIFIER '(' func_call ')'
   67     | • IDENTIFIER '(' ')'
   68     | • '-' expr
   69     | • '(' expr ')'
   70     | • expr '+' expr
   71     | • expr '-' expr
   72     | • expr '*' expr
   73     | • expr '/' expr
   74     | • expr '%' expr
   75     | • expr ASSIGN_PLUSEQ expr
   76     | • expr ASSIGN_MINUSEQ expr
   77     | • expr ASSIGN_MULEQ expr
   78     | • expr ASSIGN_DIVEQ expr
   79     | • expr ASSIGN_MODEQ expr
   80     | • expr POW expr
   81     | • OP_NOT expr
   82     | • expr OP_AND expr
   83     | • expr OP_OR expr
   84     | • expr NE expr
   85     | • expr EQUALS expr
   86     | • expr '<' expr
   87     | • expr LE expr
   88     | • expr '>' expr
   89     | • expr GE expr

    IDENTIFIER  shift, and go to state 62
    INTEGER     shift, and go to state 63
    SCALAR      shift, and go to state 64
    KW_TRUE     shift, and go to state 65
    KW_FALSE    shift, and go to state 66
    OP_NOT      shift, and go to state 67
    '-'         shift, and go to state 68
    '('         shift, and go to state 69
    ';'         shift, and go to state 210

    expr  go to state 211


State 175

   39 decl: var_decl • ':' type_spec ';'
   58 command: var_decl •  [IDENTIFIER, KW_IF, KW_CONST, KW_FOR, KW_WHILE, KW_BREAK, KW_CONTINUE, KW_ENDDEF, KW_RETURN]

    ':'  shift, and go to state 212

    $default  reduce using rule 58 (command)


State 176

   59 command: const_decl •

    $default  reduce using rule 59 (command)


State 177

    1 program: KW_DEF KW_MAIN '(' ')' ':' body • KW_ENDDEF ';'

    KW_ENDDEF  shift, and go to state 213


State 178

   17 var_decl: • var_decl_list ':' type_spec ';'
   18         | • array_compact_integer
   19 var_decl_list: • var_decl_list ',' decl_list_item_id
   20              | • decl_list_item_id
   21 array_compact_integer: • IDENTIFIER SIMPLE_ARRAY '[' expr KW_FOR expr ':' INTEGER ']' ':' type_spec ';'
   24 const_decl: • KW_CONST const_decl_list_item ':' type_spec ';'
   34 body: decl_list • command_list
   36 decl_list: decl_list • decl
   38 decl: • KW_CONST var_decl ':' type_spec ';'
   39     | • var_decl ':' type_spec ';'
   40 decl_list_item_id: • IDENTIFIER
   41                  | • IDENTIFIER '[' INTEGER ']'
   42                  | • IDENTIFIER '[' ']'
   43 command_list: • command_list command
   44             | • command
   45 command: • IDENTIFIER '=' expr ';'
   46        | • IDENTIFIER '(' func_call ')' ';'
   47        | • IDENTIFIER '(' ')' ';'
   48        | • IDENTIFIER '(' STRING ')' ';'
   49        | • KW_BREAK ';'
   50        | • KW_CONTINUE ';'
   51        | • KW_RETURN ';'
   52        | • KW_RETURN expr ';'
   53        | • KW_IF '(' expr ')' ':' command_list KW_ENDIF ';'
   54        | • KW_IF '(' expr ')' ':' command_list KW_ELSE ':' command_list KW_ENDIF ';'
   55        | • KW_WHILE '(' expr ')' ':' command_list KW_ENDWHILE ';'
   56        | • KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ':' expr ']' ':' command_list KW_ENDFOR ';'
   57        | • KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ']' ':' command_list KW_ENDFOR ';'
   58        | • var_decl
   59        | • const_decl

    IDENTIFIER   shift, and go to state 167
    KW_IF        shift, and go to state 168
    KW_CONST     shift, and go to state 169
    KW_FOR       shift, and go to state 170
    KW_WHILE     shift, and go to state 171
    KW_BREAK     shift, and go to state 172
    KW_CONTINUE  shift, and go to state 173
    KW_RETURN    shift, and go to state 174

    var_decl               go to state 175
    var_decl_list          go to state 7
    array_compact_integer  go to state 8
    const_decl             go to state 176
    decl                   go to state 214
    decl_list_item_id      go to state 13
    command_list           go to state 215
    command                go to state 181


State 179

   37 decl_list: decl •

    $default  reduce using rule 37 (decl_list)


State 180

   17 var_decl: • var_decl_list ':' type_spec ';'
   18         | • array_compact_integer
   19 var_decl_list: • var_decl_list ',' decl_list_item_id
   20              | • decl_list_item_id
   21 array_compact_integer: • IDENTIFIER SIMPLE_ARRAY '[' expr KW_FOR expr ':' INTEGER ']' ':' type_spec ';'
   24 const_decl: • KW_CONST const_decl_list_item ':' type_spec ';'
   35 body: command_list •  [KW_ENDDEF]
   40 decl_list_item_id: • IDENTIFIER
   41                  | • IDENTIFIER '[' INTEGER ']'
   42                  | • IDENTIFIER '[' ']'
   43 command_list: command_list • command
   45 command: • IDENTIFIER '=' expr ';'
   46        | • IDENTIFIER '(' func_call ')' ';'
   47        | • IDENTIFIER '(' ')' ';'
   48        | • IDENTIFIER '(' STRING ')' ';'
   49        | • KW_BREAK ';'
   50        | • KW_CONTINUE ';'
   51        | • KW_RETURN ';'
   52        | • KW_RETURN expr ';'
   53        | • KW_IF '(' expr ')' ':' command_list KW_ENDIF ';'
   54        | • KW_IF '(' expr ')' ':' command_list KW_ELSE ':' command_list KW_ENDIF ';'
   55        | • KW_WHILE '(' expr ')' ':' command_list KW_ENDWHILE ';'
   56        | • KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ':' expr ']' ':' command_list KW_ENDFOR ';'
   57        | • KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ']' ':' command_list KW_ENDFOR ';'
   58        | • var_decl
   59        | • const_decl

    IDENTIFIER   shift, and go to state 167
    KW_IF        shift, and go to state 168
    KW_CONST     shift, and go to state 3
    KW_FOR       shift, and go to state 170
    KW_WHILE     shift, and go to state 171
    KW_BREAK     shift, and go to state 172
    KW_CONTINUE  shift, and go to state 173
    KW_RETURN    shift, and go to state 174

    $default  reduce using rule 35 (body)

    var_decl               go to state 216
    var_decl_list          go to state 7
    array_compact_integer  go to state 8
    const_decl             go to state 176
    decl_list_item_id      go to state 13
    command                go to state 217


State 181

   44 command_list: command •

    $default  reduce using rule 44 (command_list)


State 182

    2 program: start_var_decl_list KW_DEF KW_MAIN '(' ')' ':' • body KW_ENDDEF ';'
   17 var_decl: • var_decl_list ':' type_spec ';'
   18         | • array_compact_integer
   19 var_decl_list: • var_decl_list ',' decl_list_item_id
   20              | • decl_list_item_id
   21 array_compact_integer: • IDENTIFIER SIMPLE_ARRAY '[' expr KW_FOR expr ':' INTEGER ']' ':' type_spec ';'
   24 const_decl: • KW_CONST const_decl_list_item ':' type_spec ';'
   34 body: • decl_list command_list
   35     | • command_list
   36 decl_list: • decl_list decl
   37          | • decl
   38 decl: • KW_CONST var_decl ':' type_spec ';'
   39     | • var_decl ':' type_spec ';'
   40 decl_list_item_id: • IDENTIFIER
   41                  | • IDENTIFIER '[' INTEGER ']'
   42                  | • IDENTIFIER '[' ']'
   43 command_list: • command_list command
   44             | • command
   45 command: • IDENTIFIER '=' expr ';'
   46        | • IDENTIFIER '(' func_call ')' ';'
   47        | • IDENTIFIER '(' ')' ';'
   48        | • IDENTIFIER '(' STRING ')' ';'
   49        | • KW_BREAK ';'
   50        | • KW_CONTINUE ';'
   51        | • KW_RETURN ';'
   52        | • KW_RETURN expr ';'
   53        | • KW_IF '(' expr ')' ':' command_list KW_ENDIF ';'
   54        | • KW_IF '(' expr ')' ':' command_list KW_ELSE ':' command_list KW_ENDIF ';'
   55        | • KW_WHILE '(' expr ')' ':' command_list KW_ENDWHILE ';'
   56        | • KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ':' expr ']' ':' command_list KW_ENDFOR ';'
   57        | • KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ']' ':' command_list KW_ENDFOR ';'
   58        | • var_decl
   59        | • const_decl

    IDENTIFIER   shift, and go to state 167
    KW_IF        shift, and go to state 168
    KW_CONST     shift, and go to state 169
    KW_FOR       shift, and go to state 170
    KW_WHILE     shift, and go to state 171
    KW_BREAK     shift, and go to state 172
    KW_CONTINUE  shift, and go to state 173
    KW_RETURN    shift, and go to state 174

    var_decl               go to state 175
    var_decl_list          go to state 7
    array_compact_integer  go to state 8
    const_decl             go to state 176
    body                   go to state 218
    decl_list              go to state 178
    decl                   go to state 179
    decl_list_item_id      go to state 13
    command_list           go to state 180
    command                go to state 181


State 183

    5 program: start_var_decl_list start_const_decl_list KW_DEF KW_MAIN '(' ')' • ':' body KW_ENDDEF ';'

    ':'  shift, and go to state 219


State 184

    9 program: start_var_decl_list start_const_decl_list func_decl_list KW_DEF KW_MAIN '(' • ')' ':' body KW_ENDDEF ';'

    ')'  shift, and go to state 220


State 185

    6 program: start_var_decl_list func_decl_list KW_DEF KW_MAIN '(' ')' • ':' body KW_ENDDEF ';'

    ':'  shift, and go to state 221


State 186

   10 program: start_var_decl_list func_decl_list start_const_decl_list KW_DEF KW_MAIN '(' • ')' ':' body KW_ENDDEF ';'

    ')'  shift, and go to state 222


State 187

    3 program: start_const_decl_list KW_DEF KW_MAIN '(' ')' ':' • body KW_ENDDEF ';'
   17 var_decl: • var_decl_list ':' type_spec ';'
   18         | • array_compact_integer
   19 var_decl_list: • var_decl_list ',' decl_list_item_id
   20              | • decl_list_item_id
   21 array_compact_integer: • IDENTIFIER SIMPLE_ARRAY '[' expr KW_FOR expr ':' INTEGER ']' ':' type_spec ';'
   24 const_decl: • KW_CONST const_decl_list_item ':' type_spec ';'
   34 body: • decl_list command_list
   35     | • command_list
   36 decl_list: • decl_list decl
   37          | • decl
   38 decl: • KW_CONST var_decl ':' type_spec ';'
   39     | • var_decl ':' type_spec ';'
   40 decl_list_item_id: • IDENTIFIER
   41                  | • IDENTIFIER '[' INTEGER ']'
   42                  | • IDENTIFIER '[' ']'
   43 command_list: • command_list command
   44             | • command
   45 command: • IDENTIFIER '=' expr ';'
   46        | • IDENTIFIER '(' func_call ')' ';'
   47        | • IDENTIFIER '(' ')' ';'
   48        | • IDENTIFIER '(' STRING ')' ';'
   49        | • KW_BREAK ';'
   50        | • KW_CONTINUE ';'
   51        | • KW_RETURN ';'
   52        | • KW_RETURN expr ';'
   53        | • KW_IF '(' expr ')' ':' command_list KW_ENDIF ';'
   54        | • KW_IF '(' expr ')' ':' command_list KW_ELSE ':' command_list KW_ENDIF ';'
   55        | • KW_WHILE '(' expr ')' ':' command_list KW_ENDWHILE ';'
   56        | • KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ':' expr ']' ':' command_list KW_ENDFOR ';'
   57        | • KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ']' ':' command_list KW_ENDFOR ';'
   58        | • var_decl
   59        | • const_decl

    IDENTIFIER   shift, and go to state 167
    KW_IF        shift, and go to state 168
    KW_CONST     shift, and go to state 169
    KW_FOR       shift, and go to state 170
    KW_WHILE     shift, and go to state 171
    KW_BREAK     shift, and go to state 172
    KW_CONTINUE  shift, and go to state 173
    KW_RETURN    shift, and go to state 174

    var_decl               go to state 175
    var_decl_list          go to state 7
    array_compact_integer  go to state 8
    const_decl             go to state 176
    body                   go to state 223
    decl_list              go to state 178
    decl                   go to state 179
    decl_list_item_id      go to state 13
    command_list           go to state 180
    command                go to state 181


State 188

    8 program: start_const_decl_list start_var_decl_list KW_DEF KW_MAIN '(' ')' • ':' body KW_ENDDEF ';'

    ':'  shift, and go to state 224


State 189

   11 program: start_const_decl_list start_var_decl_list func_decl_list KW_DEF KW_MAIN '(' • ')' ':' body KW_ENDDEF ';'

    ')'  shift, and go to state 225


State 190

    7 program: start_const_decl_list func_decl_list KW_DEF KW_MAIN '(' ')' • ':' body KW_ENDDEF ';'

    ':'  shift, and go to state 226


State 191

   12 program: start_const_decl_list func_decl_list start_var_decl_list KW_DEF KW_MAIN '(' • ')' ':' body KW_ENDDEF ';'

    ')'  shift, and go to state 227


State 192

    4 program: func_decl_list KW_DEF KW_MAIN '(' ')' ':' • body KW_ENDDEF ';'
   17 var_decl: • var_decl_list ':' type_spec ';'
   18         | • array_compact_integer
   19 var_decl_list: • var_decl_list ',' decl_list_item_id
   20              | • decl_list_item_id
   21 array_compact_integer: • IDENTIFIER SIMPLE_ARRAY '[' expr KW_FOR expr ':' INTEGER ']' ':' type_spec ';'
   24 const_decl: • KW_CONST const_decl_list_item ':' type_spec ';'
   34 body: • decl_list command_list
   35     | • command_list
   36 decl_list: • decl_list decl
   37          | • decl
   38 decl: • KW_CONST var_decl ':' type_spec ';'
   39     | • var_decl ':' type_spec ';'
   40 decl_list_item_id: • IDENTIFIER
   41                  | • IDENTIFIER '[' INTEGER ']'
   42                  | • IDENTIFIER '[' ']'
   43 command_list: • command_list command
   44             | • command
   45 command: • IDENTIFIER '=' expr ';'
   46        | • IDENTIFIER '(' func_call ')' ';'
   47        | • IDENTIFIER '(' ')' ';'
   48        | • IDENTIFIER '(' STRING ')' ';'
   49        | • KW_BREAK ';'
   50        | • KW_CONTINUE ';'
   51        | • KW_RETURN ';'
   52        | • KW_RETURN expr ';'
   53        | • KW_IF '(' expr ')' ':' command_list KW_ENDIF ';'
   54        | • KW_IF '(' expr ')' ':' command_list KW_ELSE ':' command_list KW_ENDIF ';'
   55        | • KW_WHILE '(' expr ')' ':' command_list KW_ENDWHILE ';'
   56        | • KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ':' expr ']' ':' command_list KW_ENDFOR ';'
   57        | • KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ']' ':' command_list KW_ENDFOR ';'
   58        | • var_decl
   59        | • const_decl

    IDENTIFIER   shift, and go to state 167
    KW_IF        shift, and go to state 168
    KW_CONST     shift, and go to state 169
    KW_FOR       shift, and go to state 170
    KW_WHILE     shift, and go to state 171
    KW_BREAK     shift, and go to state 172
    KW_CONTINUE  shift, and go to state 173
    KW_RETURN    shift, and go to state 174

    var_decl               go to state 175
    var_decl_list          go to state 7
    array_compact_integer  go to state 8
    const_decl             go to state 176
    body                   go to state 228
    decl_list              go to state 178
    decl                   go to state 179
    decl_list_item_id      go to state 13
    command_list           go to state 180
    command                go to state 181


State 193

   14 program: func_decl_list start_var_decl_list start_const_decl_list KW_DEF KW_MAIN '(' • ')' ':' body KW_ENDDEF ';'

    ')'  shift, and go to state 229


State 194

   13 program: func_decl_list start_const_decl_list start_var_decl_list KW_DEF KW_MAIN '(' • ')' ':' body KW_ENDDEF ';'

    ')'  shift, and go to state 230


State 195

   66 expr: IDENTIFIER '(' func_call ')' •

    $default  reduce using rule 66 (expr)


State 196

   60 expr: • INTEGER
   61     | • SCALAR
   62     | • KW_TRUE
   63     | • KW_FALSE
   64     | • IDENTIFIER
   65     | • IDENTIFIER '[' expr ']'
   66     | • IDENTIFIER '(' func_call ')'
   67     | • IDENTIFIER '(' ')'
   68     | • '-' expr
   69     | • '(' expr ')'
   70     | • expr '+' expr
   71     | • expr '-' expr
   72     | • expr '*' expr
   73     | • expr '/' expr
   74     | • expr '%' expr
   75     | • expr ASSIGN_PLUSEQ expr
   76     | • expr ASSIGN_MINUSEQ expr
   77     | • expr ASSIGN_MULEQ expr
   78     | • expr ASSIGN_DIVEQ expr
   79     | • expr ASSIGN_MODEQ expr
   80     | • expr POW expr
   81     | • OP_NOT expr
   82     | • expr OP_AND expr
   83     | • expr OP_OR expr
   84     | • expr NE expr
   85     | • expr EQUALS expr
   86     | • expr '<' expr
   87     | • expr LE expr
   88     | • expr '>' expr
   89     | • expr GE expr
   94 func_call: func_call ',' • expr

    IDENTIFIER  shift, and go to state 62
    INTEGER     shift, and go to state 63
    SCALAR      shift, and go to state 64
    KW_TRUE     shift, and go to state 65
    KW_FALSE    shift, and go to state 66
    OP_NOT      shift, and go to state 67
    '-'         shift, and go to state 68
    '('         shift, and go to state 69

    expr  go to state 231


State 197

   65 expr: IDENTIFIER '[' expr ']' •

    $default  reduce using rule 65 (expr)


State 198

   21 array_compact_integer: IDENTIFIER SIMPLE_ARRAY '[' expr KW_FOR expr ':' • INTEGER ']' ':' type_spec ';'

    INTEGER  shift, and go to state 232


State 199

   17 var_decl: • var_decl_list ':' type_spec ';'
   18         | • array_compact_integer
   19 var_decl_list: • var_decl_list ',' decl_list_item_id
   20              | • decl_list_item_id
   21 array_compact_integer: • IDENTIFIER SIMPLE_ARRAY '[' expr KW_FOR expr ':' INTEGER ']' ':' type_spec ';'
   24 const_decl: • KW_CONST const_decl_list_item ':' type_spec ';'
   30 func_decl: KW_DEF IDENTIFIER '(' ')' RETURN_ID type_spec ':' • body KW_ENDDEF ';'
   34 body: • decl_list command_list
   35     | • command_list
   36 decl_list: • decl_list decl
   37          | • decl
   38 decl: • KW_CONST var_decl ':' type_spec ';'
   39     | • var_decl ':' type_spec ';'
   40 decl_list_item_id: • IDENTIFIER
   41                  | • IDENTIFIER '[' INTEGER ']'
   42                  | • IDENTIFIER '[' ']'
   43 command_list: • command_list command
   44             | • command
   45 command: • IDENTIFIER '=' expr ';'
   46        | • IDENTIFIER '(' func_call ')' ';'
   47        | • IDENTIFIER '(' ')' ';'
   48        | • IDENTIFIER '(' STRING ')' ';'
   49        | • KW_BREAK ';'
   50        | • KW_CONTINUE ';'
   51        | • KW_RETURN ';'
   52        | • KW_RETURN expr ';'
   53        | • KW_IF '(' expr ')' ':' command_list KW_ENDIF ';'
   54        | • KW_IF '(' expr ')' ':' command_list KW_ELSE ':' command_list KW_ENDIF ';'
   55        | • KW_WHILE '(' expr ')' ':' command_list KW_ENDWHILE ';'
   56        | • KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ':' expr ']' ':' command_list KW_ENDFOR ';'
   57        | • KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ']' ':' command_list KW_ENDFOR ';'
   58        | • var_decl
   59        | • const_decl

    IDENTIFIER   shift, and go to state 167
    KW_IF        shift, and go to state 168
    KW_CONST     shift, and go to state 169
    KW_FOR       shift, and go to state 170
    KW_WHILE     shift, and go to state 171
    KW_BREAK     shift, and go to state 172
    KW_CONTINUE  shift, and go to state 173
    KW_RETURN    shift, and go to state 174

    var_decl               go to state 175
    var_decl_list          go to state 7
    array_compact_integer  go to state 8
    const_decl             go to state 176
    body                   go to state 233
    decl_list              go to state 178
    decl                   go to state 179
    decl_list_item_id      go to state 13
    command_list           go to state 180
    command                go to state 181


State 200

   29 func_decl: KW_DEF IDENTIFIER '(' func_var_decl_list ')' RETURN_ID type_spec • ':' body KW_ENDDEF ';'

    ':'  shift, and go to state 234


State 201

   46 command: IDENTIFIER '(' • func_call ')' ';'
   47        | IDENTIFIER '(' • ')' ';'
   48        | IDENTIFIER '(' • STRING ')' ';'
   60 expr: • INTEGER
   61     | • SCALAR
   62     | • KW_TRUE
   63     | • KW_FALSE
   64     | • IDENTIFIER
   65     | • IDENTIFIER '[' expr ']'
   66     | • IDENTIFIER '(' func_call ')'
   67     | • IDENTIFIER '(' ')'
   68     | • '-' expr
   69     | • '(' expr ')'
   70     | • expr '+' expr
   71     | • expr '-' expr
   72     | • expr '*' expr
   73     | • expr '/' expr
   74     | • expr '%' expr
   75     | • expr ASSIGN_PLUSEQ expr
   76     | • expr ASSIGN_MINUSEQ expr
   77     | • expr ASSIGN_MULEQ expr
   78     | • expr ASSIGN_DIVEQ expr
   79     | • expr ASSIGN_MODEQ expr
   80     | • expr POW expr
   81     | • OP_NOT expr
   82     | • expr OP_AND expr
   83     | • expr OP_OR expr
   84     | • expr NE expr
   85     | • expr EQUALS expr
   86     | • expr '<' expr
   87     | • expr LE expr
   88     | • expr '>' expr
   89     | • expr GE expr
   94 func_call: • func_call ',' expr
   95          | • expr

    IDENTIFIER  shift, and go to state 62
    INTEGER     shift, and go to state 63
    SCALAR      shift, and go to state 64
    STRING      shift, and go to state 235
    KW_TRUE     shift, and go to state 65
    KW_FALSE    shift, and go to state 66
    OP_NOT      shift, and go to state 67
    '-'         shift, and go to state 68
    '('         shift, and go to state 69
    ')'         shift, and go to state 236

    expr       go to state 139
    func_call  go to state 237


State 202

   45 command: IDENTIFIER '=' • expr ';'
   60 expr: • INTEGER
   61     | • SCALAR
   62     | • KW_TRUE
   63     | • KW_FALSE
   64     | • IDENTIFIER
   65     | • IDENTIFIER '[' expr ']'
   66     | • IDENTIFIER '(' func_call ')'
   67     | • IDENTIFIER '(' ')'
   68     | • '-' expr
   69     | • '(' expr ')'
   70     | • expr '+' expr
   71     | • expr '-' expr
   72     | • expr '*' expr
   73     | • expr '/' expr
   74     | • expr '%' expr
   75     | • expr ASSIGN_PLUSEQ expr
   76     | • expr ASSIGN_MINUSEQ expr
   77     | • expr ASSIGN_MULEQ expr
   78     | • expr ASSIGN_DIVEQ expr
   79     | • expr ASSIGN_MODEQ expr
   80     | • expr POW expr
   81     | • OP_NOT expr
   82     | • expr OP_AND expr
   83     | • expr OP_OR expr
   84     | • expr NE expr
   85     | • expr EQUALS expr
   86     | • expr '<' expr
   87     | • expr LE expr
   88     | • expr '>' expr
   89     | • expr GE expr

    IDENTIFIER  shift, and go to state 62
    INTEGER     shift, and go to state 63
    SCALAR      shift, and go to state 64
    KW_TRUE     shift, and go to state 65
    KW_FALSE    shift, and go to state 66
    OP_NOT      shift, and go to state 67
    '-'         shift, and go to state 68
    '('         shift, and go to state 69

    expr  go to state 238


State 203

   53 command: KW_IF '(' • expr ')' ':' command_list KW_ENDIF ';'
   54        | KW_IF '(' • expr ')' ':' command_list KW_ELSE ':' command_list KW_ENDIF ';'
   60 expr: • INTEGER
   61     | • SCALAR
   62     | • KW_TRUE
   63     | • KW_FALSE
   64     | • IDENTIFIER
   65     | • IDENTIFIER '[' expr ']'
   66     | • IDENTIFIER '(' func_call ')'
   67     | • IDENTIFIER '(' ')'
   68     | • '-' expr
   69     | • '(' expr ')'
   70     | • expr '+' expr
   71     | • expr '-' expr
   72     | • expr '*' expr
   73     | • expr '/' expr
   74     | • expr '%' expr
   75     | • expr ASSIGN_PLUSEQ expr
   76     | • expr ASSIGN_MINUSEQ expr
   77     | • expr ASSIGN_MULEQ expr
   78     | • expr ASSIGN_DIVEQ expr
   79     | • expr ASSIGN_MODEQ expr
   80     | • expr POW expr
   81     | • OP_NOT expr
   82     | • expr OP_AND expr
   83     | • expr OP_OR expr
   84     | • expr NE expr
   85     | • expr EQUALS expr
   86     | • expr '<' expr
   87     | • expr LE expr
   88     | • expr '>' expr
   89     | • expr GE expr

    IDENTIFIER  shift, and go to state 62
    INTEGER     shift, and go to state 63
    SCALAR      shift, and go to state 64
    KW_TRUE     shift, and go to state 65
    KW_FALSE    shift, and go to state 66
    OP_NOT      shift, and go to state 67
    '-'         shift, and go to state 68
    '('         shift, and go to state 69

    expr  go to state 239


State 204

   38 decl: KW_CONST var_decl • ':' type_spec ';'

    ':'  shift, and go to state 240


State 205

   20 var_decl_list: decl_list_item_id •  [':', ',']
   25 const_decl_list_item: decl_list_item_id • '=' expr
   26                     | decl_list_item_id • '=' STRING

    '='  shift, and go to state 42

    $default  reduce using rule 20 (var_decl_list)


State 206

   56 command: KW_FOR IDENTIFIER • KW_IN '[' expr ':' expr ':' expr ']' ':' command_list KW_ENDFOR ';'
   57        | KW_FOR IDENTIFIER • KW_IN '[' expr ':' expr ']' ':' command_list KW_ENDFOR ';'

    KW_IN  shift, and go to state 241


State 207

   55 command: KW_WHILE '(' • expr ')' ':' command_list KW_ENDWHILE ';'
   60 expr: • INTEGER
   61     | • SCALAR
   62     | • KW_TRUE
   63     | • KW_FALSE
   64     | • IDENTIFIER
   65     | • IDENTIFIER '[' expr ']'
   66     | • IDENTIFIER '(' func_call ')'
   67     | • IDENTIFIER '(' ')'
   68     | • '-' expr
   69     | • '(' expr ')'
   70     | • expr '+' expr
   71     | • expr '-' expr
   72     | • expr '*' expr
   73     | • expr '/' expr
   74     | • expr '%' expr
   75     | • expr ASSIGN_PLUSEQ expr
   76     | • expr ASSIGN_MINUSEQ expr
   77     | • expr ASSIGN_MULEQ expr
   78     | • expr ASSIGN_DIVEQ expr
   79     | • expr ASSIGN_MODEQ expr
   80     | • expr POW expr
   81     | • OP_NOT expr
   82     | • expr OP_AND expr
   83     | • expr OP_OR expr
   84     | • expr NE expr
   85     | • expr EQUALS expr
   86     | • expr '<' expr
   87     | • expr LE expr
   88     | • expr '>' expr
   89     | • expr GE expr

    IDENTIFIER  shift, and go to state 62
    INTEGER     shift, and go to state 63
    SCALAR      shift, and go to state 64
    KW_TRUE     shift, and go to state 65
    KW_FALSE    shift, and go to state 66
    OP_NOT      shift, and go to state 67
    '-'         shift, and go to state 68
    '('         shift, and go to state 69

    expr  go to state 242


State 208

   49 command: KW_BREAK ';' •

    $default  reduce using rule 49 (command)


State 209

   50 command: KW_CONTINUE ';' •

    $default  reduce using rule 50 (command)


State 210

   51 command: KW_RETURN ';' •

    $default  reduce using rule 51 (command)


State 211

   52 command: KW_RETURN expr • ';'
   70 expr: expr • '+' expr
   71     | expr • '-' expr
   72     | expr • '*' expr
   73     | expr • '/' expr
   74     | expr • '%' expr
   75     | expr • ASSIGN_PLUSEQ expr
   76     | expr • ASSIGN_MINUSEQ expr
   77     | expr • ASSIGN_MULEQ expr
   78     | expr • ASSIGN_DIVEQ expr
   79     | expr • ASSIGN_MODEQ expr
   80     | expr • POW expr
   82     | expr • OP_AND expr
   83     | expr • OP_OR expr
   84     | expr • NE expr
   85     | expr • EQUALS expr
   86     | expr • '<' expr
   87     | expr • LE expr
   88     | expr • '>' expr
   89     | expr • GE expr

    POW             shift, and go to state 100
    EQUALS          shift, and go to state 101
    NE              shift, and go to state 102
    LE              shift, and go to state 103
    GE              shift, and go to state 104
    OP_AND          shift, and go to state 105
    OP_OR           shift, and go to state 106
    ASSIGN_PLUSEQ   shift, and go to state 107
    ASSIGN_MINUSEQ  shift, and go to state 108
    ASSIGN_MULEQ    shift, and go to state 109
    ASSIGN_DIVEQ    shift, and go to state 110
    ASSIGN_MODEQ    shift, and go to state 111
    '+'             shift, and go to state 112
    '-'             shift, and go to state 113
    '*'             shift, and go to state 114
    '/'             shift, and go to state 115
    '%'             shift, and go to state 116
    '<'             shift, and go to state 117
    '>'             shift, and go to state 118
    ';'             shift, and go to state 243


State 212

   39 decl: var_decl ':' • type_spec ';'
   90 type_spec: • KW_INTEGER
   91          | • KW_SCALAR
   92          | • KW_STR
   93          | • KW_BOOLEAN

    KW_INTEGER  shift, and go to state 48
    KW_SCALAR   shift, and go to state 49
    KW_STR      shift, and go to state 50
    KW_BOOLEAN  shift, and go to state 51

    type_spec  go to state 244


State 213

    1 program: KW_DEF KW_MAIN '(' ')' ':' body KW_ENDDEF • ';'

    ';'  shift, and go to state 245


State 214

   36 decl_list: decl_list decl •

    $default  reduce using rule 36 (decl_list)


State 215

   17 var_decl: • var_decl_list ':' type_spec ';'
   18         | • array_compact_integer
   19 var_decl_list: • var_decl_list ',' decl_list_item_id
   20              | • decl_list_item_id
   21 array_compact_integer: • IDENTIFIER SIMPLE_ARRAY '[' expr KW_FOR expr ':' INTEGER ']' ':' type_spec ';'
   24 const_decl: • KW_CONST const_decl_list_item ':' type_spec ';'
   34 body: decl_list command_list •  [KW_ENDDEF]
   40 decl_list_item_id: • IDENTIFIER
   41                  | • IDENTIFIER '[' INTEGER ']'
   42                  | • IDENTIFIER '[' ']'
   43 command_list: command_list • command
   45 command: • IDENTIFIER '=' expr ';'
   46        | • IDENTIFIER '(' func_call ')' ';'
   47        | • IDENTIFIER '(' ')' ';'
   48        | • IDENTIFIER '(' STRING ')' ';'
   49        | • KW_BREAK ';'
   50        | • KW_CONTINUE ';'
   51        | • KW_RETURN ';'
   52        | • KW_RETURN expr ';'
   53        | • KW_IF '(' expr ')' ':' command_list KW_ENDIF ';'
   54        | • KW_IF '(' expr ')' ':' command_list KW_ELSE ':' command_list KW_ENDIF ';'
   55        | • KW_WHILE '(' expr ')' ':' command_list KW_ENDWHILE ';'
   56        | • KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ':' expr ']' ':' command_list KW_ENDFOR ';'
   57        | • KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ']' ':' command_list KW_ENDFOR ';'
   58        | • var_decl
   59        | • const_decl

    IDENTIFIER   shift, and go to state 167
    KW_IF        shift, and go to state 168
    KW_CONST     shift, and go to state 3
    KW_FOR       shift, and go to state 170
    KW_WHILE     shift, and go to state 171
    KW_BREAK     shift, and go to state 172
    KW_CONTINUE  shift, and go to state 173
    KW_RETURN    shift, and go to state 174

    $default  reduce using rule 34 (body)

    var_decl               go to state 216
    var_decl_list          go to state 7
    array_compact_integer  go to state 8
    const_decl             go to state 176
    decl_list_item_id      go to state 13
    command                go to state 217


State 216

   58 command: var_decl •

    $default  reduce using rule 58 (command)


State 217

   43 command_list: command_list command •

    $default  reduce using rule 43 (command_list)


State 218

    2 program: start_var_decl_list KW_DEF KW_MAIN '(' ')' ':' body • KW_ENDDEF ';'

    KW_ENDDEF  shift, and go to state 246


State 219

    5 program: start_var_decl_list start_const_decl_list KW_DEF KW_MAIN '(' ')' ':' • body KW_ENDDEF ';'
   17 var_decl: • var_decl_list ':' type_spec ';'
   18         | • array_compact_integer
   19 var_decl_list: • var_decl_list ',' decl_list_item_id
   20              | • decl_list_item_id
   21 array_compact_integer: • IDENTIFIER SIMPLE_ARRAY '[' expr KW_FOR expr ':' INTEGER ']' ':' type_spec ';'
   24 const_decl: • KW_CONST const_decl_list_item ':' type_spec ';'
   34 body: • decl_list command_list
   35     | • command_list
   36 decl_list: • decl_list decl
   37          | • decl
   38 decl: • KW_CONST var_decl ':' type_spec ';'
   39     | • var_decl ':' type_spec ';'
   40 decl_list_item_id: • IDENTIFIER
   41                  | • IDENTIFIER '[' INTEGER ']'
   42                  | • IDENTIFIER '[' ']'
   43 command_list: • command_list command
   44             | • command
   45 command: • IDENTIFIER '=' expr ';'
   46        | • IDENTIFIER '(' func_call ')' ';'
   47        | • IDENTIFIER '(' ')' ';'
   48        | • IDENTIFIER '(' STRING ')' ';'
   49        | • KW_BREAK ';'
   50        | • KW_CONTINUE ';'
   51        | • KW_RETURN ';'
   52        | • KW_RETURN expr ';'
   53        | • KW_IF '(' expr ')' ':' command_list KW_ENDIF ';'
   54        | • KW_IF '(' expr ')' ':' command_list KW_ELSE ':' command_list KW_ENDIF ';'
   55        | • KW_WHILE '(' expr ')' ':' command_list KW_ENDWHILE ';'
   56        | • KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ':' expr ']' ':' command_list KW_ENDFOR ';'
   57        | • KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ']' ':' command_list KW_ENDFOR ';'
   58        | • var_decl
   59        | • const_decl

    IDENTIFIER   shift, and go to state 167
    KW_IF        shift, and go to state 168
    KW_CONST     shift, and go to state 169
    KW_FOR       shift, and go to state 170
    KW_WHILE     shift, and go to state 171
    KW_BREAK     shift, and go to state 172
    KW_CONTINUE  shift, and go to state 173
    KW_RETURN    shift, and go to state 174

    var_decl               go to state 175
    var_decl_list          go to state 7
    array_compact_integer  go to state 8
    const_decl             go to state 176
    body                   go to state 247
    decl_list              go to state 178
    decl                   go to state 179
    decl_list_item_id      go to state 13
    command_list           go to state 180
    command                go to state 181


State 220

    9 program: start_var_decl_list start_const_decl_list func_decl_list KW_DEF KW_MAIN '(' ')' • ':' body KW_ENDDEF ';'

    ':'  shift, and go to state 248


State 221

    6 program: start_var_decl_list func_decl_list KW_DEF KW_MAIN '(' ')' ':' • body KW_ENDDEF ';'
   17 var_decl: • var_decl_list ':' type_spec ';'
   18         | • array_compact_integer
   19 var_decl_list: • var_decl_list ',' decl_list_item_id
   20              | • decl_list_item_id
   21 array_compact_integer: • IDENTIFIER SIMPLE_ARRAY '[' expr KW_FOR expr ':' INTEGER ']' ':' type_spec ';'
   24 const_decl: • KW_CONST const_decl_list_item ':' type_spec ';'
   34 body: • decl_list command_list
   35     | • command_list
   36 decl_list: • decl_list decl
   37          | • decl
   38 decl: • KW_CONST var_decl ':' type_spec ';'
   39     | • var_decl ':' type_spec ';'
   40 decl_list_item_id: • IDENTIFIER
   41                  | • IDENTIFIER '[' INTEGER ']'
   42                  | • IDENTIFIER '[' ']'
   43 command_list: • command_list command
   44             | • command
   45 command: • IDENTIFIER '=' expr ';'
   46        | • IDENTIFIER '(' func_call ')' ';'
   47        | • IDENTIFIER '(' ')' ';'
   48        | • IDENTIFIER '(' STRING ')' ';'
   49        | • KW_BREAK ';'
   50        | • KW_CONTINUE ';'
   51        | • KW_RETURN ';'
   52        | • KW_RETURN expr ';'
   53        | • KW_IF '(' expr ')' ':' command_list KW_ENDIF ';'
   54        | • KW_IF '(' expr ')' ':' command_list KW_ELSE ':' command_list KW_ENDIF ';'
   55        | • KW_WHILE '(' expr ')' ':' command_list KW_ENDWHILE ';'
   56        | • KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ':' expr ']' ':' command_list KW_ENDFOR ';'
   57        | • KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ']' ':' command_list KW_ENDFOR ';'
   58        | • var_decl
   59        | • const_decl

    IDENTIFIER   shift, and go to state 167
    KW_IF        shift, and go to state 168
    KW_CONST     shift, and go to state 169
    KW_FOR       shift, and go to state 170
    KW_WHILE     shift, and go to state 171
    KW_BREAK     shift, and go to state 172
    KW_CONTINUE  shift, and go to state 173
    KW_RETURN    shift, and go to state 174

    var_decl               go to state 175
    var_decl_list          go to state 7
    array_compact_integer  go to state 8
    const_decl             go to state 176
    body                   go to state 249
    decl_list              go to state 178
    decl                   go to state 179
    decl_list_item_id      go to state 13
    command_list           go to state 180
    command                go to state 181


State 222

   10 program: start_var_decl_list func_decl_list start_const_decl_list KW_DEF KW_MAIN '(' ')' • ':' body KW_ENDDEF ';'

    ':'  shift, and go to state 250


State 223

    3 program: start_const_decl_list KW_DEF KW_MAIN '(' ')' ':' body • KW_ENDDEF ';'

    KW_ENDDEF  shift, and go to state 251


State 224

    8 program: start_const_decl_list start_var_decl_list KW_DEF KW_MAIN '(' ')' ':' • body KW_ENDDEF ';'
   17 var_decl: • var_decl_list ':' type_spec ';'
   18         | • array_compact_integer
   19 var_decl_list: • var_decl_list ',' decl_list_item_id
   20              | • decl_list_item_id
   21 array_compact_integer: • IDENTIFIER SIMPLE_ARRAY '[' expr KW_FOR expr ':' INTEGER ']' ':' type_spec ';'
   24 const_decl: • KW_CONST const_decl_list_item ':' type_spec ';'
   34 body: • decl_list command_list
   35     | • command_list
   36 decl_list: • decl_list decl
   37          | • decl
   38 decl: • KW_CONST var_decl ':' type_spec ';'
   39     | • var_decl ':' type_spec ';'
   40 decl_list_item_id: • IDENTIFIER
   41                  | • IDENTIFIER '[' INTEGER ']'
   42                  | • IDENTIFIER '[' ']'
   43 command_list: • command_list command
   44             | • command
   45 command: • IDENTIFIER '=' expr ';'
   46        | • IDENTIFIER '(' func_call ')' ';'
   47        | • IDENTIFIER '(' ')' ';'
   48        | • IDENTIFIER '(' STRING ')' ';'
   49        | • KW_BREAK ';'
   50        | • KW_CONTINUE ';'
   51        | • KW_RETURN ';'
   52        | • KW_RETURN expr ';'
   53        | • KW_IF '(' expr ')' ':' command_list KW_ENDIF ';'
   54        | • KW_IF '(' expr ')' ':' command_list KW_ELSE ':' command_list KW_ENDIF ';'
   55        | • KW_WHILE '(' expr ')' ':' command_list KW_ENDWHILE ';'
   56        | • KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ':' expr ']' ':' command_list KW_ENDFOR ';'
   57        | • KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ']' ':' command_list KW_ENDFOR ';'
   58        | • var_decl
   59        | • const_decl

    IDENTIFIER   shift, and go to state 167
    KW_IF        shift, and go to state 168
    KW_CONST     shift, and go to state 169
    KW_FOR       shift, and go to state 170
    KW_WHILE     shift, and go to state 171
    KW_BREAK     shift, and go to state 172
    KW_CONTINUE  shift, and go to state 173
    KW_RETURN    shift, and go to state 174

    var_decl               go to state 175
    var_decl_list          go to state 7
    array_compact_integer  go to state 8
    const_decl             go to state 176
    body                   go to state 252
    decl_list              go to state 178
    decl                   go to state 179
    decl_list_item_id      go to state 13
    command_list           go to state 180
    command                go to state 181


State 225

   11 program: start_const_decl_list start_var_decl_list func_decl_list KW_DEF KW_MAIN '(' ')' • ':' body KW_ENDDEF ';'

    ':'  shift, and go to state 253


State 226

    7 program: start_const_decl_list func_decl_list KW_DEF KW_MAIN '(' ')' ':' • body KW_ENDDEF ';'
   17 var_decl: • var_decl_list ':' type_spec ';'
   18         | • array_compact_integer
   19 var_decl_list: • var_decl_list ',' decl_list_item_id
   20              | • decl_list_item_id
   21 array_compact_integer: • IDENTIFIER SIMPLE_ARRAY '[' expr KW_FOR expr ':' INTEGER ']' ':' type_spec ';'
   24 const_decl: • KW_CONST const_decl_list_item ':' type_spec ';'
   34 body: • decl_list command_list
   35     | • command_list
   36 decl_list: • decl_list decl
   37          | • decl
   38 decl: • KW_CONST var_decl ':' type_spec ';'
   39     | • var_decl ':' type_spec ';'
   40 decl_list_item_id: • IDENTIFIER
   41                  | • IDENTIFIER '[' INTEGER ']'
   42                  | • IDENTIFIER '[' ']'
   43 command_list: • command_list command
   44             | • command
   45 command: • IDENTIFIER '=' expr ';'
   46        | • IDENTIFIER '(' func_call ')' ';'
   47        | • IDENTIFIER '(' ')' ';'
   48        | • IDENTIFIER '(' STRING ')' ';'
   49        | • KW_BREAK ';'
   50        | • KW_CONTINUE ';'
   51        | • KW_RETURN ';'
   52        | • KW_RETURN expr ';'
   53        | • KW_IF '(' expr ')' ':' command_list KW_ENDIF ';'
   54        | • KW_IF '(' expr ')' ':' command_list KW_ELSE ':' command_list KW_ENDIF ';'
   55        | • KW_WHILE '(' expr ')' ':' command_list KW_ENDWHILE ';'
   56        | • KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ':' expr ']' ':' command_list KW_ENDFOR ';'
   57        | • KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ']' ':' command_list KW_ENDFOR ';'
   58        | • var_decl
   59        | • const_decl

    IDENTIFIER   shift, and go to state 167
    KW_IF        shift, and go to state 168
    KW_CONST     shift, and go to state 169
    KW_FOR       shift, and go to state 170
    KW_WHILE     shift, and go to state 171
    KW_BREAK     shift, and go to state 172
    KW_CONTINUE  shift, and go to state 173
    KW_RETURN    shift, and go to state 174

    var_decl               go to state 175
    var_decl_list          go to state 7
    array_compact_integer  go to state 8
    const_decl             go to state 176
    body                   go to state 254
    decl_list              go to state 178
    decl                   go to state 179
    decl_list_item_id      go to state 13
    command_list           go to state 180
    command                go to state 181


State 227

   12 program: start_const_decl_list func_decl_list start_var_decl_list KW_DEF KW_MAIN '(' ')' • ':' body KW_ENDDEF ';'

    ':'  shift, and go to state 255


State 228

    4 program: func_decl_list KW_DEF KW_MAIN '(' ')' ':' body • KW_ENDDEF ';'

    KW_ENDDEF  shift, and go to state 256


State 229

   14 program: func_decl_list start_var_decl_list start_const_decl_list KW_DEF KW_MAIN '(' ')' • ':' body KW_ENDDEF ';'

    ':'  shift, and go to state 257


State 230

   13 program: func_decl_list start_const_decl_list start_var_decl_list KW_DEF KW_MAIN '(' ')' • ':' body KW_ENDDEF ';'

    ':'  shift, and go to state 258


State 231

   70 expr: expr • '+' expr
   71     | expr • '-' expr
   72     | expr • '*' expr
   73     | expr • '/' expr
   74     | expr • '%' expr
   75     | expr • ASSIGN_PLUSEQ expr
   76     | expr • ASSIGN_MINUSEQ expr
   77     | expr • ASSIGN_MULEQ expr
   78     | expr • ASSIGN_DIVEQ expr
   79     | expr • ASSIGN_MODEQ expr
   80     | expr • POW expr
   82     | expr • OP_AND expr
   83     | expr • OP_OR expr
   84     | expr • NE expr
   85     | expr • EQUALS expr
   86     | expr • '<' expr
   87     | expr • LE expr
   88     | expr • '>' expr
   89     | expr • GE expr
   94 func_call: func_call ',' expr •  [')', ',']

    POW             shift, and go to state 100
    EQUALS          shift, and go to state 101
    NE              shift, and go to state 102
    LE              shift, and go to state 103
    GE              shift, and go to state 104
    OP_AND          shift, and go to state 105
    OP_OR           shift, and go to state 106
    ASSIGN_PLUSEQ   shift, and go to state 107
    ASSIGN_MINUSEQ  shift, and go to state 108
    ASSIGN_MULEQ    shift, and go to state 109
    ASSIGN_DIVEQ    shift, and go to state 110
    ASSIGN_MODEQ    shift, and go to state 111
    '+'             shift, and go to state 112
    '-'             shift, and go to state 113
    '*'             shift, and go to state 114
    '/'             shift, and go to state 115
    '%'             shift, and go to state 116
    '<'             shift, and go to state 117
    '>'             shift, and go to state 118

    $default  reduce using rule 94 (func_call)


State 232

   21 array_compact_integer: IDENTIFIER SIMPLE_ARRAY '[' expr KW_FOR expr ':' INTEGER • ']' ':' type_spec ';'

    ']'  shift, and go to state 259


State 233

   30 func_decl: KW_DEF IDENTIFIER '(' ')' RETURN_ID type_spec ':' body • KW_ENDDEF ';'

    KW_ENDDEF  shift, and go to state 260


State 234

   17 var_decl: • var_decl_list ':' type_spec ';'
   18         | • array_compact_integer
   19 var_decl_list: • var_decl_list ',' decl_list_item_id
   20              | • decl_list_item_id
   21 array_compact_integer: • IDENTIFIER SIMPLE_ARRAY '[' expr KW_FOR expr ':' INTEGER ']' ':' type_spec ';'
   24 const_decl: • KW_CONST const_decl_list_item ':' type_spec ';'
   29 func_decl: KW_DEF IDENTIFIER '(' func_var_decl_list ')' RETURN_ID type_spec ':' • body KW_ENDDEF ';'
   34 body: • decl_list command_list
   35     | • command_list
   36 decl_list: • decl_list decl
   37          | • decl
   38 decl: • KW_CONST var_decl ':' type_spec ';'
   39     | • var_decl ':' type_spec ';'
   40 decl_list_item_id: • IDENTIFIER
   41                  | • IDENTIFIER '[' INTEGER ']'
   42                  | • IDENTIFIER '[' ']'
   43 command_list: • command_list command
   44             | • command
   45 command: • IDENTIFIER '=' expr ';'
   46        | • IDENTIFIER '(' func_call ')' ';'
   47        | • IDENTIFIER '(' ')' ';'
   48        | • IDENTIFIER '(' STRING ')' ';'
   49        | • KW_BREAK ';'
   50        | • KW_CONTINUE ';'
   51        | • KW_RETURN ';'
   52        | • KW_RETURN expr ';'
   53        | • KW_IF '(' expr ')' ':' command_list KW_ENDIF ';'
   54        | • KW_IF '(' expr ')' ':' command_list KW_ELSE ':' command_list KW_ENDIF ';'
   55        | • KW_WHILE '(' expr ')' ':' command_list KW_ENDWHILE ';'
   56        | • KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ':' expr ']' ':' command_list KW_ENDFOR ';'
   57        | • KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ']' ':' command_list KW_ENDFOR ';'
   58        | • var_decl
   59        | • const_decl

    IDENTIFIER   shift, and go to state 167
    KW_IF        shift, and go to state 168
    KW_CONST     shift, and go to state 169
    KW_FOR       shift, and go to state 170
    KW_WHILE     shift, and go to state 171
    KW_BREAK     shift, and go to state 172
    KW_CONTINUE  shift, and go to state 173
    KW_RETURN    shift, and go to state 174

    var_decl               go to state 175
    var_decl_list          go to state 7
    array_compact_integer  go to state 8
    const_decl             go to state 176
    body                   go to state 261
    decl_list              go to state 178
    decl                   go to state 179
    decl_list_item_id      go to state 13
    command_list           go to state 180
    command                go to state 181


State 235

   48 command: IDENTIFIER '(' STRING • ')' ';'

    ')'  shift, and go to state 262


State 236

   47 command: IDENTIFIER '(' ')' • ';'

    ';'  shift, and go to state 263


State 237

   46 command: IDENTIFIER '(' func_call • ')' ';'
   94 func_call: func_call • ',' expr

    ')'  shift, and go to state 264
    ','  shift, and go to state 196


State 238

   45 command: IDENTIFIER '=' expr • ';'
   70 expr: expr • '+' expr
   71     | expr • '-' expr
   72     | expr • '*' expr
   73     | expr • '/' expr
   74     | expr • '%' expr
   75     | expr • ASSIGN_PLUSEQ expr
   76     | expr • ASSIGN_MINUSEQ expr
   77     | expr • ASSIGN_MULEQ expr
   78     | expr • ASSIGN_DIVEQ expr
   79     | expr • ASSIGN_MODEQ expr
   80     | expr • POW expr
   82     | expr • OP_AND expr
   83     | expr • OP_OR expr
   84     | expr • NE expr
   85     | expr • EQUALS expr
   86     | expr • '<' expr
   87     | expr • LE expr
   88     | expr • '>' expr
   89     | expr • GE expr

    POW             shift, and go to state 100
    EQUALS          shift, and go to state 101
    NE              shift, and go to state 102
    LE              shift, and go to state 103
    GE              shift, and go to state 104
    OP_AND          shift, and go to state 105
    OP_OR           shift, and go to state 106
    ASSIGN_PLUSEQ   shift, and go to state 107
    ASSIGN_MINUSEQ  shift, and go to state 108
    ASSIGN_MULEQ    shift, and go to state 109
    ASSIGN_DIVEQ    shift, and go to state 110
    ASSIGN_MODEQ    shift, and go to state 111
    '+'             shift, and go to state 112
    '-'             shift, and go to state 113
    '*'             shift, and go to state 114
    '/'             shift, and go to state 115
    '%'             shift, and go to state 116
    '<'             shift, and go to state 117
    '>'             shift, and go to state 118
    ';'             shift, and go to state 265


State 239

   53 command: KW_IF '(' expr • ')' ':' command_list KW_ENDIF ';'
   54        | KW_IF '(' expr • ')' ':' command_list KW_ELSE ':' command_list KW_ENDIF ';'
   70 expr: expr • '+' expr
   71     | expr • '-' expr
   72     | expr • '*' expr
   73     | expr • '/' expr
   74     | expr • '%' expr
   75     | expr • ASSIGN_PLUSEQ expr
   76     | expr • ASSIGN_MINUSEQ expr
   77     | expr • ASSIGN_MULEQ expr
   78     | expr • ASSIGN_DIVEQ expr
   79     | expr • ASSIGN_MODEQ expr
   80     | expr • POW expr
   82     | expr • OP_AND expr
   83     | expr • OP_OR expr
   84     | expr • NE expr
   85     | expr • EQUALS expr
   86     | expr • '<' expr
   87     | expr • LE expr
   88     | expr • '>' expr
   89     | expr • GE expr

    POW             shift, and go to state 100
    EQUALS          shift, and go to state 101
    NE              shift, and go to state 102
    LE              shift, and go to state 103
    GE              shift, and go to state 104
    OP_AND          shift, and go to state 105
    OP_OR           shift, and go to state 106
    ASSIGN_PLUSEQ   shift, and go to state 107
    ASSIGN_MINUSEQ  shift, and go to state 108
    ASSIGN_MULEQ    shift, and go to state 109
    ASSIGN_DIVEQ    shift, and go to state 110
    ASSIGN_MODEQ    shift, and go to state 111
    '+'             shift, and go to state 112
    '-'             shift, and go to state 113
    '*'             shift, and go to state 114
    '/'             shift, and go to state 115
    '%'             shift, and go to state 116
    '<'             shift, and go to state 117
    '>'             shift, and go to state 118
    ')'             shift, and go to state 266


State 240

   38 decl: KW_CONST var_decl ':' • type_spec ';'
   90 type_spec: • KW_INTEGER
   91          | • KW_SCALAR
   92          | • KW_STR
   93          | • KW_BOOLEAN

    KW_INTEGER  shift, and go to state 48
    KW_SCALAR   shift, and go to state 49
    KW_STR      shift, and go to state 50
    KW_BOOLEAN  shift, and go to state 51

    type_spec  go to state 267


State 241

   56 command: KW_FOR IDENTIFIER KW_IN • '[' expr ':' expr ':' expr ']' ':' command_list KW_ENDFOR ';'
   57        | KW_FOR IDENTIFIER KW_IN • '[' expr ':' expr ']' ':' command_list KW_ENDFOR ';'

    '['  shift, and go to state 268


State 242

   55 command: KW_WHILE '(' expr • ')' ':' command_list KW_ENDWHILE ';'
   70 expr: expr • '+' expr
   71     | expr • '-' expr
   72     | expr • '*' expr
   73     | expr • '/' expr
   74     | expr • '%' expr
   75     | expr • ASSIGN_PLUSEQ expr
   76     | expr • ASSIGN_MINUSEQ expr
   77     | expr • ASSIGN_MULEQ expr
   78     | expr • ASSIGN_DIVEQ expr
   79     | expr • ASSIGN_MODEQ expr
   80     | expr • POW expr
   82     | expr • OP_AND expr
   83     | expr • OP_OR expr
   84     | expr • NE expr
   85     | expr • EQUALS expr
   86     | expr • '<' expr
   87     | expr • LE expr
   88     | expr • '>' expr
   89     | expr • GE expr

    POW             shift, and go to state 100
    EQUALS          shift, and go to state 101
    NE              shift, and go to state 102
    LE              shift, and go to state 103
    GE              shift, and go to state 104
    OP_AND          shift, and go to state 105
    OP_OR           shift, and go to state 106
    ASSIGN_PLUSEQ   shift, and go to state 107
    ASSIGN_MINUSEQ  shift, and go to state 108
    ASSIGN_MULEQ    shift, and go to state 109
    ASSIGN_DIVEQ    shift, and go to state 110
    ASSIGN_MODEQ    shift, and go to state 111
    '+'             shift, and go to state 112
    '-'             shift, and go to state 113
    '*'             shift, and go to state 114
    '/'             shift, and go to state 115
    '%'             shift, and go to state 116
    '<'             shift, and go to state 117
    '>'             shift, and go to state 118
    ')'             shift, and go to state 269


State 243

   52 command: KW_RETURN expr ';' •

    $default  reduce using rule 52 (command)


State 244

   39 decl: var_decl ':' type_spec • ';'

    ';'  shift, and go to state 270


State 245

    1 program: KW_DEF KW_MAIN '(' ')' ':' body KW_ENDDEF ';' •

    $default  reduce using rule 1 (program)


State 246

    2 program: start_var_decl_list KW_DEF KW_MAIN '(' ')' ':' body KW_ENDDEF • ';'

    ';'  shift, and go to state 271


State 247

    5 program: start_var_decl_list start_const_decl_list KW_DEF KW_MAIN '(' ')' ':' body • KW_ENDDEF ';'

    KW_ENDDEF  shift, and go to state 272


State 248

    9 program: start_var_decl_list start_const_decl_list func_decl_list KW_DEF KW_MAIN '(' ')' ':' • body KW_ENDDEF ';'
   17 var_decl: • var_decl_list ':' type_spec ';'
   18         | • array_compact_integer
   19 var_decl_list: • var_decl_list ',' decl_list_item_id
   20              | • decl_list_item_id
   21 array_compact_integer: • IDENTIFIER SIMPLE_ARRAY '[' expr KW_FOR expr ':' INTEGER ']' ':' type_spec ';'
   24 const_decl: • KW_CONST const_decl_list_item ':' type_spec ';'
   34 body: • decl_list command_list
   35     | • command_list
   36 decl_list: • decl_list decl
   37          | • decl
   38 decl: • KW_CONST var_decl ':' type_spec ';'
   39     | • var_decl ':' type_spec ';'
   40 decl_list_item_id: • IDENTIFIER
   41                  | • IDENTIFIER '[' INTEGER ']'
   42                  | • IDENTIFIER '[' ']'
   43 command_list: • command_list command
   44             | • command
   45 command: • IDENTIFIER '=' expr ';'
   46        | • IDENTIFIER '(' func_call ')' ';'
   47        | • IDENTIFIER '(' ')' ';'
   48        | • IDENTIFIER '(' STRING ')' ';'
   49        | • KW_BREAK ';'
   50        | • KW_CONTINUE ';'
   51        | • KW_RETURN ';'
   52        | • KW_RETURN expr ';'
   53        | • KW_IF '(' expr ')' ':' command_list KW_ENDIF ';'
   54        | • KW_IF '(' expr ')' ':' command_list KW_ELSE ':' command_list KW_ENDIF ';'
   55        | • KW_WHILE '(' expr ')' ':' command_list KW_ENDWHILE ';'
   56        | • KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ':' expr ']' ':' command_list KW_ENDFOR ';'
   57        | • KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ']' ':' command_list KW_ENDFOR ';'
   58        | • var_decl
   59        | • const_decl

    IDENTIFIER   shift, and go to state 167
    KW_IF        shift, and go to state 168
    KW_CONST     shift, and go to state 169
    KW_FOR       shift, and go to state 170
    KW_WHILE     shift, and go to state 171
    KW_BREAK     shift, and go to state 172
    KW_CONTINUE  shift, and go to state 173
    KW_RETURN    shift, and go to state 174

    var_decl               go to state 175
    var_decl_list          go to state 7
    array_compact_integer  go to state 8
    const_decl             go to state 176
    body                   go to state 273
    decl_list              go to state 178
    decl                   go to state 179
    decl_list_item_id      go to state 13
    command_list           go to state 180
    command                go to state 181


State 249

    6 program: start_var_decl_list func_decl_list KW_DEF KW_MAIN '(' ')' ':' body • KW_ENDDEF ';'

    KW_ENDDEF  shift, and go to state 274


State 250

   10 program: start_var_decl_list func_decl_list start_const_decl_list KW_DEF KW_MAIN '(' ')' ':' • body KW_ENDDEF ';'
   17 var_decl: • var_decl_list ':' type_spec ';'
   18         | • array_compact_integer
   19 var_decl_list: • var_decl_list ',' decl_list_item_id
   20              | • decl_list_item_id
   21 array_compact_integer: • IDENTIFIER SIMPLE_ARRAY '[' expr KW_FOR expr ':' INTEGER ']' ':' type_spec ';'
   24 const_decl: • KW_CONST const_decl_list_item ':' type_spec ';'
   34 body: • decl_list command_list
   35     | • command_list
   36 decl_list: • decl_list decl
   37          | • decl
   38 decl: • KW_CONST var_decl ':' type_spec ';'
   39     | • var_decl ':' type_spec ';'
   40 decl_list_item_id: • IDENTIFIER
   41                  | • IDENTIFIER '[' INTEGER ']'
   42                  | • IDENTIFIER '[' ']'
   43 command_list: • command_list command
   44             | • command
   45 command: • IDENTIFIER '=' expr ';'
   46        | • IDENTIFIER '(' func_call ')' ';'
   47        | • IDENTIFIER '(' ')' ';'
   48        | • IDENTIFIER '(' STRING ')' ';'
   49        | • KW_BREAK ';'
   50        | • KW_CONTINUE ';'
   51        | • KW_RETURN ';'
   52        | • KW_RETURN expr ';'
   53        | • KW_IF '(' expr ')' ':' command_list KW_ENDIF ';'
   54        | • KW_IF '(' expr ')' ':' command_list KW_ELSE ':' command_list KW_ENDIF ';'
   55        | • KW_WHILE '(' expr ')' ':' command_list KW_ENDWHILE ';'
   56        | • KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ':' expr ']' ':' command_list KW_ENDFOR ';'
   57        | • KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ']' ':' command_list KW_ENDFOR ';'
   58        | • var_decl
   59        | • const_decl

    IDENTIFIER   shift, and go to state 167
    KW_IF        shift, and go to state 168
    KW_CONST     shift, and go to state 169
    KW_FOR       shift, and go to state 170
    KW_WHILE     shift, and go to state 171
    KW_BREAK     shift, and go to state 172
    KW_CONTINUE  shift, and go to state 173
    KW_RETURN    shift, and go to state 174

    var_decl               go to state 175
    var_decl_list          go to state 7
    array_compact_integer  go to state 8
    const_decl             go to state 176
    body                   go to state 275
    decl_list              go to state 178
    decl                   go to state 179
    decl_list_item_id      go to state 13
    command_list           go to state 180
    command                go to state 181


State 251

    3 program: start_const_decl_list KW_DEF KW_MAIN '(' ')' ':' body KW_ENDDEF • ';'

    ';'  shift, and go to state 276


State 252

    8 program: start_const_decl_list start_var_decl_list KW_DEF KW_MAIN '(' ')' ':' body • KW_ENDDEF ';'

    KW_ENDDEF  shift, and go to state 277


State 253

   11 program: start_const_decl_list start_var_decl_list func_decl_list KW_DEF KW_MAIN '(' ')' ':' • body KW_ENDDEF ';'
   17 var_decl: • var_decl_list ':' type_spec ';'
   18         | • array_compact_integer
   19 var_decl_list: • var_decl_list ',' decl_list_item_id
   20              | • decl_list_item_id
   21 array_compact_integer: • IDENTIFIER SIMPLE_ARRAY '[' expr KW_FOR expr ':' INTEGER ']' ':' type_spec ';'
   24 const_decl: • KW_CONST const_decl_list_item ':' type_spec ';'
   34 body: • decl_list command_list
   35     | • command_list
   36 decl_list: • decl_list decl
   37          | • decl
   38 decl: • KW_CONST var_decl ':' type_spec ';'
   39     | • var_decl ':' type_spec ';'
   40 decl_list_item_id: • IDENTIFIER
   41                  | • IDENTIFIER '[' INTEGER ']'
   42                  | • IDENTIFIER '[' ']'
   43 command_list: • command_list command
   44             | • command
   45 command: • IDENTIFIER '=' expr ';'
   46        | • IDENTIFIER '(' func_call ')' ';'
   47        | • IDENTIFIER '(' ')' ';'
   48        | • IDENTIFIER '(' STRING ')' ';'
   49        | • KW_BREAK ';'
   50        | • KW_CONTINUE ';'
   51        | • KW_RETURN ';'
   52        | • KW_RETURN expr ';'
   53        | • KW_IF '(' expr ')' ':' command_list KW_ENDIF ';'
   54        | • KW_IF '(' expr ')' ':' command_list KW_ELSE ':' command_list KW_ENDIF ';'
   55        | • KW_WHILE '(' expr ')' ':' command_list KW_ENDWHILE ';'
   56        | • KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ':' expr ']' ':' command_list KW_ENDFOR ';'
   57        | • KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ']' ':' command_list KW_ENDFOR ';'
   58        | • var_decl
   59        | • const_decl

    IDENTIFIER   shift, and go to state 167
    KW_IF        shift, and go to state 168
    KW_CONST     shift, and go to state 169
    KW_FOR       shift, and go to state 170
    KW_WHILE     shift, and go to state 171
    KW_BREAK     shift, and go to state 172
    KW_CONTINUE  shift, and go to state 173
    KW_RETURN    shift, and go to state 174

    var_decl               go to state 175
    var_decl_list          go to state 7
    array_compact_integer  go to state 8
    const_decl             go to state 176
    body                   go to state 278
    decl_list              go to state 178
    decl                   go to state 179
    decl_list_item_id      go to state 13
    command_list           go to state 180
    command                go to state 181


State 254

    7 program: start_const_decl_list func_decl_list KW_DEF KW_MAIN '(' ')' ':' body • KW_ENDDEF ';'

    KW_ENDDEF  shift, and go to state 279


State 255

   12 program: start_const_decl_list func_decl_list start_var_decl_list KW_DEF KW_MAIN '(' ')' ':' • body KW_ENDDEF ';'
   17 var_decl: • var_decl_list ':' type_spec ';'
   18         | • array_compact_integer
   19 var_decl_list: • var_decl_list ',' decl_list_item_id
   20              | • decl_list_item_id
   21 array_compact_integer: • IDENTIFIER SIMPLE_ARRAY '[' expr KW_FOR expr ':' INTEGER ']' ':' type_spec ';'
   24 const_decl: • KW_CONST const_decl_list_item ':' type_spec ';'
   34 body: • decl_list command_list
   35     | • command_list
   36 decl_list: • decl_list decl
   37          | • decl
   38 decl: • KW_CONST var_decl ':' type_spec ';'
   39     | • var_decl ':' type_spec ';'
   40 decl_list_item_id: • IDENTIFIER
   41                  | • IDENTIFIER '[' INTEGER ']'
   42                  | • IDENTIFIER '[' ']'
   43 command_list: • command_list command
   44             | • command
   45 command: • IDENTIFIER '=' expr ';'
   46        | • IDENTIFIER '(' func_call ')' ';'
   47        | • IDENTIFIER '(' ')' ';'
   48        | • IDENTIFIER '(' STRING ')' ';'
   49        | • KW_BREAK ';'
   50        | • KW_CONTINUE ';'
   51        | • KW_RETURN ';'
   52        | • KW_RETURN expr ';'
   53        | • KW_IF '(' expr ')' ':' command_list KW_ENDIF ';'
   54        | • KW_IF '(' expr ')' ':' command_list KW_ELSE ':' command_list KW_ENDIF ';'
   55        | • KW_WHILE '(' expr ')' ':' command_list KW_ENDWHILE ';'
   56        | • KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ':' expr ']' ':' command_list KW_ENDFOR ';'
   57        | • KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ']' ':' command_list KW_ENDFOR ';'
   58        | • var_decl
   59        | • const_decl

    IDENTIFIER   shift, and go to state 167
    KW_IF        shift, and go to state 168
    KW_CONST     shift, and go to state 169
    KW_FOR       shift, and go to state 170
    KW_WHILE     shift, and go to state 171
    KW_BREAK     shift, and go to state 172
    KW_CONTINUE  shift, and go to state 173
    KW_RETURN    shift, and go to state 174

    var_decl               go to state 175
    var_decl_list          go to state 7
    array_compact_integer  go to state 8
    const_decl             go to state 176
    body                   go to state 280
    decl_list              go to state 178
    decl                   go to state 179
    decl_list_item_id      go to state 13
    command_list           go to state 180
    command                go to state 181


State 256

    4 program: func_decl_list KW_DEF KW_MAIN '(' ')' ':' body KW_ENDDEF • ';'

    ';'  shift, and go to state 281


State 257

   14 program: func_decl_list start_var_decl_list start_const_decl_list KW_DEF KW_MAIN '(' ')' ':' • body KW_ENDDEF ';'
   17 var_decl: • var_decl_list ':' type_spec ';'
   18         | • array_compact_integer
   19 var_decl_list: • var_decl_list ',' decl_list_item_id
   20              | • decl_list_item_id
   21 array_compact_integer: • IDENTIFIER SIMPLE_ARRAY '[' expr KW_FOR expr ':' INTEGER ']' ':' type_spec ';'
   24 const_decl: • KW_CONST const_decl_list_item ':' type_spec ';'
   34 body: • decl_list command_list
   35     | • command_list
   36 decl_list: • decl_list decl
   37          | • decl
   38 decl: • KW_CONST var_decl ':' type_spec ';'
   39     | • var_decl ':' type_spec ';'
   40 decl_list_item_id: • IDENTIFIER
   41                  | • IDENTIFIER '[' INTEGER ']'
   42                  | • IDENTIFIER '[' ']'
   43 command_list: • command_list command
   44             | • command
   45 command: • IDENTIFIER '=' expr ';'
   46        | • IDENTIFIER '(' func_call ')' ';'
   47        | • IDENTIFIER '(' ')' ';'
   48        | • IDENTIFIER '(' STRING ')' ';'
   49        | • KW_BREAK ';'
   50        | • KW_CONTINUE ';'
   51        | • KW_RETURN ';'
   52        | • KW_RETURN expr ';'
   53        | • KW_IF '(' expr ')' ':' command_list KW_ENDIF ';'
   54        | • KW_IF '(' expr ')' ':' command_list KW_ELSE ':' command_list KW_ENDIF ';'
   55        | • KW_WHILE '(' expr ')' ':' command_list KW_ENDWHILE ';'
   56        | • KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ':' expr ']' ':' command_list KW_ENDFOR ';'
   57        | • KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ']' ':' command_list KW_ENDFOR ';'
   58        | • var_decl
   59        | • const_decl

    IDENTIFIER   shift, and go to state 167
    KW_IF        shift, and go to state 168
    KW_CONST     shift, and go to state 169
    KW_FOR       shift, and go to state 170
    KW_WHILE     shift, and go to state 171
    KW_BREAK     shift, and go to state 172
    KW_CONTINUE  shift, and go to state 173
    KW_RETURN    shift, and go to state 174

    var_decl               go to state 175
    var_decl_list          go to state 7
    array_compact_integer  go to state 8
    const_decl             go to state 176
    body                   go to state 282
    decl_list              go to state 178
    decl                   go to state 179
    decl_list_item_id      go to state 13
    command_list           go to state 180
    command                go to state 181


State 258

   13 program: func_decl_list start_const_decl_list start_var_decl_list KW_DEF KW_MAIN '(' ')' ':' • body KW_ENDDEF ';'
   17 var_decl: • var_decl_list ':' type_spec ';'
   18         | • array_compact_integer
   19 var_decl_list: • var_decl_list ',' decl_list_item_id
   20              | • decl_list_item_id
   21 array_compact_integer: • IDENTIFIER SIMPLE_ARRAY '[' expr KW_FOR expr ':' INTEGER ']' ':' type_spec ';'
   24 const_decl: • KW_CONST const_decl_list_item ':' type_spec ';'
   34 body: • decl_list command_list
   35     | • command_list
   36 decl_list: • decl_list decl
   37          | • decl
   38 decl: • KW_CONST var_decl ':' type_spec ';'
   39     | • var_decl ':' type_spec ';'
   40 decl_list_item_id: • IDENTIFIER
   41                  | • IDENTIFIER '[' INTEGER ']'
   42                  | • IDENTIFIER '[' ']'
   43 command_list: • command_list command
   44             | • command
   45 command: • IDENTIFIER '=' expr ';'
   46        | • IDENTIFIER '(' func_call ')' ';'
   47        | • IDENTIFIER '(' ')' ';'
   48        | • IDENTIFIER '(' STRING ')' ';'
   49        | • KW_BREAK ';'
   50        | • KW_CONTINUE ';'
   51        | • KW_RETURN ';'
   52        | • KW_RETURN expr ';'
   53        | • KW_IF '(' expr ')' ':' command_list KW_ENDIF ';'
   54        | • KW_IF '(' expr ')' ':' command_list KW_ELSE ':' command_list KW_ENDIF ';'
   55        | • KW_WHILE '(' expr ')' ':' command_list KW_ENDWHILE ';'
   56        | • KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ':' expr ']' ':' command_list KW_ENDFOR ';'
   57        | • KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ']' ':' command_list KW_ENDFOR ';'
   58        | • var_decl
   59        | • const_decl

    IDENTIFIER   shift, and go to state 167
    KW_IF        shift, and go to state 168
    KW_CONST     shift, and go to state 169
    KW_FOR       shift, and go to state 170
    KW_WHILE     shift, and go to state 171
    KW_BREAK     shift, and go to state 172
    KW_CONTINUE  shift, and go to state 173
    KW_RETURN    shift, and go to state 174

    var_decl               go to state 175
    var_decl_list          go to state 7
    array_compact_integer  go to state 8
    const_decl             go to state 176
    body                   go to state 283
    decl_list              go to state 178
    decl                   go to state 179
    decl_list_item_id      go to state 13
    command_list           go to state 180
    command                go to state 181


State 259

   21 array_compact_integer: IDENTIFIER SIMPLE_ARRAY '[' expr KW_FOR expr ':' INTEGER ']' • ':' type_spec ';'

    ':'  shift, and go to state 284


State 260

   30 func_decl: KW_DEF IDENTIFIER '(' ')' RETURN_ID type_spec ':' body KW_ENDDEF • ';'

    ';'  shift, and go to state 285


State 261

   29 func_decl: KW_DEF IDENTIFIER '(' func_var_decl_list ')' RETURN_ID type_spec ':' body • KW_ENDDEF ';'

    KW_ENDDEF  shift, and go to state 286


State 262

   48 command: IDENTIFIER '(' STRING ')' • ';'

    ';'  shift, and go to state 287


State 263

   47 command: IDENTIFIER '(' ')' ';' •

    $default  reduce using rule 47 (command)


State 264

   46 command: IDENTIFIER '(' func_call ')' • ';'

    ';'  shift, and go to state 288


State 265

   45 command: IDENTIFIER '=' expr ';' •

    $default  reduce using rule 45 (command)


State 266

   53 command: KW_IF '(' expr ')' • ':' command_list KW_ENDIF ';'
   54        | KW_IF '(' expr ')' • ':' command_list KW_ELSE ':' command_list KW_ENDIF ';'

    ':'  shift, and go to state 289


State 267

   38 decl: KW_CONST var_decl ':' type_spec • ';'

    ';'  shift, and go to state 290


State 268

   56 command: KW_FOR IDENTIFIER KW_IN '[' • expr ':' expr ':' expr ']' ':' command_list KW_ENDFOR ';'
   57        | KW_FOR IDENTIFIER KW_IN '[' • expr ':' expr ']' ':' command_list KW_ENDFOR ';'
   60 expr: • INTEGER
   61     | • SCALAR
   62     | • KW_TRUE
   63     | • KW_FALSE
   64     | • IDENTIFIER
   65     | • IDENTIFIER '[' expr ']'
   66     | • IDENTIFIER '(' func_call ')'
   67     | • IDENTIFIER '(' ')'
   68     | • '-' expr
   69     | • '(' expr ')'
   70     | • expr '+' expr
   71     | • expr '-' expr
   72     | • expr '*' expr
   73     | • expr '/' expr
   74     | • expr '%' expr
   75     | • expr ASSIGN_PLUSEQ expr
   76     | • expr ASSIGN_MINUSEQ expr
   77     | • expr ASSIGN_MULEQ expr
   78     | • expr ASSIGN_DIVEQ expr
   79     | • expr ASSIGN_MODEQ expr
   80     | • expr POW expr
   81     | • OP_NOT expr
   82     | • expr OP_AND expr
   83     | • expr OP_OR expr
   84     | • expr NE expr
   85     | • expr EQUALS expr
   86     | • expr '<' expr
   87     | • expr LE expr
   88     | • expr '>' expr
   89     | • expr GE expr

    IDENTIFIER  shift, and go to state 62
    INTEGER     shift, and go to state 63
    SCALAR      shift, and go to state 64
    KW_TRUE     shift, and go to state 65
    KW_FALSE    shift, and go to state 66
    OP_NOT      shift, and go to state 67
    '-'         shift, and go to state 68
    '('         shift, and go to state 69

    expr  go to state 291


State 269

   55 command: KW_WHILE '(' expr ')' • ':' command_list KW_ENDWHILE ';'

    ':'  shift, and go to state 292


State 270

   39 decl: var_decl ':' type_spec ';' •

    $default  reduce using rule 39 (decl)


State 271

    2 program: start_var_decl_list KW_DEF KW_MAIN '(' ')' ':' body KW_ENDDEF ';' •

    $default  reduce using rule 2 (program)


State 272

    5 program: start_var_decl_list start_const_decl_list KW_DEF KW_MAIN '(' ')' ':' body KW_ENDDEF • ';'

    ';'  shift, and go to state 293


State 273

    9 program: start_var_decl_list start_const_decl_list func_decl_list KW_DEF KW_MAIN '(' ')' ':' body • KW_ENDDEF ';'

    KW_ENDDEF  shift, and go to state 294


State 274

    6 program: start_var_decl_list func_decl_list KW_DEF KW_MAIN '(' ')' ':' body KW_ENDDEF • ';'

    ';'  shift, and go to state 295


State 275

   10 program: start_var_decl_list func_decl_list start_const_decl_list KW_DEF KW_MAIN '(' ')' ':' body • KW_ENDDEF ';'

    KW_ENDDEF  shift, and go to state 296


State 276

    3 program: start_const_decl_list KW_DEF KW_MAIN '(' ')' ':' body KW_ENDDEF ';' •

    $default  reduce using rule 3 (program)


State 277

    8 program: start_const_decl_list start_var_decl_list KW_DEF KW_MAIN '(' ')' ':' body KW_ENDDEF • ';'

    ';'  shift, and go to state 297


State 278

   11 program: start_const_decl_list start_var_decl_list func_decl_list KW_DEF KW_MAIN '(' ')' ':' body • KW_ENDDEF ';'

    KW_ENDDEF  shift, and go to state 298


State 279

    7 program: start_const_decl_list func_decl_list KW_DEF KW_MAIN '(' ')' ':' body KW_ENDDEF • ';'

    ';'  shift, and go to state 299


State 280

   12 program: start_const_decl_list func_decl_list start_var_decl_list KW_DEF KW_MAIN '(' ')' ':' body • KW_ENDDEF ';'

    KW_ENDDEF  shift, and go to state 300


State 281

    4 program: func_decl_list KW_DEF KW_MAIN '(' ')' ':' body KW_ENDDEF ';' •

    $default  reduce using rule 4 (program)


State 282

   14 program: func_decl_list start_var_decl_list start_const_decl_list KW_DEF KW_MAIN '(' ')' ':' body • KW_ENDDEF ';'

    KW_ENDDEF  shift, and go to state 301


State 283

   13 program: func_decl_list start_const_decl_list start_var_decl_list KW_DEF KW_MAIN '(' ')' ':' body • KW_ENDDEF ';'

    KW_ENDDEF  shift, and go to state 302


State 284

   21 array_compact_integer: IDENTIFIER SIMPLE_ARRAY '[' expr KW_FOR expr ':' INTEGER ']' ':' • type_spec ';'
   90 type_spec: • KW_INTEGER
   91          | • KW_SCALAR
   92          | • KW_STR
   93          | • KW_BOOLEAN

    KW_INTEGER  shift, and go to state 48
    KW_SCALAR   shift, and go to state 49
    KW_STR      shift, and go to state 50
    KW_BOOLEAN  shift, and go to state 51

    type_spec  go to state 303


State 285

   30 func_decl: KW_DEF IDENTIFIER '(' ')' RETURN_ID type_spec ':' body KW_ENDDEF ';' •

    $default  reduce using rule 30 (func_decl)


State 286

   29 func_decl: KW_DEF IDENTIFIER '(' func_var_decl_list ')' RETURN_ID type_spec ':' body KW_ENDDEF • ';'

    ';'  shift, and go to state 304


State 287

   48 command: IDENTIFIER '(' STRING ')' ';' •

    $default  reduce using rule 48 (command)


State 288

   46 command: IDENTIFIER '(' func_call ')' ';' •

    $default  reduce using rule 46 (command)


State 289

   17 var_decl: • var_decl_list ':' type_spec ';'
   18         | • array_compact_integer
   19 var_decl_list: • var_decl_list ',' decl_list_item_id
   20              | • decl_list_item_id
   21 array_compact_integer: • IDENTIFIER SIMPLE_ARRAY '[' expr KW_FOR expr ':' INTEGER ']' ':' type_spec ';'
   24 const_decl: • KW_CONST const_decl_list_item ':' type_spec ';'
   40 decl_list_item_id: • IDENTIFIER
   41                  | • IDENTIFIER '[' INTEGER ']'
   42                  | • IDENTIFIER '[' ']'
   43 command_list: • command_list command
   44             | • command
   45 command: • IDENTIFIER '=' expr ';'
   46        | • IDENTIFIER '(' func_call ')' ';'
   47        | • IDENTIFIER '(' ')' ';'
   48        | • IDENTIFIER '(' STRING ')' ';'
   49        | • KW_BREAK ';'
   50        | • KW_CONTINUE ';'
   51        | • KW_RETURN ';'
   52        | • KW_RETURN expr ';'
   53        | • KW_IF '(' expr ')' ':' command_list KW_ENDIF ';'
   53        | KW_IF '(' expr ')' ':' • command_list KW_ENDIF ';'
   54        | • KW_IF '(' expr ')' ':' command_list KW_ELSE ':' command_list KW_ENDIF ';'
   54        | KW_IF '(' expr ')' ':' • command_list KW_ELSE ':' command_list KW_ENDIF ';'
   55        | • KW_WHILE '(' expr ')' ':' command_list KW_ENDWHILE ';'
   56        | • KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ':' expr ']' ':' command_list KW_ENDFOR ';'
   57        | • KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ']' ':' command_list KW_ENDFOR ';'
   58        | • var_decl
   59        | • const_decl

    IDENTIFIER   shift, and go to state 167
    KW_IF        shift, and go to state 168
    KW_CONST     shift, and go to state 3
    KW_FOR       shift, and go to state 170
    KW_WHILE     shift, and go to state 171
    KW_BREAK     shift, and go to state 172
    KW_CONTINUE  shift, and go to state 173
    KW_RETURN    shift, and go to state 174

    var_decl               go to state 216
    var_decl_list          go to state 7
    array_compact_integer  go to state 8
    const_decl             go to state 176
    decl_list_item_id      go to state 13
    command_list           go to state 305
    command                go to state 181


State 290

   38 decl: KW_CONST var_decl ':' type_spec ';' •

    $default  reduce using rule 38 (decl)


State 291

   56 command: KW_FOR IDENTIFIER KW_IN '[' expr • ':' expr ':' expr ']' ':' command_list KW_ENDFOR ';'
   57        | KW_FOR IDENTIFIER KW_IN '[' expr • ':' expr ']' ':' command_list KW_ENDFOR ';'
   70 expr: expr • '+' expr
   71     | expr • '-' expr
   72     | expr • '*' expr
   73     | expr • '/' expr
   74     | expr • '%' expr
   75     | expr • ASSIGN_PLUSEQ expr
   76     | expr • ASSIGN_MINUSEQ expr
   77     | expr • ASSIGN_MULEQ expr
   78     | expr • ASSIGN_DIVEQ expr
   79     | expr • ASSIGN_MODEQ expr
   80     | expr • POW expr
   82     | expr • OP_AND expr
   83     | expr • OP_OR expr
   84     | expr • NE expr
   85     | expr • EQUALS expr
   86     | expr • '<' expr
   87     | expr • LE expr
   88     | expr • '>' expr
   89     | expr • GE expr

    POW             shift, and go to state 100
    EQUALS          shift, and go to state 101
    NE              shift, and go to state 102
    LE              shift, and go to state 103
    GE              shift, and go to state 104
    OP_AND          shift, and go to state 105
    OP_OR           shift, and go to state 106
    ASSIGN_PLUSEQ   shift, and go to state 107
    ASSIGN_MINUSEQ  shift, and go to state 108
    ASSIGN_MULEQ    shift, and go to state 109
    ASSIGN_DIVEQ    shift, and go to state 110
    ASSIGN_MODEQ    shift, and go to state 111
    '+'             shift, and go to state 112
    '-'             shift, and go to state 113
    '*'             shift, and go to state 114
    '/'             shift, and go to state 115
    '%'             shift, and go to state 116
    '<'             shift, and go to state 117
    '>'             shift, and go to state 118
    ':'             shift, and go to state 306


State 292

   17 var_decl: • var_decl_list ':' type_spec ';'
   18         | • array_compact_integer
   19 var_decl_list: • var_decl_list ',' decl_list_item_id
   20              | • decl_list_item_id
   21 array_compact_integer: • IDENTIFIER SIMPLE_ARRAY '[' expr KW_FOR expr ':' INTEGER ']' ':' type_spec ';'
   24 const_decl: • KW_CONST const_decl_list_item ':' type_spec ';'
   40 decl_list_item_id: • IDENTIFIER
   41                  | • IDENTIFIER '[' INTEGER ']'
   42                  | • IDENTIFIER '[' ']'
   43 command_list: • command_list command
   44             | • command
   45 command: • IDENTIFIER '=' expr ';'
   46        | • IDENTIFIER '(' func_call ')' ';'
   47        | • IDENTIFIER '(' ')' ';'
   48        | • IDENTIFIER '(' STRING ')' ';'
   49        | • KW_BREAK ';'
   50        | • KW_CONTINUE ';'
   51        | • KW_RETURN ';'
   52        | • KW_RETURN expr ';'
   53        | • KW_IF '(' expr ')' ':' command_list KW_ENDIF ';'
   54        | • KW_IF '(' expr ')' ':' command_list KW_ELSE ':' command_list KW_ENDIF ';'
   55        | • KW_WHILE '(' expr ')' ':' command_list KW_ENDWHILE ';'
   55        | KW_WHILE '(' expr ')' ':' • command_list KW_ENDWHILE ';'
   56        | • KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ':' expr ']' ':' command_list KW_ENDFOR ';'
   57        | • KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ']' ':' command_list KW_ENDFOR ';'
   58        | • var_decl
   59        | • const_decl

    IDENTIFIER   shift, and go to state 167
    KW_IF        shift, and go to state 168
    KW_CONST     shift, and go to state 3
    KW_FOR       shift, and go to state 170
    KW_WHILE     shift, and go to state 171
    KW_BREAK     shift, and go to state 172
    KW_CONTINUE  shift, and go to state 173
    KW_RETURN    shift, and go to state 174

    var_decl               go to state 216
    var_decl_list          go to state 7
    array_compact_integer  go to state 8
    const_decl             go to state 176
    decl_list_item_id      go to state 13
    command_list           go to state 307
    command                go to state 181


State 293

    5 program: start_var_decl_list start_const_decl_list KW_DEF KW_MAIN '(' ')' ':' body KW_ENDDEF ';' •

    $default  reduce using rule 5 (program)


State 294

    9 program: start_var_decl_list start_const_decl_list func_decl_list KW_DEF KW_MAIN '(' ')' ':' body KW_ENDDEF • ';'

    ';'  shift, and go to state 308


State 295

    6 program: start_var_decl_list func_decl_list KW_DEF KW_MAIN '(' ')' ':' body KW_ENDDEF ';' •

    $default  reduce using rule 6 (program)


State 296

   10 program: start_var_decl_list func_decl_list start_const_decl_list KW_DEF KW_MAIN '(' ')' ':' body KW_ENDDEF • ';'

    ';'  shift, and go to state 309


State 297

    8 program: start_const_decl_list start_var_decl_list KW_DEF KW_MAIN '(' ')' ':' body KW_ENDDEF ';' •

    $default  reduce using rule 8 (program)


State 298

   11 program: start_const_decl_list start_var_decl_list func_decl_list KW_DEF KW_MAIN '(' ')' ':' body KW_ENDDEF • ';'

    ';'  shift, and go to state 310


State 299

    7 program: start_const_decl_list func_decl_list KW_DEF KW_MAIN '(' ')' ':' body KW_ENDDEF ';' •

    $default  reduce using rule 7 (program)


State 300

   12 program: start_const_decl_list func_decl_list start_var_decl_list KW_DEF KW_MAIN '(' ')' ':' body KW_ENDDEF • ';'

    ';'  shift, and go to state 311


State 301

   14 program: func_decl_list start_var_decl_list start_const_decl_list KW_DEF KW_MAIN '(' ')' ':' body KW_ENDDEF • ';'

    ';'  shift, and go to state 312


State 302

   13 program: func_decl_list start_const_decl_list start_var_decl_list KW_DEF KW_MAIN '(' ')' ':' body KW_ENDDEF • ';'

    ';'  shift, and go to state 313


State 303

   21 array_compact_integer: IDENTIFIER SIMPLE_ARRAY '[' expr KW_FOR expr ':' INTEGER ']' ':' type_spec • ';'

    ';'  shift, and go to state 314


State 304

   29 func_decl: KW_DEF IDENTIFIER '(' func_var_decl_list ')' RETURN_ID type_spec ':' body KW_ENDDEF ';' •

    $default  reduce using rule 29 (func_decl)


State 305

   17 var_decl: • var_decl_list ':' type_spec ';'
   18         | • array_compact_integer
   19 var_decl_list: • var_decl_list ',' decl_list_item_id
   20              | • decl_list_item_id
   21 array_compact_integer: • IDENTIFIER SIMPLE_ARRAY '[' expr KW_FOR expr ':' INTEGER ']' ':' type_spec ';'
   24 const_decl: • KW_CONST const_decl_list_item ':' type_spec ';'
   40 decl_list_item_id: • IDENTIFIER
   41                  | • IDENTIFIER '[' INTEGER ']'
   42                  | • IDENTIFIER '[' ']'
   43 command_list: command_list • command
   45 command: • IDENTIFIER '=' expr ';'
   46        | • IDENTIFIER '(' func_call ')' ';'
   47        | • IDENTIFIER '(' ')' ';'
   48        | • IDENTIFIER '(' STRING ')' ';'
   49        | • KW_BREAK ';'
   50        | • KW_CONTINUE ';'
   51        | • KW_RETURN ';'
   52        | • KW_RETURN expr ';'
   53        | • KW_IF '(' expr ')' ':' command_list KW_ENDIF ';'
   53        | KW_IF '(' expr ')' ':' command_list • KW_ENDIF ';'
   54        | • KW_IF '(' expr ')' ':' command_list KW_ELSE ':' command_list KW_ENDIF ';'
   54        | KW_IF '(' expr ')' ':' command_list • KW_ELSE ':' command_list KW_ENDIF ';'
   55        | • KW_WHILE '(' expr ')' ':' command_list KW_ENDWHILE ';'
   56        | • KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ':' expr ']' ':' command_list KW_ENDFOR ';'
   57        | • KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ']' ':' command_list KW_ENDFOR ';'
   58        | • var_decl
   59        | • const_decl

    IDENTIFIER   shift, and go to state 167
    KW_IF        shift, and go to state 168
    KW_ELSE      shift, and go to state 315
    KW_ENDIF     shift, and go to state 316
    KW_CONST     shift, and go to state 3
    KW_FOR       shift, and go to state 170
    KW_WHILE     shift, and go to state 171
    KW_BREAK     shift, and go to state 172
    KW_CONTINUE  shift, and go to state 173
    KW_RETURN    shift, and go to state 174

    var_decl               go to state 216
    var_decl_list          go to state 7
    array_compact_integer  go to state 8
    const_decl             go to state 176
    decl_list_item_id      go to state 13
    command                go to state 217


State 306

   56 command: KW_FOR IDENTIFIER KW_IN '[' expr ':' • expr ':' expr ']' ':' command_list KW_ENDFOR ';'
   57        | KW_FOR IDENTIFIER KW_IN '[' expr ':' • expr ']' ':' command_list KW_ENDFOR ';'
   60 expr: • INTEGER
   61     | • SCALAR
   62     | • KW_TRUE
   63     | • KW_FALSE
   64     | • IDENTIFIER
   65     | • IDENTIFIER '[' expr ']'
   66     | • IDENTIFIER '(' func_call ')'
   67     | • IDENTIFIER '(' ')'
   68     | • '-' expr
   69     | • '(' expr ')'
   70     | • expr '+' expr
   71     | • expr '-' expr
   72     | • expr '*' expr
   73     | • expr '/' expr
   74     | • expr '%' expr
   75     | • expr ASSIGN_PLUSEQ expr
   76     | • expr ASSIGN_MINUSEQ expr
   77     | • expr ASSIGN_MULEQ expr
   78     | • expr ASSIGN_DIVEQ expr
   79     | • expr ASSIGN_MODEQ expr
   80     | • expr POW expr
   81     | • OP_NOT expr
   82     | • expr OP_AND expr
   83     | • expr OP_OR expr
   84     | • expr NE expr
   85     | • expr EQUALS expr
   86     | • expr '<' expr
   87     | • expr LE expr
   88     | • expr '>' expr
   89     | • expr GE expr

    IDENTIFIER  shift, and go to state 62
    INTEGER     shift, and go to state 63
    SCALAR      shift, and go to state 64
    KW_TRUE     shift, and go to state 65
    KW_FALSE    shift, and go to state 66
    OP_NOT      shift, and go to state 67
    '-'         shift, and go to state 68
    '('         shift, and go to state 69

    expr  go to state 317


State 307

   17 var_decl: • var_decl_list ':' type_spec ';'
   18         | • array_compact_integer
   19 var_decl_list: • var_decl_list ',' decl_list_item_id
   20              | • decl_list_item_id
   21 array_compact_integer: • IDENTIFIER SIMPLE_ARRAY '[' expr KW_FOR expr ':' INTEGER ']' ':' type_spec ';'
   24 const_decl: • KW_CONST const_decl_list_item ':' type_spec ';'
   40 decl_list_item_id: • IDENTIFIER
   41                  | • IDENTIFIER '[' INTEGER ']'
   42                  | • IDENTIFIER '[' ']'
   43 command_list: command_list • command
   45 command: • IDENTIFIER '=' expr ';'
   46        | • IDENTIFIER '(' func_call ')' ';'
   47        | • IDENTIFIER '(' ')' ';'
   48        | • IDENTIFIER '(' STRING ')' ';'
   49        | • KW_BREAK ';'
   50        | • KW_CONTINUE ';'
   51        | • KW_RETURN ';'
   52        | • KW_RETURN expr ';'
   53        | • KW_IF '(' expr ')' ':' command_list KW_ENDIF ';'
   54        | • KW_IF '(' expr ')' ':' command_list KW_ELSE ':' command_list KW_ENDIF ';'
   55        | • KW_WHILE '(' expr ')' ':' command_list KW_ENDWHILE ';'
   55        | KW_WHILE '(' expr ')' ':' command_list • KW_ENDWHILE ';'
   56        | • KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ':' expr ']' ':' command_list KW_ENDFOR ';'
   57        | • KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ']' ':' command_list KW_ENDFOR ';'
   58        | • var_decl
   59        | • const_decl

    IDENTIFIER   shift, and go to state 167
    KW_IF        shift, and go to state 168
    KW_CONST     shift, and go to state 3
    KW_FOR       shift, and go to state 170
    KW_WHILE     shift, and go to state 171
    KW_ENDWHILE  shift, and go to state 318
    KW_BREAK     shift, and go to state 172
    KW_CONTINUE  shift, and go to state 173
    KW_RETURN    shift, and go to state 174

    var_decl               go to state 216
    var_decl_list          go to state 7
    array_compact_integer  go to state 8
    const_decl             go to state 176
    decl_list_item_id      go to state 13
    command                go to state 217


State 308

    9 program: start_var_decl_list start_const_decl_list func_decl_list KW_DEF KW_MAIN '(' ')' ':' body KW_ENDDEF ';' •

    $default  reduce using rule 9 (program)


State 309

   10 program: start_var_decl_list func_decl_list start_const_decl_list KW_DEF KW_MAIN '(' ')' ':' body KW_ENDDEF ';' •

    $default  reduce using rule 10 (program)


State 310

   11 program: start_const_decl_list start_var_decl_list func_decl_list KW_DEF KW_MAIN '(' ')' ':' body KW_ENDDEF ';' •

    $default  reduce using rule 11 (program)


State 311

   12 program: start_const_decl_list func_decl_list start_var_decl_list KW_DEF KW_MAIN '(' ')' ':' body KW_ENDDEF ';' •

    $default  reduce using rule 12 (program)


State 312

   14 program: func_decl_list start_var_decl_list start_const_decl_list KW_DEF KW_MAIN '(' ')' ':' body KW_ENDDEF ';' •

    $default  reduce using rule 14 (program)


State 313

   13 program: func_decl_list start_const_decl_list start_var_decl_list KW_DEF KW_MAIN '(' ')' ':' body KW_ENDDEF ';' •

    $default  reduce using rule 13 (program)


State 314

   21 array_compact_integer: IDENTIFIER SIMPLE_ARRAY '[' expr KW_FOR expr ':' INTEGER ']' ':' type_spec ';' •

    $default  reduce using rule 21 (array_compact_integer)


State 315

   54 command: KW_IF '(' expr ')' ':' command_list KW_ELSE • ':' command_list KW_ENDIF ';'

    ':'  shift, and go to state 319


State 316

   53 command: KW_IF '(' expr ')' ':' command_list KW_ENDIF • ';'

    ';'  shift, and go to state 320


State 317

   56 command: KW_FOR IDENTIFIER KW_IN '[' expr ':' expr • ':' expr ']' ':' command_list KW_ENDFOR ';'
   57        | KW_FOR IDENTIFIER KW_IN '[' expr ':' expr • ']' ':' command_list KW_ENDFOR ';'
   70 expr: expr • '+' expr
   71     | expr • '-' expr
   72     | expr • '*' expr
   73     | expr • '/' expr
   74     | expr • '%' expr
   75     | expr • ASSIGN_PLUSEQ expr
   76     | expr • ASSIGN_MINUSEQ expr
   77     | expr • ASSIGN_MULEQ expr
   78     | expr • ASSIGN_DIVEQ expr
   79     | expr • ASSIGN_MODEQ expr
   80     | expr • POW expr
   82     | expr • OP_AND expr
   83     | expr • OP_OR expr
   84     | expr • NE expr
   85     | expr • EQUALS expr
   86     | expr • '<' expr
   87     | expr • LE expr
   88     | expr • '>' expr
   89     | expr • GE expr

    POW             shift, and go to state 100
    EQUALS          shift, and go to state 101
    NE              shift, and go to state 102
    LE              shift, and go to state 103
    GE              shift, and go to state 104
    OP_AND          shift, and go to state 105
    OP_OR           shift, and go to state 106
    ASSIGN_PLUSEQ   shift, and go to state 107
    ASSIGN_MINUSEQ  shift, and go to state 108
    ASSIGN_MULEQ    shift, and go to state 109
    ASSIGN_DIVEQ    shift, and go to state 110
    ASSIGN_MODEQ    shift, and go to state 111
    '+'             shift, and go to state 112
    '-'             shift, and go to state 113
    '*'             shift, and go to state 114
    '/'             shift, and go to state 115
    '%'             shift, and go to state 116
    '<'             shift, and go to state 117
    '>'             shift, and go to state 118
    ':'             shift, and go to state 321
    ']'             shift, and go to state 322


State 318

   55 command: KW_WHILE '(' expr ')' ':' command_list KW_ENDWHILE • ';'

    ';'  shift, and go to state 323


State 319

   17 var_decl: • var_decl_list ':' type_spec ';'
   18         | • array_compact_integer
   19 var_decl_list: • var_decl_list ',' decl_list_item_id
   20              | • decl_list_item_id
   21 array_compact_integer: • IDENTIFIER SIMPLE_ARRAY '[' expr KW_FOR expr ':' INTEGER ']' ':' type_spec ';'
   24 const_decl: • KW_CONST const_decl_list_item ':' type_spec ';'
   40 decl_list_item_id: • IDENTIFIER
   41                  | • IDENTIFIER '[' INTEGER ']'
   42                  | • IDENTIFIER '[' ']'
   43 command_list: • command_list command
   44             | • command
   45 command: • IDENTIFIER '=' expr ';'
   46        | • IDENTIFIER '(' func_call ')' ';'
   47        | • IDENTIFIER '(' ')' ';'
   48        | • IDENTIFIER '(' STRING ')' ';'
   49        | • KW_BREAK ';'
   50        | • KW_CONTINUE ';'
   51        | • KW_RETURN ';'
   52        | • KW_RETURN expr ';'
   53        | • KW_IF '(' expr ')' ':' command_list KW_ENDIF ';'
   54        | • KW_IF '(' expr ')' ':' command_list KW_ELSE ':' command_list KW_ENDIF ';'
   54        | KW_IF '(' expr ')' ':' command_list KW_ELSE ':' • command_list KW_ENDIF ';'
   55        | • KW_WHILE '(' expr ')' ':' command_list KW_ENDWHILE ';'
   56        | • KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ':' expr ']' ':' command_list KW_ENDFOR ';'
   57        | • KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ']' ':' command_list KW_ENDFOR ';'
   58        | • var_decl
   59        | • const_decl

    IDENTIFIER   shift, and go to state 167
    KW_IF        shift, and go to state 168
    KW_CONST     shift, and go to state 3
    KW_FOR       shift, and go to state 170
    KW_WHILE     shift, and go to state 171
    KW_BREAK     shift, and go to state 172
    KW_CONTINUE  shift, and go to state 173
    KW_RETURN    shift, and go to state 174

    var_decl               go to state 216
    var_decl_list          go to state 7
    array_compact_integer  go to state 8
    const_decl             go to state 176
    decl_list_item_id      go to state 13
    command_list           go to state 324
    command                go to state 181


State 320

   53 command: KW_IF '(' expr ')' ':' command_list KW_ENDIF ';' •

    $default  reduce using rule 53 (command)


State 321

   56 command: KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ':' • expr ']' ':' command_list KW_ENDFOR ';'
   60 expr: • INTEGER
   61     | • SCALAR
   62     | • KW_TRUE
   63     | • KW_FALSE
   64     | • IDENTIFIER
   65     | • IDENTIFIER '[' expr ']'
   66     | • IDENTIFIER '(' func_call ')'
   67     | • IDENTIFIER '(' ')'
   68     | • '-' expr
   69     | • '(' expr ')'
   70     | • expr '+' expr
   71     | • expr '-' expr
   72     | • expr '*' expr
   73     | • expr '/' expr
   74     | • expr '%' expr
   75     | • expr ASSIGN_PLUSEQ expr
   76     | • expr ASSIGN_MINUSEQ expr
   77     | • expr ASSIGN_MULEQ expr
   78     | • expr ASSIGN_DIVEQ expr
   79     | • expr ASSIGN_MODEQ expr
   80     | • expr POW expr
   81     | • OP_NOT expr
   82     | • expr OP_AND expr
   83     | • expr OP_OR expr
   84     | • expr NE expr
   85     | • expr EQUALS expr
   86     | • expr '<' expr
   87     | • expr LE expr
   88     | • expr '>' expr
   89     | • expr GE expr

    IDENTIFIER  shift, and go to state 62
    INTEGER     shift, and go to state 63
    SCALAR      shift, and go to state 64
    KW_TRUE     shift, and go to state 65
    KW_FALSE    shift, and go to state 66
    OP_NOT      shift, and go to state 67
    '-'         shift, and go to state 68
    '('         shift, and go to state 69

    expr  go to state 325


State 322

   57 command: KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ']' • ':' command_list KW_ENDFOR ';'

    ':'  shift, and go to state 326


State 323

   55 command: KW_WHILE '(' expr ')' ':' command_list KW_ENDWHILE ';' •

    $default  reduce using rule 55 (command)


State 324

   17 var_decl: • var_decl_list ':' type_spec ';'
   18         | • array_compact_integer
   19 var_decl_list: • var_decl_list ',' decl_list_item_id
   20              | • decl_list_item_id
   21 array_compact_integer: • IDENTIFIER SIMPLE_ARRAY '[' expr KW_FOR expr ':' INTEGER ']' ':' type_spec ';'
   24 const_decl: • KW_CONST const_decl_list_item ':' type_spec ';'
   40 decl_list_item_id: • IDENTIFIER
   41                  | • IDENTIFIER '[' INTEGER ']'
   42                  | • IDENTIFIER '[' ']'
   43 command_list: command_list • command
   45 command: • IDENTIFIER '=' expr ';'
   46        | • IDENTIFIER '(' func_call ')' ';'
   47        | • IDENTIFIER '(' ')' ';'
   48        | • IDENTIFIER '(' STRING ')' ';'
   49        | • KW_BREAK ';'
   50        | • KW_CONTINUE ';'
   51        | • KW_RETURN ';'
   52        | • KW_RETURN expr ';'
   53        | • KW_IF '(' expr ')' ':' command_list KW_ENDIF ';'
   54        | • KW_IF '(' expr ')' ':' command_list KW_ELSE ':' command_list KW_ENDIF ';'
   54        | KW_IF '(' expr ')' ':' command_list KW_ELSE ':' command_list • KW_ENDIF ';'
   55        | • KW_WHILE '(' expr ')' ':' command_list KW_ENDWHILE ';'
   56        | • KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ':' expr ']' ':' command_list KW_ENDFOR ';'
   57        | • KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ']' ':' command_list KW_ENDFOR ';'
   58        | • var_decl
   59        | • const_decl

    IDENTIFIER   shift, and go to state 167
    KW_IF        shift, and go to state 168
    KW_ENDIF     shift, and go to state 327
    KW_CONST     shift, and go to state 3
    KW_FOR       shift, and go to state 170
    KW_WHILE     shift, and go to state 171
    KW_BREAK     shift, and go to state 172
    KW_CONTINUE  shift, and go to state 173
    KW_RETURN    shift, and go to state 174

    var_decl               go to state 216
    var_decl_list          go to state 7
    array_compact_integer  go to state 8
    const_decl             go to state 176
    decl_list_item_id      go to state 13
    command                go to state 217


State 325

   56 command: KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ':' expr • ']' ':' command_list KW_ENDFOR ';'
   70 expr: expr • '+' expr
   71     | expr • '-' expr
   72     | expr • '*' expr
   73     | expr • '/' expr
   74     | expr • '%' expr
   75     | expr • ASSIGN_PLUSEQ expr
   76     | expr • ASSIGN_MINUSEQ expr
   77     | expr • ASSIGN_MULEQ expr
   78     | expr • ASSIGN_DIVEQ expr
   79     | expr • ASSIGN_MODEQ expr
   80     | expr • POW expr
   82     | expr • OP_AND expr
   83     | expr • OP_OR expr
   84     | expr • NE expr
   85     | expr • EQUALS expr
   86     | expr • '<' expr
   87     | expr • LE expr
   88     | expr • '>' expr
   89     | expr • GE expr

    POW             shift, and go to state 100
    EQUALS          shift, and go to state 101
    NE              shift, and go to state 102
    LE              shift, and go to state 103
    GE              shift, and go to state 104
    OP_AND          shift, and go to state 105
    OP_OR           shift, and go to state 106
    ASSIGN_PLUSEQ   shift, and go to state 107
    ASSIGN_MINUSEQ  shift, and go to state 108
    ASSIGN_MULEQ    shift, and go to state 109
    ASSIGN_DIVEQ    shift, and go to state 110
    ASSIGN_MODEQ    shift, and go to state 111
    '+'             shift, and go to state 112
    '-'             shift, and go to state 113
    '*'             shift, and go to state 114
    '/'             shift, and go to state 115
    '%'             shift, and go to state 116
    '<'             shift, and go to state 117
    '>'             shift, and go to state 118
    ']'             shift, and go to state 328


State 326

   17 var_decl: • var_decl_list ':' type_spec ';'
   18         | • array_compact_integer
   19 var_decl_list: • var_decl_list ',' decl_list_item_id
   20              | • decl_list_item_id
   21 array_compact_integer: • IDENTIFIER SIMPLE_ARRAY '[' expr KW_FOR expr ':' INTEGER ']' ':' type_spec ';'
   24 const_decl: • KW_CONST const_decl_list_item ':' type_spec ';'
   40 decl_list_item_id: • IDENTIFIER
   41                  | • IDENTIFIER '[' INTEGER ']'
   42                  | • IDENTIFIER '[' ']'
   43 command_list: • command_list command
   44             | • command
   45 command: • IDENTIFIER '=' expr ';'
   46        | • IDENTIFIER '(' func_call ')' ';'
   47        | • IDENTIFIER '(' ')' ';'
   48        | • IDENTIFIER '(' STRING ')' ';'
   49        | • KW_BREAK ';'
   50        | • KW_CONTINUE ';'
   51        | • KW_RETURN ';'
   52        | • KW_RETURN expr ';'
   53        | • KW_IF '(' expr ')' ':' command_list KW_ENDIF ';'
   54        | • KW_IF '(' expr ')' ':' command_list KW_ELSE ':' command_list KW_ENDIF ';'
   55        | • KW_WHILE '(' expr ')' ':' command_list KW_ENDWHILE ';'
   56        | • KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ':' expr ']' ':' command_list KW_ENDFOR ';'
   57        | • KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ']' ':' command_list KW_ENDFOR ';'
   57        | KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ']' ':' • command_list KW_ENDFOR ';'
   58        | • var_decl
   59        | • const_decl

    IDENTIFIER   shift, and go to state 167
    KW_IF        shift, and go to state 168
    KW_CONST     shift, and go to state 3
    KW_FOR       shift, and go to state 170
    KW_WHILE     shift, and go to state 171
    KW_BREAK     shift, and go to state 172
    KW_CONTINUE  shift, and go to state 173
    KW_RETURN    shift, and go to state 174

    var_decl               go to state 216
    var_decl_list          go to state 7
    array_compact_integer  go to state 8
    const_decl             go to state 176
    decl_list_item_id      go to state 13
    command_list           go to state 329
    command                go to state 181


State 327

   54 command: KW_IF '(' expr ')' ':' command_list KW_ELSE ':' command_list KW_ENDIF • ';'

    ';'  shift, and go to state 330


State 328

   56 command: KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ':' expr ']' • ':' command_list KW_ENDFOR ';'

    ':'  shift, and go to state 331


State 329

   17 var_decl: • var_decl_list ':' type_spec ';'
   18         | • array_compact_integer
   19 var_decl_list: • var_decl_list ',' decl_list_item_id
   20              | • decl_list_item_id
   21 array_compact_integer: • IDENTIFIER SIMPLE_ARRAY '[' expr KW_FOR expr ':' INTEGER ']' ':' type_spec ';'
   24 const_decl: • KW_CONST const_decl_list_item ':' type_spec ';'
   40 decl_list_item_id: • IDENTIFIER
   41                  | • IDENTIFIER '[' INTEGER ']'
   42                  | • IDENTIFIER '[' ']'
   43 command_list: command_list • command
   45 command: • IDENTIFIER '=' expr ';'
   46        | • IDENTIFIER '(' func_call ')' ';'
   47        | • IDENTIFIER '(' ')' ';'
   48        | • IDENTIFIER '(' STRING ')' ';'
   49        | • KW_BREAK ';'
   50        | • KW_CONTINUE ';'
   51        | • KW_RETURN ';'
   52        | • KW_RETURN expr ';'
   53        | • KW_IF '(' expr ')' ':' command_list KW_ENDIF ';'
   54        | • KW_IF '(' expr ')' ':' command_list KW_ELSE ':' command_list KW_ENDIF ';'
   55        | • KW_WHILE '(' expr ')' ':' command_list KW_ENDWHILE ';'
   56        | • KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ':' expr ']' ':' command_list KW_ENDFOR ';'
   57        | • KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ']' ':' command_list KW_ENDFOR ';'
   57        | KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ']' ':' command_list • KW_ENDFOR ';'
   58        | • var_decl
   59        | • const_decl

    IDENTIFIER   shift, and go to state 167
    KW_IF        shift, and go to state 168
    KW_CONST     shift, and go to state 3
    KW_FOR       shift, and go to state 170
    KW_ENDFOR    shift, and go to state 332
    KW_WHILE     shift, and go to state 171
    KW_BREAK     shift, and go to state 172
    KW_CONTINUE  shift, and go to state 173
    KW_RETURN    shift, and go to state 174

    var_decl               go to state 216
    var_decl_list          go to state 7
    array_compact_integer  go to state 8
    const_decl             go to state 176
    decl_list_item_id      go to state 13
    command                go to state 217


State 330

   54 command: KW_IF '(' expr ')' ':' command_list KW_ELSE ':' command_list KW_ENDIF ';' •

    $default  reduce using rule 54 (command)


State 331

   17 var_decl: • var_decl_list ':' type_spec ';'
   18         | • array_compact_integer
   19 var_decl_list: • var_decl_list ',' decl_list_item_id
   20              | • decl_list_item_id
   21 array_compact_integer: • IDENTIFIER SIMPLE_ARRAY '[' expr KW_FOR expr ':' INTEGER ']' ':' type_spec ';'
   24 const_decl: • KW_CONST const_decl_list_item ':' type_spec ';'
   40 decl_list_item_id: • IDENTIFIER
   41                  | • IDENTIFIER '[' INTEGER ']'
   42                  | • IDENTIFIER '[' ']'
   43 command_list: • command_list command
   44             | • command
   45 command: • IDENTIFIER '=' expr ';'
   46        | • IDENTIFIER '(' func_call ')' ';'
   47        | • IDENTIFIER '(' ')' ';'
   48        | • IDENTIFIER '(' STRING ')' ';'
   49        | • KW_BREAK ';'
   50        | • KW_CONTINUE ';'
   51        | • KW_RETURN ';'
   52        | • KW_RETURN expr ';'
   53        | • KW_IF '(' expr ')' ':' command_list KW_ENDIF ';'
   54        | • KW_IF '(' expr ')' ':' command_list KW_ELSE ':' command_list KW_ENDIF ';'
   55        | • KW_WHILE '(' expr ')' ':' command_list KW_ENDWHILE ';'
   56        | • KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ':' expr ']' ':' command_list KW_ENDFOR ';'
   56        | KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ':' expr ']' ':' • command_list KW_ENDFOR ';'
   57        | • KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ']' ':' command_list KW_ENDFOR ';'
   58        | • var_decl
   59        | • const_decl

    IDENTIFIER   shift, and go to state 167
    KW_IF        shift, and go to state 168
    KW_CONST     shift, and go to state 3
    KW_FOR       shift, and go to state 170
    KW_WHILE     shift, and go to state 171
    KW_BREAK     shift, and go to state 172
    KW_CONTINUE  shift, and go to state 173
    KW_RETURN    shift, and go to state 174

    var_decl               go to state 216
    var_decl_list          go to state 7
    array_compact_integer  go to state 8
    const_decl             go to state 176
    decl_list_item_id      go to state 13
    command_list           go to state 333
    command                go to state 181


State 332

   57 command: KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ']' ':' command_list KW_ENDFOR • ';'

    ';'  shift, and go to state 334


State 333

   17 var_decl: • var_decl_list ':' type_spec ';'
   18         | • array_compact_integer
   19 var_decl_list: • var_decl_list ',' decl_list_item_id
   20              | • decl_list_item_id
   21 array_compact_integer: • IDENTIFIER SIMPLE_ARRAY '[' expr KW_FOR expr ':' INTEGER ']' ':' type_spec ';'
   24 const_decl: • KW_CONST const_decl_list_item ':' type_spec ';'
   40 decl_list_item_id: • IDENTIFIER
   41                  | • IDENTIFIER '[' INTEGER ']'
   42                  | • IDENTIFIER '[' ']'
   43 command_list: command_list • command
   45 command: • IDENTIFIER '=' expr ';'
   46        | • IDENTIFIER '(' func_call ')' ';'
   47        | • IDENTIFIER '(' ')' ';'
   48        | • IDENTIFIER '(' STRING ')' ';'
   49        | • KW_BREAK ';'
   50        | • KW_CONTINUE ';'
   51        | • KW_RETURN ';'
   52        | • KW_RETURN expr ';'
   53        | • KW_IF '(' expr ')' ':' command_list KW_ENDIF ';'
   54        | • KW_IF '(' expr ')' ':' command_list KW_ELSE ':' command_list KW_ENDIF ';'
   55        | • KW_WHILE '(' expr ')' ':' command_list KW_ENDWHILE ';'
   56        | • KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ':' expr ']' ':' command_list KW_ENDFOR ';'
   56        | KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ':' expr ']' ':' command_list • KW_ENDFOR ';'
   57        | • KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ']' ':' command_list KW_ENDFOR ';'
   58        | • var_decl
   59        | • const_decl

    IDENTIFIER   shift, and go to state 167
    KW_IF        shift, and go to state 168
    KW_CONST     shift, and go to state 3
    KW_FOR       shift, and go to state 170
    KW_ENDFOR    shift, and go to state 335
    KW_WHILE     shift, and go to state 171
    KW_BREAK     shift, and go to state 172
    KW_CONTINUE  shift, and go to state 173
    KW_RETURN    shift, and go to state 174

    var_decl               go to state 216
    var_decl_list          go to state 7
    array_compact_integer  go to state 8
    const_decl             go to state 176
    decl_list_item_id      go to state 13
    command                go to state 217


State 334

   57 command: KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ']' ':' command_list KW_ENDFOR ';' •

    $default  reduce using rule 57 (command)


State 335

   56 command: KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ':' expr ']' ':' command_list KW_ENDFOR • ';'

    ';'  shift, and go to state 336


State 336

   56 command: KW_FOR IDENTIFIER KW_IN '[' expr ':' expr ':' expr ']' ':' command_list KW_ENDFOR ';' •

    $default  reduce using rule 56 (command)
